@{
    ViewData["Title"] = "OPC UA Telemetry";
}

<div class="row">
    <div class="col-md-10">
        <br />
        <br />
        <h2>@ViewData["Title"]</h2>
        <br />
        <br />
    </div>
</div>

<input type="button" value="Start" onclick="location.href='@Url.Action("StartProcessor", "Home")'" />
<input type="button" value="Stop" onclick="location.href='@Url.Action("StopProcessor", "Home")'" />

<div class="container">
    <br />
    <br />
    <ul id="message"></ul>
    <br />
    <br />
</div>

<div id="alert">
</div>

<div class="container centered">
    <div style="float: left;" id="graph" class="graphContainer">
        <br />
        @*<canvas id="device"></canvas>*@
        <canvas id="device" width="10" height="10"></canvas>
        <br />
    </div>

    <div style="float: left;" id="label">
        <br />
        <br />
        <ul id="text"/>
    </div>
</div>

@section scripts {
    <script src="~/signalr/hubs"></script>
    <script src='~/Scripts/Chart.min.js'></script>
    <script>
        var telemetry = $.connection.telemetryHub;
        
        $(function () {
            // Create a function that the hub can call back to display messages
            telemetry.client.addNewAlertToPage = function (alert) {
                if (alert.toString() == "") {
                    $("#alert").replaceWith("<div id='alert'></div>");
                }
                else {
                    $("#alert").replaceWith("<div id='alert' class='alert alert-danger' role='alert'>" + alert.toString() + "</div>");
                }
            }
        });

        var myLineChart = null;
        var indexGlobal = 0;
        $("#device").html("");

        $(function () {
            // Create a function that the hub can call back to display messages
            telemetry.client.addNewMessageToPage = function (m_devices) {
                // Clear result div
                $("#message").html("");

                // Crate table html tag
                var table = $("<table class=table id=OPC_UA ></table>").appendTo("#message");

                // Create table header row
                var rowHeader = $("<tr></tr>").appendTo(table);
                $("<th></th>").appendTo(rowHeader);
                $("<th></th>").appendTo(rowHeader);
                $("<th></th>").text(" Id ").appendTo(rowHeader);
                $("<th></th>").text(" Device ").appendTo(rowHeader);
                $("<th></th").text(" Value ").appendTo(rowHeader);
                $("<th></th>").text(" Timestamp ").appendTo(rowHeader);

                // populate the table
                $.each(m_devices, function (index, data) {
                    //Create new row for each record
                    var row = $("<tr></tr>").appendTo(table);
                    if (Number(data[data.length - 1].Value.Value)) {
                        $("<td>" + "<button class=graphbtn + >graph</button>" + "</td>").appendTo(row);
                    }
                    else {
                    $("<td></td>").appendTo(row);
                    }
                    $("<td>" + "<button class=delbtn + >delete</button>" + "</td>").appendTo(row);
                    $("<td></td>").text(data[data.length - 1].MonitoredItem.Id).appendTo(row);
                    var img = loadLogo(data[data.length - 1].HostName);
                    if (img == null) {
                        img = loadLogo(data[data.length - 1].MonitoredItem.Uri);
                    }
                    if (img != null) {
                        $("<td>" + data[data.length - 1].HostName + img + "</td>").appendTo(row);
                    }
                    else {
                        $("<td></td>").text(data[data.length - 1].HostName).appendTo(row);
                    }
                    if (Number(data[data.length - 1].Value.Value)) {
                        var theNumber = Number(data[data.length - 1].Value.Value);
                        $("<td></td>").text(theNumber.toFixed(2).toString()).appendTo(row);
                    }
                    else {
                    $("<td></td>").text(data[data.length - 1].Value.Value).appendTo(row);
                    }
                    $("<td></td>").text(data[data.length - 1].Value.ServerTimestamp).appendTo(row);
                });

                // update the graph with new data
                if (myLineChart != null) {
                    for (var i = 0; i < 10; i++) {
                        myLineChart.scale.xLabels[i] = m_devices[indexGlobal][i].Value.ServerTimestamp;
                        myLineChart.datasets[0].points[i].value = m_devices[indexGlobal][i].Value.Value;
                    }
                    myLineChart.update();

                    $("#text").text(m_devices[indexGlobal][0].MonitoredItem.Id);
                }

                $('button.delbtn').click(function () {
                    var row = $(this).closest('tr');
                    row.css("background-color", "#FF3700");
                    row.fadeOut(400, function () {
                        row.remove();
                    });

                    var rowIndex = $(this).closest('tr')[0].rowIndex;
                    var url = '@Url.Action("Delete", "Home", new {value = "replaceToken"}, null)';
                    location.href = url.replace("replaceToken", rowIndex.toString());
                });

                $('button.graphbtn').click(function () {
                    if (myLineChart != null) {
                        myLineChart.destroy();
                    }

                    var rowIndex = $(this).closest('tr')[0].rowIndex;
                    indexGlobal = rowIndex - 1;
                    drawGraph(rowIndex);
                });

                function drawGraph(rowIndex) {
                    var index = rowIndex - 1;
                    var deviceData = {
                        labels: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"],
                        datasets: [
                            {
                                fillColor: "rgba(172,194,132,0.4)",
                                strokeColor: "#ACC26D",
                                pointColor: "#fff",
                                pointStrokeColor: "#9DB86D",
                                data: [m_devices[index][0].Value.Value, m_devices[index][1].Value.Value, m_devices[index][2].Value.Value, m_devices[index][3].Value.Value, m_devices[index][4].Value.Value,
                                      m_devices[index][5].Value.Value, m_devices[index][6].Value.Value, m_devices[index][7].Value.Value, m_devices[index][8].Value.Value, m_devices[index][9].Value.Value]
                            }
                        ]
                    }
                    var device = document.getElementById('device').getContext('2d');
                    device.canvas.width = 600;
                    device.canvas.height = 400;

                    Chart.defaults.global.responsive = true;
                    Chart.defaults.global.animation = false;
                    Chart.defaults.global.scaleBeginAtZero = false;

                    myLineChart = new Chart(device).Line(deviceData);
                }

                function updateGraph(index) {
                    for (var i = 0; i < 10; i++) {
                        myLineChart.datasets[0].data[i] = m_devices[index - 1][i].Value.Value;
                    }
                    myLineChart.update();
                }
            }

            // Start/update the connection
            $.connection.hub.start().done(function () { });
        });

        function loadLogo(data) {
            var img = null;
            var manufacturers = ["Linux"];
            if (data != null) {
                for (var i = 0; i < manufacturers.length; i++) {
                    if (data.indexOf(manufacturers[i]) != -1) {
                        data = manufacturers[i];
                        break;
                    }
                }
                switch (data) {
                    case "Sample":
                        img = "<img id='theImg' width='150' height='auto' src='../content/windows.png'/>";
                        break;
                    case "Linux":
                        img = "<img id='theImg' width='150' height='auto' src='../content/linux.png'/>";
                        break;
                }
            }
            return img;
        }
    </script>
}



