/* ========================================================================
 * Copyright (c) 2005-2011 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

import "oaidl.idl";
import "ocidl.idl";

//==============================================================================
// Category ID declaration (defined as an interface to ensure they show up in the typelib).

[uuid(58E13251-AC87-11d1-84D5-00608CB8A7E9)] interface OPCEventServerCATID : IUnknown {}

cpp_quote("#define CATID_OPCAEServer10 IID_OPCEventServerCATID")

//==============================================================================
// Structures, Typedefs and Enumerations.

typedef DWORD OPCHANDLE;

typedef enum 
{ 
	OPCAE_BROWSE_UP = 1,
	OPCAE_BROWSE_DOWN, 
	OPCAE_BROWSE_TO
} 
OPCAEBROWSEDIRECTION;

typedef enum 
{ 
	OPC_AREA = 1,
	OPC_SOURCE
} 
OPCAEBROWSETYPE;

typedef enum 
{ 
	OPCAE_STATUS_RUNNING = 1,
	OPCAE_STATUS_FAILED,
	OPCAE_STATUS_NOCONFIG,
	OPCAE_STATUS_SUSPENDED,
	OPCAE_STATUS_TEST,
	OPCAE_STATUS_COMM_FAULT
} 
OPCEVENTSERVERSTATE;

typedef  struct 
{
				                WORD			wChangeMask;
				                WORD			wNewState;
	[string]	                LPWSTR 			szSource;
				                FILETIME		ftTime;
	[string]	                LPWSTR			szMessage;
				                DWORD			dwEventType;
				                DWORD			dwEventCategory;
				                DWORD			dwSeverity; 
	[string]	                LPWSTR			szConditionName;
	[string]	                LPWSTR			szSubconditionName;
				                WORD			wQuality;
				                WORD			wReserved;		
				                BOOL 			bAckRequired;
				                FILETIME		ftActiveTime;
				                DWORD			dwCookie;
				                DWORD			dwNumEventAttrs;
	[size_is(dwNumEventAttrs)]	VARIANT*		pEventAttributes;
	[string]	                LPWSTR			szActorID;
} 
ONEVENTSTRUCT;

typedef struct 
{
	         FILETIME 			 ftStartTime;
	         FILETIME 			 ftCurrentTime;
	         FILETIME 			 ftLastUpdateTime;
	         OPCEVENTSERVERSTATE dwServerState;
	         WORD				 wMajorVersion;
	         WORD				 wMinorVersion;
	         WORD				 wBuildNumber;
	         WORD				 wReserved;		
	[string] LPWSTR              szVendorInfo;
} 
OPCEVENTSERVERSTATUS;

typedef struct 
{
	                            WORD	 wState;
	                            WORD	 wReserved1;		
	                            LPWSTR 	 szActiveSubCondition;
	                            LPWSTR	 szASCDefinition;
	                            DWORD	 dwASCSeverity;
	                            LPWSTR	 szASCDescription;
	                            WORD	 wQuality;
	                            WORD	 wReserved2;		
	                            FILETIME ftLastAckTime;
	                            FILETIME ftSubCondLastActive;
	                            FILETIME ftCondLastActive;
	                            FILETIME ftCondLastInactive;
	                            LPWSTR	 szAcknowledgerID;
	                            LPWSTR   szComment;
	                            DWORD    dwNumSCs;
	[size_is (dwNumSCs)]        LPWSTR * pszSCNames;
	[size_is (dwNumSCs)]        LPWSTR * pszSCDefinitions;
	[size_is (dwNumSCs)]        DWORD  * pdwSCSeverities;
	[size_is (dwNumSCs)]        LPWSTR * pszSCDescriptions;
	                            DWORD	 dwNumEventAttrs;
	[size_is(dwNumEventAttrs)]	VARIANT* pEventAttributes;
	[size_is(dwNumEventAttrs)]	HRESULT* pErrors;
} 
OPCCONDITIONSTATE;

//==============================================================================
// IOPCEventServer

[
	uuid(65168851-5783-11D1-84A0-00608CB8A7E9),
	pointer_default(unique)
]
interface IOPCEventServer : IUnknown
{
	HRESULT GetStatus(
		[out] OPCEVENTSERVERSTATUS **ppEventServerStatus
	);

	HRESULT CreateEventSubscription(
		[in]                BOOL       bActive,
		[in]                DWORD      dwBufferTime, 
		[in]                DWORD      dwMaxSize,
		[in]                OPCHANDLE  hClientSubscription,
		[in]                REFIID     riid,
		[out, iid_is(riid)] LPUNKNOWN* ppUnk,
		[out]               DWORD*     pdwRevisedBufferTime,
		[out]               DWORD*     pdwRevisedMaxSize
	);

	HRESULT QueryAvailableFilters(
		[out] DWORD* pdwFilterMask
	);

	HRESULT QueryEventCategories(
		[in]                       DWORD    dwEventType,	
		[out]                      DWORD*   pdwCount, 
		[out, size_is(,*pdwCount)] DWORD**  ppdwEventCategories,
		[out, size_is(,*pdwCount)] LPWSTR** ppszEventCategoryDescs
	);

	HRESULT QueryConditionNames(
		[in]                       DWORD    dwEventCategory, 
		[out]                      DWORD*   pdwCount, 
		[out, size_is(,*pdwCount)] LPWSTR** ppszConditionNames
	);

	HRESULT QuerySubConditionNames(
		[in]                       LPWSTR   szConditionName, 
		[out]                      DWORD*   pdwCount, 
		[out, size_is(,*pdwCount)] LPWSTR** ppszSubConditionNames
	);

	HRESULT QuerySourceConditions(
		[in]                       LPWSTR   szSource, 
		[out]                      DWORD*   pdwCount, 
		[out, size_is(,*pdwCount)] LPWSTR** ppszConditionNames
	);

	HRESULT QueryEventAttributes(
		[in]                       DWORD     dwEventCategory, 
		[out]                      DWORD*    pdwCount, 
		[out, size_is(,*pdwCount)] DWORD**   ppdwAttrIDs,
		[out, size_is(,*pdwCount)] LPWSTR**  ppszAttrDescs,
		[out, size_is(,*pdwCount)] VARTYPE** ppvtAttrTypes
	);

	HRESULT TranslateToItemIDs(
		[in]                     LPWSTR   szSource,
		[in]                     DWORD    dwEventCategory,
		[in]                     LPWSTR   szConditionName,
		[in]                     LPWSTR   szSubconditionName,
		[in]                     DWORD    dwCount, 
		[in, size_is(dwCount)]   DWORD*   pdwAssocAttrIDs, 
		[out, size_is(,dwCount)] LPWSTR** ppszAttrItemIDs,
		[out, size_is(,dwCount)] LPWSTR** ppszNodeNames,
		[out, size_is(,dwCount)] CLSID**  ppCLSIDs
	);

	HRESULT GetConditionState (
		[in]                           LPWSTR              szSource,
		[in]                           LPWSTR              szConditionName,
		[in]                           DWORD               dwNumEventAttrs,
		[in, size_is(dwNumEventAttrs)] DWORD*              pdwAttributeIDs,
		[out]                          OPCCONDITIONSTATE** ppConditionState
	);

	HRESULT EnableConditionByArea(
		[in]                      DWORD   dwNumAreas, 
		[in, size_is(dwNumAreas)] LPWSTR* pszAreas
	);


	HRESULT EnableConditionBySource(
		[in]                        DWORD   dwNumSources, 
		[in, size_is(dwNumSources)] LPWSTR* pszSources
	);

	HRESULT DisableConditionByArea(
		[in]                      DWORD   dwNumAreas, 
		[in, size_is(dwNumAreas)] LPWSTR* pszAreas
	);

	HRESULT DisableConditionBySource(
		[in]                        DWORD   dwNumSources, 
		[in, size_is(dwNumSources)] LPWSTR* pszSources
	);

	HRESULT AckCondition(
		[in]                     DWORD     dwCount,
		[in, string]             LPWSTR    szAcknowledgerID,
		[in, string]             LPWSTR    szComment,
		[in, size_is(dwCount)]   LPWSTR*   pszSource,
		[in, size_is(dwCount)]   LPWSTR*   pszConditionName,
		[in, size_is(dwCount)]   FILETIME* pftActiveTime,
		[in, size_is(dwCount)]   DWORD*    pdwCookie,
		[out, size_is(,dwCount)] HRESULT** ppErrors 
	);

	HRESULT CreateAreaBrowser(
		[in]                REFIID     riid,
		[out, iid_is(riid)] LPUNKNOWN* ppUnk
	);
};

//==============================================================================
// IOPCEventSubscriptionMgt

[
	uuid(65168855-5783-11D1-84A0-00608CB8A7E9),
	pointer_default(unique)
]
interface IOPCEventSubscriptionMgt : IUnknown
{
	HRESULT SetFilter(	
		[in]                           DWORD   dwEventType, 
		[in]                           DWORD   dwNumCategories,		
		[in, size_is(dwNumCategories)] DWORD*  pdwEventCategories, 
		[in]                           DWORD   dwLowSeverity,
		[in]                           DWORD   dwHighSeverity,
		[in]                           DWORD   dwNumAreas,		
		[in, size_is(dwNumAreas)]      LPWSTR* pszAreaList,
		[in]                           DWORD   dwNumSources,
		[in, size_is(dwNumSources)]    LPWSTR* pszSourceList
	);

	HRESULT GetFilter(	
		[out]                              DWORD*   pdwEventType, 
		[out]                              DWORD*   pdwNumCategories,		
		[out, size_is(,*pdwNumCategories)] DWORD**  ppdwEventCategories, 
		[out]                              DWORD*   pdwLowSeverity,
		[out]                              DWORD*   pdwHighSeverity,
		[out]                              DWORD*   pdwNumAreas,		
		[out, size_is(,*pdwNumAreas)]      LPWSTR** ppszAreaList,
		[out]                              DWORD*   pdwNumSources,
		[out, size_is(,*pdwNumSources)]    LPWSTR** ppszSourceList
	);

	HRESULT SelectReturnedAttributes(	
		[in]                   DWORD  dwEventCategory,		
		[in]                   DWORD  dwCount,		
		[in, size_is(dwCount)] DWORD* dwAttributeIDs
	);

	HRESULT GetReturnedAttributes(	
		[in]                       DWORD   dwEventCategory,		
		[out]                      DWORD*  pdwCount,		
		[out, size_is(,*pdwCount)] DWORD** ppdwAttributeIDs
	);


	HRESULT Refresh(
		[in] DWORD dwConnection
	);

	HRESULT CancelRefresh(
		[in] DWORD dwConnection
	);

	HRESULT GetState(
		[out] BOOL*      pbActive, 
		[out] DWORD*     pdwBufferTime,  
		[out] DWORD*     pdwMaxSize,
		[out] OPCHANDLE* phClientSubscription
	);

	HRESULT SetState( 
		[unique, in] BOOL*     pbActive, 
		[unique, in] DWORD*    pdwBufferTime,
		[unique, in] DWORD*    pdwMaxSize,
		[in]         OPCHANDLE hClientSubscription,
		[out]        DWORD*    pdwRevisedBufferTime,
		[out]        DWORD*    pdwRevisedMaxSize
	);
};

//==============================================================================
// IOPCEventAreaBrowser

[
	uuid(65168857-5783-11D1-84A0-00608CB8A7E9),
	pointer_default(unique)
]
interface IOPCEventAreaBrowser : IUnknown
{
	HRESULT ChangeBrowsePosition(
		[in]         OPCAEBROWSEDIRECTION dwBrowseDirection,  
		[in, string] LPCWSTR              szString
	);

	HRESULT BrowseOPCAreas(
		[in]         OPCAEBROWSETYPE dwBrowseFilterType,
		[in, string] LPCWSTR         szFilterCriteria,  
		[out]        LPENUMSTRING*   ppIEnumString
	);  

	HRESULT GetQualifiedAreaName( 
		[in]          LPCWSTR szAreaName,
		[out, string] LPWSTR* pszQualifiedAreaName
	);

	HRESULT GetQualifiedSourceName( 
		[in]          LPCWSTR szSourceName,
		[out, string] LPWSTR* pszQualifiedSourceName
	);
};

//==============================================================================
// IOPCEventSink

[
	uuid(6516885F-5783-11D1-84A0-00608CB8A7E9),
	pointer_default(unique)
]
interface IOPCEventSink : IUnknown
{
	HRESULT OnEvent(
		[in]                   OPCHANDLE      hClientSubscription,
		[in]                   BOOL           bRefresh,
		[in]                   BOOL           bLastRefresh,
		[in]                   DWORD          dwCount,
		[in, size_is(dwCount)] ONEVENTSTRUCT* pEvents
	);
};

//==============================================================================
// IOPCEventServer2

[
	uuid(71BBE88E-9564-4bcd-BCFC-71C558D94F2D),
	pointer_default(unique)
]
interface IOPCEventServer2 : IOPCEventServer
{
	HRESULT EnableConditionByArea2(
		[in]                              DWORD     dwNumAreas, 
		[in, string, size_is(dwNumAreas)] LPWSTR*   pszAreas,
		[out, size_is(,dwNumAreas)]       HRESULT** ppErrors
	);

	HRESULT EnableConditionBySource2(
		[in]                                DWORD     dwNumSources, 
		[in, string, size_is(dwNumSources)] LPWSTR*   pszSources,
		[out, size_is(,dwNumSources)]       HRESULT** ppErrors
	);

	HRESULT DisableConditionByArea2(
		[in]                              DWORD     dwNumAreas, 
		[in, string, size_is(dwNumAreas)] LPWSTR*   pszAreas,
		[out, size_is(,dwNumAreas)]       HRESULT** ppErrors
	);

	HRESULT DisableConditionBySource2(
		[in]                                DWORD     dwNumSources, 
		[in, string, size_is(dwNumSources)] LPWSTR*   pszSources,
		[out, size_is(,dwNumSources)]       HRESULT** ppErrors
	);

	HRESULT GetEnableStateByArea(
		[in]                              DWORD     dwNumAreas, 
		[in, string, size_is(dwNumAreas)] LPWSTR*   pszAreas,
		[out, size_is(,dwNumAreas)]       BOOL**    pbEnabled,
		[out, size_is(,dwNumAreas)]       BOOL**    pbEffectivelyEnabled,
		[out, size_is(,dwNumAreas)]       HRESULT** ppErrors
	);

	HRESULT GetEnableStateBySource(
		[in]                                DWORD     dwNumSources, 
		[in, string, size_is(dwNumSources)] LPWSTR*   pszSources,
		[out, size_is(,dwNumSources)]       BOOL**    pbEnabled,
		[out, size_is(,dwNumSources)]       BOOL**    pbEffectivelyEnabled,
		[out, size_is(,dwNumSources)]       HRESULT** ppErrors
	);
};

//==============================================================================
// IOPCEventSubscriptionMgt2

[
	uuid(94C955DC-3684-4ccb-AFAB-F898CE19AAC3),
	pointer_default(unique)
]
interface IOPCEventSubscriptionMgt2 : IOPCEventSubscriptionMgt
{
	HRESULT SetKeepAlive( 
		[in]  DWORD  dwKeepAliveTime,
		[out] DWORD* pdwRevisedKeepAliveTime 
	);

	HRESULT GetKeepAlive( 
		[out] DWORD* pdwKeepAliveTime 
	);
};

//==============================================================================
// Type Library

[
	uuid(65168844-5783-11D1-84A0-00608CB8A7E9),
	version(1.10),
	helpstring("OPC Alarms & Events 1.10 Type Library")
]
library OPC_AE
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");
    
	//==========================================================================
    // Category IDs

    interface OPCEventServerCATID;

	//==========================================================================
    // Constants

	module OPCAE_Constants
	{
		// category description string.
		const LPCWSTR OPC_CATEGORY_DESCRIPTION_AE10 = L"OPC Alarm & Event Server Version 1.0";

		// state bit masks.
		const DWORD OPC_CONDITION_ENABLED	= 0x0001;
		const DWORD OPC_CONDITION_ACTIVE	= 0x0002;
		const DWORD OPC_CONDITION_ACKED		= 0x0004;

		// bit masks for change mask.
		const DWORD OPC_CHANGE_ACTIVE_STATE	= 0x0001;
		const DWORD OPC_CHANGE_ACK_STATE	= 0x0002;
		const DWORD OPC_CHANGE_ENABLE_STATE = 0x0004;
		const DWORD OPC_CHANGE_QUALITY		= 0x0008;
		const DWORD OPC_CHANGE_SEVERITY		= 0x0010;
		const DWORD OPC_CHANGE_SUBCONDITION = 0x0020;
		const DWORD OPC_CHANGE_MESSAGE		= 0x0040;
		const DWORD OPC_CHANGE_ATTRIBUTE	= 0x0080;

		// event type.
		const DWORD OPC_SIMPLE_EVENT		= 0x0001;
		const DWORD OPC_TRACKING_EVENT		= 0x0002;
		const DWORD OPC_CONDITION_EVENT		= 0x0004;
		const DWORD OPC_ALL_EVENTS	        = 0x0007;

		// bit masks for QueryAvailableFilters().
		const DWORD OPC_FILTER_BY_EVENT		= 0x0001;
		const DWORD OPC_FILTER_BY_CATEGORY	= 0x0002;
		const DWORD OPC_FILTER_BY_SEVERITY	= 0x0004;
		const DWORD OPC_FILTER_BY_AREA		= 0x0008;
		const DWORD OPC_FILTER_BY_SOURCE	= 0x0010;
	}
	
	//==========================================================================
    // Synchronous Interfaces

	interface IOPCEventServer;
	interface IOPCEventSubscriptionMgt;
	interface IOPCEventAreaBrowser;
	interface IOPCEventSink;
	interface OPCEventServerCATID;
	interface IOPCEventServer2;
	interface IOPCEventSubscriptionMgt2;
};
