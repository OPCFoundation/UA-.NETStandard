/* ========================================================================
 * Copyright (c) 2005-2011 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

import "oaidl.idl";
import "ocidl.idl";
import "objidl.idl";

//==============================================================================
// Category ID declarations (defined as interfaces to ensure they show up in the typelib).

[uuid(63D5F430-CFE4-11d1-B2C8-0060083BA1FB)] interface CATID_OPCDAServer10 : IUnknown {}
[uuid(63D5F432-CFE4-11d1-B2C8-0060083BA1FB)] interface CATID_OPCDAServer20 : IUnknown {}
[uuid(CC603642-66D7-48f1-B69A-B625E73652D7)] interface CATID_OPCDAServer30 : IUnknown {}
[uuid(3098EDA4-A006-48b2-A27F-247453959408)] interface CATID_XMLDAServer10 : IUnknown {}

cpp_quote("#define CATID_OPCDAServer10 IID_CATID_OPCDAServer10")
cpp_quote("#define CATID_OPCDAServer20 IID_CATID_OPCDAServer20")
cpp_quote("#define CATID_OPCDAServer30 IID_CATID_OPCDAServer30")
cpp_quote("#define CATID_XMLDAServer10 IID_CATID_XMLDAServer10")

//==============================================================================
// Structures, Typedefs and Enumerations.

typedef DWORD OPCHANDLE;

typedef enum tagOPCDATASOURCE 
{ 
    OPC_DS_CACHE  = 1, 
    OPC_DS_DEVICE 
} 
OPCDATASOURCE;

typedef enum tagOPCBROWSETYPE 
{ 
    OPC_BRANCH = 1, 
    OPC_LEAF, 
    OPC_FLAT
} 
OPCBROWSETYPE;

typedef enum tagOPCNAMESPACETYPE 
{ 
    OPC_NS_HIERARCHIAL = 1, 
    OPC_NS_FLAT
} 
OPCNAMESPACETYPE;

typedef enum tagOPCBROWSEDIRECTION 
{ 
    OPC_BROWSE_UP = 1, 
    OPC_BROWSE_DOWN, 
    OPC_BROWSE_TO
} 
OPCBROWSEDIRECTION;

typedef enum tagOPCEUTYPE 
{
    OPC_NOENUM = 0, 
    OPC_ANALOG, 
    OPC_ENUMERATED 
} 
OPCEUTYPE;

typedef enum tagOPCSERVERSTATE 
{ 
    OPC_STATUS_RUNNING = 1, 
    OPC_STATUS_FAILED, 
    OPC_STATUS_NOCONFIG, 
    OPC_STATUS_SUSPENDED, 
    OPC_STATUS_TEST,
    OPC_STATUS_COMM_FAULT
} 
OPCSERVERSTATE;

typedef enum tagOPCENUMSCOPE 
{ 
    OPC_ENUM_PRIVATE_CONNECTIONS = 1, 
    OPC_ENUM_PUBLIC_CONNECTIONS, 
    OPC_ENUM_ALL_CONNECTIONS, 
    OPC_ENUM_PRIVATE, 
    OPC_ENUM_PUBLIC, 
    OPC_ENUM_ALL 
} 
OPCENUMSCOPE;

typedef struct tagOPCGROUPHEADER 
{
    DWORD       dwSize;
    DWORD       dwItemCount;
    OPCHANDLE   hClientGroup;
    DWORD       dwTransactionID;
    HRESULT     hrStatus;
}
OPCGROUPHEADER;

typedef struct tagOPCITEMHEADER1 
{
    OPCHANDLE   hClient;
    DWORD       dwValueOffset;
    WORD        wQuality;
    WORD        wReserved;
    FILETIME    ftTimeStampItem;
} 
OPCITEMHEADER1;

typedef struct tagOPCITEMHEADER2 
{
    OPCHANDLE   hClient;
    DWORD       dwValueOffset;
    WORD        wQuality;
    WORD        wReserved;
} 
OPCITEMHEADER2;

typedef struct tagOPCGROUPHEADERWRITE 
{
    DWORD       dwItemCount;
    OPCHANDLE   hClientGroup;
    DWORD       dwTransactionID;
    HRESULT     hrStatus;
} 
OPCGROUPHEADERWRITE;

typedef struct tagOPCITEMHEADERWRITE 
{
    OPCHANDLE   hClient;
    HRESULT     dwError;
} 
OPCITEMHEADERWRITE;

typedef struct tagOPCITEMSTATE
{
    OPCHANDLE   hClient;
    FILETIME    ftTimeStamp;
    WORD        wQuality;
    WORD        wReserved;
    VARIANT     vDataValue;
} 
OPCITEMSTATE;

typedef struct tagOPCSERVERSTATUS 
{
           FILETIME       ftStartTime;
           FILETIME       ftCurrentTime;
           FILETIME       ftLastUpdateTime;
           OPCSERVERSTATE dwServerState;
           DWORD          dwGroupCount; 
           DWORD          dwBandWidth;
           WORD           wMajorVersion;
           WORD           wMinorVersion;
           WORD           wBuildNumber;
           WORD           wReserved;
  [string] LPWSTR         szVendorInfo;
}
OPCSERVERSTATUS;

typedef struct tagOPCITEMDEF 
{
  [string]              LPWSTR     szAccessPath;
  [string]              LPWSTR     szItemID;
                        BOOL       bActive ;
                        OPCHANDLE  hClient;
                        DWORD      dwBlobSize;
  [size_is(dwBlobSize)] BYTE*      pBlob;
                        VARTYPE    vtRequestedDataType;
                        WORD       wReserved;
}
OPCITEMDEF;

typedef struct tagOPCITEMATTRIBUTES
{
  [string]              LPWSTR     szAccessPath;
  [string]              LPWSTR     szItemID;
                        BOOL       bActive;
                        OPCHANDLE  hClient;
                        OPCHANDLE  hServer;
                        DWORD      dwAccessRights;
                        DWORD      dwBlobSize;
  [size_is(dwBlobSize)] BYTE*      pBlob;
                        VARTYPE    vtRequestedDataType;
                        VARTYPE    vtCanonicalDataType;
                        OPCEUTYPE  dwEUType;
                        VARIANT    vEUInfo;
} 
OPCITEMATTRIBUTES;

typedef struct tagOPCITEMRESULT 
{
                        OPCHANDLE  hServer;
                        VARTYPE    vtCanonicalDataType;
                        WORD       wReserved;
                        DWORD      dwAccessRights;
                        DWORD      dwBlobSize;
  [size_is(dwBlobSize)] BYTE*      pBlob;
}
OPCITEMRESULT;

typedef struct tagOPCITEMPROPERTY
{
		   VARTYPE	vtDataType;
           WORD     wReserved;
		   DWORD	dwPropertyID;   
  [string] LPWSTR	szItemID;
  [string] LPWSTR	szDescription;
  	       VARIANT	vValue;
  		   HRESULT	hrErrorID;
		   DWORD    dwReserved;
}
OPCITEMPROPERTY;

typedef struct tagOPCITEMPROPERTIES 
{
				             HRESULT          hrErrorID;
				             DWORD	          dwNumProperties;
  [size_is(dwNumProperties)] OPCITEMPROPERTY* pItemProperties;
							 DWORD            dwReserved;
} 
OPCITEMPROPERTIES;

typedef struct  tagOPCBROWSEELEMENT
{
  [string]	LPWSTR	          szName;
  [string]	LPWSTR	          szItemID;
            DWORD             dwFlagValue;
			DWORD             dwReserved;
            OPCITEMPROPERTIES ItemProperties;
}
OPCBROWSEELEMENT;

typedef struct tagOPCITEMVQT
{
    VARIANT	 vDataValue;
    BOOL	 bQualitySpecified;
    WORD	 wQuality;
    WORD     wReserved;
    BOOL	 bTimeStampSpecified;
    DWORD    dwReserved;
    FILETIME ftTimeStamp;
} 
OPCITEMVQT;

typedef enum tagOPCBROWSEFILTER 
{
	OPC_BROWSE_FILTER_ALL = 1,
	OPC_BROWSE_FILTER_BRANCHES,
	OPC_BROWSE_FILTER_ITEMS,
} 
OPCBROWSEFILTER;

//==============================================================================
// IOPCServer

[
    object,
    uuid(39c13a4d-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCServer : IUnknown
{
    HRESULT AddGroup(
        [in, string]        LPCWSTR    szName,
        [in]                BOOL       bActive,
        [in]                DWORD      dwRequestedUpdateRate,
        [in]                OPCHANDLE  hClientGroup,
        [unique, in]        LONG*      pTimeBias,
        [unique, in]        FLOAT*     pPercentDeadband,
        [in]                DWORD      dwLCID,
        [out]               OPCHANDLE* phServerGroup,
        [out]               DWORD*     pRevisedUpdateRate,
        [in]                REFIID     riid,
        [out, iid_is(riid)] LPUNKNOWN* ppUnk
    );

    HRESULT GetErrorString( 
        [in]          HRESULT dwError,
        [in]          LCID    dwLocale,
        [out, string] LPWSTR* ppString
    );

    HRESULT GetGroupByName(
        [in, string]        LPCWSTR    szName,
        [in]                REFIID     riid,
        [out, iid_is(riid)] LPUNKNOWN* ppUnk
    );

    HRESULT GetStatus( 
        [out] OPCSERVERSTATUS** ppServerStatus
    );

    HRESULT RemoveGroup(
        [in] OPCHANDLE hServerGroup,
        [in] BOOL      bForce
    );

    HRESULT CreateGroupEnumerator(
        [in]                OPCENUMSCOPE dwScope, 
        [in]                REFIID       riid, 
        [out, iid_is(riid)] LPUNKNOWN*   ppUnk
    );
}

//==============================================================================
// IOPCServerPublicGroups

[
    object,
    uuid(39c13a4e-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCServerPublicGroups : IUnknown
{
    HRESULT GetPublicGroupByName(
        [in, string]        LPCWSTR    szName,
        [in]                REFIID     riid,
        [out, iid_is(riid)] LPUNKNOWN* ppUnk
    );

    HRESULT RemovePublicGroup(
        [in] OPCHANDLE hServerGroup,
        [in] BOOL      bForce
    );
}

//==============================================================================
// IOPCBrowseServerAddressSpace

[
    object,
    uuid(39c13a4f-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCBrowseServerAddressSpace: IUnknown
{
    HRESULT QueryOrganization(
        [out] OPCNAMESPACETYPE* pNameSpaceType
    );

    HRESULT ChangeBrowsePosition(
        [in]         OPCBROWSEDIRECTION dwBrowseDirection,  
        [in, string] LPCWSTR            szString
    );

    HRESULT BrowseOPCItemIDs(
        [in]         OPCBROWSETYPE dwBrowseFilterType,
        [in, string] LPCWSTR       szFilterCriteria,  
        [in]         VARTYPE       vtDataTypeFilter,     
        [in]         DWORD         dwAccessRightsFilter,
        [out]        LPENUMSTRING* ppIEnumString
    );        

    HRESULT GetItemID(
        [in]          LPWSTR  szItemDataID,
        [out, string] LPWSTR* szItemID
    );

    HRESULT BrowseAccessPaths(
        [in, string] LPCWSTR       szItemID,  
        [out]        LPENUMSTRING* ppIEnumString
    );
}

//==============================================================================
// IOPCGroupStateMgt

[
    object,
    uuid(39c13a50-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCGroupStateMgt : IUnknown
{
    HRESULT GetState(
        [out]         DWORD*     pUpdateRate, 
        [out]         BOOL*      pActive, 
        [out, string] LPWSTR*    ppName,
        [out]         LONG*      pTimeBias,
        [out]         FLOAT*     pPercentDeadband,
        [out]         DWORD*     pLCID,
        [out]         OPCHANDLE* phClientGroup,
        [out]         OPCHANDLE* phServerGroup
    );

    HRESULT SetState( 
        [unique, in]  DWORD*     pRequestedUpdateRate, 
        [out]         DWORD*     pRevisedUpdateRate, 
        [unique, in]  BOOL*      pActive, 
        [unique, in]  LONG*      pTimeBias,
        [unique, in]  FLOAT*     pPercentDeadband,
        [unique, in]  DWORD*     pLCID,
        [unique, in]  OPCHANDLE* phClientGroup
    );

    HRESULT SetName( 
        [in, string] LPCWSTR szName
    );

    HRESULT CloneGroup(
        [in, string]        LPCWSTR    szName,
        [in]                REFIID     riid,
        [out, iid_is(riid)] LPUNKNOWN* ppUnk
    );
}

//==============================================================================
// IOPCPublicGroupStateMgt

[
    object,
    uuid(39c13a51-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCPublicGroupStateMgt : IUnknown
{
    HRESULT GetState(
        [out] BOOL* pPublic
    );

    HRESULT MoveToPublic(
        void
    );
}

//==============================================================================
// IOPCSyncIO

[
    object,
    uuid(39c13a52-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCSyncIO : IUnknown
{
    HRESULT Read(
        [in]                     OPCDATASOURCE  dwSource,
        [in]                     DWORD          dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE*     phServer, 
        [out, size_is(,dwCount)] OPCITEMSTATE** ppItemValues,
        [out, size_is(,dwCount)] HRESULT**      ppErrors
    );

    HRESULT Write(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer, 
        [in, size_is(dwCount)]   VARIANT*   pItemValues, 
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );
}

//==============================================================================
// IOPCAsyncIO

[
    object,
    uuid(39c13a53-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCAsyncIO : IUnknown
{
    HRESULT Read(
        [in]                     DWORD         dwConnection,
        [in]                     OPCDATASOURCE dwSource,
        [in]                     DWORD         dwCount,
        [in, size_is(dwCount)]   OPCHANDLE*    phServer,
        [out]                    DWORD*        pTransactionID,
        [out, size_is(,dwCount)] HRESULT**     ppErrors
    );

    HRESULT Write(
        [in]                     DWORD      dwConnection,
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   VARIANT*   pItemValues, 
        [out]                    DWORD*     pTransactionID,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT Refresh(
        [in]  DWORD         dwConnection,
        [in]  OPCDATASOURCE dwSource,
        [out] DWORD*        pTransactionID
    );

    HRESULT Cancel(
        [in] DWORD dwTransactionID
    );
}

//==============================================================================
// IOPCItemMgt

[
    object,
    uuid(39c13a54-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCItemMgt: IUnknown
{
    HRESULT AddItems( 
        [in]                     DWORD           dwCount,
        [in, size_is(dwCount)]   OPCITEMDEF*     pItemArray,
        [out, size_is(,dwCount)] OPCITEMRESULT** ppAddResults,
        [out, size_is(,dwCount)] HRESULT**       ppErrors
    );

    HRESULT ValidateItems( 
        [in]                     DWORD           dwCount,
        [in, size_is(dwCount)]   OPCITEMDEF*     pItemArray,
        [in]                     BOOL            bBlobUpdate,
        [out, size_is(,dwCount)] OPCITEMRESULT** ppValidationResults,
        [out, size_is(,dwCount)] HRESULT**       ppErrors
    );

    HRESULT RemoveItems( 
        [in]                        DWORD      dwCount,
        [in, size_is(dwCount)]      OPCHANDLE* phServer,
        [out, size_is(,dwCount)]    HRESULT**  ppErrors
    );

    HRESULT SetActiveState(
        [in]                     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in]                     BOOL       bActive, 
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT SetClientHandles(
        [in]                     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   OPCHANDLE* phClient,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT SetDatatypes(
        [in]                     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   VARTYPE*   pRequestedDatatypes,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT CreateEnumerator(
        [in]                REFIID     riid,
        [out, iid_is(riid)] LPUNKNOWN* ppUnk
    );
}

//==============================================================================
// IEnumOPCItemAttributes

[
    object,
    uuid(39c13a55-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IEnumOPCItemAttributes : IUnknown
{
    HRESULT Next( 
        [in]                           ULONG               celt,
        [out, size_is(,*pceltFetched)] OPCITEMATTRIBUTES** ppItemArray,
        [out]                          ULONG*              pceltFetched 
    );

    HRESULT Skip( 
        [in] ULONG celt
    );

    HRESULT Reset( 
        void
    );

    HRESULT Clone( 
        [out] IEnumOPCItemAttributes** ppEnumItemAttributes
    );
}

//==============================================================================
// IOPCDataCallback

[
    object,
    uuid(39c13a70-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCDataCallback : IUnknown
{
    HRESULT OnDataChange(
        [in]                   DWORD      dwTransid, 
        [in]                   OPCHANDLE  hGroup, 
        [in]                   HRESULT    hrMasterquality,
        [in]                   HRESULT    hrMastererror,
        [in]                   DWORD      dwCount, 
        [in, size_is(dwCount)] OPCHANDLE* phClientItems, 
        [in, size_is(dwCount)] VARIANT*   pvValues, 
        [in, size_is(dwCount)] WORD*      pwQualities,
        [in, size_is(dwCount)] FILETIME*  pftTimeStamps,
        [in, size_is(dwCount)] HRESULT*   pErrors
    );

    HRESULT OnReadComplete(
        [in]                   DWORD      dwTransid, 
        [in]                   OPCHANDLE  hGroup, 
        [in]                   HRESULT    hrMasterquality,
        [in]                   HRESULT    hrMastererror,
        [in]                   DWORD      dwCount, 
        [in, size_is(dwCount)] OPCHANDLE* phClientItems, 
        [in, size_is(dwCount)] VARIANT*   pvValues, 
        [in, size_is(dwCount)] WORD*      pwQualities,
        [in, size_is(dwCount)] FILETIME*  pftTimeStamps,
        [in, size_is(dwCount)] HRESULT*   pErrors
    );

    HRESULT OnWriteComplete(
        [in]                   DWORD      dwTransid, 
        [in]                   OPCHANDLE  hGroup, 
        [in]                   HRESULT    hrMastererr, 
        [in]                   DWORD      dwCount, 
        [in, size_is(dwCount)] OPCHANDLE* pClienthandles, 
        [in, size_is(dwCount)] HRESULT*   pErrors
    );

    HRESULT OnCancelComplete(
        [in] DWORD     dwTransid, 
        [in] OPCHANDLE hGroup
    );
}

//==============================================================================
// IOPCAsyncIO2

[
    object,
    uuid(39c13a71-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCAsyncIO2 : IUnknown
{
    HRESULT Read(
        [in]                     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in]                     DWORD      dwTransactionID,
        [out]                    DWORD*     pdwCancelID,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT Write(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   VARIANT*   pItemValues, 
        [in]                     DWORD      dwTransactionID,
        [out]                    DWORD*     pdwCancelID,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );


    HRESULT Refresh2(
        [in]  OPCDATASOURCE dwSource,
        [in]  DWORD         dwTransactionID,
        [out] DWORD*        pdwCancelID
    );

    HRESULT Cancel2(
        [in] DWORD dwCancelID
    );

    HRESULT SetEnable(
        [in] BOOL bEnable
    );

    HRESULT GetEnable(
        [out] BOOL* pbEnable
    );
}

//==============================================================================
// IOPCItemProperties

[
    object,
    uuid(39c13a72-011e-11d0-9675-0020afd8adb3),
    pointer_default(unique)
]
interface IOPCItemProperties : IUnknown
{
    HRESULT QueryAvailableProperties ( 
        [in]                       LPWSTR    szItemID,
        [out]                      DWORD*    pdwCount,
        [out, size_is(,*pdwCount)] DWORD**   ppPropertyIDs,
        [out, size_is(,*pdwCount)] LPWSTR**  ppDescriptions,
        [out, size_is(,*pdwCount)] VARTYPE** ppvtDataTypes
    );

    HRESULT GetItemProperties ( 
        [in]                     LPWSTR    szItemID,
        [in]                     DWORD     dwCount,
        [in, size_is(dwCount)]   DWORD*    pdwPropertyIDs,
        [out, size_is(,dwCount)] VARIANT** ppvData,
        [out, size_is(,dwCount)] HRESULT** ppErrors
    );

    HRESULT LookupItemIDs( 
        [in]                             LPWSTR    szItemID,
        [in]                             DWORD     dwCount,
        [in, size_is(dwCount)]           DWORD*    pdwPropertyIDs,
        [out, string, size_is(,dwCount)] LPWSTR**  ppszNewItemIDs,
        [out, size_is(,dwCount)]         HRESULT** ppErrors
    );
}

//==============================================================================
// IOPCItemDeadbandMgt

[
    object,
    uuid(5946DA93-8B39-4ec8-AB3D-AA73DF5BC86F),
    pointer_default(unique)
]
interface IOPCItemDeadbandMgt : IUnknown
{
    HRESULT SetItemDeadband( 
        [in] 				     DWORD      dwCount,
        [in, size_is(dwCount)] 	 OPCHANDLE* phServer,
        [in, size_is(dwCount)] 	 FLOAT*     pPercentDeadband,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT GetItemDeadband( 
        [in] 				     DWORD 	    dwCount,
        [in, size_is(dwCount)] 	 OPCHANDLE* phServer,
        [out, size_is(,dwCount)] FLOAT**    ppPercentDeadband,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT ClearItemDeadband(
        [in] 				     DWORD      dwCount,
        [in, size_is(dwCount)] 	 OPCHANDLE* phServer,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );
}

//==============================================================================
// IOPCItemSamplingMgt

[
    object,
    uuid(3E22D313-F08B-41a5-86C8-95E95CB49FFC),
    pointer_default(unique)
]
interface IOPCItemSamplingMgt : IUnknown
{
    HRESULT SetItemSamplingRate (
        [in] 				     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   DWORD*     pdwRequestedSamplingRate,
        [out, size_is(,dwCount)] DWORD**    ppdwRevisedSamplingRate,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT GetItemSamplingRate (
        [in] 				     DWORD      dwCount,
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [out, size_is(,dwCount)] DWORD**    ppdwSamplingRate,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT ClearItemSamplingRate(
        [in] 				     DWORD      dwCount,
        [in, size_is(dwCount)] 	 OPCHANDLE* phServer,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT SetItemBufferEnable(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer, 
        [in, size_is(dwCount)] 	 BOOL*      pbEnable,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT GetItemBufferEnable(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer, 
        [out, size_is(,dwCount)] BOOL**     ppbEnable,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );
}

//==============================================================================
// IOPCBrowse

[
    object,
    uuid(39227004-A18F-4b57-8B0A-5235670F4468),
    pointer_default(unique)
]
interface IOPCBrowse : IUnknown
{
    HRESULT GetProperties( 
        [in]                               DWORD		       dwItemCount,
        [in, string, size_is(dwItemCount)] LPWSTR*             pszItemIDs,
        [in]				               BOOL                bReturnPropertyValues,
        [in]				               DWORD               dwPropertyCount,
        [in, size_is(dwPropertyCount)]     DWORD*              pdwPropertyIDs,
        [out, size_is(,dwItemCount)]       OPCITEMPROPERTIES** ppItemProperties 
    );

    HRESULT Browse(
        [in, string]                   LPWSTR             szItemID,
        [in,out, string]               LPWSTR*            pszContinuationPoint,
        [in]                           DWORD              dwMaxElementsReturned,
		[in]                           OPCBROWSEFILTER    dwBrowseFilter,
        [in, string]                   LPWSTR             szElementNameFilter,
        [in, string]                   LPWSTR             szVendorFilter,
        [in]                           BOOL               bReturnAllProperties,
        [in]                           BOOL               bReturnPropertyValues,
        [in]                           DWORD              dwPropertyCount,
        [in, size_is(dwPropertyCount)] DWORD*             pdwPropertyIDs,
        [out]                          BOOL*              pbMoreElements,
        [out]                          DWORD*             pdwCount,
        [out, size_is(,*pdwCount)]     OPCBROWSEELEMENT** ppBrowseElements
    );
}

//==============================================================================
// IOPCItemIO

[
    object,
    uuid(85C0B427-2893-4cbc-BD78-E5FC5146F08F),
    pointer_default(unique)
]
interface IOPCItemIO: IUnknown
{
    HRESULT Read(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   LPCWSTR*   pszItemIDs,
        [in, size_is(dwCount)]   DWORD*     pdwMaxAge,
        [out, size_is(,dwCount)] VARIANT**  ppvValues,
        [out, size_is(,dwCount)] WORD**     ppwQualities,
        [out, size_is(,dwCount)] FILETIME** ppftTimeStamps,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT WriteVQT(
        [in]                     DWORD       dwCount, 
        [in, size_is(dwCount)]   LPCWSTR*    pszItemIDs,
        [in, size_is(dwCount)]   OPCITEMVQT* pItemVQT,
        [out, size_is(,dwCount)] HRESULT**   ppErrors
    );
}

//==============================================================================
// IOPCSyncIO2

[
    object,
    uuid(730F5F0F-55B1-4c81-9E18-FF8A0904E1FA),
    pointer_default(unique)
]
interface IOPCSyncIO2: IOPCSyncIO
{   
    HRESULT ReadMaxAge(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   DWORD*     pdwMaxAge,
        [out, size_is(,dwCount)] VARIANT**  ppvValues,
        [out, size_is(,dwCount)] WORD**     ppwQualities,
        [out, size_is(,dwCount)] FILETIME** ppftTimeStamps,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT WriteVQT (
        [in]  DWORD dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE*  phServer, 
        [in, size_is(dwCount)]   OPCITEMVQT* pItemVQT,
        [out, size_is(,dwCount)] HRESULT**   ppErrors
    );
}

//==============================================================================
// IOPCAsyncIO3

[
  object,
  uuid(0967B97B-36EF-423e-B6F8-6BFF1E40D39D),
  pointer_default(unique)
]
interface IOPCAsyncIO3: IOPCAsyncIO2
{
    HRESULT ReadMaxAge(
        [in]                     DWORD      dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE* phServer,
        [in, size_is(dwCount)]   DWORD*     pdwMaxAge,
        [in]                     DWORD      dwTransactionID,
        [out]                    DWORD*     pdwCancelID,
        [out, size_is(,dwCount)] HRESULT**  ppErrors
    );

    HRESULT WriteVQT(
        [in]                     DWORD       dwCount, 
        [in, size_is(dwCount)]   OPCHANDLE*  phServer,
        [in, size_is(dwCount)]   OPCITEMVQT* pItemVQT,
        [in]                     DWORD       dwTransactionID,
        [out]                    DWORD*      pdwCancelID,
        [out, size_is(,dwCount)] HRESULT**   ppErrors
    );

    HRESULT RefreshMaxAge(
        [in]  DWORD  dwMaxAge,
        [in]  DWORD  dwTransactionID,
        [out] DWORD* pdwCancelID
    );
}

//==============================================================================
// IOPCGroupStateMgt2

[
	uuid(8E368666-D72E-4f78-87ED-647611C61C9F),
	pointer_default(unique)
]
interface IOPCGroupStateMgt2 : IOPCGroupStateMgt
{
    HRESULT SetKeepAlive( 
        [in]  DWORD  dwKeepAliveTime,
        [out] DWORD* pdwRevisedKeepAliveTime 
    );

    HRESULT GetKeepAlive( 
        [out] DWORD* pdwKeepAliveTime 
    );
}

//==============================================================================
// Type Library

[
    uuid(3B540B51-0378-4551-ADCC-EA9B104302BF),
    version(3.00),
    helpstring("OPC Data Access 3.00 Type Library")
]
library OPCDA
{
    //==========================================================================
    // Category IDs

    interface CATID_OPCDAServer10;
    interface CATID_OPCDAServer20;
    interface CATID_OPCDAServer30;
    interface CATID_XMLDAServer10;

    //==========================================================================
    // Constants

	module OPCDA_Constants
	{
		// category description strings.
		const LPCWSTR OPC_CATEGORY_DESCRIPTION_DA10    = L"OPC Data Access Servers Version 1.0";
		const LPCWSTR OPC_CATEGORY_DESCRIPTION_DA20    = L"OPC Data Access Servers Version 2.0";
		const LPCWSTR OPC_CATEGORY_DESCRIPTION_DA30    = L"OPC Data Access Servers Version 3.0";
		const LPCWSTR OPC_CATEGORY_DESCRIPTION_XMLDA10 = L"OPC XML Data Access Servers Version 1.0";

		// values for access rights mask.
		const DWORD OPC_READABLE           = 0x01;
		const DWORD OPC_WRITEABLE          = 0x02;	

		// values for browse element flags.
		const DWORD OPC_BROWSE_HASCHILDREN = 0x01;
		const DWORD OPC_BROWSE_ISITEM      = 0x02;

		// well known complex type description systems.   
		const LPCWSTR OPC_TYPE_SYSTEM_OPCBINARY             = L"OPCBinary";
		const LPCWSTR OPC_TYPE_SYSTEM_XMLSCHEMA             = L"XMLSchema";

		// complex data consitency window values.
		const LPCWSTR OPC_CONSISTENCY_WINDOW_UNKNOWN        = L"Unknown";
		const LPCWSTR OPC_CONSISTENCY_WINDOW_NOT_CONSISTENT = L"Not Consistent";

		// complex data write behavoir values.
		const LPCWSTR OPC_WRITE_BEHAVIOR_BEST_EFFORT        = L"Best Effort";
		const LPCWSTR OPC_WRITE_BEHAVIOR_ALL_OR_NOTHING     = L"All or Nothing";
	}

	//==========================================================================
    // Qualities

	module OPCDA_Qualities
	{
		// Values for fields in the quality word
        const WORD OPC_QUALITY_MASK                     = 0xC0;
        const WORD OPC_STATUS_MASK                      = 0xFC;
		const WORD OPC_LIMIT_MASK                       = 0x03;

		// Values for QUALITY_MASK bit field
		const WORD OPC_QUALITY_BAD                      = 0x00;
		const WORD OPC_QUALITY_UNCERTAIN                = 0x40;
		const WORD OPC_QUALITY_GOOD                     = 0xC0;

		// STATUS_MASK Values for Quality = BAD
		const WORD OPC_QUALITY_CONFIG_ERROR    		    = 0x04;
		const WORD OPC_QUALITY_NOT_CONNECTED   		    = 0x08;
		const WORD OPC_QUALITY_DEVICE_FAILURE  		    = 0x0c;
		const WORD OPC_QUALITY_SENSOR_FAILURE  		    = 0x10;
		const WORD OPC_QUALITY_LAST_KNOWN      		    = 0x14;
		const WORD OPC_QUALITY_COMM_FAILURE    		    = 0x18;
		const WORD OPC_QUALITY_OUT_OF_SERVICE  		    = 0x1C;
		const WORD OPC_QUALITY_WAITING_FOR_INITIAL_DATA = 0x20;

		// STATUS_MASK Values for Quality = UNCERTAIN
		const WORD OPC_QUALITY_LAST_USABLE              = 0x44;
		const WORD OPC_QUALITY_SENSOR_CAL               = 0x50;
		const WORD OPC_QUALITY_EGU_EXCEEDED             = 0x54;
		const WORD OPC_QUALITY_SUB_NORMAL               = 0x58;

		// STATUS_MASK Values for Quality = GOOD
		const WORD OPC_QUALITY_LOCAL_OVERRIDE           = 0xD8;

		// Values for Limit Bitfield 
		const WORD OPC_LIMIT_OK                         = 0x00;
		const WORD OPC_LIMIT_LOW                        = 0x01;
		const WORD OPC_LIMIT_HIGH                       = 0x02;
		const WORD OPC_LIMIT_CONST                      = 0x03;
	}

	//==========================================================================
    // Properties

	module OPCDA_Properties
	{
		// property ids.
		const DWORD OPC_PROPERTY_DATATYPE            = 1;
		const DWORD OPC_PROPERTY_VALUE               = 2;
		const DWORD OPC_PROPERTY_QUALITY             = 3;
		const DWORD OPC_PROPERTY_TIMESTAMP           = 4;
		const DWORD OPC_PROPERTY_ACCESS_RIGHTS       = 5;
		const DWORD OPC_PROPERTY_SCAN_RATE           = 6;
		const DWORD OPC_PROPERTY_EU_TYPE             = 7;
		const DWORD OPC_PROPERTY_EU_INFO             = 8;
		const DWORD OPC_PROPERTY_EU_UNITS            = 100;
		const DWORD OPC_PROPERTY_DESCRIPTION         = 101;
		const DWORD OPC_PROPERTY_HIGH_EU             = 102;
		const DWORD OPC_PROPERTY_LOW_EU              = 103;
		const DWORD OPC_PROPERTY_HIGH_IR             = 104;
		const DWORD OPC_PROPERTY_LOW_IR              = 105;
		const DWORD OPC_PROPERTY_CLOSE_LABEL         = 106;
		const DWORD OPC_PROPERTY_OPEN_LABEL          = 107;
		const DWORD OPC_PROPERTY_TIMEZONE            = 108;
		const DWORD OPC_PROPERTY_CONDITION_STATUS    = 300;
		const DWORD OPC_PROPERTY_ALARM_QUICK_HELP    = 301;
		const DWORD OPC_PROPERTY_ALARM_AREA_LIST     = 302;
		const DWORD OPC_PROPERTY_PRIMARY_ALARM_AREA  = 303;
		const DWORD OPC_PROPERTY_CONDITION_LOGIC     = 304;
		const DWORD OPC_PROPERTY_LIMIT_EXCEEDED      = 305;
		const DWORD OPC_PROPERTY_DEADBAND            = 306;
		const DWORD OPC_PROPERTY_HIHI_LIMIT          = 307;
		const DWORD OPC_PROPERTY_HI_LIMIT            = 308;
		const DWORD OPC_PROPERTY_LO_LIMIT            = 309;
		const DWORD OPC_PROPERTY_LOLO_LIMIT          = 310;
		const DWORD OPC_PROPERTY_CHANGE_RATE_LIMIT   = 311;
		const DWORD OPC_PROPERTY_DEVIATION_LIMIT     = 312;
		const DWORD OPC_PROPERTY_SOUND_FILE          = 313;

		// complex data properties.
		const DWORD OPC_PROPERTY_TYPE_SYSTEM_ID      = 600;
		const DWORD OPC_PROPERTY_DICTIONARY_ID       = 601;
		const DWORD OPC_PROPERTY_TYPE_ID             = 602;
		const DWORD OPC_PROPERTY_DICTIONARY          = 603;
		const DWORD OPC_PROPERTY_TYPE_DESCRIPTION    = 604;
		const DWORD OPC_PROPERTY_CONSISTENCY_WINDOW  = 605;
		const DWORD OPC_PROPERTY_WRITE_BEHAVIOR      = 606;
		const DWORD OPC_PROPERTY_UNCONVERTED_ITEM_ID = 607;
		const DWORD OPC_PROPERTY_UNFILTERED_ITEM_ID  = 608;
		const DWORD OPC_PROPERTY_DATA_FILTER_VALUE   = 609;

		// property descriptions.
		const LPCWSTR OPC_PROPERTY_DESC_DATATYPE            = L"Item Canonical Data Type";
		const LPCWSTR OPC_PROPERTY_DESC_VALUE               = L"Item Value";
		const LPCWSTR OPC_PROPERTY_DESC_QUALITY             = L"Item Quality";
		const LPCWSTR OPC_PROPERTY_DESC_TIMESTAMP           = L"Item Timestamp";
		const LPCWSTR OPC_PROPERTY_DESC_ACCESS_RIGHTS       = L"Item Access Rights";
		const LPCWSTR OPC_PROPERTY_DESC_SCAN_RATE           = L"Server Scan Rate";
		const LPCWSTR OPC_PROPERTY_DESC_EU_TYPE             = L"Item EU Type";
		const LPCWSTR OPC_PROPERTY_DESC_EU_INFO             = L"Item EU Info";
		const LPCWSTR OPC_PROPERTY_DESC_EU_UNITS            = L"EU Units";
		const LPCWSTR OPC_PROPERTY_DESC_DESCRIPTION         = L"Item Description";
		const LPCWSTR OPC_PROPERTY_DESC_HIGH_EU             = L"High EU";
		const LPCWSTR OPC_PROPERTY_DESC_LOW_EU              = L"Low EU";
		const LPCWSTR OPC_PROPERTY_DESC_HIGH_IR             = L"High Instrument Range";
		const LPCWSTR OPC_PROPERTY_DESC_LOW_IR              = L"Low Instrument Range";
		const LPCWSTR OPC_PROPERTY_DESC_CLOSE_LABEL         = L"Contact Close Label";
		const LPCWSTR OPC_PROPERTY_DESC_OPEN_LABEL          = L"Contact Open Label";
		const LPCWSTR OPC_PROPERTY_DESC_TIMEZONE            = L"Item Timezone";
		const LPCWSTR OPC_PROPERTY_DESC_CONDITION_STATUS    = L"Condition Status";
		const LPCWSTR OPC_PROPERTY_DESC_ALARM_QUICK_HELP    = L"Alarm Quick Help";
		const LPCWSTR OPC_PROPERTY_DESC_ALARM_AREA_LIST     = L"Alarm Area List";
		const LPCWSTR OPC_PROPERTY_DESC_PRIMARY_ALARM_AREA  = L"Primary Alarm Area";
		const LPCWSTR OPC_PROPERTY_DESC_CONDITION_LOGIC     = L"Condition Logic";
		const LPCWSTR OPC_PROPERTY_DESC_LIMIT_EXCEEDED      = L"Limit Exceeded";
		const LPCWSTR OPC_PROPERTY_DESC_DEADBAND            = L"Deadband";
		const LPCWSTR OPC_PROPERTY_DESC_HIHI_LIMIT          = L"HiHi Limit";
		const LPCWSTR OPC_PROPERTY_DESC_HI_LIMIT            = L"Hi Limit";
		const LPCWSTR OPC_PROPERTY_DESC_LO_LIMIT            = L"Lo Limit";
		const LPCWSTR OPC_PROPERTY_DESC_LOLO_LIMIT          = L"LoLo Limit";
		const LPCWSTR OPC_PROPERTY_DESC_CHANGE_RATE_LIMIT   = L"Rate of Change Limit";
		const LPCWSTR OPC_PROPERTY_DESC_DEVIATION_LIMIT     = L"Deviation Limit";
		const LPCWSTR OPC_PROPERTY_DESC_SOUND_FILE          = L"Sound File";

		// complex data properties.
		const LPCWSTR OPC_PROPERTY_DESC_TYPE_SYSTEM_ID      = L"Type System ID";
		const LPCWSTR OPC_PROPERTY_DESC_DICTIONARY_ID       = L"Dictionary ID";
		const LPCWSTR OPC_PROPERTY_DESC_TYPE_ID             = L"Type ID";
		const LPCWSTR OPC_PROPERTY_DESC_DICTIONARY          = L"Dictionary";
		const LPCWSTR OPC_PROPERTY_DESC_TYPE_DESCRIPTION    = L"Type Description";
		const LPCWSTR OPC_PROPERTY_DESC_CONSISTENCY_WINDOW  = L"Consistency Window";
		const LPCWSTR OPC_PROPERTY_DESC_WRITE_BEHAVIOR      = L"Write Behavior";
		const LPCWSTR OPC_PROPERTY_DESC_UNCONVERTED_ITEM_ID = L"Unconverted Item ID";
		const LPCWSTR OPC_PROPERTY_DESC_UNFILTERED_ITEM_ID  = L"Unfiltered Item ID";
		const LPCWSTR OPC_PROPERTY_DESC_DATA_FILTER_VALUE   = L"Data Filter Value";
	}

    //==========================================================================
    // Synchronous Interfaces

    interface IOPCServer;
    interface IOPCServerPublicGroups;
    interface IOPCBrowseServerAddressSpace;
    interface IOPCGroupStateMgt;
    interface IOPCPublicGroupStateMgt;
    interface IOPCSyncIO;
    interface IOPCAsyncIO;
	interface IOPCDataCallback;
    interface IOPCItemMgt;
    interface IEnumOPCItemAttributes;
    interface IOPCAsyncIO2;
    interface IOPCItemProperties;
    interface IOPCItemDeadbandMgt;
    interface IOPCItemSamplingMgt;
    interface IOPCBrowse;
    interface IOPCItemIO;
    interface IOPCSyncIO2;
    interface IOPCAsyncIO3;
    interface IOPCGroupStateMgt2;
};
