name: Docker Reference Server CI

on:
  push:
    branches: [ master, release/*, docker* ]
    paths-ignore:
    - 'Docs/**'
    - 'Tests/**'
  pull_request:
    branches: [ master ]
    paths-ignore:
    - 'Docs/**'
    - 'Tests/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: refserver
  DOCKERSIGN: false
    
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    env:
      IS_NOT_PR: ${{ !github.head_ref && true }}
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set up .NET 6
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.x'
        
    - name: Set Version
      shell: pwsh
      run: ./.azurepipelines/set-version.ps1

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
    - name: Install cosign
      if: github.event_name != 'pull_request' && env.DOCKERSIGN == 'true'
      uses: sigstore/cosign-installer@main
      with:
        cosign-release: 'v1.13.1'

    # https://github.com/docker/build-push-action
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Tag Repo Info
      run: |
        echo IMAGE_REPOSITORY=${{ env.REGISTRY }}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | awk '{gsub(/-|\./, "")}1')/${{ env.IMAGE_NAME }} >> $GITHUB_ENV
        echo IMAGE_VERSION=$(echo ${{ env.NBGV_Version }}${{ env.NBGV_PrereleaseVersion }}) >> $GITHUB_ENV

    - name: Prepare Tag Branch info
      if: env.NBGV_PublicRelease == 'False'
      run: |
        echo IMAGE_TAG=-$(echo ${{ github.ref }} | tr '[:upper:]' '[:lower:]' |  awk '{sub(/([^\/]*\/){2}/,""); gsub(/\/|_/, "-")}1') >> $GITHUB_ENV

    - name: Prepare version and latest tag
      run: |
        echo TAG_BRANCH=$(echo ${{ env.IMAGE_REPOSITORY }}:${{ env.IMAGE_VERSION }}${{ env.IMAGE_TAG }}) >> $GITHUB_ENV
        echo TAG_LATEST=$(echo ${{ env.IMAGE_REPOSITORY }}:latest${{ env.IMAGE_TAG }}) >> $GITHUB_ENV

    - name: Prepare Release tags
      if: ${{ env.NBGV_PublicRelease == 'True' && env.NBGV_PrereleaseVersion == '' && env.IS_NOT_PR == 'true' }}
      run: | 
        echo TAG_RELEASE=,${{ env.IMAGE_REPOSITORY }}:${{ env.NBGV_MajorMinorVersion }},${{ env.IMAGE_REPOSITORY }}:${{ env.NBGV_SimpleVersion }},${{ env.IMAGE_REPOSITORY }}:release >> $GITHUB_ENV

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.IMAGE_REPOSITORY }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v3
      with:
        context: .
        build-args: |
          Version=${{ env.NBGV_Version }}
          SimpleVersion=${{ env.NBGV_SimpleVersion }}
          InformationalVersion=${{ env.NBGV_AssemblyInformationalVersion }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ env.TAG_BRANCH }},${{ env.TAG_LATEST }}${{ env.TAG_RELEASE }}
        platforms: linux/amd64,linux/arm64
        file: ./Applications/ConsoleReferenceServer/Dockerfile
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Sign the resulting Docker image digest except on PRs.
    # https://github.com/sigstore/cosign
    - name: Sign the published Docker image
      if: github.event_name != 'pull_request' && env.DOCKERSIGN == 'true'
      env:
        COSIGN_EXPERIMENTAL: "true"
      # This step uses the identity token to provision an ephemeral certificate
      # against the sigstore community Fulcio instance.
      run: |
        echo Signing ${{ env.IMAGE_REPOSITORY }}@${{ steps.build-and-push.outputs.digest }}
        echo "${{ env.IMAGE_REPOSITORY }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}

