<?xml version="1.0" encoding="utf-8" ?>
<opc:ModelDesign
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:opc="http://opcfoundation.org/UA/ModelDesign.xsd"
  xmlns:ua="http://opcfoundation.org/UA/"
  xmlns:uax="http://opcfoundation.org/UA/2008/02/Types.xsd"
	xmlns="http://somecompany.com/TutorialModel"
  TargetNamespace="http://somecompany.com/TutorialModel"
>
  <!-- 
  This element defines the mappings between the URIs used to identify namespaces and the symbols used in code.
  User defined design files can include other user defined design files.
  The location of included design files is specified with the FilePath attribute (absolute or relative path without the .xml suffix).
  -->
  <opc:Namespaces>
    <opc:Namespace Name="OpcUa" Prefix="Opc.Ua" XmlNamespace="http://opcfoundation.org/UA/2008/02/Types.xsd">http://opcfoundation.org/UA/</opc:Namespace>
    <opc:Namespace Name="Tutorial" Prefix="TutorialModel">http://somecompany.com/TutorialModel</opc:Namespace>
  </opc:Namespaces>

  <!-- Task #C1 - Create Types -->
  <!--DataTypes -->
  <opc:DataType SymbolicName="CalibrationDataType" BaseType="ua:Structure">
    <opc:Fields>
      <opc:Field Name="Offset" DataType="ua:Double" />
      <opc:Field Name="Period" DataType="ua:Double" />
    </opc:Fields>
  </opc:DataType>

  <!--ReferenceTypes -->
  <opc:ReferenceType SymbolicName="SignalTo" BaseType="ua:NonHierarchicalReferences">
    <opc:Description>A reference that indicates an electrical signal between two variables.</opc:Description>
    <opc:InverseName>SignalFrom</opc:InverseName>
  </opc:ReferenceType>

  <!--ObjectTypes -->
  <opc:ObjectType SymbolicName="GenericSensorType" BaseType="ua:BaseObjectType">
    <opc:Description>A generic sensor that read a process value.</opc:Description>
    <opc:Children>
      <opc:Variable SymbolicName="Output" DataType="ua:Double" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" />
    </opc:Children>
  </opc:ObjectType>

  <opc:ObjectType SymbolicName="GenericActuatorType" BaseType="ua:BaseObjectType">
    <opc:Description>Represents a piece of equipment that causes some action to occur.</opc:Description>
    <opc:Children>
      <opc:Variable SymbolicName="Input" DataType="ua:Double" ValueRank="Scalar" TypeDefinition="ua:AnalogItemType" AccessLevel="Write" />
    </opc:Children>
  </opc:ObjectType>
  
  <!--
  Declare the PipeType along with all of the references between the different components.
  Adding references between components requires that they be overriden. 
  Overridden nodes only need to delcare the correct NodeType and the SymbolicName; all other
  parameters are initialized from the original declaration. Any parameters that are explicitly
  specified replace the original declaration and are used even if the original declaration
  is changed.
  
  References are specified by constructing the SymbolicIds for the components by inserting a '_' between each SymbolicName.
  -->
  <opc:ObjectType SymbolicName="PipeType" BaseType="ua:BaseObjectType" SupportsEvents="true">
    <opc:Description>A pipe with a flow transmitter and valve attached.</opc:Description>

    <opc:Children>
      <opc:Object SymbolicName="FlowTransmitter" TypeDefinition="GenericSensorType" SupportsEvents="true">
        <opc:Children>
          <opc:Property SymbolicName="Output">
            <opc:References>
              <opc:Reference IsInverse="true">
                <opc:ReferenceType>SignalTo</opc:ReferenceType>
                <opc:TargetId>PipeType_Valve_Input</opc:TargetId>
              </opc:Reference>
            </opc:References>
          </opc:Property>
        </opc:Children>
      </opc:Object>
      <opc:Object SymbolicName="Valve" TypeDefinition="GenericActuatorType" SupportsEvents="true">
        <opc:Children>
          <opc:Property SymbolicName="Input"></opc:Property>
        </opc:Children>
      </opc:Object>
      <opc:Variable SymbolicName="Calibrartion" DataType="CalibrationDataType"></opc:Variable>
    </opc:Children>
    
  </opc:ObjectType>

  <!--
  Declare an instance of a Pipe.
  Normally instances are created by program logic instead of being part of the model.
  This is provided as an example of how to do it when there is a need for persistent instances.
  -->
  <opc:Object SymbolicName="Pipe1" TypeDefinition="PipeType" SupportsEvents="true">
    <opc:BrowseName>Pipe #1</opc:BrowseName>
    
    <!-- Link the instance back to the ObjectsFolder -->
    <opc:References>
      <opc:Reference IsInverse="true">
        <opc:ReferenceType>ua:Organizes</opc:ReferenceType>
        <opc:TargetId>ua:ObjectsFolder</opc:TargetId>
      </opc:Reference>
    </opc:References>

  </opc:Object>
  <!-- Task #C1 - Create Types -->

</opc:ModelDesign>