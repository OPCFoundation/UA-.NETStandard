/* ========================================================================
 * Copyright (c) 2005-2024 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;

namespace Opc.Ua
{
    #region ServerObjectState Class
    #if (!OPCUA_EXCLUDE_ServerObjectState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerObjectState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ServerObjectState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (UrisVersion != null)
            {
                UrisVersion.Initialize(context, UrisVersion_InitializationString);
            }

            if (EstimatedReturnTime != null)
            {
                EstimatedReturnTime.Initialize(context, EstimatedReturnTime_InitializationString);
            }

            if (LocalTime != null)
            {
                LocalTime.Initialize(context, LocalTime_InitializationString);
            }

            if (Namespaces != null)
            {
                Namespaces.Initialize(context, Namespaces_InitializationString);
            }

            if (GetMonitoredItems != null)
            {
                GetMonitoredItems.Initialize(context, GetMonitoredItems_InitializationString);
            }

            if (ResendData != null)
            {
                ResendData.Initialize(context, ResendData_InitializationString);
            }

            if (SetSubscriptionDurable != null)
            {
                SetSubscriptionDurable.Initialize(context, SetSubscriptionDurable_InitializationString);
            }

            if (RequestServerStateChange != null)
            {
                RequestServerStateChange.Initialize(context, RequestServerStateChange_InitializationString);
            }
        }

        #region Initialization String
        private const string UrisVersion_InitializationString =
           "//////////8VcIkKAgAAAAAACwAAAFVyaXNWZXJzaW9uAQCbOgAuAESbOgAAAQAGUv////8BAQAAAAAA" +
           "QI9A/////wAAAAA=";

        private const string EstimatedReturnTime_InitializationString =
           "//////////8VcIkKAgAAAAAAEwAAAEVzdGltYXRlZFJldHVyblRpbWUBAFIyAC4ARFIyAAAADf////8B" +
           "AQAAAAAAQI9A/////wAAAAA=";

        private const string LocalTime_InitializationString =
           "//////////8VcIkKAgAAAAAACQAAAExvY2FsVGltZQEAzEQALgBEzEQAAAEA0CL/////AQEAAAAAAECP" +
           "QP////8AAAAA";

        private const string Namespaces_InitializationString =
           "//////////8EYIAKAQAAAAAACgAAAE5hbWVzcGFjZXMBAActAC8BAH0tBy0AAP////8AAAAA";

        private const string GetMonitoredItems_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAEdldE1vbml0b3JlZEl0ZW1zAQDhLAAvAQDhLOEsAAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4iwALgBE4iwAAJYBAAAAAQAqAQEdAAAADgAA" +
           "AFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQDjLAAuAETjLAAAlgIAAAABACoBASAAAAANAAAAU2VydmVySGFu" +
           "ZGxlcwAHAQAAAAEAAAAAAAAAAAEAKgEBIAAAAA0AAABDbGllbnRIYW5kbGVzAAcBAAAAAQAAAAAAAAAA" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string ResendData_InitializationString =
           "//////////8EYYIKBAAAAAAACgAAAFJlc2VuZERhdGEBAEcyAC8BAEcyRzIAAAEB/////wEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBIMgAuAERIMgAAlgEAAAABACoBAR0AAAAOAAAAU3Vic2Ny" +
           "aXB0aW9uSWQAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string SetSubscriptionDurable_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGUBAMoxAC8BAMoxyjEAAAEB" +
           "/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDLMQAuAETLMQAAlgIAAAABACoBAR0A" +
           "AAAOAAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKgEBHgAAAA8AAABMaWZldGltZUluSG91cnMA" +
           "B/////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1" +
           "bWVudHMBAMwxAC4ARMwxAACWAQAAAAEAKgEBJQAAABYAAABSZXZpc2VkTGlmZXRpbWVJbkhvdXJzAAf/" +
           "////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string RequestServerStateChange_InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZQEAUzIALwEAUzJTMgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFQyAC4ARFQyAACWBQAAAAEAKgEB" +
           "FgAAAAUAAABTdGF0ZQEAVAP/////AAAAAAABACoBASIAAAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQAN" +
           "/////wAAAAAAAQAqAQEiAAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24AB/////8AAAAAAAEAKgEBFQAA" +
           "AAYAAABSZWFzb24AFf////8AAAAAAAEAKgEBFgAAAAcAAABSZXN0YXJ0AAH/////AAAAAAABACgBAQAA" +
           "AAEAAAAFAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEgAAAFNlcnZlclR5cGVJbnN0YW5jZQEA1AcBANQH1AcAAP////8RAAAA" +
           "F3CJCgIAAAAAAAsAAABTZXJ2ZXJBcnJheQEA1QcALgBE1QcAAAAMAQAAAAEAAAAAAAAAAQEAAAAAAECP" +
           "QP////8AAAAAF3CJCgIAAAAAAA4AAABOYW1lc3BhY2VBcnJheQEA1gcALgBE1gcAAAAMAQAAAAEAAAAA" +
           "AAAAAQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAAAsAAABVcmlzVmVyc2lvbgEAmzoALgBEmzoAAAEA" +
           "BlL/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAAAwAAABTZXJ2ZXJTdGF0dXMBANcHAC8BAFoI" +
           "1wcAAAEAXgP/////AQEAAAAAAECPQP////8GAAAAFWCJCgIAAAAAAAkAAABTdGFydFRpbWUBAAIMAC8A" +
           "PwIMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEN1cnJlbnRUaW1lAQADDAAvAD8DDAAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAUAAABTdGF0ZQEABAwALwA/BAwAAAEAVAP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAQnVpbGRJbmZvAQAFDAAvAQDrCwUMAAABAFIB/////wEB/////wYA" +
           "AAAVcIkKAgAAAAAACgAAAFByb2R1Y3RVcmkBAAYMAC8APwYMAAAADP////8BAQAAAAAAQI9A/////wAA" +
           "AAAVcIkKAgAAAAAAEAAAAE1hbnVmYWN0dXJlck5hbWUBAAcMAC8APwcMAAAADP////8BAQAAAAAAQI9A" +
           "/////wAAAAAVcIkKAgAAAAAACwAAAFByb2R1Y3ROYW1lAQAIDAAvAD8IDAAAAAz/////AQEAAAAAAECP" +
           "QP////8AAAAAFXCJCgIAAAAAAA8AAABTb2Z0d2FyZVZlcnNpb24BAAkMAC8APwkMAAAADP////8BAQAA" +
           "AAAAQI9A/////wAAAAAVcIkKAgAAAAAACwAAAEJ1aWxkTnVtYmVyAQAKDAAvAD8KDAAAAAz/////AQEA" +
           "AAAAAECPQP////8AAAAAFXCJCgIAAAAAAAkAAABCdWlsZERhdGUBAAsMAC8APwsMAAABACYB/////wEB" +
           "AAAAAABAj0D/////AAAAABVgiQoCAAAAAAATAAAAU2Vjb25kc1RpbGxTaHV0ZG93bgEADAwALwA/DAwA" +
           "AAAH/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFNodXRkb3duUmVhc29uAQANDAAvAD8NDAAAABX/" +
           "////AQH/////AAAAABVwiQoCAAAAAAAMAAAAU2VydmljZUxldmVsAQDYBwAuAETYBwAAAAP/////AQEA" +
           "AAAAAECPQP////8AAAAAFXCJCgIAAAAAAAgAAABBdWRpdGluZwEAtgoALgBEtgoAAAAB/////wEBAAAA" +
           "AABAj0D/////AAAAABVwiQoCAAAAAAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQEAUjIALgBEUjIAAAAN" +
           "/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDMRAAuAETMRAAAAQDQ" +
           "Iv////8BAQAAAAAAQI9A/////wAAAAAEYIAKAQAAAAAAEgAAAFNlcnZlckNhcGFiaWxpdGllcwEA2QcA" +
           "LwEA3QfZBwAA/////wkAAAAXYIkKAgAAAAAAEgAAAFNlcnZlclByb2ZpbGVBcnJheQEADgwALgBEDgwA" +
           "AAAMAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAANAAAATG9jYWxlSWRBcnJheQEADwwALgBE" +
           "DwwAAAEAJwEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABYAAABNaW5TdXBwb3J0ZWRTYW1w" +
           "bGVSYXRlAQAQDAAuAEQQDAAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAABsAAABNYXhCcm93c2VD" +
           "b250aW51YXRpb25Qb2ludHMBABEMAC4ARBEMAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABoAAABN" +
           "YXhRdWVyeUNvbnRpbnVhdGlvblBvaW50cwEAEgwALgBEEgwAAAAF/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAHAAAAE1heEhpc3RvcnlDb250aW51YXRpb25Qb2ludHMBABMMAC4ARBMMAAAABf////8BAf////8A" +
           "AAAAF2CJCgIAAAAAABQAAABTb2Z0d2FyZUNlcnRpZmljYXRlcwEAFAwALgBEFAwAAAEAWAEBAAAAAQAA" +
           "AAAAAAABAf////8AAAAABGCACgEAAAAAAA4AAABNb2RlbGxpbmdSdWxlcwEAFQwALwA9FQwAAP////8A" +
           "AAAABGCACgEAAAAAABIAAABBZ2dyZWdhdGVGdW5jdGlvbnMBABYMAC8APRYMAAD/////AAAAAARggAoB" +
           "AAAAAAARAAAAU2VydmVyRGlhZ25vc3RpY3MBANoHAC8BAOQH2gcAAP////8EAAAAFWCJCgIAAAAAABgA" +
           "AABTZXJ2ZXJEaWFnbm9zdGljc1N1bW1hcnkBABcMAC8BAGYIFwwAAAEAWwP/////AQH/////DAAAABVg" +
           "iQoCAAAAAAAPAAAAU2VydmVyVmlld0NvdW50AQAYDAAvAD8YDAAAAAf/////AQH/////AAAAABVgiQoC" +
           "AAAAAAATAAAAQ3VycmVudFNlc3Npb25Db3VudAEAGQwALwA/GQwAAAAH/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFQAAAEN1bXVsYXRlZFNlc3Npb25Db3VudAEAGgwALwA/GgwAAAAH/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAHAAAAFNlY3VyaXR5UmVqZWN0ZWRTZXNzaW9uQ291bnQBABsMAC8APxsMAAAAB/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABQAAABSZWplY3RlZFNlc3Npb25Db3VudAEAHAwALwA/HAwAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFNlc3Npb25UaW1lb3V0Q291bnQBAB0MAC8APx0MAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABEAAABTZXNzaW9uQWJvcnRDb3VudAEAHgwALwA/HgwAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAFwAAAFB1Ymxpc2hpbmdJbnRlcnZhbENvdW50AQAgDAAvAD8gDAAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAQ3VycmVudFN1YnNjcmlwdGlvbkNvdW50AQAhDAAv" +
           "AD8hDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAQ3VtdWxhdGVkU3Vic2NyaXB0aW9uQ291" +
           "bnQBACIMAC8APyIMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABTZWN1cml0eVJlamVjdGVk" +
           "UmVxdWVzdHNDb3VudAEAIwwALwA/IwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJlamVj" +
           "dGVkUmVxdWVzdHNDb3VudAEAJAwALwA/JAwAAAAH/////wEB/////wAAAAAXYIkKAgAAAAAAHAAAAFN1" +
           "YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXkBACYMAC8BAHsIJgwAAAEAagMBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAABGCACgEAAAAAABoAAABTZXNzaW9uc0RpYWdub3N0aWNzU3VtbWFyeQEAJwwALwEA6gcnDAAA" +
           "/////wIAAAAXYIkKAgAAAAAAFwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5AQAoDAAvAQCUCCgMAAAB" +
           "AGEDAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAfAAAAU2Vzc2lvblNlY3VyaXR5RGlhZ25v" +
           "c3RpY3NBcnJheQEAKQwALwEAwwgpDAAAAQBkAwEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAEVuYWJsZWRGbGFnAQAqDAAuAEQqDAAAAAH/////AwP/////AAAAAARggAoBAAAAAAAQAAAAVmVu" +
           "ZG9yU2VydmVySW5mbwEA2wcALwEA8QfbBwAA/////wAAAAAEYIAKAQAAAAAAEAAAAFNlcnZlclJlZHVu" +
           "ZGFuY3kBANwHAC8BAPIH3AcAAP////8BAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEA" +
           "KwwALgBEKwwAAAEAUwP/////AQH/////AAAAAARggAoBAAAAAAAKAAAATmFtZXNwYWNlcwEABy0ALwEA" +
           "fS0HLQAA/////wAAAAAEYYIKBAAAAAAAEQAAAEdldE1vbml0b3JlZEl0ZW1zAQDhLAAvAQDhLOEsAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4iwALgBE4iwAAJYBAAAAAQAqAQEd" +
           "AAAADgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDjLAAuAETjLAAAlgIAAAABACoBASAAAAANAAAAU2Vy" +
           "dmVySGFuZGxlcwAHAQAAAAEAAAAAAAAAAAEAKgEBIAAAAA0AAABDbGllbnRIYW5kbGVzAAcBAAAAAQAA" +
           "AAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAACgAAAFJlc2VuZERhdGEBAEcy" +
           "AC8BAEcyRzIAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBIMgAuAERIMgAA" +
           "lgEAAAABACoBAR0AAAAOAAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAABYAAABTZXRTdWJzY3JpcHRpb25EdXJhYmxlAQDKMQAvAQDKMcoxAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAyzEALgBEyzEAAJYCAAAAAQAqAQEd" +
           "AAAADgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACoBAR4AAAAPAAAATGlmZXRpbWVJbkhvdXJz" +
           "AAf/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQDMMQAuAETMMQAAlgEAAAABACoBASUAAAAWAAAAUmV2aXNlZExpZmV0aW1lSW5Ib3VycwAH" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAGAAAAFJlcXVlc3RTZXJ2" +
           "ZXJTdGF0ZUNoYW5nZQEAUzIALwEAUzJTMgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAFQyAC4ARFQyAACWBQAAAAEAKgEBFgAAAAUAAABTdGF0ZQEAVAP/////AAAAAAABACoBASIA" +
           "AAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQAN/////wAAAAAAAQAqAQEiAAAAEwAAAFNlY29uZHNUaWxs" +
           "U2h1dGRvd24AB/////8AAAAAAAEAKgEBFQAAAAYAAABSZWFzb24AFf////8AAAAAAAEAKgEBFgAAAAcA" +
           "AABSZXN0YXJ0AAH/////AAAAAAABACgBAQAAAAEAAAAFAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerArray
        {
            get
            {
                return m_serverArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> NamespaceArray
        {
            get
            {
                return m_namespaceArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceArray = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> UrisVersion
        {
            get
            {
                return m_urisVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_urisVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_urisVersion = value;
            }
        }

        /// <remarks />
        public ServerStatusState ServerStatus
        {
            get
            {
                return m_serverStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverStatus = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> ServiceLevel
        {
            get
            {
                return m_serviceLevel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceLevel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceLevel = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Auditing
        {
            get
            {
                return m_auditing;
            }

            set
            {
                if (!Object.ReferenceEquals(m_auditing, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_auditing = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EstimatedReturnTime
        {
            get
            {
                return m_estimatedReturnTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_estimatedReturnTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_estimatedReturnTime = value;
            }
        }

        /// <remarks />
        public PropertyState<TimeZoneDataType> LocalTime
        {
            get
            {
                return m_localTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localTime = value;
            }
        }

        /// <remarks />
        public ServerCapabilitiesState ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public ServerDiagnosticsState ServerDiagnostics
        {
            get
            {
                return m_serverDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnostics = value;
            }
        }

        /// <remarks />
        public VendorServerInfoState VendorServerInfo
        {
            get
            {
                return m_vendorServerInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vendorServerInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vendorServerInfo = value;
            }
        }

        /// <remarks />
        public ServerRedundancyState ServerRedundancy
        {
            get
            {
                return m_serverRedundancy;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverRedundancy, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverRedundancy = value;
            }
        }

        /// <remarks />
        public NamespacesState Namespaces
        {
            get
            {
                return m_namespaces;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaces, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaces = value;
            }
        }

        /// <remarks />
        public GetMonitoredItemsMethodState GetMonitoredItems
        {
            get
            {
                return m_getMonitoredItemsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getMonitoredItemsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getMonitoredItemsMethod = value;
            }
        }

        /// <remarks />
        public ResendDataMethodState ResendData
        {
            get
            {
                return m_resendDataMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resendDataMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resendDataMethod = value;
            }
        }

        /// <remarks />
        public SetSubscriptionDurableMethodState SetSubscriptionDurable
        {
            get
            {
                return m_setSubscriptionDurableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setSubscriptionDurableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setSubscriptionDurableMethod = value;
            }
        }

        /// <remarks />
        public RequestServerStateChangeMethodState RequestServerStateChange
        {
            get
            {
                return m_requestServerStateChangeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestServerStateChangeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestServerStateChangeMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverArray != null)
            {
                children.Add(m_serverArray);
            }

            if (m_namespaceArray != null)
            {
                children.Add(m_namespaceArray);
            }

            if (m_urisVersion != null)
            {
                children.Add(m_urisVersion);
            }

            if (m_serverStatus != null)
            {
                children.Add(m_serverStatus);
            }

            if (m_serviceLevel != null)
            {
                children.Add(m_serviceLevel);
            }

            if (m_auditing != null)
            {
                children.Add(m_auditing);
            }

            if (m_estimatedReturnTime != null)
            {
                children.Add(m_estimatedReturnTime);
            }

            if (m_localTime != null)
            {
                children.Add(m_localTime);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_serverDiagnostics != null)
            {
                children.Add(m_serverDiagnostics);
            }

            if (m_vendorServerInfo != null)
            {
                children.Add(m_vendorServerInfo);
            }

            if (m_serverRedundancy != null)
            {
                children.Add(m_serverRedundancy);
            }

            if (m_namespaces != null)
            {
                children.Add(m_namespaces);
            }

            if (m_getMonitoredItemsMethod != null)
            {
                children.Add(m_getMonitoredItemsMethod);
            }

            if (m_resendDataMethod != null)
            {
                children.Add(m_resendDataMethod);
            }

            if (m_setSubscriptionDurableMethod != null)
            {
                children.Add(m_setSubscriptionDurableMethod);
            }

            if (m_requestServerStateChangeMethod != null)
            {
                children.Add(m_requestServerStateChangeMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerArray;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceArray:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceArray == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                NamespaceArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = NamespaceArray;
                    break;
                }

                case Opc.Ua.BrowseNames.UrisVersion:
                {
                    if (createOrReplace)
                    {
                        if (UrisVersion == null)
                        {
                            if (replacement == null)
                            {
                                UrisVersion = new PropertyState<uint>(this);
                            }
                            else
                            {
                                UrisVersion = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = UrisVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerStatus:
                {
                    if (createOrReplace)
                    {
                        if (ServerStatus == null)
                        {
                            if (replacement == null)
                            {
                                ServerStatus = new ServerStatusState(this);
                            }
                            else
                            {
                                ServerStatus = (ServerStatusState)replacement;
                            }
                        }
                    }

                    instance = ServerStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.ServiceLevel:
                {
                    if (createOrReplace)
                    {
                        if (ServiceLevel == null)
                        {
                            if (replacement == null)
                            {
                                ServiceLevel = new PropertyState<byte>(this);
                            }
                            else
                            {
                                ServiceLevel = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = ServiceLevel;
                    break;
                }

                case Opc.Ua.BrowseNames.Auditing:
                {
                    if (createOrReplace)
                    {
                        if (Auditing == null)
                        {
                            if (replacement == null)
                            {
                                Auditing = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Auditing = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Auditing;
                    break;
                }

                case Opc.Ua.BrowseNames.EstimatedReturnTime:
                {
                    if (createOrReplace)
                    {
                        if (EstimatedReturnTime == null)
                        {
                            if (replacement == null)
                            {
                                EstimatedReturnTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EstimatedReturnTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EstimatedReturnTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LocalTime:
                {
                    if (createOrReplace)
                    {
                        if (LocalTime == null)
                        {
                            if (replacement == null)
                            {
                                LocalTime = new PropertyState<TimeZoneDataType>(this);
                            }
                            else
                            {
                                LocalTime = (PropertyState<TimeZoneDataType>)replacement;
                            }
                        }
                    }

                    instance = LocalTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new ServerCapabilitiesState(this);
                            }
                            else
                            {
                                ServerCapabilities = (ServerCapabilitiesState)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnostics = new ServerDiagnosticsState(this);
                            }
                            else
                            {
                                ServerDiagnostics = (ServerDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.VendorServerInfo:
                {
                    if (createOrReplace)
                    {
                        if (VendorServerInfo == null)
                        {
                            if (replacement == null)
                            {
                                VendorServerInfo = new VendorServerInfoState(this);
                            }
                            else
                            {
                                VendorServerInfo = (VendorServerInfoState)replacement;
                            }
                        }
                    }

                    instance = VendorServerInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerRedundancy:
                {
                    if (createOrReplace)
                    {
                        if (ServerRedundancy == null)
                        {
                            if (replacement == null)
                            {
                                ServerRedundancy = new ServerRedundancyState(this);
                            }
                            else
                            {
                                ServerRedundancy = (ServerRedundancyState)replacement;
                            }
                        }
                    }

                    instance = ServerRedundancy;
                    break;
                }

                case Opc.Ua.BrowseNames.Namespaces:
                {
                    if (createOrReplace)
                    {
                        if (Namespaces == null)
                        {
                            if (replacement == null)
                            {
                                Namespaces = new NamespacesState(this);
                            }
                            else
                            {
                                Namespaces = (NamespacesState)replacement;
                            }
                        }
                    }

                    instance = Namespaces;
                    break;
                }

                case Opc.Ua.BrowseNames.GetMonitoredItems:
                {
                    if (createOrReplace)
                    {
                        if (GetMonitoredItems == null)
                        {
                            if (replacement == null)
                            {
                                GetMonitoredItems = new GetMonitoredItemsMethodState(this);
                            }
                            else
                            {
                                GetMonitoredItems = (GetMonitoredItemsMethodState)replacement;
                            }
                        }
                    }

                    instance = GetMonitoredItems;
                    break;
                }

                case Opc.Ua.BrowseNames.ResendData:
                {
                    if (createOrReplace)
                    {
                        if (ResendData == null)
                        {
                            if (replacement == null)
                            {
                                ResendData = new ResendDataMethodState(this);
                            }
                            else
                            {
                                ResendData = (ResendDataMethodState)replacement;
                            }
                        }
                    }

                    instance = ResendData;
                    break;
                }

                case Opc.Ua.BrowseNames.SetSubscriptionDurable:
                {
                    if (createOrReplace)
                    {
                        if (SetSubscriptionDurable == null)
                        {
                            if (replacement == null)
                            {
                                SetSubscriptionDurable = new SetSubscriptionDurableMethodState(this);
                            }
                            else
                            {
                                SetSubscriptionDurable = (SetSubscriptionDurableMethodState)replacement;
                            }
                        }
                    }

                    instance = SetSubscriptionDurable;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestServerStateChange:
                {
                    if (createOrReplace)
                    {
                        if (RequestServerStateChange == null)
                        {
                            if (replacement == null)
                            {
                                RequestServerStateChange = new RequestServerStateChangeMethodState(this);
                            }
                            else
                            {
                                RequestServerStateChange = (RequestServerStateChangeMethodState)replacement;
                            }
                        }
                    }

                    instance = RequestServerStateChange;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverArray;
        private PropertyState<string[]> m_namespaceArray;
        private PropertyState<uint> m_urisVersion;
        private ServerStatusState m_serverStatus;
        private PropertyState<byte> m_serviceLevel;
        private PropertyState<bool> m_auditing;
        private PropertyState<DateTime> m_estimatedReturnTime;
        private PropertyState<TimeZoneDataType> m_localTime;
        private ServerCapabilitiesState m_serverCapabilities;
        private ServerDiagnosticsState m_serverDiagnostics;
        private VendorServerInfoState m_vendorServerInfo;
        private ServerRedundancyState m_serverRedundancy;
        private NamespacesState m_namespaces;
        private GetMonitoredItemsMethodState m_getMonitoredItemsMethod;
        private ResendDataMethodState m_resendDataMethod;
        private SetSubscriptionDurableMethodState m_setSubscriptionDurableMethod;
        private RequestServerStateChangeMethodState m_requestServerStateChangeMethod;
        #endregion
    }
    #endif
    #endregion

    #region ServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_ServerCapabilitiesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxArrayLength != null)
            {
                MaxArrayLength.Initialize(context, MaxArrayLength_InitializationString);
            }

            if (MaxStringLength != null)
            {
                MaxStringLength.Initialize(context, MaxStringLength_InitializationString);
            }

            if (MaxByteStringLength != null)
            {
                MaxByteStringLength.Initialize(context, MaxByteStringLength_InitializationString);
            }

            if (OperationLimits != null)
            {
                OperationLimits.Initialize(context, OperationLimits_InitializationString);
            }

            if (RoleSet != null)
            {
                RoleSet.Initialize(context, RoleSet_InitializationString);
            }

            if (MaxSessions != null)
            {
                MaxSessions.Initialize(context, MaxSessions_InitializationString);
            }

            if (MaxSubscriptions != null)
            {
                MaxSubscriptions.Initialize(context, MaxSubscriptions_InitializationString);
            }

            if (MaxMonitoredItems != null)
            {
                MaxMonitoredItems.Initialize(context, MaxMonitoredItems_InitializationString);
            }

            if (MaxSubscriptionsPerSession != null)
            {
                MaxSubscriptionsPerSession.Initialize(context, MaxSubscriptionsPerSession_InitializationString);
            }

            if (MaxMonitoredItemsPerSubscription != null)
            {
                MaxMonitoredItemsPerSubscription.Initialize(context, MaxMonitoredItemsPerSubscription_InitializationString);
            }

            if (MaxSelectClauseParameters != null)
            {
                MaxSelectClauseParameters.Initialize(context, MaxSelectClauseParameters_InitializationString);
            }

            if (MaxWhereClauseParameters != null)
            {
                MaxWhereClauseParameters.Initialize(context, MaxWhereClauseParameters_InitializationString);
            }

            if (MaxMonitoredItemsQueueSize != null)
            {
                MaxMonitoredItemsQueueSize.Initialize(context, MaxMonitoredItemsQueueSize_InitializationString);
            }

            if (ConformanceUnits != null)
            {
                ConformanceUnits.Initialize(context, ConformanceUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxArrayLength_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heEFycmF5TGVuZ3RoAQAdLQAuAEQdLQAAAAf/////AQH/////" +
           "AAAAAA==";

        private const string MaxStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFN0cmluZ0xlbmd0aAEAHi0ALgBEHi0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxByteStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAE1heEJ5dGVTdHJpbmdMZW5ndGgBAG4yAC4ARG4yAAAAB/////8B" +
           "Af////8AAAAA";

        private const string OperationLimits_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE9wZXJhdGlvbkxpbWl0cwEAHy0ALwEALC0fLQAA/////wAAAAA=";

        private const string RoleSet_InitializationString =
           "//////////8EYIAKAQAAAAAABwAAAFJvbGVTZXQBAKc/AC8BAPc8pz8AAP////8CAAAABGGCCgQAAAAA" +
           "AAcAAABBZGRSb2xlAQCoPwAvAQB9Pqg/AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEAqT8ALgBEqT8AAJYCAAAAAQAqAQEXAAAACAAAAFJvbGVOYW1lAAz/////AAAAAAABACoBARsA" +
           "AAAMAAAATmFtZXNwYWNlVXJpAAz/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCqPwAuAESqPwAAlgEAAAABACoBARkAAAAKAAAAUm9sZU5v" +
           "ZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAACgAAAFJlbW92" +
           "ZVJvbGUBAKs/AC8BAIA+qz8AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCs" +
           "PwAuAESsPwAAlgEAAAABACoBARkAAAAKAAAAUm9sZU5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAA=";

        private const string MaxSessions_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAE1heFNlc3Npb25zAQAYXgAuAEQYXgAAAAf/////AQH/////AAAA" +
           "AA==";

        private const string MaxSubscriptions_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAE1heFN1YnNjcmlwdGlvbnMBABleAC4ARBleAAAAB/////8BAf//" +
           "//8AAAAA";

        private const string MaxMonitoredItems_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE1heE1vbml0b3JlZEl0ZW1zAQAaXgAuAEQaXgAAAAf/////AQH/" +
           "////AAAAAA==";

        private const string MaxSubscriptionsPerSession_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAE1heFN1YnNjcmlwdGlvbnNQZXJTZXNzaW9uAQAbXgAuAEQbXgAA" +
           "AAf/////AQH/////AAAAAA==";

        private const string MaxMonitoredItemsPerSubscription_InitializationString =
           "//////////8VYIkKAgAAAAAAIAAAAE1heE1vbml0b3JlZEl0ZW1zUGVyU3Vic2NyaXB0aW9uAQAnXgAu" +
           "AEQnXgAAAAf/////AQH/////AAAAAA==";

        private const string MaxSelectClauseParameters_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAE1heFNlbGVjdENsYXVzZVBhcmFtZXRlcnMBABxeAC4ARBxeAAAA" +
           "B/////8BAf////8AAAAA";

        private const string MaxWhereClauseParameters_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heFdoZXJlQ2xhdXNlUGFyYW1ldGVycwEAHV4ALgBEHV4AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string MaxMonitoredItemsQueueSize_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAE1heE1vbml0b3JlZEl0ZW1zUXVldWVTaXplAQAafAAuAEQafAAA" +
           "AAf/////AQH/////AAAAAA==";

        private const string ConformanceUnits_InitializationString =
           "//////////8XYIkKAgAAAAAAEAAAAENvbmZvcm1hbmNlVW5pdHMBAB5eAC4ARB5eAAAAFAEAAAABAAAA" +
           "AAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFNlcnZlckNhcGFiaWxpdGllc1R5cGVJbnN0YW5jZQEA3QcBAN0H" +
           "3QcAAP////8XAAAAF2CJCgIAAAAAABIAAABTZXJ2ZXJQcm9maWxlQXJyYXkBAN4HAC4ARN4HAAAADAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAADQAAAExvY2FsZUlkQXJyYXkBAOAHAC4AROAHAAAB" +
           "ACcBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAWAAAATWluU3VwcG9ydGVkU2FtcGxlUmF0" +
           "ZQEA4QcALgBE4QcAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAbAAAATWF4QnJvd3NlQ29udGlu" +
           "dWF0aW9uUG9pbnRzAQCsCgAuAESsCgAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAaAAAATWF4UXVl" +
           "cnlDb250aW51YXRpb25Qb2ludHMBAK0KAC4ARK0KAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABwA" +
           "AABNYXhIaXN0b3J5Q29udGludWF0aW9uUG9pbnRzAQCuCgAuAESuCgAAAAX/////AQH/////AAAAABdg" +
           "iQoCAAAAAAAUAAAAU29mdHdhcmVDZXJ0aWZpY2F0ZXMBAOkLAC4AROkLAAABAFgBAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABVgiQoCAAAAAAAOAAAATWF4QXJyYXlMZW5ndGgBAB0tAC4ARB0tAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAA8AAABNYXhTdHJpbmdMZW5ndGgBAB4tAC4ARB4tAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABMAAABNYXhCeXRlU3RyaW5nTGVuZ3RoAQBuMgAuAERuMgAAAAf/////AQH/////" +
           "AAAAAARggAoBAAAAAAAPAAAAT3BlcmF0aW9uTGltaXRzAQAfLQAvAQAsLR8tAAD/////AAAAAARggAoB" +
           "AAAAAAAOAAAATW9kZWxsaW5nUnVsZXMBAOMHAC8APeMHAAD/////AAAAAARggAoBAAAAAAASAAAAQWdn" +
           "cmVnYXRlRnVuY3Rpb25zAQDCCgAvAD3CCgAA/////wAAAAAEYIAKAQAAAAAABwAAAFJvbGVTZXQBAKc/" +
           "AC8BAPc8pz8AAP////8CAAAABGGCCgQAAAAAAAcAAABBZGRSb2xlAQCoPwAvAQB9Pqg/AAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAqT8ALgBEqT8AAJYCAAAAAQAqAQEXAAAACAAA" +
           "AFJvbGVOYW1lAAz/////AAAAAAABACoBARsAAAAMAAAATmFtZXNwYWNlVXJpAAz/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCqPwAuAESq" +
           "PwAAlgEAAAABACoBARkAAAAKAAAAUm9sZU5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB" +
           "/////wAAAAAEYYIKBAAAAAAACgAAAFJlbW92ZVJvbGUBAKs/AC8BAIA+qz8AAAEB/////wEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCsPwAuAESsPwAAlgEAAAABACoBARkAAAAKAAAAUm9sZU5v" +
           "ZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAE1heFNl" +
           "c3Npb25zAQAYXgAuAEQYXgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAQAAAATWF4U3Vic2NyaXB0" +
           "aW9ucwEAGV4ALgBEGV4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAE1heE1vbml0b3JlZEl0" +
           "ZW1zAQAaXgAuAEQaXgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAaAAAATWF4U3Vic2NyaXB0aW9u" +
           "c1BlclNlc3Npb24BABteAC4ARBteAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAACAAAABNYXhNb25p" +
           "dG9yZWRJdGVtc1BlclN1YnNjcmlwdGlvbgEAJ14ALgBEJ14AAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAGQAAAE1heFNlbGVjdENsYXVzZVBhcmFtZXRlcnMBABxeAC4ARBxeAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABgAAABNYXhXaGVyZUNsYXVzZVBhcmFtZXRlcnMBAB1eAC4ARB1eAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABoAAABNYXhNb25pdG9yZWRJdGVtc1F1ZXVlU2l6ZQEAGnwALgBEGnwAAAAH" +
           "/////wEB/////wAAAAAXYIkKAgAAAAAAEAAAAENvbmZvcm1hbmNlVW5pdHMBAB5eAC4ARB5eAAAAFAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerProfileArray
        {
            get
            {
                return m_serverProfileArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverProfileArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverProfileArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> LocaleIdArray
        {
            get
            {
                return m_localeIdArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIdArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIdArray = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinSupportedSampleRate
        {
            get
            {
                return m_minSupportedSampleRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minSupportedSampleRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minSupportedSampleRate = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxBrowseContinuationPoints
        {
            get
            {
                return m_maxBrowseContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxBrowseContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxBrowseContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxQueryContinuationPoints
        {
            get
            {
                return m_maxQueryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxQueryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxQueryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxHistoryContinuationPoints
        {
            get
            {
                return m_maxHistoryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxHistoryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxHistoryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> SoftwareCertificates
        {
            get
            {
                return m_softwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxArrayLength
        {
            get
            {
                return m_maxArrayLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxArrayLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxArrayLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxStringLength
        {
            get
            {
                return m_maxStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxStringLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxByteStringLength
        {
            get
            {
                return m_maxByteStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxByteStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxByteStringLength = value;
            }
        }

        /// <remarks />
        public OperationLimitsState OperationLimits
        {
            get
            {
                return m_operationLimits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_operationLimits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_operationLimits = value;
            }
        }

        /// <remarks />
        public FolderState ModellingRules
        {
            get
            {
                return m_modellingRules;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modellingRules, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modellingRules = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }

        /// <remarks />
        public RoleSetState RoleSet
        {
            get
            {
                return m_roleSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_roleSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_roleSet = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxSessions
        {
            get
            {
                return m_maxSessions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSessions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSessions = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxSubscriptions
        {
            get
            {
                return m_maxSubscriptions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSubscriptions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSubscriptions = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItems
        {
            get
            {
                return m_maxMonitoredItems;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItems, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItems = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxSubscriptionsPerSession
        {
            get
            {
                return m_maxSubscriptionsPerSession;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSubscriptionsPerSession, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSubscriptionsPerSession = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItemsPerSubscription
        {
            get
            {
                return m_maxMonitoredItemsPerSubscription;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItemsPerSubscription, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItemsPerSubscription = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxSelectClauseParameters
        {
            get
            {
                return m_maxSelectClauseParameters;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSelectClauseParameters, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSelectClauseParameters = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxWhereClauseParameters
        {
            get
            {
                return m_maxWhereClauseParameters;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxWhereClauseParameters, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxWhereClauseParameters = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItemsQueueSize
        {
            get
            {
                return m_maxMonitoredItemsQueueSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItemsQueueSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItemsQueueSize = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName[]> ConformanceUnits
        {
            get
            {
                return m_conformanceUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conformanceUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conformanceUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverProfileArray != null)
            {
                children.Add(m_serverProfileArray);
            }

            if (m_localeIdArray != null)
            {
                children.Add(m_localeIdArray);
            }

            if (m_minSupportedSampleRate != null)
            {
                children.Add(m_minSupportedSampleRate);
            }

            if (m_maxBrowseContinuationPoints != null)
            {
                children.Add(m_maxBrowseContinuationPoints);
            }

            if (m_maxQueryContinuationPoints != null)
            {
                children.Add(m_maxQueryContinuationPoints);
            }

            if (m_maxHistoryContinuationPoints != null)
            {
                children.Add(m_maxHistoryContinuationPoints);
            }

            if (m_softwareCertificates != null)
            {
                children.Add(m_softwareCertificates);
            }

            if (m_maxArrayLength != null)
            {
                children.Add(m_maxArrayLength);
            }

            if (m_maxStringLength != null)
            {
                children.Add(m_maxStringLength);
            }

            if (m_maxByteStringLength != null)
            {
                children.Add(m_maxByteStringLength);
            }

            if (m_operationLimits != null)
            {
                children.Add(m_operationLimits);
            }

            if (m_modellingRules != null)
            {
                children.Add(m_modellingRules);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            if (m_roleSet != null)
            {
                children.Add(m_roleSet);
            }

            if (m_maxSessions != null)
            {
                children.Add(m_maxSessions);
            }

            if (m_maxSubscriptions != null)
            {
                children.Add(m_maxSubscriptions);
            }

            if (m_maxMonitoredItems != null)
            {
                children.Add(m_maxMonitoredItems);
            }

            if (m_maxSubscriptionsPerSession != null)
            {
                children.Add(m_maxSubscriptionsPerSession);
            }

            if (m_maxMonitoredItemsPerSubscription != null)
            {
                children.Add(m_maxMonitoredItemsPerSubscription);
            }

            if (m_maxSelectClauseParameters != null)
            {
                children.Add(m_maxSelectClauseParameters);
            }

            if (m_maxWhereClauseParameters != null)
            {
                children.Add(m_maxWhereClauseParameters);
            }

            if (m_maxMonitoredItemsQueueSize != null)
            {
                children.Add(m_maxMonitoredItemsQueueSize);
            }

            if (m_conformanceUnits != null)
            {
                children.Add(m_conformanceUnits);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerProfileArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerProfileArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerProfileArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerProfileArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerProfileArray;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIdArray:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIdArray == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIdArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                LocaleIdArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIdArray;
                    break;
                }

                case Opc.Ua.BrowseNames.MinSupportedSampleRate:
                {
                    if (createOrReplace)
                    {
                        if (MinSupportedSampleRate == null)
                        {
                            if (replacement == null)
                            {
                                MinSupportedSampleRate = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinSupportedSampleRate = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinSupportedSampleRate;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxBrowseContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxBrowseContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxBrowseContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxBrowseContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxBrowseContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxQueryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxQueryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxQueryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxQueryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxQueryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxHistoryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxHistoryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxHistoryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxHistoryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxHistoryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                SoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = SoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxArrayLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxArrayLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxArrayLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxArrayLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxArrayLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxByteStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxByteStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxByteStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxByteStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxByteStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.OperationLimits:
                {
                    if (createOrReplace)
                    {
                        if (OperationLimits == null)
                        {
                            if (replacement == null)
                            {
                                OperationLimits = new OperationLimitsState(this);
                            }
                            else
                            {
                                OperationLimits = (OperationLimitsState)replacement;
                            }
                        }
                    }

                    instance = OperationLimits;
                    break;
                }

                case Opc.Ua.BrowseNames.ModellingRules:
                {
                    if (createOrReplace)
                    {
                        if (ModellingRules == null)
                        {
                            if (replacement == null)
                            {
                                ModellingRules = new FolderState(this);
                            }
                            else
                            {
                                ModellingRules = (FolderState)replacement;
                            }
                        }
                    }

                    instance = ModellingRules;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }

                case Opc.Ua.BrowseNames.RoleSet:
                {
                    if (createOrReplace)
                    {
                        if (RoleSet == null)
                        {
                            if (replacement == null)
                            {
                                RoleSet = new RoleSetState(this);
                            }
                            else
                            {
                                RoleSet = (RoleSetState)replacement;
                            }
                        }
                    }

                    instance = RoleSet;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSessions:
                {
                    if (createOrReplace)
                    {
                        if (MaxSessions == null)
                        {
                            if (replacement == null)
                            {
                                MaxSessions = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxSessions = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSessions;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSubscriptions:
                {
                    if (createOrReplace)
                    {
                        if (MaxSubscriptions == null)
                        {
                            if (replacement == null)
                            {
                                MaxSubscriptions = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxSubscriptions = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSubscriptions;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItems:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItems == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItems = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItems = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItems;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSubscriptionsPerSession:
                {
                    if (createOrReplace)
                    {
                        if (MaxSubscriptionsPerSession == null)
                        {
                            if (replacement == null)
                            {
                                MaxSubscriptionsPerSession = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxSubscriptionsPerSession = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSubscriptionsPerSession;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItemsPerSubscription:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItemsPerSubscription == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItemsPerSubscription = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItemsPerSubscription = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItemsPerSubscription;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSelectClauseParameters:
                {
                    if (createOrReplace)
                    {
                        if (MaxSelectClauseParameters == null)
                        {
                            if (replacement == null)
                            {
                                MaxSelectClauseParameters = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxSelectClauseParameters = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSelectClauseParameters;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxWhereClauseParameters:
                {
                    if (createOrReplace)
                    {
                        if (MaxWhereClauseParameters == null)
                        {
                            if (replacement == null)
                            {
                                MaxWhereClauseParameters = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxWhereClauseParameters = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxWhereClauseParameters;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItemsQueueSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItemsQueueSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItemsQueueSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItemsQueueSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItemsQueueSize;
                    break;
                }

                case Opc.Ua.BrowseNames.ConformanceUnits:
                {
                    if (createOrReplace)
                    {
                        if (ConformanceUnits == null)
                        {
                            if (replacement == null)
                            {
                                ConformanceUnits = new PropertyState<QualifiedName[]>(this);
                            }
                            else
                            {
                                ConformanceUnits = (PropertyState<QualifiedName[]>)replacement;
                            }
                        }
                    }

                    instance = ConformanceUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverProfileArray;
        private PropertyState<string[]> m_localeIdArray;
        private PropertyState<double> m_minSupportedSampleRate;
        private PropertyState<ushort> m_maxBrowseContinuationPoints;
        private PropertyState<ushort> m_maxQueryContinuationPoints;
        private PropertyState<ushort> m_maxHistoryContinuationPoints;
        private PropertyState<SignedSoftwareCertificate[]> m_softwareCertificates;
        private PropertyState<uint> m_maxArrayLength;
        private PropertyState<uint> m_maxStringLength;
        private PropertyState<uint> m_maxByteStringLength;
        private OperationLimitsState m_operationLimits;
        private FolderState m_modellingRules;
        private FolderState m_aggregateFunctions;
        private RoleSetState m_roleSet;
        private PropertyState<uint> m_maxSessions;
        private PropertyState<uint> m_maxSubscriptions;
        private PropertyState<uint> m_maxMonitoredItems;
        private PropertyState<uint> m_maxSubscriptionsPerSession;
        private PropertyState<uint> m_maxMonitoredItemsPerSubscription;
        private PropertyState<uint> m_maxSelectClauseParameters;
        private PropertyState<uint> m_maxWhereClauseParameters;
        private PropertyState<uint> m_maxMonitoredItemsQueueSize;
        private PropertyState<QualifiedName[]> m_conformanceUnits;
        #endregion
    }
    #endif
    #endregion

    #region ServerDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ServerDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SamplingIntervalDiagnosticsArray != null)
            {
                SamplingIntervalDiagnosticsArray.Initialize(context, SamplingIntervalDiagnosticsArray_InitializationString);
            }
        }

        #region Initialization String
        private const string SamplingIntervalDiagnosticsArray_InitializationString =
           "//////////8XYIkKAgAAAAAAIAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5AQDmBwAv" +
           "AQB0COYHAAABAFgDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFNlcnZlckRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQDkBwEA5Afk" +
           "BwAA/////wUAAAAVYIkKAgAAAAAAGAAAAFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeQEA5QcALwEAZgjl" +
           "BwAAAQBbA/////8BAf////8MAAAAFWCJCgIAAAAAAA8AAABTZXJ2ZXJWaWV3Q291bnQBACwMAC8APywM" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABDdXJyZW50U2Vzc2lvbkNvdW50AQAtDAAvAD8t" +
           "DAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAQ3VtdWxhdGVkU2Vzc2lvbkNvdW50AQAuDAAv" +
           "AD8uDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAAU2VjdXJpdHlSZWplY3RlZFNlc3Npb25D" +
           "b3VudAEALwwALwA/LwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFJlamVjdGVkU2Vzc2lv" +
           "bkNvdW50AQAwDAAvAD8wDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU2Vzc2lvblRpbWVv" +
           "dXRDb3VudAEAMQwALwA/MQwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlc3Npb25BYm9y" +
           "dENvdW50AQAyDAAvAD8yDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAAUHVibGlzaGluZ0lu" +
           "dGVydmFsQ291bnQBADQMAC8APzQMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABDdXJyZW50" +
           "U3Vic2NyaXB0aW9uQ291bnQBADUMAC8APzUMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABD" +
           "dW11bGF0ZWRTdWJzY3JpcHRpb25Db3VudAEANgwALwA/NgwAAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAHQAAAFNlY3VyaXR5UmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQA3DAAvAD83DAAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAAUmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQA4DAAvAD84DAAAAAf/////AQH/" +
           "////AAAAABdgiQoCAAAAAAAgAAAAU2FtcGxpbmdJbnRlcnZhbERpYWdub3N0aWNzQXJyYXkBAOYHAC8B" +
           "AHQI5gcAAAEAWAMBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABwAAABTdWJzY3JpcHRpb25E" +
           "aWFnbm9zdGljc0FycmF5AQDnBwAvAQB7COcHAAABAGoDAQAAAAEAAAAAAAAAAQH/////AAAAAARggAoB" +
           "AAAAAAAaAAAAU2Vzc2lvbnNEaWFnbm9zdGljc1N1bW1hcnkBALgKAC8BAOoHuAoAAP////8CAAAAF2CJ" +
           "CgIAAAAAABcAAABTZXNzaW9uRGlhZ25vc3RpY3NBcnJheQEAOQwALwEAlAg5DAAAAQBhAwEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAXYIkKAgAAAAAAHwAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzQXJyYXkB" +
           "ADoMAC8BAMMIOgwAAAEAZAMBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAsAAABFbmFibGVk" +
           "RmxhZwEA6QcALgBE6QcAAAAB/////wMD/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ServerDiagnosticsSummaryState ServerDiagnosticsSummary
        {
            get
            {
                return m_serverDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public SamplingIntervalDiagnosticsArrayState SamplingIntervalDiagnosticsArray
        {
            get
            {
                return m_samplingIntervalDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingIntervalDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingIntervalDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionsDiagnosticsSummaryState SessionsDiagnosticsSummary
        {
            get
            {
                return m_sessionsDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionsDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionsDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> EnabledFlag
        {
            get
            {
                return m_enabledFlag;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledFlag, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledFlag = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverDiagnosticsSummary != null)
            {
                children.Add(m_serverDiagnosticsSummary);
            }

            if (m_samplingIntervalDiagnosticsArray != null)
            {
                children.Add(m_samplingIntervalDiagnosticsArray);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            if (m_sessionsDiagnosticsSummary != null)
            {
                children.Add(m_sessionsDiagnosticsSummary);
            }

            if (m_enabledFlag != null)
            {
                children.Add(m_enabledFlag);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnosticsSummary = new ServerDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                ServerDiagnosticsSummary = (ServerDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.SamplingIntervalDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SamplingIntervalDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SamplingIntervalDiagnosticsArray = new SamplingIntervalDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SamplingIntervalDiagnosticsArray = (SamplingIntervalDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SamplingIntervalDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionsDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (SessionsDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                SessionsDiagnosticsSummary = new SessionsDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                SessionsDiagnosticsSummary = (SessionsDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = SessionsDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledFlag:
                {
                    if (createOrReplace)
                    {
                        if (EnabledFlag == null)
                        {
                            if (replacement == null)
                            {
                                EnabledFlag = new PropertyState<bool>(this);
                            }
                            else
                            {
                                EnabledFlag = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = EnabledFlag;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryState m_serverDiagnosticsSummary;
        private SamplingIntervalDiagnosticsArrayState m_samplingIntervalDiagnosticsArray;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        private SessionsDiagnosticsSummaryState m_sessionsDiagnosticsSummary;
        private PropertyState<bool> m_enabledFlag;
        #endregion
    }
    #endif
    #endregion

    #region SessionsDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_SessionsDiagnosticsSummaryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionsDiagnosticsSummaryState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public SessionsDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionsDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAFNlc3Npb25zRGlhZ25vc3RpY3NTdW1tYXJ5VHlwZUluc3RhbmNl" +
           "AQDqBwEA6gfqBwAA/////wIAAAAXYIkKAgAAAAAAFwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5AQDr" +
           "BwAvAQCUCOsHAAABAGEDAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAfAAAAU2Vzc2lvblNl" +
           "Y3VyaXR5RGlhZ25vc3RpY3NBcnJheQEA7AcALwEAwwjsBwAAAQBkAwEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsArrayState SessionDiagnosticsArray
        {
            get
            {
                return m_sessionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsArrayState SessionSecurityDiagnosticsArray
        {
            get
            {
                return m_sessionSecurityDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnosticsArray != null)
            {
                children.Add(m_sessionDiagnosticsArray);
            }

            if (m_sessionSecurityDiagnosticsArray != null)
            {
                children.Add(m_sessionSecurityDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnosticsArray = new SessionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionDiagnosticsArray = (SessionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnosticsArray = new SessionSecurityDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsArrayState m_sessionDiagnosticsArray;
        private SessionSecurityDiagnosticsArrayState m_sessionSecurityDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsObjectState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsObjectState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsObjectState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public SessionDiagnosticsObjectState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionDiagnosticsObjectType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAFNlc3Npb25EaWFnbm9zdGljc09iamVjdFR5cGVJbnN0YW5jZQEA" +
           "7QcBAO0H7QcAAP////8DAAAAFWCJCgIAAAAAABIAAABTZXNzaW9uRGlhZ25vc3RpY3MBAO4HAC8BAJUI" +
           "7gcAAAEAYQP/////AQH/////KwAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQA7DAAvAD87DAAAABH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAALAAAAU2Vzc2lvbk5hbWUBADwMAC8APzwMAAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABEAAABDbGllbnREZXNjcmlwdGlvbgEAPQwALwA/PQwAAAEANAH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAU2VydmVyVXJpAQA+DAAvAD8+DAAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAALAAAARW5kcG9pbnRVcmwBAD8MAC8APz8MAAAADP////8BAf////8AAAAAF2CJCgIAAAAA" +
           "AAkAAABMb2NhbGVJZHMBAEAMAC8AP0AMAAABACcBAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAUAAAAQWN0dWFsU2Vzc2lvblRpbWVvdXQBAEEMAC8AP0EMAAABACIB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFgAAAE1heFJlc3BvbnNlTWVzc2FnZVNpemUBAEIMAC8AP0IMAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABQAAABDbGllbnRDb25uZWN0aW9uVGltZQEAQwwALwA/QwwAAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAAQ2xpZW50TGFzdENvbnRhY3RUaW1lAQBEDAAvAD9EDAAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABkAAABDdXJyZW50U3Vic2NyaXB0aW9uc0NvdW50AQBFDAAvAD9FDAAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAQ3VycmVudE1vbml0b3JlZEl0ZW1zQ291bnQBAEYM" +
           "AC8AP0YMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABDdXJyZW50UHVibGlzaFJlcXVlc3Rz" +
           "SW5RdWV1ZQEARwwALwA/RwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFRvdGFsUmVxdWVz" +
           "dENvdW50AQDCIgAvAD/CIgAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABVbmF1dGhvcml6" +
           "ZWRSZXF1ZXN0Q291bnQBAHMuAC8AP3MuAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABSZWFk" +
           "Q291bnQBAE8MAC8AP08MAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEhpc3RvcnlSZWFk" +
           "Q291bnQBAFAMAC8AP1AMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFdyaXRlQ291bnQB" +
           "AFEMAC8AP1EMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAEhpc3RvcnlVcGRhdGVDb3Vu" +
           "dAEAUgwALwA/UgwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAQ2FsbENvdW50AQBTDAAv" +
           "AD9TDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABkAAABDcmVhdGVNb25pdG9yZWRJdGVtc0Nv" +
           "dW50AQBUDAAvAD9UDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABkAAABNb2RpZnlNb25pdG9y" +
           "ZWRJdGVtc0NvdW50AQBVDAAvAD9VDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABYAAABTZXRN" +
           "b25pdG9yaW5nTW9kZUNvdW50AQBWDAAvAD9WDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIA" +
           "AABTZXRUcmlnZ2VyaW5nQ291bnQBAFcMAC8AP1cMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GQAAAERlbGV0ZU1vbml0b3JlZEl0ZW1zQ291bnQBAFgMAC8AP1gMAAABAGcD/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFwAAAENyZWF0ZVN1YnNjcmlwdGlvbkNvdW50AQBZDAAvAD9ZDAAAAQBnA/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABcAAABNb2RpZnlTdWJzY3JpcHRpb25Db3VudAEAWgwALwA/WgwAAAEAZwP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAWAAAAU2V0UHVibGlzaGluZ01vZGVDb3VudAEAWwwALwA/WwwA" +
           "AAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAUHVibGlzaENvdW50AQBcDAAvAD9cDAAAAQBn" +
           "A/////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABSZXB1Ymxpc2hDb3VudAEAXQwALwA/XQwAAAEAZwP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAaAAAAVHJhbnNmZXJTdWJzY3JpcHRpb25zQ291bnQBAF4MAC8A" +
           "P14MAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAERlbGV0ZVN1YnNjcmlwdGlvbnNDb3Vu" +
           "dAEAXwwALwA/XwwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQWRkTm9kZXNDb3VudAEA" +
           "YAwALwA/YAwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQWRkUmVmZXJlbmNlc0NvdW50" +
           "AQBhDAAvAD9hDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEZWxldGVOb2Rlc0NvdW50" +
           "AQBiDAAvAD9iDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABUAAABEZWxldGVSZWZlcmVuY2Vz" +
           "Q291bnQBAGMMAC8AP2MMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEJyb3dzZUNvdW50" +
           "AQBkDAAvAD9kDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABCcm93c2VOZXh0Q291bnQB" +
           "AGUMAC8AP2UMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAIgAAAFRyYW5zbGF0ZUJyb3dzZVBh" +
           "dGhzVG9Ob2RlSWRzQ291bnQBAGYMAC8AP2YMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAA" +
           "AFF1ZXJ5Rmlyc3RDb3VudAEAZwwALwA/ZwwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "UXVlcnlOZXh0Q291bnQBAGgMAC8AP2gMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAFJl" +
           "Z2lzdGVyTm9kZXNDb3VudAEAaQwALwA/aQwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAUAAAA" +
           "VW5yZWdpc3Rlck5vZGVzQ291bnQBAGoMAC8AP2oMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GgAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzAQDvBwAvAQDECO8HAAABAGQD/////wEB/////wkA" +
           "AAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAawwALwA/awwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFQAAAENsaWVudFVzZXJJZE9mU2Vzc2lvbgEAbAwALwA/bAwAAAAM/////wEB/////wAAAAAXYIkK" +
           "AgAAAAAAEwAAAENsaWVudFVzZXJJZEhpc3RvcnkBAG0MAC8AP20MAAAADAEAAAABAAAAAAAAAAEB////" +
           "/wAAAAAVYIkKAgAAAAAAFwAAAEF1dGhlbnRpY2F0aW9uTWVjaGFuaXNtAQBuDAAvAD9uDAAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAARW5jb2RpbmcBAG8MAC8AP28MAAAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABEAAABUcmFuc3BvcnRQcm90b2NvbAEAcAwALwA/cAwAAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEAcQwALwA/cQwAAAEALgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAARAAAAU2VjdXJpdHlQb2xpY3lVcmkBAHIMAC8AP3IMAAAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABEAAABDbGllbnRDZXJ0aWZpY2F0ZQEAcwwALwA/cwwAAAAP/////wEB/////wAAAAAXYIkKAgAA" +
           "AAAAHAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXkBAPAHAC8BAHsI8AcAAAEAagMBAAAAAQAA" +
           "AAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsVariableState SessionDiagnostics
        {
            get
            {
                return m_sessionDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnostics = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsState SessionSecurityDiagnostics
        {
            get
            {
                return m_sessionSecurityDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnostics = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnostics != null)
            {
                children.Add(m_sessionDiagnostics);
            }

            if (m_sessionSecurityDiagnostics != null)
            {
                children.Add(m_sessionSecurityDiagnostics);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnostics = new SessionDiagnosticsVariableState(this);
                            }
                            else
                            {
                                SessionDiagnostics = (SessionDiagnosticsVariableState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnostics = new SessionSecurityDiagnosticsState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnostics = (SessionSecurityDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsVariableState m_sessionDiagnostics;
        private SessionSecurityDiagnosticsState m_sessionSecurityDiagnostics;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region VendorServerInfoState Class
    #if (!OPCUA_EXCLUDE_VendorServerInfoState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class VendorServerInfoState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public VendorServerInfoState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.VendorServerInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFZlbmRvclNlcnZlckluZm9UeXBlSW5zdGFuY2UBAPEHAQDxB/EH" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerRedundancyState Class
    #if (!OPCUA_EXCLUDE_ServerRedundancyState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerRedundancyState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ServerRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (RedundantServerArray != null)
            {
                RedundantServerArray.Initialize(context, RedundantServerArray_InitializationString);
            }
        }

        #region Initialization String
        private const string RedundantServerArray_InitializationString =
           "//////////8XYIkKAgAAAAAAFAAAAFJlZHVuZGFudFNlcnZlckFycmF5AQCafgAuAESafgAAAQBVAwEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFNlcnZlclJlZHVuZGFuY3lUeXBlSW5zdGFuY2UBAPIHAQDyB/IH" +
           "AAD/////AgAAABVgiQoCAAAAAAARAAAAUmVkdW5kYW5jeVN1cHBvcnQBAPMHAC4ARPMHAAABAFMD////" +
           "/wEB/////wAAAAAXYIkKAgAAAAAAFAAAAFJlZHVuZGFudFNlcnZlckFycmF5AQCafgAuAESafgAAAQBV" +
           "AwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<RedundancySupport> RedundancySupport
        {
            get
            {
                return m_redundancySupport;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundancySupport, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundancySupport = value;
            }
        }

        /// <remarks />
        public PropertyState<RedundantServerDataType[]> RedundantServerArray
        {
            get
            {
                return m_redundantServerArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundantServerArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundantServerArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_redundancySupport != null)
            {
                children.Add(m_redundancySupport);
            }

            if (m_redundantServerArray != null)
            {
                children.Add(m_redundantServerArray);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RedundancySupport:
                {
                    if (createOrReplace)
                    {
                        if (RedundancySupport == null)
                        {
                            if (replacement == null)
                            {
                                RedundancySupport = new PropertyState<RedundancySupport>(this);
                            }
                            else
                            {
                                RedundancySupport = (PropertyState<RedundancySupport>)replacement;
                            }
                        }
                    }

                    instance = RedundancySupport;
                    break;
                }

                case Opc.Ua.BrowseNames.RedundantServerArray:
                {
                    if (createOrReplace)
                    {
                        if (RedundantServerArray == null)
                        {
                            if (replacement == null)
                            {
                                RedundantServerArray = new PropertyState<RedundantServerDataType[]>(this);
                            }
                            else
                            {
                                RedundantServerArray = (PropertyState<RedundantServerDataType[]>)replacement;
                            }
                        }
                    }

                    instance = RedundantServerArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<RedundancySupport> m_redundancySupport;
        private PropertyState<RedundantServerDataType[]> m_redundantServerArray;
        #endregion
    }
    #endif
    #endregion

    #region TransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_TransparentRedundancyState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <remarks />
        public TransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA9AcB" +
           "APQH9AcAAP////8DAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAIAAEFCDwAALgBEQUIP" +
           "AAEAUwP/////AQH/////AAAAABdgiQoCAAAAAAAUAAAAUmVkdW5kYW50U2VydmVyQXJyYXkBAPYHAC4A" +
           "RPYHAAABAFUDAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAPAAAAQ3VycmVudFNlcnZlcklk" +
           "AQD1BwAuAET1BwAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> CurrentServerId
        {
            get
            {
                return m_currentServerId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentServerId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentServerId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentServerId != null)
            {
                children.Add(m_currentServerId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentServerId:
                {
                    if (createOrReplace)
                    {
                        if (CurrentServerId == null)
                        {
                            if (replacement == null)
                            {
                                CurrentServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                CurrentServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CurrentServerId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_currentServerId;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentRedundancyState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <remarks />
        public NonTransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAE5vblRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA" +
           "9wcBAPcH9wcAAP////8CAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAIAAEJCDwAALgBE" +
           "QkIPAAEAUwP/////AQH/////AAAAABdgiQoCAAAAAAAOAAAAU2VydmVyVXJpQXJyYXkBAPgHAC4ARPgH" +
           "AAAADAEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerUriArray
        {
            get
            {
                return m_serverUriArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUriArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUriArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverUriArray != null)
            {
                children.Add(m_serverUriArray);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerUriArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerUriArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerUriArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerUriArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerUriArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverUriArray;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentNetworkRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentNetworkRedundancyState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentNetworkRedundancyState : NonTransparentRedundancyState
    {
        #region Constructors
        /// <remarks />
        public NonTransparentNetworkRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentNetworkRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAE5vblRyYW5zcGFyZW50TmV0d29ya1JlZHVuZGFuY3lUeXBlSW5z" +
           "dGFuY2UBAKkuAQCpLqkuAAD/////AwAAABVgiQoCAAAAAAARAAAAUmVkdW5kYW5jeVN1cHBvcnQCAABE" +
           "Qg8AAC4ARERCDwABAFMD/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAFNlcnZlclVyaUFycmF5AgAA" +
           "RkIPAAAuAERGQg8AAAwBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABMAAABTZXJ2ZXJOZXR3" +
           "b3JrR3JvdXBzAQCsLgAuAESsLgAAAQCoLgEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NetworkGroupDataType[]> ServerNetworkGroups
        {
            get
            {
                return m_serverNetworkGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverNetworkGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverNetworkGroups = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverNetworkGroups != null)
            {
                children.Add(m_serverNetworkGroups);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerNetworkGroups:
                {
                    if (createOrReplace)
                    {
                        if (ServerNetworkGroups == null)
                        {
                            if (replacement == null)
                            {
                                ServerNetworkGroups = new PropertyState<NetworkGroupDataType[]>(this);
                            }
                            else
                            {
                                ServerNetworkGroups = (PropertyState<NetworkGroupDataType[]>)replacement;
                            }
                        }
                    }

                    instance = ServerNetworkGroups;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NetworkGroupDataType[]> m_serverNetworkGroups;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentBackupRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentBackupRedundancyState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentBackupRedundancyState : NonTransparentRedundancyState
    {
        #region Constructors
        /// <remarks />
        public NonTransparentBackupRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentBackupRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAE5vblRyYW5zcGFyZW50QmFja3VwUmVkdW5kYW5jeVR5cGVJbnN0" +
           "YW5jZQEAm34BAJt+m34AAP////8FAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAIAAEdC" +
           "DwAALgBER0IPAAEAUwP/////AQH/////AAAAABdgiQoCAAAAAAAUAAAAUmVkdW5kYW50U2VydmVyQXJy" +
           "YXkBAJ1+AC4ARJ1+AAABAFUDAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAOAAAAU2VydmVy" +
           "VXJpQXJyYXkCAABIQg8AAC4AREhCDwAADAEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AE1vZGUBAJ9+AC4ARJ9+AAABAKF+/////wEB/////wAAAAAEYYIKBAAAAAAACAAAAEZhaWxvdmVyAQCg" +
           "fgAvAQCgfqB+AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<RedundantServerMode> Mode
        {
            get
            {
                return m_mode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mode = value;
            }
        }

        /// <remarks />
        public MethodState Failover
        {
            get
            {
                return m_failoverMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_failoverMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_failoverMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_mode != null)
            {
                children.Add(m_mode);
            }

            if (m_failoverMethod != null)
            {
                children.Add(m_failoverMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Mode:
                {
                    if (createOrReplace)
                    {
                        if (Mode == null)
                        {
                            if (replacement == null)
                            {
                                Mode = new PropertyState<RedundantServerMode>(this);
                            }
                            else
                            {
                                Mode = (PropertyState<RedundantServerMode>)replacement;
                            }
                        }
                    }

                    instance = Mode;
                    break;
                }

                case Opc.Ua.BrowseNames.Failover:
                {
                    if (createOrReplace)
                    {
                        if (Failover == null)
                        {
                            if (replacement == null)
                            {
                                Failover = new MethodState(this);
                            }
                            else
                            {
                                Failover = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Failover;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<RedundantServerMode> m_mode;
        private MethodState m_failoverMethod;
        #endregion
    }
    #endif
    #endregion

    #region OperationLimitsState Class
    #if (!OPCUA_EXCLUDE_OperationLimitsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OperationLimitsState : FolderState
    {
        #region Constructors
        /// <remarks />
        public OperationLimitsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OperationLimitsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxNodesPerRead != null)
            {
                MaxNodesPerRead.Initialize(context, MaxNodesPerRead_InitializationString);
            }

            if (MaxNodesPerHistoryReadData != null)
            {
                MaxNodesPerHistoryReadData.Initialize(context, MaxNodesPerHistoryReadData_InitializationString);
            }

            if (MaxNodesPerHistoryReadEvents != null)
            {
                MaxNodesPerHistoryReadEvents.Initialize(context, MaxNodesPerHistoryReadEvents_InitializationString);
            }

            if (MaxNodesPerWrite != null)
            {
                MaxNodesPerWrite.Initialize(context, MaxNodesPerWrite_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateData != null)
            {
                MaxNodesPerHistoryUpdateData.Initialize(context, MaxNodesPerHistoryUpdateData_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateEvents != null)
            {
                MaxNodesPerHistoryUpdateEvents.Initialize(context, MaxNodesPerHistoryUpdateEvents_InitializationString);
            }

            if (MaxNodesPerMethodCall != null)
            {
                MaxNodesPerMethodCall.Initialize(context, MaxNodesPerMethodCall_InitializationString);
            }

            if (MaxNodesPerBrowse != null)
            {
                MaxNodesPerBrowse.Initialize(context, MaxNodesPerBrowse_InitializationString);
            }

            if (MaxNodesPerRegisterNodes != null)
            {
                MaxNodesPerRegisterNodes.Initialize(context, MaxNodesPerRegisterNodes_InitializationString);
            }

            if (MaxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                MaxNodesPerTranslateBrowsePathsToNodeIds.Initialize(context, MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString);
            }

            if (MaxNodesPerNodeManagement != null)
            {
                MaxNodesPerNodeManagement.Initialize(context, MaxNodesPerNodeManagement_InitializationString);
            }

            if (MaxMonitoredItemsPerCall != null)
            {
                MaxMonitoredItemsPerCall.Initialize(context, MaxMonitoredItemsPerCall_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxNodesPerRead_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heE5vZGVzUGVyUmVhZAEALS0ALgBELS0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxNodesPerHistoryReadData_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWREYXRhAQCBLwAuAESBLwAA" +
           "AAf/////AQH/////AAAAAA==";

        private const string MaxNodesPerHistoryReadEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWRFdmVudHMBAIIvAC4ARIIv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerWrite_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAE1heE5vZGVzUGVyV3JpdGUBAC8tAC4ARC8tAAAAB/////8BAf//" +
           "//8AAAAA";

        private const string MaxNodesPerHistoryUpdateData_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZURhdGEBAIMvAC4ARIMv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerHistoryUpdateEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHgAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZUV2ZW50cwEAhC8ALgBE" +
           "hC8AAAAH/////wEB/////wAAAAA=";

        private const string MaxNodesPerMethodCall_InitializationString =
           "//////////8VYIkKAgAAAAAAFQAAAE1heE5vZGVzUGVyTWV0aG9kQ2FsbAEAMS0ALgBEMS0AAAAH////" +
           "/wEB/////wAAAAA=";

        private const string MaxNodesPerBrowse_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE1heE5vZGVzUGVyQnJvd3NlAQAyLQAuAEQyLQAAAAf/////AQH/" +
           "////AAAAAA==";

        private const string MaxNodesPerRegisterNodes_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE5vZGVzUGVyUmVnaXN0ZXJOb2RlcwEAMy0ALgBEMy0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString =
           "//////////8VYIkKAgAAAAAAKAAAAE1heE5vZGVzUGVyVHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJ" +
           "ZHMBADQtAC4ARDQtAAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerNodeManagement_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAE1heE5vZGVzUGVyTm9kZU1hbmFnZW1lbnQBADUtAC4ARDUtAAAA" +
           "B/////8BAf////8AAAAA";

        private const string MaxMonitoredItemsPerCall_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE1vbml0b3JlZEl0ZW1zUGVyQ2FsbAEANi0ALgBENi0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAE9wZXJhdGlvbkxpbWl0c1R5cGVJbnN0YW5jZQEALC0BACwtLC0A" +
           "AP////8MAAAAFWCJCgIAAAAAAA8AAABNYXhOb2Rlc1BlclJlYWQBAC0tAC4ARC0tAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABoAAABNYXhOb2Rlc1Blckhpc3RvcnlSZWFkRGF0YQEAgS8ALgBEgS8AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWRFdmVudHMBAIIv" +
           "AC4ARIIvAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABNYXhOb2Rlc1BlcldyaXRlAQAvLQAu" +
           "AEQvLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAATWF4Tm9kZXNQZXJIaXN0b3J5VXBkYXRl" +
           "RGF0YQEAgy8ALgBEgy8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHgAAAE1heE5vZGVzUGVySGlz" +
           "dG9yeVVwZGF0ZUV2ZW50cwEAhC8ALgBEhC8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAE1h" +
           "eE5vZGVzUGVyTWV0aG9kQ2FsbAEAMS0ALgBEMS0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAA" +
           "AE1heE5vZGVzUGVyQnJvd3NlAQAyLQAuAEQyLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAA" +
           "TWF4Tm9kZXNQZXJSZWdpc3Rlck5vZGVzAQAzLQAuAEQzLQAAAAf/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAoAAAATWF4Tm9kZXNQZXJUcmFuc2xhdGVCcm93c2VQYXRoc1RvTm9kZUlkcwEANC0ALgBENC0AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE1heE5vZGVzUGVyTm9kZU1hbmFnZW1lbnQBADUtAC4A" +
           "RDUtAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABNYXhNb25pdG9yZWRJdGVtc1BlckNhbGwB" +
           "ADYtAC4ARDYtAAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> MaxNodesPerRead
        {
            get
            {
                return m_maxNodesPerRead;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRead, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRead = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadData
        {
            get
            {
                return m_maxNodesPerHistoryReadData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadEvents
        {
            get
            {
                return m_maxNodesPerHistoryReadEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerWrite
        {
            get
            {
                return m_maxNodesPerWrite;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerWrite, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerWrite = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateData
        {
            get
            {
                return m_maxNodesPerHistoryUpdateData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateEvents
        {
            get
            {
                return m_maxNodesPerHistoryUpdateEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerMethodCall
        {
            get
            {
                return m_maxNodesPerMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerBrowse
        {
            get
            {
                return m_maxNodesPerBrowse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerBrowse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerBrowse = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerRegisterNodes
        {
            get
            {
                return m_maxNodesPerRegisterNodes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRegisterNodes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRegisterNodes = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerTranslateBrowsePathsToNodeIds
        {
            get
            {
                return m_maxNodesPerTranslateBrowsePathsToNodeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerTranslateBrowsePathsToNodeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerTranslateBrowsePathsToNodeIds = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerNodeManagement
        {
            get
            {
                return m_maxNodesPerNodeManagement;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerNodeManagement, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerNodeManagement = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItemsPerCall
        {
            get
            {
                return m_maxMonitoredItemsPerCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItemsPerCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItemsPerCall = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_maxNodesPerRead != null)
            {
                children.Add(m_maxNodesPerRead);
            }

            if (m_maxNodesPerHistoryReadData != null)
            {
                children.Add(m_maxNodesPerHistoryReadData);
            }

            if (m_maxNodesPerHistoryReadEvents != null)
            {
                children.Add(m_maxNodesPerHistoryReadEvents);
            }

            if (m_maxNodesPerWrite != null)
            {
                children.Add(m_maxNodesPerWrite);
            }

            if (m_maxNodesPerHistoryUpdateData != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateData);
            }

            if (m_maxNodesPerHistoryUpdateEvents != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateEvents);
            }

            if (m_maxNodesPerMethodCall != null)
            {
                children.Add(m_maxNodesPerMethodCall);
            }

            if (m_maxNodesPerBrowse != null)
            {
                children.Add(m_maxNodesPerBrowse);
            }

            if (m_maxNodesPerRegisterNodes != null)
            {
                children.Add(m_maxNodesPerRegisterNodes);
            }

            if (m_maxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                children.Add(m_maxNodesPerTranslateBrowsePathsToNodeIds);
            }

            if (m_maxNodesPerNodeManagement != null)
            {
                children.Add(m_maxNodesPerNodeManagement);
            }

            if (m_maxMonitoredItemsPerCall != null)
            {
                children.Add(m_maxMonitoredItemsPerCall);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MaxNodesPerRead:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRead == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRead = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRead = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRead;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerWrite:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerWrite == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerWrite = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerWrite = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerWrite;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerMethodCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerMethodCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerBrowse:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerBrowse == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerBrowse = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerBrowse = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerBrowse;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerRegisterNodes:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRegisterNodes == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRegisterNodes = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRegisterNodes = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRegisterNodes;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerTranslateBrowsePathsToNodeIds:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerTranslateBrowsePathsToNodeIds == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerTranslateBrowsePathsToNodeIds;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerNodeManagement:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerNodeManagement == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerNodeManagement = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerNodeManagement = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerNodeManagement;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItemsPerCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItemsPerCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItemsPerCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItemsPerCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItemsPerCall;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_maxNodesPerRead;
        private PropertyState<uint> m_maxNodesPerHistoryReadData;
        private PropertyState<uint> m_maxNodesPerHistoryReadEvents;
        private PropertyState<uint> m_maxNodesPerWrite;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateData;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateEvents;
        private PropertyState<uint> m_maxNodesPerMethodCall;
        private PropertyState<uint> m_maxNodesPerBrowse;
        private PropertyState<uint> m_maxNodesPerRegisterNodes;
        private PropertyState<uint> m_maxNodesPerTranslateBrowsePathsToNodeIds;
        private PropertyState<uint> m_maxNodesPerNodeManagement;
        private PropertyState<uint> m_maxMonitoredItemsPerCall;
        #endregion
    }
    #endif
    #endregion

    #region FileState Class
    #if (!OPCUA_EXCLUDE_FileState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public FileState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MimeType != null)
            {
                MimeType.Initialize(context, MimeType_InitializationString);
            }

            if (MaxByteStringLength != null)
            {
                MaxByteStringLength.Initialize(context, MaxByteStringLength_InitializationString);
            }

            if (LastModifiedTime != null)
            {
                LastModifiedTime.Initialize(context, LastModifiedTime_InitializationString);
            }
        }

        #region Initialization String
        private const string MimeType_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAE1pbWVUeXBlAQAdNAAuAEQdNAAAAAz/////AQH/////AAAAAA==";

        private const string MaxByteStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAE1heEJ5dGVTdHJpbmdMZW5ndGgBALReAC4ARLReAAAAB/////8B" +
           "Af////8AAAAA";

        private const string LastModifiedTime_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAExhc3RNb2RpZmllZFRpbWUBAHBiAC4ARHBiAAAADf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEAAAAEZpbGVUeXBlSW5zdGFuY2UBADctAQA3LTctAAD/////DQAAABVg" +
           "iQoCAAAAAAAEAAAAU2l6ZQEAOC0ALgBEOC0AAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdy" +
           "aXRhYmxlAQCOMQAuAESOMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxl" +
           "AQCPMQAuAESPMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQA7LQAuAEQ7" +
           "LQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWltZVR5cGUBAB00AC4ARB00AAAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABMAAABNYXhCeXRlU3RyaW5nTGVuZ3RoAQC0XgAuAES0XgAAAAf/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAATGFzdE1vZGlmaWVkVGltZQEAcGIALgBEcGIAAAAN/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BADwtAC8BADwtPC0AAAEB/////wIAAAAXYKkKAgAAAAAA" +
           "DgAAAElucHV0QXJndW1lbnRzAQA9LQAuAEQ9LQAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA" +
           "Pi0ALgBEPi0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAPy0ALwEAPy0/LQAAAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEAtAC4AREAtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxl" +
           "SGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVh" +
           "ZAEAQS0ALwEAQS1BLQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEItAC4A" +
           "REItAACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVu" +
           "Z3RoAAb/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0" +
           "QXJndW1lbnRzAQBDLQAuAERDLQAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEA" +
           "AAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQBELQAvAQBELUQtAAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEARS0ALgBERS0AAJYCAAAAAQAqAQEZAAAACgAA" +
           "AEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEA" +
           "AAACAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEYtAC8BAEYtRi0AAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBHLQAuAERHLQAAlgEAAAABACoBARkAAAAK" +
           "AAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEASC0ALgBESC0AAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/" +
           "////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRpb24B" +
           "AEktAC8BAEktSS0AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBKLQAuAERK" +
           "LQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBvc2l0" +
           "aW9uAAn/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ulong> Size
        {
            get
            {
                return m_size;
            }

            set
            {
                if (!Object.ReferenceEquals(m_size, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_size = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Writable
        {
            get
            {
                return m_writable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UserWritable
        {
            get
            {
                return m_userWritable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userWritable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userWritable = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> OpenCount
        {
            get
            {
                return m_openCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openCount = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MimeType
        {
            get
            {
                return m_mimeType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mimeType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mimeType = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxByteStringLength
        {
            get
            {
                return m_maxByteStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxByteStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxByteStringLength = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastModifiedTime
        {
            get
            {
                return m_lastModifiedTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastModifiedTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastModifiedTime = value;
            }
        }

        /// <remarks />
        public OpenMethodState Open
        {
            get
            {
                return m_openMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openMethod = value;
            }
        }

        /// <remarks />
        public CloseMethodState Close
        {
            get
            {
                return m_closeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeMethod = value;
            }
        }

        /// <remarks />
        public ReadMethodState Read
        {
            get
            {
                return m_readMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readMethod = value;
            }
        }

        /// <remarks />
        public WriteMethodState Write
        {
            get
            {
                return m_writeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeMethod = value;
            }
        }

        /// <remarks />
        public GetPositionMethodState GetPosition
        {
            get
            {
                return m_getPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getPositionMethod = value;
            }
        }

        /// <remarks />
        public SetPositionMethodState SetPosition
        {
            get
            {
                return m_setPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPositionMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_size != null)
            {
                children.Add(m_size);
            }

            if (m_writable != null)
            {
                children.Add(m_writable);
            }

            if (m_userWritable != null)
            {
                children.Add(m_userWritable);
            }

            if (m_openCount != null)
            {
                children.Add(m_openCount);
            }

            if (m_mimeType != null)
            {
                children.Add(m_mimeType);
            }

            if (m_maxByteStringLength != null)
            {
                children.Add(m_maxByteStringLength);
            }

            if (m_lastModifiedTime != null)
            {
                children.Add(m_lastModifiedTime);
            }

            if (m_openMethod != null)
            {
                children.Add(m_openMethod);
            }

            if (m_closeMethod != null)
            {
                children.Add(m_closeMethod);
            }

            if (m_readMethod != null)
            {
                children.Add(m_readMethod);
            }

            if (m_writeMethod != null)
            {
                children.Add(m_writeMethod);
            }

            if (m_getPositionMethod != null)
            {
                children.Add(m_getPositionMethod);
            }

            if (m_setPositionMethod != null)
            {
                children.Add(m_setPositionMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Size:
                {
                    if (createOrReplace)
                    {
                        if (Size == null)
                        {
                            if (replacement == null)
                            {
                                Size = new PropertyState<ulong>(this);
                            }
                            else
                            {
                                Size = (PropertyState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Size;
                    break;
                }

                case Opc.Ua.BrowseNames.Writable:
                {
                    if (createOrReplace)
                    {
                        if (Writable == null)
                        {
                            if (replacement == null)
                            {
                                Writable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Writable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Writable;
                    break;
                }

                case Opc.Ua.BrowseNames.UserWritable:
                {
                    if (createOrReplace)
                    {
                        if (UserWritable == null)
                        {
                            if (replacement == null)
                            {
                                UserWritable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UserWritable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UserWritable;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenCount:
                {
                    if (createOrReplace)
                    {
                        if (OpenCount == null)
                        {
                            if (replacement == null)
                            {
                                OpenCount = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                OpenCount = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = OpenCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MimeType:
                {
                    if (createOrReplace)
                    {
                        if (MimeType == null)
                        {
                            if (replacement == null)
                            {
                                MimeType = new PropertyState<string>(this);
                            }
                            else
                            {
                                MimeType = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MimeType;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxByteStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxByteStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxByteStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxByteStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxByteStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.LastModifiedTime:
                {
                    if (createOrReplace)
                    {
                        if (LastModifiedTime == null)
                        {
                            if (replacement == null)
                            {
                                LastModifiedTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastModifiedTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastModifiedTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Open:
                {
                    if (createOrReplace)
                    {
                        if (Open == null)
                        {
                            if (replacement == null)
                            {
                                Open = new OpenMethodState(this);
                            }
                            else
                            {
                                Open = (OpenMethodState)replacement;
                            }
                        }
                    }

                    instance = Open;
                    break;
                }

                case Opc.Ua.BrowseNames.Close:
                {
                    if (createOrReplace)
                    {
                        if (Close == null)
                        {
                            if (replacement == null)
                            {
                                Close = new CloseMethodState(this);
                            }
                            else
                            {
                                Close = (CloseMethodState)replacement;
                            }
                        }
                    }

                    instance = Close;
                    break;
                }

                case Opc.Ua.BrowseNames.Read:
                {
                    if (createOrReplace)
                    {
                        if (Read == null)
                        {
                            if (replacement == null)
                            {
                                Read = new ReadMethodState(this);
                            }
                            else
                            {
                                Read = (ReadMethodState)replacement;
                            }
                        }
                    }

                    instance = Read;
                    break;
                }

                case Opc.Ua.BrowseNames.Write:
                {
                    if (createOrReplace)
                    {
                        if (Write == null)
                        {
                            if (replacement == null)
                            {
                                Write = new WriteMethodState(this);
                            }
                            else
                            {
                                Write = (WriteMethodState)replacement;
                            }
                        }
                    }

                    instance = Write;
                    break;
                }

                case Opc.Ua.BrowseNames.GetPosition:
                {
                    if (createOrReplace)
                    {
                        if (GetPosition == null)
                        {
                            if (replacement == null)
                            {
                                GetPosition = new GetPositionMethodState(this);
                            }
                            else
                            {
                                GetPosition = (GetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = GetPosition;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPosition:
                {
                    if (createOrReplace)
                    {
                        if (SetPosition == null)
                        {
                            if (replacement == null)
                            {
                                SetPosition = new SetPositionMethodState(this);
                            }
                            else
                            {
                                SetPosition = (SetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = SetPosition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ulong> m_size;
        private PropertyState<bool> m_writable;
        private PropertyState<bool> m_userWritable;
        private PropertyState<ushort> m_openCount;
        private PropertyState<string> m_mimeType;
        private PropertyState<uint> m_maxByteStringLength;
        private PropertyState<DateTime> m_lastModifiedTime;
        private OpenMethodState m_openMethod;
        private CloseMethodState m_closeMethod;
        private ReadMethodState m_readMethod;
        private WriteMethodState m_writeMethod;
        private GetPositionMethodState m_getPositionMethod;
        private SetPositionMethodState m_setPositionMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddressSpaceFileState Class
    #if (!OPCUA_EXCLUDE_AddressSpaceFileState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddressSpaceFileState : FileState
    {
        #region Constructors
        /// <remarks />
        public AddressSpaceFileState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AddressSpaceFileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExportNamespace != null)
            {
                ExportNamespace.Initialize(context, ExportNamespace_InitializationString);
            }
        }

        #region Initialization String
        private const string ExportNamespace_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEV4cG9ydE5hbWVzcGFjZQEAXy0ALwEAXy1fLQAAAQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEFkZHJlc3NTcGFjZUZpbGVUeXBlSW5zdGFuY2UBAEstAQBLLUst" +
           "AAD/////CwAAABVgiQoCAAAAAAAEAAAAU2l6ZQIAAElCDwAALgBESUIPAAAJ/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFdyaXRhYmxlAgAASkIPAAAuAERKQg8AAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAMAAAAVXNlcldyaXRhYmxlAgAAS0IPAAAuAERLQg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJ" +
           "AAAAT3BlbkNvdW50AgAATEIPAAAuAERMQg8AAAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3Bl" +
           "bgIAAFBCDwAALwEAPC1QQg8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABR" +
           "Qg8AAC4ARFFCDwCWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAUkIPAAAuAERSQg8AlgEAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAABQAAAENsb3NlAgAAU0IPAAAvAQA/LVNCDwABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwIAAFRCDwAALgBEVEIPAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB///" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAgAAVUIPAAAv" +
           "AQBBLVVCDwABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAFZCDwAALgBEVkIP" +
           "AJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgA" +
           "Bv////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1" +
           "bWVudHMCAABXQg8AAC4ARFdCDwCWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAA" +
           "AAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUCAABYQg8AAC8BAEQtWEIPAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAWUIPAAAuAERZQg8AlgIAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgIAAFpCDwAALwEARi1a" +
           "Qg8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABbQg8AAC4ARFtCDwCWAQAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "ABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAXEIPAAAuAERcQg8AlgEAAAABACoBARcAAAAI" +
           "AAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAsA" +
           "AABTZXRQb3NpdGlvbgIAAF1CDwAALwEASS1dQg8AAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMCAABeQg8AAC4ARF5CDwCWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAA" +
           "AAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA" +
           "BGGCCgQAAAAAAA8AAABFeHBvcnROYW1lc3BhY2UBAF8tAC8BAF8tXy0AAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public MethodState ExportNamespace
        {
            get
            {
                return m_exportNamespaceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exportNamespaceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exportNamespaceMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_exportNamespaceMethod != null)
            {
                children.Add(m_exportNamespaceMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExportNamespace:
                {
                    if (createOrReplace)
                    {
                        if (ExportNamespace == null)
                        {
                            if (replacement == null)
                            {
                                ExportNamespace = new MethodState(this);
                            }
                            else
                            {
                                ExportNamespace = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ExportNamespace;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private MethodState m_exportNamespaceMethod;
        #endregion
    }
    #endif
    #endregion

    #region NamespaceMetadataState Class
    #if (!OPCUA_EXCLUDE_NamespaceMetadataState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespaceMetadataState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public NamespaceMetadataState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespaceMetadataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (NamespaceFile != null)
            {
                NamespaceFile.Initialize(context, NamespaceFile_InitializationString);
            }

            if (DefaultRolePermissions != null)
            {
                DefaultRolePermissions.Initialize(context, DefaultRolePermissions_InitializationString);
            }

            if (DefaultUserRolePermissions != null)
            {
                DefaultUserRolePermissions.Initialize(context, DefaultUserRolePermissions_InitializationString);
            }

            if (DefaultAccessRestrictions != null)
            {
                DefaultAccessRestrictions.Initialize(context, DefaultAccessRestrictions_InitializationString);
            }

            if (ConfigurationVersion != null)
            {
                ConfigurationVersion.Initialize(context, ConfigurationVersion_InitializationString);
            }

            if (ModelVersion != null)
            {
                ModelVersion.Initialize(context, ModelVersion_InitializationString);
            }
        }

        #region Initialization String
        private const string NamespaceFile_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAE5hbWVzcGFjZUZpbGUBAGgtAC8BAEstaC0AAP////8KAAAAFWCJ" +
           "CgIAAAAAAAQAAABTaXplAQBpLQAuAERpLQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3Jp" +
           "dGFibGUBAJIxAC4ARJIxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUB" +
           "AJMxAC4ARJMxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAGwtAC4ARGwt" +
           "AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBtLQAvAQA8LW0tAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbi0ALgBEbi0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAG8tAC4ARG8tAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAHAtAC8BAD8tcC0AAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBxLQAuAERxLQAAlgEAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAABAAAAFJlYWQBAHItAC8BAEEtci0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBzLQAuAERzLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEV" +
           "AAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEAdC0ALgBEdC0AAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEAdS0ALwEARC11" +
           "LQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHYtAC4ARHYtAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQB3LQAvAQBG" +
           "LXctAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAeC0ALgBEeC0AAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAHktAC4ARHktAACWAQAAAAEAKgEBFwAAAAgAAABQ" +
           "b3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNl" +
           "dFBvc2l0aW9uAQB6LQAvAQBJLXotAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAey0ALgBEey0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAA" +
           "AAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string DefaultRolePermissions_InitializationString =
           "//////////8XYIkKAgAAAAAAFgAAAERlZmF1bHRSb2xlUGVybWlzc2lvbnMBAAk/AC4ARAk/AAAAYAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";

        private const string DefaultUserRolePermissions_InitializationString =
           "//////////8XYIkKAgAAAAAAGgAAAERlZmF1bHRVc2VyUm9sZVBlcm1pc3Npb25zAQAKPwAuAEQKPwAA" +
           "AGABAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string DefaultAccessRestrictions_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAERlZmF1bHRBY2Nlc3NSZXN0cmljdGlvbnMBAAs/AC4ARAs/AAAA" +
           "X/////8BAf////8AAAAA";

        private const string ConfigurationVersion_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQCzYgAuAESzYgAAAQAGUv//" +
           "//8BAf////8AAAAA";

        private const string ModelVersion_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAE1vZGVsVmVyc2lvbgEAo34ALgBEo34AAAEAx17/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAE5hbWVzcGFjZU1ldGFkYXRhVHlwZUluc3RhbmNlAQBgLQEAYC1g" +
           "LQAA/////w0AAAAVYIkKAgAAAAAADAAAAE5hbWVzcGFjZVVyaQEAYS0ALgBEYS0AAAAM/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEAAAAE5hbWVzcGFjZVZlcnNpb24BAGItAC4ARGItAAAADP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABgAAABOYW1lc3BhY2VQdWJsaWNhdGlvbkRhdGUBAGMtAC4ARGMtAAAADf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABEAAABJc05hbWVzcGFjZVN1YnNldAEAZC0ALgBEZC0AAAAB/////wEB" +
           "/////wAAAAAXYIkKAgAAAAAAEQAAAFN0YXRpY05vZGVJZFR5cGVzAQBlLQAuAERlLQAAAQAAAQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAGAAAAFN0YXRpY051bWVyaWNOb2RlSWRSYW5nZQEAZi0A" +
           "LgBEZi0AAAEAIwEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABkAAABTdGF0aWNTdHJpbmdO" +
           "b2RlSWRQYXR0ZXJuAQBnLQAuAERnLQAAAAz/////AQH/////AAAAAARggAoBAAAAAAANAAAATmFtZXNw" +
           "YWNlRmlsZQEAaC0ALwEASy1oLQAA/////woAAAAVYIkKAgAAAAAABAAAAFNpemUBAGktAC4ARGktAAAA" +
           "Cf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEAkjEALgBEkjEAAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAkzEALgBEkzEAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAE9wZW5Db3VudAEAbC0ALgBEbC0AAAAF/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "BAAAAE9wZW4BAG0tAC8BADwtbS0AAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQBuLQAuAERuLQAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAAAAAAAQAoAQEAAAABAAAAAQAA" +
           "AAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAby0ALgBEby0AAJYBAAAAAQAq" +
           "AQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGC" +
           "CgQAAAAAAAUAAABDbG9zZQEAcC0ALwEAPy1wLQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBAHEtAC4ARHEtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEAci0ALwEAQS1yLQAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHMtAC4ARHMtAACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQB0LQAuAER0" +
           "LQAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAFdyaXRlAQB1LQAvAQBELXUtAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAdi0ALgBEdi0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAHctAC8BAEYtdy0AAAEB/////wIAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQB4LQAuAER4LQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwEAeS0ALgBEeS0AAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEA" +
           "AAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRpb24BAHotAC8BAEktei0AAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQB7LQAuAER7LQAAlgIAAAABACoBARkAAAAK" +
           "AAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgiQoCAAAAAAAWAAAARGVmYXVsdFJvbGVQZXJtaXNzaW9ucwEA" +
           "CT8ALgBECT8AAABgAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAaAAAARGVmYXVsdFVzZXJS" +
           "b2xlUGVybWlzc2lvbnMBAAo/AC4ARAo/AAAAYAEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "GQAAAERlZmF1bHRBY2Nlc3NSZXN0cmljdGlvbnMBAAs/AC4ARAs/AAAAX/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAs2IALgBEs2IAAAEABlL/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAMAAAATW9kZWxWZXJzaW9uAQCjfgAuAESjfgAAAQDHXv////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> NamespaceUri
        {
            get
            {
                return m_namespaceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> NamespaceVersion
        {
            get
            {
                return m_namespaceVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> NamespacePublicationDate
        {
            get
            {
                return m_namespacePublicationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespacePublicationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespacePublicationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> IsNamespaceSubset
        {
            get
            {
                return m_isNamespaceSubset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isNamespaceSubset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isNamespaceSubset = value;
            }
        }

        /// <remarks />
        public PropertyState<IdType[]> StaticNodeIdTypes
        {
            get
            {
                return m_staticNodeIdTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNodeIdTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNodeIdTypes = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> StaticNumericNodeIdRange
        {
            get
            {
                return m_staticNumericNodeIdRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNumericNodeIdRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNumericNodeIdRange = value;
            }
        }

        /// <remarks />
        public PropertyState<string> StaticStringNodeIdPattern
        {
            get
            {
                return m_staticStringNodeIdPattern;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticStringNodeIdPattern, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticStringNodeIdPattern = value;
            }
        }

        /// <remarks />
        public AddressSpaceFileState NamespaceFile
        {
            get
            {
                return m_namespaceFile;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceFile, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceFile = value;
            }
        }

        /// <remarks />
        public PropertyState<RolePermissionType[]> DefaultRolePermissions
        {
            get
            {
                return m_defaultRolePermissions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultRolePermissions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultRolePermissions = value;
            }
        }

        /// <remarks />
        public PropertyState<RolePermissionType[]> DefaultUserRolePermissions
        {
            get
            {
                return m_defaultUserRolePermissions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultUserRolePermissions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultUserRolePermissions = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> DefaultAccessRestrictions
        {
            get
            {
                return m_defaultAccessRestrictions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultAccessRestrictions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultAccessRestrictions = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> ConfigurationVersion
        {
            get
            {
                return m_configurationVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_configurationVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_configurationVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ModelVersion
        {
            get
            {
                return m_modelVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modelVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modelVersion = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_namespaceUri != null)
            {
                children.Add(m_namespaceUri);
            }

            if (m_namespaceVersion != null)
            {
                children.Add(m_namespaceVersion);
            }

            if (m_namespacePublicationDate != null)
            {
                children.Add(m_namespacePublicationDate);
            }

            if (m_isNamespaceSubset != null)
            {
                children.Add(m_isNamespaceSubset);
            }

            if (m_staticNodeIdTypes != null)
            {
                children.Add(m_staticNodeIdTypes);
            }

            if (m_staticNumericNodeIdRange != null)
            {
                children.Add(m_staticNumericNodeIdRange);
            }

            if (m_staticStringNodeIdPattern != null)
            {
                children.Add(m_staticStringNodeIdPattern);
            }

            if (m_namespaceFile != null)
            {
                children.Add(m_namespaceFile);
            }

            if (m_defaultRolePermissions != null)
            {
                children.Add(m_defaultRolePermissions);
            }

            if (m_defaultUserRolePermissions != null)
            {
                children.Add(m_defaultUserRolePermissions);
            }

            if (m_defaultAccessRestrictions != null)
            {
                children.Add(m_defaultAccessRestrictions);
            }

            if (m_configurationVersion != null)
            {
                children.Add(m_configurationVersion);
            }

            if (m_modelVersion != null)
            {
                children.Add(m_modelVersion);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NamespaceUri:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceUri == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceVersion:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceVersion == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceVersion = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceVersion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespacePublicationDate:
                {
                    if (createOrReplace)
                    {
                        if (NamespacePublicationDate == null)
                        {
                            if (replacement == null)
                            {
                                NamespacePublicationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                NamespacePublicationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = NamespacePublicationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.IsNamespaceSubset:
                {
                    if (createOrReplace)
                    {
                        if (IsNamespaceSubset == null)
                        {
                            if (replacement == null)
                            {
                                IsNamespaceSubset = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsNamespaceSubset = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsNamespaceSubset;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNodeIdTypes:
                {
                    if (createOrReplace)
                    {
                        if (StaticNodeIdTypes == null)
                        {
                            if (replacement == null)
                            {
                                StaticNodeIdTypes = new PropertyState<IdType[]>(this);
                            }
                            else
                            {
                                StaticNodeIdTypes = (PropertyState<IdType[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNodeIdTypes;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNumericNodeIdRange:
                {
                    if (createOrReplace)
                    {
                        if (StaticNumericNodeIdRange == null)
                        {
                            if (replacement == null)
                            {
                                StaticNumericNodeIdRange = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                StaticNumericNodeIdRange = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNumericNodeIdRange;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticStringNodeIdPattern:
                {
                    if (createOrReplace)
                    {
                        if (StaticStringNodeIdPattern == null)
                        {
                            if (replacement == null)
                            {
                                StaticStringNodeIdPattern = new PropertyState<string>(this);
                            }
                            else
                            {
                                StaticStringNodeIdPattern = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = StaticStringNodeIdPattern;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceFile:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceFile == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceFile = new AddressSpaceFileState(this);
                            }
                            else
                            {
                                NamespaceFile = (AddressSpaceFileState)replacement;
                            }
                        }
                    }

                    instance = NamespaceFile;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultRolePermissions:
                {
                    if (createOrReplace)
                    {
                        if (DefaultRolePermissions == null)
                        {
                            if (replacement == null)
                            {
                                DefaultRolePermissions = new PropertyState<RolePermissionType[]>(this);
                            }
                            else
                            {
                                DefaultRolePermissions = (PropertyState<RolePermissionType[]>)replacement;
                            }
                        }
                    }

                    instance = DefaultRolePermissions;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultUserRolePermissions:
                {
                    if (createOrReplace)
                    {
                        if (DefaultUserRolePermissions == null)
                        {
                            if (replacement == null)
                            {
                                DefaultUserRolePermissions = new PropertyState<RolePermissionType[]>(this);
                            }
                            else
                            {
                                DefaultUserRolePermissions = (PropertyState<RolePermissionType[]>)replacement;
                            }
                        }
                    }

                    instance = DefaultUserRolePermissions;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultAccessRestrictions:
                {
                    if (createOrReplace)
                    {
                        if (DefaultAccessRestrictions == null)
                        {
                            if (replacement == null)
                            {
                                DefaultAccessRestrictions = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                DefaultAccessRestrictions = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = DefaultAccessRestrictions;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfigurationVersion:
                {
                    if (createOrReplace)
                    {
                        if (ConfigurationVersion == null)
                        {
                            if (replacement == null)
                            {
                                ConfigurationVersion = new PropertyState<uint>(this);
                            }
                            else
                            {
                                ConfigurationVersion = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = ConfigurationVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.ModelVersion:
                {
                    if (createOrReplace)
                    {
                        if (ModelVersion == null)
                        {
                            if (replacement == null)
                            {
                                ModelVersion = new PropertyState<string>(this);
                            }
                            else
                            {
                                ModelVersion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ModelVersion;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_namespaceUri;
        private PropertyState<string> m_namespaceVersion;
        private PropertyState<DateTime> m_namespacePublicationDate;
        private PropertyState<bool> m_isNamespaceSubset;
        private PropertyState<IdType[]> m_staticNodeIdTypes;
        private PropertyState<string[]> m_staticNumericNodeIdRange;
        private PropertyState<string> m_staticStringNodeIdPattern;
        private AddressSpaceFileState m_namespaceFile;
        private PropertyState<RolePermissionType[]> m_defaultRolePermissions;
        private PropertyState<RolePermissionType[]> m_defaultUserRolePermissions;
        private PropertyState<ushort> m_defaultAccessRestrictions;
        private PropertyState<uint> m_configurationVersion;
        private PropertyState<string> m_modelVersion;
        #endregion
    }
    #endif
    #endregion

    #region NamespacesState Class
    #if (!OPCUA_EXCLUDE_NamespacesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespacesState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public NamespacesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespacesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAE5hbWVzcGFjZXNUeXBlSW5zdGFuY2UBAH0tAQB9LX0tAAD/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region BaseEventState Class
    #if (!OPCUA_EXCLUDE_BaseEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseEventState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public BaseEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LocalTime != null)
            {
                LocalTime.Initialize(context, LocalTime_InitializationString);
            }

            if (ConditionClassId != null)
            {
                ConditionClassId.Initialize(context, ConditionClassId_InitializationString);
            }

            if (ConditionClassName != null)
            {
                ConditionClassName.Initialize(context, ConditionClassName_InitializationString);
            }

            if (ConditionSubClassId != null)
            {
                ConditionSubClassId.Initialize(context, ConditionSubClassId_InitializationString);
            }

            if (ConditionSubClassName != null)
            {
                ConditionSubClassName.Initialize(context, ConditionSubClassName_InitializationString);
            }
        }

        #region Initialization String
        private const string LocalTime_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAExvY2FsVGltZQEAdgwALgBEdgwAAAEA0CL/////AQH/////AAAA" +
           "AA==";

        private const string ConditionClassId_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBABt8AC4ARBt8AAAAEf////8BAf//" +
           "//8AAAAA";

        private const string ConditionClassName_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAHHwALgBEHHwAAAAV/////wEB" +
           "/////wAAAAA=";

        private const string ConditionSubClassId_InitializationString =
           "//////////8XYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNsYXNzSWQBAB18AC4ARB18AAAAEQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";

        private const string ConditionSubClassName_InitializationString =
           "//////////8XYIkKAgAAAAAAFQAAAENvbmRpdGlvblN1YkNsYXNzTmFtZQEAHnwALgBEHnwAAAAVAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAEJhc2VFdmVudFR5cGVJbnN0YW5jZQEA+QcBAPkH+QcAAP////8N" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQD6BwAuAET6BwAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQD7BwAuAET7BwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEA/AcALgBE/AcAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "AP0HAC4ARP0HAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQD+BwAuAET+BwAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA/wcALgBE/wcAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQB2DAAuAER2DAAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQACCAAuAEQCCAAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBAAMIAC4ARAMIAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25k" +
           "aXRpb25DbGFzc0lkAQAbfAAuAEQbfAAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0" +
           "aW9uQ2xhc3NOYW1lAQAcfAAuAEQcfAAAABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0" +
           "aW9uU3ViQ2xhc3NJZAEAHXwALgBEHXwAAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAV" +
           "AAAAQ29uZGl0aW9uU3ViQ2xhc3NOYW1lAQAefAAuAEQefAAAABUBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> EventId
        {
            get
            {
                return m_eventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventId = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> EventType
        {
            get
            {
                return m_eventType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventType = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> SourceNode
        {
            get
            {
                return m_sourceNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceNode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SourceName
        {
            get
            {
                return m_sourceName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> Time
        {
            get
            {
                return m_time;
            }

            set
            {
                if (!Object.ReferenceEquals(m_time, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_time = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> ReceiveTime
        {
            get
            {
                return m_receiveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_receiveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_receiveTime = value;
            }
        }

        /// <remarks />
        public PropertyState<TimeZoneDataType> LocalTime
        {
            get
            {
                return m_localTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Message
        {
            get
            {
                return m_message;
            }

            set
            {
                if (!Object.ReferenceEquals(m_message, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_message = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Severity
        {
            get
            {
                return m_severity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severity = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> ConditionClassId
        {
            get
            {
                return m_conditionClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ConditionClassName
        {
            get
            {
                return m_conditionClassName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassName = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> ConditionSubClassId
        {
            get
            {
                return m_conditionSubClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionSubClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionSubClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText[]> ConditionSubClassName
        {
            get
            {
                return m_conditionSubClassName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionSubClassName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionSubClassName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventId != null)
            {
                children.Add(m_eventId);
            }

            if (m_eventType != null)
            {
                children.Add(m_eventType);
            }

            if (m_sourceNode != null)
            {
                children.Add(m_sourceNode);
            }

            if (m_sourceName != null)
            {
                children.Add(m_sourceName);
            }

            if (m_time != null)
            {
                children.Add(m_time);
            }

            if (m_receiveTime != null)
            {
                children.Add(m_receiveTime);
            }

            if (m_localTime != null)
            {
                children.Add(m_localTime);
            }

            if (m_message != null)
            {
                children.Add(m_message);
            }

            if (m_severity != null)
            {
                children.Add(m_severity);
            }

            if (m_conditionClassId != null)
            {
                children.Add(m_conditionClassId);
            }

            if (m_conditionClassName != null)
            {
                children.Add(m_conditionClassName);
            }

            if (m_conditionSubClassId != null)
            {
                children.Add(m_conditionSubClassId);
            }

            if (m_conditionSubClassName != null)
            {
                children.Add(m_conditionSubClassName);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventId:
                {
                    if (createOrReplace)
                    {
                        if (EventId == null)
                        {
                            if (replacement == null)
                            {
                                EventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                EventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = EventId;
                    break;
                }

                case Opc.Ua.BrowseNames.EventType:
                {
                    if (createOrReplace)
                    {
                        if (EventType == null)
                        {
                            if (replacement == null)
                            {
                                EventType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                EventType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = EventType;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceNode:
                {
                    if (createOrReplace)
                    {
                        if (SourceNode == null)
                        {
                            if (replacement == null)
                            {
                                SourceNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SourceNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SourceNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceName:
                {
                    if (createOrReplace)
                    {
                        if (SourceName == null)
                        {
                            if (replacement == null)
                            {
                                SourceName = new PropertyState<string>(this);
                            }
                            else
                            {
                                SourceName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SourceName;
                    break;
                }

                case Opc.Ua.BrowseNames.Time:
                {
                    if (createOrReplace)
                    {
                        if (Time == null)
                        {
                            if (replacement == null)
                            {
                                Time = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                Time = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = Time;
                    break;
                }

                case Opc.Ua.BrowseNames.ReceiveTime:
                {
                    if (createOrReplace)
                    {
                        if (ReceiveTime == null)
                        {
                            if (replacement == null)
                            {
                                ReceiveTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ReceiveTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ReceiveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LocalTime:
                {
                    if (createOrReplace)
                    {
                        if (LocalTime == null)
                        {
                            if (replacement == null)
                            {
                                LocalTime = new PropertyState<TimeZoneDataType>(this);
                            }
                            else
                            {
                                LocalTime = (PropertyState<TimeZoneDataType>)replacement;
                            }
                        }
                    }

                    instance = LocalTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Message:
                {
                    if (createOrReplace)
                    {
                        if (Message == null)
                        {
                            if (replacement == null)
                            {
                                Message = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Message = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Message;
                    break;
                }

                case Opc.Ua.BrowseNames.Severity:
                {
                    if (createOrReplace)
                    {
                        if (Severity == null)
                        {
                            if (replacement == null)
                            {
                                Severity = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Severity = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Severity;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionClassId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ConditionClassId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionClassName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ConditionClassName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassName;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionSubClassId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionSubClassId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionSubClassId = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                ConditionSubClassId = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionSubClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionSubClassName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionSubClassName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionSubClassName = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                ConditionSubClassName = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionSubClassName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_eventId;
        private PropertyState<NodeId> m_eventType;
        private PropertyState<NodeId> m_sourceNode;
        private PropertyState<string> m_sourceName;
        private PropertyState<DateTime> m_time;
        private PropertyState<DateTime> m_receiveTime;
        private PropertyState<TimeZoneDataType> m_localTime;
        private PropertyState<LocalizedText> m_message;
        private PropertyState<ushort> m_severity;
        private PropertyState<NodeId> m_conditionClassId;
        private PropertyState<LocalizedText> m_conditionClassName;
        private PropertyState<NodeId[]> m_conditionSubClassId;
        private PropertyState<LocalizedText[]> m_conditionSubClassName;
        #endregion
    }
    #endif
    #endregion

    #region AuditEventState Class
    #if (!OPCUA_EXCLUDE_AuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public AuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAEF1ZGl0RXZlbnRUeXBlSW5zdGFuY2UBAAQIAQAECAQIAAD/////" +
           "DQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAF9CDwAALgBEX0IPAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQIAAGBCDwAALgBEYEIPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUCAABhQg8AAC4ARGFCDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAgAAYkIPAAAuAERiQg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQIA" +
           "AGNCDwAALgBEY0IPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUCAABk" +
           "Qg8AAC4ARGRCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAABmQg8AAC4A" +
           "RGZCDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAGdCDwAALgBEZ0IPAAAF" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEABQgALgBEBQgAAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAQAGCAAuAEQGCAAAAAH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2VydmVySWQBAAcIAC4ARAcIAAAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABIAAABDbGllbnRBdWRpdEVudHJ5SWQBAAgIAC4ARAgIAAAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAwAAABDbGllbnRVc2VySWQBAAkIAC4ARAkIAAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ActionTimeStamp
        {
            get
            {
                return m_actionTimeStamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actionTimeStamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actionTimeStamp = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ServerId
        {
            get
            {
                return m_serverId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientAuditEntryId
        {
            get
            {
                return m_clientAuditEntryId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientAuditEntryId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientAuditEntryId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_actionTimeStamp != null)
            {
                children.Add(m_actionTimeStamp);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_serverId != null)
            {
                children.Add(m_serverId);
            }

            if (m_clientAuditEntryId != null)
            {
                children.Add(m_clientAuditEntryId);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActionTimeStamp:
                {
                    if (createOrReplace)
                    {
                        if (ActionTimeStamp == null)
                        {
                            if (replacement == null)
                            {
                                ActionTimeStamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ActionTimeStamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ActionTimeStamp;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Status = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerId:
                {
                    if (createOrReplace)
                    {
                        if (ServerId == null)
                        {
                            if (replacement == null)
                            {
                                ServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientAuditEntryId:
                {
                    if (createOrReplace)
                    {
                        if (ClientAuditEntryId == null)
                        {
                            if (replacement == null)
                            {
                                ClientAuditEntryId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientAuditEntryId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientAuditEntryId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_actionTimeStamp;
        private PropertyState<bool> m_status;
        private PropertyState<string> m_serverId;
        private PropertyState<string> m_clientAuditEntryId;
        private PropertyState<string> m_clientUserId;
        #endregion
    }
    #endif
    #endregion

    #region AuditSecurityEventState Class
    #if (!OPCUA_EXCLUDE_AuditSecurityEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSecurityEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditSecurityEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSecurityEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (StatusCodeId != null)
            {
                StatusCodeId.Initialize(context, StatusCodeId_InitializationString);
            }
        }

        #region Initialization String
        private const string StatusCodeId_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFN0YXR1c0NvZGVJZAEAz0QALgBEz0QAAAAT/////wEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEF1ZGl0U2VjdXJpdHlFdmVudFR5cGVJbnN0YW5jZQEACggBAAoI" +
           "CggAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAbEIPAAAuAERsQg8AAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAbUIPAAAuAERtQg8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAG5CDwAALgBEbkIPAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUCAABvQg8AAC4ARG9CDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQA" +
           "AABUaW1lAgAAcEIPAAAuAERwQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZl" +
           "VGltZQIAAHFCDwAALgBEcUIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIA" +
           "AHNCDwAALgBEc0IPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAdEIPAAAu" +
           "AER0Qg8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAAeUIPAAAu" +
           "AER5Qg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAB6Qg8AAC4ARHpCDwAA" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAHtCDwAALgBEe0IPAAAM/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAHxCDwAALgBEfEIPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAH1CDwAALgBEfUIPAAAM/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADAAAAFN0YXR1c0NvZGVJZAEAz0QALgBEz0QAAAAT/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<StatusCode> StatusCodeId
        {
            get
            {
                return m_statusCodeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_statusCodeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_statusCodeId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_statusCodeId != null)
            {
                children.Add(m_statusCodeId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StatusCodeId:
                {
                    if (createOrReplace)
                    {
                        if (StatusCodeId == null)
                        {
                            if (replacement == null)
                            {
                                StatusCodeId = new PropertyState<StatusCode>(this);
                            }
                            else
                            {
                                StatusCodeId = (PropertyState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = StatusCodeId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<StatusCode> m_statusCodeId;
        #endregion
    }
    #endif
    #endregion

    #region AuditChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditChannelEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditChannelEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <remarks />
        public AuditChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEF1ZGl0Q2hhbm5lbEV2ZW50VHlwZUluc3RhbmNlAQALCAEACwgL" +
           "CAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAB+Qg8AAC4ARH5CDwAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAB/Qg8AAC4ARH9CDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAgEIPAAAuAESAQg8AABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQIAAIFCDwAALgBEgUIPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUCAACCQg8AAC4ARIJCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVU" +
           "aW1lAgAAg0IPAAAuAESDQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAA" +
           "hUIPAAAuAESFQg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAACGQg8AAC4A" +
           "RIZCDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAACLQg8AAC4A" +
           "RItCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAIxCDwAALgBEjEIPAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAjUIPAAAuAESNQg8AAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAjkIPAAAuAESOQg8AAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAj0IPAAAuAESPQg8AAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJlQ2hhbm5lbElkAQC5CgAuAES5CgAAAAz/////AQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditOpenSecureChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditOpenSecureChannelEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditOpenSecureChannelEventState : AuditChannelEventState
    {
        #region Constructors
        /// <remarks />
        public AuditOpenSecureChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditOpenSecureChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (CertificateErrorEventId != null)
            {
                CertificateErrorEventId.Initialize(context, CertificateErrorEventId_InitializationString);
            }
        }

        #region Initialization String
        private const string CertificateErrorEventId_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAENlcnRpZmljYXRlRXJyb3JFdmVudElkAQBHXgAuAERHXgAAAA//" +
           "////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0T3BlblNlY3VyZUNoYW5uZWxFdmVudFR5cGVJbnN0YW5j" +
           "ZQEADAgBAAwIDAgAAP////8VAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAkUIPAAAuAESRQg8AAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAkkIPAAAuAESSQg8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAJNCDwAALgBEk0IPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAACUQg8AAC4ARJRCDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAQAAABUaW1lAgAAlUIPAAAuAESVQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABSZWNlaXZlVGltZQIAAJZCDwAALgBElkIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "TWVzc2FnZQIAAJhCDwAALgBEmEIPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5" +
           "AgAAmUIPAAAuAESZQg8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1w" +
           "AgAAnkIPAAAuAESeQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAACfQg8A" +
           "AC4ARJ9CDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAKBCDwAALgBEoEIP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAKFCDwAALgBE" +
           "oUIPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAKJCDwAALgBEokIP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFNlY3VyZUNoYW5uZWxJZAIAAKRCDwAALgBEpEIP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAENsaWVudENlcnRpZmljYXRlAQANCAAuAEQNCAAA" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAbAAAAQ2xpZW50Q2VydGlmaWNhdGVUaHVtYnByaW50AQC6" +
           "CgAuAES6CgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVxdWVzdFR5cGUBAA4IAC4ARA4I" +
           "AAABADsB/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQAPCAAuAEQP" +
           "CAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAU2VjdXJpdHlNb2RlAQARCAAuAEQRCAAAAQAu" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAABEAAABSZXF1ZXN0ZWRMaWZldGltZQEAEggALgBEEggAAAEA" +
           "IgH/////AQH/////AAAAABVgiQoCAAAAAAAXAAAAQ2VydGlmaWNhdGVFcnJvckV2ZW50SWQBAEdeAC4A" +
           "REdeAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<SecurityTokenRequestType> RequestType
        {
            get
            {
                return m_requestType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestType = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RequestedLifetime
        {
            get
            {
                return m_requestedLifetime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedLifetime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedLifetime = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> CertificateErrorEventId
        {
            get
            {
                return m_certificateErrorEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateErrorEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateErrorEventId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_requestType != null)
            {
                children.Add(m_requestType);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_requestedLifetime != null)
            {
                children.Add(m_requestedLifetime);
            }

            if (m_certificateErrorEventId != null)
            {
                children.Add(m_certificateErrorEventId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestType:
                {
                    if (createOrReplace)
                    {
                        if (RequestType == null)
                        {
                            if (replacement == null)
                            {
                                RequestType = new PropertyState<SecurityTokenRequestType>(this);
                            }
                            else
                            {
                                RequestType = (PropertyState<SecurityTokenRequestType>)replacement;
                            }
                        }
                    }

                    instance = RequestType;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedLifetime:
                {
                    if (createOrReplace)
                    {
                        if (RequestedLifetime == null)
                        {
                            if (replacement == null)
                            {
                                RequestedLifetime = new PropertyState<double>(this);
                            }
                            else
                            {
                                RequestedLifetime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RequestedLifetime;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateErrorEventId:
                {
                    if (createOrReplace)
                    {
                        if (CertificateErrorEventId == null)
                        {
                            if (replacement == null)
                            {
                                CertificateErrorEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                CertificateErrorEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = CertificateErrorEventId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<SecurityTokenRequestType> m_requestType;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<double> m_requestedLifetime;
        private PropertyState<byte[]> m_certificateErrorEventId;
        #endregion
    }
    #endif
    #endregion

    #region AuditSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditSessionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSessionEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <remarks />
        public AuditSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEF1ZGl0U2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAVCAEAFQgV" +
           "CAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAClQg8AAC4ARKVCDwAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACmQg8AAC4ARKZCDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAp0IPAAAuAESnQg8AABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQIAAKhCDwAALgBEqEIPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUCAACpQg8AAC4ARKlCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVU" +
           "aW1lAgAAqkIPAAAuAESqQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAA" +
           "rEIPAAAuAESsQg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAACtQg8AAC4A" +
           "RK1CDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAACyQg8AAC4A" +
           "RLJCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAALNCDwAALgBEs0IPAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAtEIPAAAuAES0Qg8AAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAtUIPAAAuAES1Qg8AAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAtkIPAAAuAES2Qg8AAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQAWCAAuAEQWCAAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_sessionId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCreateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditCreateSessionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCreateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCreateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0Q3JlYXRlU2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAX" +
           "CAEAFwgXCAAA/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAC4Qg8AAC4ARLhCDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAC5Qg8AAC4ARLlCDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAukIPAAAuAES6Qg8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAALtCDwAALgBEu0IPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAAC8Qg8AAC4ARLxCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAvUIPAAAuAES9Qg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAv0IPAAAuAES/Qg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADA" +
           "Qg8AAC4ARMBCDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAADF" +
           "Qg8AAC4ARMVCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAMZCDwAALgBE" +
           "xkIPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAx0IPAAAuAETHQg8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAyEIPAAAuAETIQg8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAyUIPAAAuAETJQg8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAgAAy0IPAAAuAETLQg8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJlQ2hhbm5lbElkAQAYCAAuAEQYCAAAAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUBABkIAC4ARBkIAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABsAAABDbGllbnRDZXJ0aWZpY2F0ZVRodW1icHJpbnQBALsKAC4ARLsKAAAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABUAAABSZXZpc2VkU2Vzc2lvblRpbWVvdXQBABoIAC4ARBoIAAAB" +
           "ACIB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RevisedSessionTimeout
        {
            get
            {
                return m_revisedSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_revisedSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_revisedSessionTimeout = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_revisedSessionTimeout != null)
            {
                children.Add(m_revisedSessionTimeout);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RevisedSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (RevisedSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                RevisedSessionTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                RevisedSessionTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RevisedSessionTimeout;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<double> m_revisedSessionTimeout;
        #endregion
    }
    #endif
    #endregion

    #region AuditUrlMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditUrlMismatchEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUrlMismatchEventState : AuditCreateSessionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditUrlMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUrlMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0VXJsTWlzbWF0Y2hFdmVudFR5cGVJbnN0YW5jZQEAvAoB" +
           "ALwKvAoAAP////8TAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAzEIPAAAuAETMQg8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAzUIPAAAuAETNQg8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAM5CDwAALgBEzkIPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAADPQg8AAC4ARM9CDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAA0EIPAAAuAETQQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAANFCDwAALgBE0UIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAANNCDwAALgBE00IPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA1EIP" +
           "AAAuAETUQg8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAA2UIP" +
           "AAAuAETZQg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAADaQg8AAC4ARNpC" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAANtCDwAALgBE20IPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAANxCDwAALgBE3EIPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAN1CDwAALgBE3UIPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAIAAN9CDwAALgBE30IPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADwAAAFNlY3VyZUNoYW5uZWxJZAIAAOBCDwAALgBE4EIPAAAM/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEQAAAENsaWVudENlcnRpZmljYXRlAgAA4UIPAAAuAEThQg8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAbAAAAQ2xpZW50Q2VydGlmaWNhdGVUaHVtYnByaW50AgAA4kIPAAAuAETi" +
           "Qg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAUmV2aXNlZFNlc3Npb25UaW1lb3V0AgAA40IP" +
           "AAAuAETjQg8AAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABFbmRwb2ludFVybAEAvQoALgBE" +
           "vQoAAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_endpointUrl;
        #endregion
    }
    #endif
    #endregion

    #region AuditActivateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditActivateSessionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditActivateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditActivateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditActivateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEF1ZGl0QWN0aXZhdGVTZXNzaW9uRXZlbnRUeXBlSW5zdGFuY2UB" +
           "ABsIAQAbCBsIAAD/////EQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAORCDwAALgBE5EIPAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAOVCDwAALgBE5UIPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADmQg8AAC4AROZCDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAA50IPAAAuAETnQg8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAEAAAAVGltZQIAAOhCDwAALgBE6EIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "UmVjZWl2ZVRpbWUCAADpQg8AAC4AROlCDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1l" +
           "c3NhZ2UCAADrQg8AAC4AROtCDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIA" +
           "AOxCDwAALgBE7EIPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIA" +
           "APFCDwAALgBE8UIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA8kIPAAAu" +
           "AETyQg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAADzQg8AAC4ARPNCDwAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAD0Qg8AAC4ARPRC" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAD1Qg8AAC4ARPVCDwAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQCAAD3Qg8AAC4ARPdCDwAAEf////8B" +
           "Af////8AAAAAF2CJCgIAAAAAABoAAABDbGllbnRTb2Z0d2FyZUNlcnRpZmljYXRlcwEAHAgALgBEHAgA" +
           "AAEAWAEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABEAAABVc2VySWRlbnRpdHlUb2tlbgEA" +
           "HQgALgBEHQgAAAEAPAH/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJlQ2hhbm5lbElkAQDd" +
           "LAAuAETdLAAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> ClientSoftwareCertificates
        {
            get
            {
                return m_clientSoftwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientSoftwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientSoftwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<UserIdentityToken> UserIdentityToken
        {
            get
            {
                return m_userIdentityToken;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userIdentityToken, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userIdentityToken = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientSoftwareCertificates != null)
            {
                children.Add(m_clientSoftwareCertificates);
            }

            if (m_userIdentityToken != null)
            {
                children.Add(m_userIdentityToken);
            }

            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientSoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (ClientSoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                ClientSoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                ClientSoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = ClientSoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.UserIdentityToken:
                {
                    if (createOrReplace)
                    {
                        if (UserIdentityToken == null)
                        {
                            if (replacement == null)
                            {
                                UserIdentityToken = new PropertyState<UserIdentityToken>(this);
                            }
                            else
                            {
                                UserIdentityToken = (PropertyState<UserIdentityToken>)replacement;
                            }
                        }
                    }

                    instance = UserIdentityToken;
                    break;
                }

                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SignedSoftwareCertificate[]> m_clientSoftwareCertificates;
        private PropertyState<UserIdentityToken> m_userIdentityToken;
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCancelEventState Class
    #if (!OPCUA_EXCLUDE_AuditCancelEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCancelEventState : AuditSessionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCancelEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCancelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEF1ZGl0Q2FuY2VsRXZlbnRUeXBlSW5zdGFuY2UBAB4IAQAeCB4I" +
           "AAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAPhCDwAALgBE+EIPAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAPlCDwAALgBE+UIPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUCAAD6Qg8AAC4ARPpCDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAgAA+0IPAAAuAET7Qg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQIAAPxCDwAALgBE/EIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRp" +
           "bWUCAAD9Qg8AAC4ARP1CDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAAD/" +
           "Qg8AAC4ARP9CDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAABDDwAALgBE" +
           "AEMPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIAAAVDDwAALgBE" +
           "BUMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAABkMPAAAuAEQGQw8AAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAAHQw8AAC4ARAdDDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAAIQw8AAC4ARAhDDwAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAAJQw8AAC4ARAlDDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQCAAALQw8AAC4ARAtDDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABSZXF1ZXN0SGFuZGxlAQAfCAAuAEQfCAAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> RequestHandle
        {
            get
            {
                return m_requestHandle;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestHandle, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestHandle = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_requestHandle != null)
            {
                children.Add(m_requestHandle);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RequestHandle:
                {
                    if (createOrReplace)
                    {
                        if (RequestHandle == null)
                        {
                            if (replacement == null)
                            {
                                RequestHandle = new PropertyState<uint>(this);
                            }
                            else
                            {
                                RequestHandle = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = RequestHandle;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_requestHandle;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0Q2VydGlmaWNhdGVFdmVudFR5cGVJbnN0YW5jZQEAIAgB" +
           "ACAIIAgAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAADEMPAAAuAEQMQw8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAADUMPAAAuAEQNQw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAA5DDwAALgBEDkMPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAAAPQw8AAC4ARA9DDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAAEEMPAAAuAEQQQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAABFDDwAALgBEEUMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAABNDDwAALgBEE0MPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAFEMP" +
           "AAAuAEQUQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAAGUMP" +
           "AAAuAEQZQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAaQw8AAC4ARBpD" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAABtDDwAALgBEG0MPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAABxDDwAALgBEHEMPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAB1DDwAALgBEHUMPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAQAhCAAuAEQhCAAAAA//////AQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateDataMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateDataMismatchEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateDataMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateDataMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateDataMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEF1ZGl0Q2VydGlmaWNhdGVEYXRhTWlzbWF0Y2hFdmVudFR5cGVJ" +
           "bnN0YW5jZQEAIggBACIIIggAAP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAH0MPAAAuAEQf" +
           "Qw8AAA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAIEMPAAAuAEQgQw8AABH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAACFDDwAALgBEIUMPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAAiQw8AAC4ARCJDDwAADP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAQAAABUaW1lAgAAI0MPAAAuAEQjQw8AAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAsAAABSZWNlaXZlVGltZQIAACRDDwAALgBEJEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAHAAAATWVzc2FnZQIAACZDDwAALgBEJkMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "dmVyaXR5AgAAJ0MPAAAuAEQnQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGlt" +
           "ZVN0YW1wAgAALEMPAAAuAEQsQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMC" +
           "AAAtQw8AAC4ARC1DDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAC5DDwAA" +
           "LgBELkMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAC9D" +
           "DwAALgBEL0MPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAADBDDwAA" +
           "LgBEMEMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAgAAMkMPAAAuAEQy" +
           "Qw8AAA//////AQH/////AAAAABVgiQoCAAAAAAAPAAAASW52YWxpZEhvc3RuYW1lAQAjCAAuAEQjCAAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAKAAAASW52YWxpZFVyaQEAJAgALgBEJAgAAAAM/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> InvalidHostname
        {
            get
            {
                return m_invalidHostname;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidHostname, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidHostname = value;
            }
        }

        /// <remarks />
        public PropertyState<string> InvalidUri
        {
            get
            {
                return m_invalidUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_invalidHostname != null)
            {
                children.Add(m_invalidHostname);
            }

            if (m_invalidUri != null)
            {
                children.Add(m_invalidUri);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InvalidHostname:
                {
                    if (createOrReplace)
                    {
                        if (InvalidHostname == null)
                        {
                            if (replacement == null)
                            {
                                InvalidHostname = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidHostname = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidHostname;
                    break;
                }

                case Opc.Ua.BrowseNames.InvalidUri:
                {
                    if (createOrReplace)
                    {
                        if (InvalidUri == null)
                        {
                            if (replacement == null)
                            {
                                InvalidUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_invalidHostname;
        private PropertyState<string> m_invalidUri;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateExpiredEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateExpiredEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateExpiredEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateExpiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateExpiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVFeHBpcmVkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACUIAQAlCCUIAAD/////DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAADNDDwAALgBEM0MPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAADRDDwAALgBENEMPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAA1Qw8AAC4ARDVDDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAANkMPAAAuAEQ2Qw8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAADdDDwAALgBEN0MPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAAA4Qw8AAC4ARDhDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAAA6Qw8AAC4ARDpDDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAADtDDwAALgBEO0MPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAEBDDwAALgBEQEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAQUMP" +
           "AAAuAERBQw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAABCQw8AAC4AREJD" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAABDQw8AAC4A" +
           "RENDDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAABEQw8AAC4ARERD" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQIAAEZDDwAALgBERkMPAAAP" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateInvalidEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateInvalidEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateInvalidEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateInvalidEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateInvalidEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVJbnZhbGlkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACYIAQAmCCYIAAD/////DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAEdDDwAALgBER0MPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAEhDDwAALgBESEMPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAABJQw8AAC4ARElDDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAASkMPAAAuAERKQw8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAAEtDDwAALgBES0MPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAABMQw8AAC4ARExDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAABOQw8AAC4ARE5DDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAAE9DDwAALgBET0MPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAFRDDwAALgBEVEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAVUMP" +
           "AAAuAERVQw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAABWQw8AAC4ARFZD" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAABXQw8AAC4A" +
           "RFdDDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAABYQw8AAC4ARFhD" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQIAAFpDDwAALgBEWkMPAAAP" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateUntrustedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateUntrustedEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateUntrustedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateUntrustedEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateUntrustedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEF1ZGl0Q2VydGlmaWNhdGVVbnRydXN0ZWRFdmVudFR5cGVJbnN0" +
           "YW5jZQEAJwgBACcIJwgAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAW0MPAAAuAERbQw8A" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAXEMPAAAuAERcQw8AABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAF1DDwAALgBEXUMPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAABeQw8AAC4ARF5DDwAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABUaW1lAgAAX0MPAAAuAERfQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABSZWNlaXZlVGltZQIAAGBDDwAALgBEYEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAATWVzc2FnZQIAAGJDDwAALgBEYkMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVy" +
           "aXR5AgAAY0MPAAAuAERjQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0" +
           "YW1wAgAAaEMPAAAuAERoQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAABp" +
           "Qw8AAC4ARGlDDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAGpDDwAALgBE" +
           "akMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAGtDDwAA" +
           "LgBEa0MPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAGxDDwAALgBE" +
           "bEMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAgAAbkMPAAAuAERuQw8A" +
           "AA//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateRevokedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateRevokedEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateRevokedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateRevokedEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateRevokedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVSZXZva2VkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACgIAQAoCCgIAAD/////DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAG9DDwAALgBEb0MPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAHBDDwAALgBEcEMPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAABxQw8AAC4ARHFDDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAckMPAAAuAERyQw8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAAHNDDwAALgBEc0MPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAAB0Qw8AAC4ARHRDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAAB2Qw8AAC4ARHZDDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAAHdDDwAALgBEd0MPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAHxDDwAALgBEfEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAfUMP" +
           "AAAuAER9Qw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAB+Qw8AAC4ARH5D" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAB/Qw8AAC4A" +
           "RH9DDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACAQw8AAC4ARIBD" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQIAAIJDDwAALgBEgkMPAAAP" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateMismatchEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditCertificateMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAEF1ZGl0Q2VydGlmaWNhdGVNaXNtYXRjaEV2ZW50VHlwZUluc3Rh" +
           "bmNlAQApCAEAKQgpCAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACDQw8AAC4ARINDDwAA" +
           "D/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACEQw8AAC4ARIRDDwAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAhUMPAAAuAESFQw8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAIZDDwAALgBEhkMPAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABAAAAFRpbWUCAACHQw8AAC4ARIdDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAFJlY2VpdmVUaW1lAgAAiEMPAAAuAESIQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABNZXNzYWdlAgAAikMPAAAuAESKQw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJp" +
           "dHkCAACLQw8AAC4ARItDDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3Rh" +
           "bXACAACQQw8AAC4ARJBDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAJFD" +
           "DwAALgBEkUMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAkkMPAAAuAESS" +
           "Qw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAk0MPAAAu" +
           "AESTQw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAlEMPAAAuAESU" +
           "Qw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUCAACWQw8AAC4ARJZDDwAA" +
           "D/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditNodeManagementEventState Class
    #if (!OPCUA_EXCLUDE_AuditNodeManagementEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditNodeManagementEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditNodeManagementEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEF1ZGl0Tm9kZU1hbmFnZW1lbnRFdmVudFR5cGVJbnN0YW5jZQEA" +
           "KggBACoIKggAAP////8NAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAl0MPAAAuAESXQw8AAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAmEMPAAAuAESYQw8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAJlDDwAALgBEmUMPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAACaQw8AAC4ARJpDDwAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAQAAABUaW1lAgAAm0MPAAAuAESbQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABS" +
           "ZWNlaXZlVGltZQIAAJxDDwAALgBEnEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVz" +
           "c2FnZQIAAJ5DDwAALgBEnkMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA" +
           "n0MPAAAuAESfQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAA" +
           "pEMPAAAuAESkQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAClQw8AAC4A" +
           "RKVDDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAKZDDwAALgBEpkMPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAKdDDwAALgBEp0MP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAKhDDwAALgBEqEMPAAAM" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditAddNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddNodesEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <remarks />
        public AuditAddNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEF1ZGl0QWRkTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEAKwgBACsI" +
           "KwgAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAqUMPAAAuAESpQw8AAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAqkMPAAAuAESqQw8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAKtDDwAALgBEq0MPAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUCAACsQw8AAC4ARKxDDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQA" +
           "AABUaW1lAgAArUMPAAAuAEStQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZl" +
           "VGltZQIAAK5DDwAALgBErkMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIA" +
           "ALBDDwAALgBEsEMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAsUMPAAAu" +
           "AESxQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAAtkMPAAAu" +
           "AES2Qw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAC3Qw8AAC4ARLdDDwAA" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAALhDDwAALgBEuEMPAAAM/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAALlDDwAALgBEuUMPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAALpDDwAALgBEukMPAAAM/////wEB" +
           "/////wAAAAAXYIkKAgAAAAAACgAAAE5vZGVzVG9BZGQBACwIAC4ARCwIAAABAHgBAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddNodesItem[]> NodesToAdd
        {
            get
            {
                return m_nodesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToAdd != null)
            {
                children.Add(m_nodesToAdd);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (NodesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                NodesToAdd = new PropertyState<AddNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToAdd = (PropertyState<AddNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddNodesItem[]> m_nodesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteNodesEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <remarks />
        public AuditDeleteNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0RGVsZXRlTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEALQgB" +
           "AC0ILQgAAP////8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAu0MPAAAuAES7Qw8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAvEMPAAAuAES8Qw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAL1DDwAALgBEvUMPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAAC+Qw8AAC4ARL5DDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAAv0MPAAAuAES/Qw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAAMBDDwAALgBEwEMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAAMJDDwAALgBEwkMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAw0MP" +
           "AAAuAETDQw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAAyEMP" +
           "AAAuAETIQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAADJQw8AAC4ARMlD" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAMpDDwAALgBEykMPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAMtDDwAALgBEy0MPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAMxDDwAALgBEzEMPAAAM////" +
           "/wEB/////wAAAAAXYIkKAgAAAAAADQAAAE5vZGVzVG9EZWxldGUBAC4IAC4ARC4IAAABAH4BAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteNodesItem[]> NodesToDelete
        {
            get
            {
                return m_nodesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToDelete != null)
            {
                children.Add(m_nodesToDelete);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (NodesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                NodesToDelete = new PropertyState<DeleteNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToDelete = (PropertyState<DeleteNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteNodesItem[]> m_nodesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditAddReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddReferencesEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <remarks />
        public AuditAddReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0QWRkUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNlAQAv" +
           "CAEALwgvCAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADNQw8AAC4ARM1DDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADOQw8AAC4ARM5DDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAz0MPAAAuAETPQw8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAANBDDwAALgBE0EMPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAADRQw8AAC4ARNFDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAA0kMPAAAuAETSQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAA1EMPAAAuAETUQw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADV" +
           "Qw8AAC4ARNVDDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAADa" +
           "Qw8AAC4ARNpDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAANtDDwAALgBE" +
           "20MPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAA3EMPAAAuAETcQw8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAA3UMPAAAuAETdQw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAA3kMPAAAuAETeQw8AAAz/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAPAAAAUmVmZXJlbmNlc1RvQWRkAQAwCAAuAEQwCAAAAQB7AQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddReferencesItem[]> ReferencesToAdd
        {
            get
            {
                return m_referencesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToAdd != null)
            {
                children.Add(m_referencesToAdd);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToAdd = new PropertyState<AddReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToAdd = (PropertyState<AddReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddReferencesItem[]> m_referencesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteReferencesEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <remarks />
        public AuditDeleteReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0RGVsZXRlUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNl" +
           "AQAxCAEAMQgxCAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADfQw8AAC4ARN9DDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADgQw8AAC4AROBDDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA4UMPAAAuAEThQw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAOJDDwAALgBE4kMPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAADjQw8AAC4ARONDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAA5EMPAAAuAETkQw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAA5kMPAAAuAETmQw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AADnQw8AAC4AROdDDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AADsQw8AAC4AROxDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAO1DDwAA" +
           "LgBE7UMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAA7kMPAAAuAETuQw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAA70MPAAAuAETv" +
           "Qw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAA8EMPAAAuAETwQw8A" +
           "AAz/////AQH/////AAAAABdgiQoCAAAAAAASAAAAUmVmZXJlbmNlc1RvRGVsZXRlAQAyCAAuAEQyCAAA" +
           "AQCBAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteReferencesItem[]> ReferencesToDelete
        {
            get
            {
                return m_referencesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToDelete != null)
            {
                children.Add(m_referencesToDelete);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToDelete = new PropertyState<DeleteReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToDelete = (PropertyState<DeleteReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteReferencesItem[]> m_referencesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEF1ZGl0VXBkYXRlRXZlbnRUeXBlSW5zdGFuY2UBADMIAQAzCDMI" +
           "AAD/////DQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAPFDDwAALgBE8UMPAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAPJDDwAALgBE8kMPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUCAADzQw8AAC4ARPNDDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAgAA9EMPAAAuAET0Qw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQIAAPVDDwAALgBE9UMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRp" +
           "bWUCAAD2Qw8AAC4ARPZDDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAAD4" +
           "Qw8AAC4ARPhDDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAPlDDwAALgBE" +
           "+UMPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIAAP5DDwAALgBE" +
           "/kMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA/0MPAAAuAET/Qw8AAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAAARA8AAC4ARABEDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAABRA8AAC4ARAFEDwAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAACRA8AAC4ARAJEDwAADP////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditWriteUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditWriteUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditWriteUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditWriteUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditWriteUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0V3JpdGVVcGRhdGVFdmVudFR5cGVJbnN0YW5jZQEANAgB" +
           "ADQINAgAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAA0QPAAAuAEQDRA8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAABEQPAAAuAEQERA8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAAVEDwAALgBEBUQPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAAAGRA8AAC4ARAZEDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAAB0QPAAAuAEQHRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAAAhEDwAALgBECEQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAAApEDwAALgBECkQPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAC0QP" +
           "AAAuAEQLRA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAAEEQP" +
           "AAAuAEQQRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAARRA8AAC4ARBFE" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAABJEDwAALgBEEkQPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAABNEDwAALgBEE0QPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAABREDwAALgBEFEQPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAEF0dHJpYnV0ZUlkAQC+CgAuAES+CgAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAASW5kZXhSYW5nZQEANQgALgBENQgAAAEAIwH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAT2xkVmFsdWUBADYIAC4ARDYIAAAAGP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABOZXdWYWx1ZQEANwgALgBENwgAAAAY/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> AttributeId
        {
            get
            {
                return m_attributeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_attributeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_attributeId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> IndexRange
        {
            get
            {
                return m_indexRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_indexRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_indexRange = value;
            }
        }

        /// <remarks />
        public PropertyState OldValue
        {
            get
            {
                return m_oldValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValue = value;
            }
        }

        /// <remarks />
        public PropertyState NewValue
        {
            get
            {
                return m_newValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValue = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_attributeId != null)
            {
                children.Add(m_attributeId);
            }

            if (m_indexRange != null)
            {
                children.Add(m_indexRange);
            }

            if (m_oldValue != null)
            {
                children.Add(m_oldValue);
            }

            if (m_newValue != null)
            {
                children.Add(m_newValue);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AttributeId:
                {
                    if (createOrReplace)
                    {
                        if (AttributeId == null)
                        {
                            if (replacement == null)
                            {
                                AttributeId = new PropertyState<uint>(this);
                            }
                            else
                            {
                                AttributeId = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = AttributeId;
                    break;
                }

                case Opc.Ua.BrowseNames.IndexRange:
                {
                    if (createOrReplace)
                    {
                        if (IndexRange == null)
                        {
                            if (replacement == null)
                            {
                                IndexRange = new PropertyState<string>(this);
                            }
                            else
                            {
                                IndexRange = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = IndexRange;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValue:
                {
                    if (createOrReplace)
                    {
                        if (OldValue == null)
                        {
                            if (replacement == null)
                            {
                                OldValue = new PropertyState(this);
                            }
                            else
                            {
                                OldValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldValue;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValue:
                {
                    if (createOrReplace)
                    {
                        if (NewValue == null)
                        {
                            if (replacement == null)
                            {
                                NewValue = new PropertyState(this);
                            }
                            else
                            {
                                NewValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewValue;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_attributeId;
        private PropertyState<string> m_indexRange;
        private PropertyState m_oldValue;
        private PropertyState m_newValue;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeVVwZGF0ZUV2ZW50VHlwZUluc3RhbmNlAQA4" +
           "CAEAOAg4CAAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAAVRA8AAC4ARBVEDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAAWRA8AAC4ARBZEDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAF0QPAAAuAEQXRA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAABhEDwAALgBEGEQPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAAAZRA8AAC4ARBlEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAGkQPAAAuAEQaRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAHEQPAAAuAEQcRA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAAAd" +
           "RA8AAC4ARB1EDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAAAi" +
           "RA8AAC4ARCJEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAACNEDwAALgBE" +
           "I0QPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAJEQPAAAuAEQkRA8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAJUQPAAAuAEQlRA8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAJkQPAAAuAEQmRA8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJZAEAvwoALgBEvwoAAAAR" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ParameterDataTypeId
        {
            get
            {
                return m_parameterDataTypeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_parameterDataTypeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_parameterDataTypeId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_parameterDataTypeId != null)
            {
                children.Add(m_parameterDataTypeId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ParameterDataTypeId:
                {
                    if (createOrReplace)
                    {
                        if (ParameterDataTypeId == null)
                        {
                            if (replacement == null)
                            {
                                ParameterDataTypeId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ParameterDataTypeId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ParameterDataTypeId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_parameterDataTypeId;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateMethodEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateMethodEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateMethodEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditUpdateMethodEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEF1ZGl0VXBkYXRlTWV0aG9kRXZlbnRUeXBlSW5zdGFuY2UBAE8I" +
           "AQBPCE8IAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAACdEDwAALgBEJ0QPAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAChEDwAALgBEKEQPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAApRA8AAC4ARClEDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAKkQPAAAuAEQqRA8AAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAEAAAAVGltZQIAACtEDwAALgBEK0QPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVj" +
           "ZWl2ZVRpbWUCAAAsRA8AAC4ARCxEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3Nh" +
           "Z2UCAAAuRA8AAC4ARC5EDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAC9E" +
           "DwAALgBEL0QPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIAADRE" +
           "DwAALgBENEQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAANUQPAAAuAEQ1" +
           "RA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAA2RA8AAC4ARDZEDwAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAA3RA8AAC4ARDdEDwAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAA4RA8AAC4ARDhEDwAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAUAgALgBEUAgAAAAR/////wEB/////wAA" +
           "AAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBRCAAuAERRCAAAABgBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> MethodId
        {
            get
            {
                return m_methodId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_methodId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_methodId = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> InputArguments
        {
            get
            {
                return m_inputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputArguments = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_methodId != null)
            {
                children.Add(m_methodId);
            }

            if (m_inputArguments != null)
            {
                children.Add(m_inputArguments);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MethodId:
                {
                    if (createOrReplace)
                    {
                        if (MethodId == null)
                        {
                            if (replacement == null)
                            {
                                MethodId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                MethodId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = MethodId;
                    break;
                }

                case Opc.Ua.BrowseNames.InputArguments:
                {
                    if (createOrReplace)
                    {
                        if (InputArguments == null)
                        {
                            if (replacement == null)
                            {
                                InputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                InputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = InputArguments;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_methodId;
        private PropertyState<object[]> m_inputArguments;
        #endregion
    }
    #endif
    #endregion

    #region SystemEventState Class
    #if (!OPCUA_EXCLUDE_SystemEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public SystemEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAFN5c3RlbUV2ZW50VHlwZUluc3RhbmNlAQBSCAEAUghSCAAA////" +
           "/wgAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAA5RA8AAC4ARDlEDwAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUCAAA6RA8AAC4ARDpEDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAgAAO0QPAAAuAEQ7RA8AABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQIAADxEDwAALgBEPEQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUC" +
           "AAA9RA8AAC4ARD1EDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAgAA" +
           "PkQPAAAuAEQ+RA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAAQEQPAAAu" +
           "AERARA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAABBRA8AAC4AREFEDwAA" +
           "Bf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DeviceFailureEventState Class
    #if (!OPCUA_EXCLUDE_DeviceFailureEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeviceFailureEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public DeviceFailureEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DeviceFailureEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAERldmljZUZhaWx1cmVFdmVudFR5cGVJbnN0YW5jZQEAUwgBAFMI" +
           "UwgAAP////8IAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAARkQPAAAuAERGRA8AAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAR0QPAAAuAERHRA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAEhEDwAALgBESEQPAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5hbWUCAABJRA8AAC4ARElEDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQA" +
           "AABUaW1lAgAASkQPAAAuAERKRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZl" +
           "VGltZQIAAEtEDwAALgBES0QPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIA" +
           "AE1EDwAALgBETUQPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAATkQPAAAu" +
           "AERORA8AAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemStatusChangeEventState Class
    #if (!OPCUA_EXCLUDE_SystemStatusChangeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemStatusChangeEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public SystemStatusChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemStatusChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAFN5c3RlbVN0YXR1c0NoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQC2" +
           "LAEAtiy2LAAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABTRA8AAC4ARFNEDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABURA8AAC4ARFREDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAVUQPAAAuAERVRA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAFZEDwAALgBEVkQPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAABXRA8AAC4ARFdEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAWEQPAAAuAERYRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAWkQPAAAuAERaRA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAABb" +
           "RA8AAC4ARFtEDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABTeXN0ZW1TdGF0ZQEAsC0ALgBE" +
           "sC0AAAEAVAP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ServerState> SystemState
        {
            get
            {
                return m_systemState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_systemState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_systemState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_systemState != null)
            {
                children.Add(m_systemState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SystemState:
                {
                    if (createOrReplace)
                    {
                        if (SystemState == null)
                        {
                            if (replacement == null)
                            {
                                SystemState = new PropertyState<ServerState>(this);
                            }
                            else
                            {
                                SystemState = (PropertyState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = SystemState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ServerState> m_systemState;
        #endregion
    }
    #endif
    #endregion

    #region BaseModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_BaseModelChangeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseModelChangeEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public BaseModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAEJhc2VNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBUCAEA" +
           "VAhUCAAA/////wgAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABgRA8AAC4ARGBEDwAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABhRA8AAC4ARGFEDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAYkQPAAAuAERiRA8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQIAAGNEDwAALgBEY0QPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BAAAAFRpbWUCAABkRA8AAC4ARGREDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2Vp" +
           "dmVUaW1lAgAAZUQPAAAuAERlRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdl" +
           "AgAAZ0QPAAAuAERnRA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAABoRA8A" +
           "AC4ARGhEDwAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region GeneralModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_GeneralModelChangeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GeneralModelChangeEventState : BaseModelChangeEventState
    {
        #region Constructors
        /// <remarks />
        public GeneralModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.GeneralModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEdlbmVyYWxNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBV" +
           "CAEAVQhVCAAA/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABtRA8AAC4ARG1EDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABuRA8AAC4ARG5EDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAb0QPAAAuAERvRA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAHBEDwAALgBEcEQPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAABxRA8AAC4ARHFEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAckQPAAAuAERyRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAdEQPAAAuAER0RA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAAB1" +
           "RA8AAC4ARHVEDwAABf////8BAf////8AAAAAF2CJCgIAAAAAAAcAAABDaGFuZ2VzAQBWCAAuAERWCAAA" +
           "AQBtAwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ModelChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<ModelChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<ModelChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ModelChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region SemanticChangeEventState Class
    #if (!OPCUA_EXCLUDE_SemanticChangeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SemanticChangeEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public SemanticChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SemanticChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNlbWFudGljQ2hhbmdlRXZlbnRUeXBlSW5zdGFuY2UBALIKAQCy" +
           "CrIKAAD/////CQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAHpEDwAALgBEekQPAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAHtEDwAALgBEe0QPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAB8RA8AAC4ARHxEDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAgAAfUQPAAAuAER9RA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAE" +
           "AAAAVGltZQIAAH5EDwAALgBEfkQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2" +
           "ZVRpbWUCAAB/RA8AAC4ARH9EDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UC" +
           "AACBRA8AAC4ARIFEDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAIJEDwAA" +
           "LgBEgkQPAAAF/////wEB/////wAAAAAXYIkKAgAAAAAABwAAAENoYW5nZXMBALMKAC4ARLMKAAABAIED" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SemanticChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<SemanticChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<SemanticChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SemanticChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region EventQueueOverflowEventState Class
    #if (!OPCUA_EXCLUDE_EventQueueOverflowEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EventQueueOverflowEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public EventQueueOverflowEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EventQueueOverflowEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEV2ZW50UXVldWVPdmVyZmxvd0V2ZW50VHlwZUluc3RhbmNlAQDb" +
           "CwEA2wvbCwAA/////wgAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACHRA8AAC4ARIdEDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACIRA8AAC4ARIhEDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAiUQPAAAuAESJRA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAIpEDwAALgBEikQPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAACLRA8AAC4ARItEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAjEQPAAAuAESMRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAjkQPAAAuAESORA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAACP" +
           "RA8AAC4ARI9EDwAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProgressEventState Class
    #if (!OPCUA_EXCLUDE_ProgressEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgressEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public ProgressEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgressEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAFByb2dyZXNzRXZlbnRUeXBlSW5zdGFuY2UBAKwsAQCsLKwsAAD/" +
           "////CgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAJREDwAALgBElEQPAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAJVEDwAALgBElUQPAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUCAACWRA8AAC4ARJZEDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAgAAl0QPAAAuAESXRA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQIAAJhEDwAALgBEmEQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUC" +
           "AACZRA8AAC4ARJlEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAACbRA8A" +
           "AC4ARJtEDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAJxEDwAALgBEnEQP" +
           "AAAF/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbnRleHQBANYwAC4ARNYwAAAAGP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABQcm9ncmVzcwEA1zAALgBE1zAAAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Context
        {
            get
            {
                return m_context;
            }

            set
            {
                if (!Object.ReferenceEquals(m_context, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_context = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Progress
        {
            get
            {
                return m_progress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_progress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_progress = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_context != null)
            {
                children.Add(m_context);
            }

            if (m_progress != null)
            {
                children.Add(m_progress);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Context:
                {
                    if (createOrReplace)
                    {
                        if (Context == null)
                        {
                            if (replacement == null)
                            {
                                Context = new PropertyState(this);
                            }
                            else
                            {
                                Context = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Context;
                    break;
                }

                case Opc.Ua.BrowseNames.Progress:
                {
                    if (createOrReplace)
                    {
                        if (Progress == null)
                        {
                            if (replacement == null)
                            {
                                Progress = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Progress = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Progress;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_context;
        private PropertyState<ushort> m_progress;
        #endregion
    }
    #endif
    #endregion

    #region AuditClientEventState Class
    #if (!OPCUA_EXCLUDE_AuditClientEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditClientEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditClientEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditClientEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEF1ZGl0Q2xpZW50RXZlbnRUeXBlSW5zdGFuY2UBADZcAQA2XDZc" +
           "AAD/////DgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAKFEDwAALgBEoUQPAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAKJEDwAALgBEokQPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUCAACjRA8AAC4ARKNEDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAgAApEQPAAAuAESkRA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQIAAKVEDwAALgBEpUQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRp" +
           "bWUCAACmRA8AAC4ARKZEDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAACo" +
           "RA8AAC4ARKhEDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAKlEDwAALgBE" +
           "qUQPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIAAK5EDwAALgBE" +
           "rkQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAr0QPAAAuAESvRA8AAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAACwRA8AAC4ARLBEDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAACxRA8AAC4ARLFEDwAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACyRA8AAC4ARLJEDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABTZXJ2ZXJVcmkBAGRdAC4ARGRdAAABAMdc/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ServerUri
        {
            get
            {
                return m_serverUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverUri != null)
            {
                children.Add(m_serverUri);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerUri:
                {
                    if (createOrReplace)
                    {
                        if (ServerUri == null)
                        {
                            if (replacement == null)
                            {
                                ServerUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ServerUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_serverUri;
        #endregion
    }
    #endif
    #endregion

    #region AuditClientUpdateMethodResultEventState Class
    #if (!OPCUA_EXCLUDE_AuditClientUpdateMethodResultEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditClientUpdateMethodResultEventState : AuditClientEventState
    {
        #region Constructors
        /// <remarks />
        public AuditClientUpdateMethodResultEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditClientUpdateMethodResultEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALgAAAEF1ZGl0Q2xpZW50VXBkYXRlTWV0aG9kUmVzdWx0RXZlbnRUeXBl" +
           "SW5zdGFuY2UBAHZdAQB2XXZdAAD/////EwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAALNEDwAALgBE" +
           "s0QPAAAP/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAALREDwAALgBEtEQPAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAC1RA8AAC4ARLVEDwAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAtkQPAAAuAES2RA8AAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAEAAAAVGltZQIAALdEDwAALgBEt0QPAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAALAAAAUmVjZWl2ZVRpbWUCAAC4RA8AAC4ARLhEDwABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABwAAAE1lc3NhZ2UCAAC6RA8AAC4ARLpEDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXZlcml0eQIAALtEDwAALgBEu0QPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRp" +
           "bWVTdGFtcAIAAMBEDwAALgBEwEQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVz" +
           "AgAAwUQPAAAuAETBRA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAADCRA8A" +
           "AC4ARMJEDwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAADD" +
           "RA8AAC4ARMNEDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAADERA8A" +
           "AC4ARMREDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXJ2ZXJVcmkCAADFRA8AAC4ARMVE" +
           "DwABAMdc/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE9iamVjdElkAQC6XQAuAES6XQAAABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBALtdAC4ARLtdAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAwAAABTdGF0dXNDb2RlSWQBAL5dAC4ARL5dAAAAE/////8BAf////8AAAAAF2CJCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAv10ALgBEv10AAAAYAQAAAAEAAAAAAAAAAQH/////AAAAABdg" +
           "iQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBUZAAuAERUZAAAABgBAAAAAQAAAAAAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ObjectId
        {
            get
            {
                return m_objectId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_objectId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_objectId = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> MethodId
        {
            get
            {
                return m_methodId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_methodId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_methodId = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusCode> StatusCodeId
        {
            get
            {
                return m_statusCodeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_statusCodeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_statusCodeId = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> InputArguments
        {
            get
            {
                return m_inputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> OutputArguments
        {
            get
            {
                return m_outputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_outputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_outputArguments = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_objectId != null)
            {
                children.Add(m_objectId);
            }

            if (m_methodId != null)
            {
                children.Add(m_methodId);
            }

            if (m_statusCodeId != null)
            {
                children.Add(m_statusCodeId);
            }

            if (m_inputArguments != null)
            {
                children.Add(m_inputArguments);
            }

            if (m_outputArguments != null)
            {
                children.Add(m_outputArguments);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ObjectId:
                {
                    if (createOrReplace)
                    {
                        if (ObjectId == null)
                        {
                            if (replacement == null)
                            {
                                ObjectId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ObjectId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ObjectId;
                    break;
                }

                case Opc.Ua.BrowseNames.MethodId:
                {
                    if (createOrReplace)
                    {
                        if (MethodId == null)
                        {
                            if (replacement == null)
                            {
                                MethodId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                MethodId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = MethodId;
                    break;
                }

                case Opc.Ua.BrowseNames.StatusCodeId:
                {
                    if (createOrReplace)
                    {
                        if (StatusCodeId == null)
                        {
                            if (replacement == null)
                            {
                                StatusCodeId = new PropertyState<StatusCode>(this);
                            }
                            else
                            {
                                StatusCodeId = (PropertyState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = StatusCodeId;
                    break;
                }

                case Opc.Ua.BrowseNames.InputArguments:
                {
                    if (createOrReplace)
                    {
                        if (InputArguments == null)
                        {
                            if (replacement == null)
                            {
                                InputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                InputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = InputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.OutputArguments:
                {
                    if (createOrReplace)
                    {
                        if (OutputArguments == null)
                        {
                            if (replacement == null)
                            {
                                OutputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                OutputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = OutputArguments;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_objectId;
        private PropertyState<NodeId> m_methodId;
        private PropertyState<StatusCode> m_statusCodeId;
        private PropertyState<object[]> m_inputArguments;
        private PropertyState<object[]> m_outputArguments;
        #endregion
    }
    #endif
    #endregion

    #region AggregateFunctionState Class
    #if (!OPCUA_EXCLUDE_AggregateFunctionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateFunctionState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public AggregateFunctionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateFunctionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEFnZ3JlZ2F0ZUZ1bmN0aW9uVHlwZUluc3RhbmNlAQAkCQEAJAkk" +
           "CQAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerVendorCapabilityState Class
    #if (!OPCUA_EXCLUDE_ServerVendorCapabilityState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerVendorCapabilityState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerVendorCapabilityType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIgAAAFNlcnZlclZlbmRvckNhcGFiaWxpdHlUeXBlSW5zdGFuY2UBAFkI" +
           "AQBZCFkIAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region ServerVendorCapabilityState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerVendorCapabilityState<T> : ServerVendorCapabilityState
    {
        #region Constructors
        /// <remarks />
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerStatusState Class
    #if (!OPCUA_EXCLUDE_ServerStatusState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerStatusState : BaseDataVariableState<Opc.Ua.ServerStatusDataType>
    {
        #region Constructors
        /// <remarks />
        public ServerStatusState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerStatusType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerStatusDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGAAAAFNlcnZlclN0YXR1c1R5cGVJbnN0YW5jZQEAWggBAFoIWggAAAEA" +
           "XgP/////AQH/////BgAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQBbCAAvAD9bCAAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABDdXJyZW50VGltZQEAXAgALwA/XAgAAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAFAAAAU3RhdGUBAF0IAC8AP10IAAABAFQD/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEJ1aWxkSW5mbwEAXggALwEA6wteCAAAAQBSAf////8BAf////8GAAAAFXCJCgIAAAAAAAoA" +
           "AABQcm9kdWN0VXJpAQByDgAvAD9yDgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAABAA" +
           "AABNYW51ZmFjdHVyZXJOYW1lAQBzDgAvAD9zDgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIA" +
           "AAAAAAsAAABQcm9kdWN0TmFtZQEAdA4ALwA/dA4AAAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoC" +
           "AAAAAAAPAAAAU29mdHdhcmVWZXJzaW9uAQB1DgAvAD91DgAAAAz/////AQEAAAAAAECPQP////8AAAAA" +
           "FXCJCgIAAAAAAAsAAABCdWlsZE51bWJlcgEAdg4ALwA/dg4AAAAM/////wEBAAAAAABAj0D/////AAAA" +
           "ABVwiQoCAAAAAAAJAAAAQnVpbGREYXRlAQB3DgAvAD93DgAAAQAmAf////8BAQAAAAAAQI9A/////wAA" +
           "AAAVYIkKAgAAAAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24BAMAKAC8AP8AKAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA4AAABTaHV0ZG93blJlYXNvbgEAwQoALwA/wQoAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> CurrentTime
        {
            get
            {
                return m_currentTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServerState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }

        /// <remarks />
        public BuildInfoVariableState BuildInfo
        {
            get
            {
                return m_buildInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildInfo = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecondsTillShutdown
        {
            get
            {
                return m_secondsTillShutdown;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secondsTillShutdown, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secondsTillShutdown = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<LocalizedText> ShutdownReason
        {
            get
            {
                return m_shutdownReason;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shutdownReason, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shutdownReason = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_currentTime != null)
            {
                children.Add(m_currentTime);
            }

            if (m_state != null)
            {
                children.Add(m_state);
            }

            if (m_buildInfo != null)
            {
                children.Add(m_buildInfo);
            }

            if (m_secondsTillShutdown != null)
            {
                children.Add(m_secondsTillShutdown);
            }

            if (m_shutdownReason != null)
            {
                children.Add(m_shutdownReason);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentTime:
                {
                    if (createOrReplace)
                    {
                        if (CurrentTime == null)
                        {
                            if (replacement == null)
                            {
                                CurrentTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                CurrentTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = CurrentTime;
                    break;
                }

                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new BaseDataVariableState<ServerState>(this);
                            }
                            else
                            {
                                State = (BaseDataVariableState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildInfo:
                {
                    if (createOrReplace)
                    {
                        if (BuildInfo == null)
                        {
                            if (replacement == null)
                            {
                                BuildInfo = new BuildInfoVariableState(this);
                            }
                            else
                            {
                                BuildInfo = (BuildInfoVariableState)replacement;
                            }
                        }
                    }

                    instance = BuildInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.SecondsTillShutdown:
                {
                    if (createOrReplace)
                    {
                        if (SecondsTillShutdown == null)
                        {
                            if (replacement == null)
                            {
                                SecondsTillShutdown = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecondsTillShutdown = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecondsTillShutdown;
                    break;
                }

                case Opc.Ua.BrowseNames.ShutdownReason:
                {
                    if (createOrReplace)
                    {
                        if (ShutdownReason == null)
                        {
                            if (replacement == null)
                            {
                                ShutdownReason = new BaseDataVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                ShutdownReason = (BaseDataVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ShutdownReason;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<DateTime> m_startTime;
        private BaseDataVariableState<DateTime> m_currentTime;
        private BaseDataVariableState<ServerState> m_state;
        private BuildInfoVariableState m_buildInfo;
        private BaseDataVariableState<uint> m_secondsTillShutdown;
        private BaseDataVariableState<LocalizedText> m_shutdownReason;
        #endregion
    }

    #region ServerStatusValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerStatusValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ServerStatusValue(ServerStatusState variable, ServerStatusDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerStatusDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ServerStatusState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ServerStatusDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ServerStatusState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.StartTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_StartTime;
                    instance.OnWriteValue = OnWrite_StartTime;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentTime;
                    instance.OnWriteValue = OnWrite_CurrentTime;
                    updateList.Add(instance);
                }
                instance = m_variable.State;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_State;
                    instance.OnWriteValue = OnWrite_State;
                    updateList.Add(instance);
                }
                instance = m_variable.BuildInfo;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_BuildInfo;
                    instance.OnWriteValue = OnWrite_BuildInfo;
                    updateList.Add(instance);
                }
                instance = m_variable.SecondsTillShutdown;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SecondsTillShutdown;
                    instance.OnWriteValue = OnWrite_SecondsTillShutdown;
                    updateList.Add(instance);
                }
                instance = m_variable.ShutdownReason;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ShutdownReason;
                    instance.OnWriteValue = OnWrite_ShutdownReason;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ServerStatusDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ServerStatusDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (ServerStatusDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ServerStatusDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ServerStatusDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.StartTime, newValue.StartTime)) UpdateChildVariableStatus(m_variable.StartTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentTime, newValue.CurrentTime)) UpdateChildVariableStatus(m_variable.CurrentTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.State, newValue.State)) UpdateChildVariableStatus(m_variable.State, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.BuildInfo, newValue.BuildInfo)) UpdateChildVariableStatus(m_variable.BuildInfo, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SecondsTillShutdown, newValue.SecondsTillShutdown)) UpdateChildVariableStatus(m_variable.SecondsTillShutdown, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ShutdownReason, newValue.ShutdownReason)) UpdateChildVariableStatus(m_variable.ShutdownReason, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region StartTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_StartTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.StartTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.StartTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_StartTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.StartTime, ref statusCode, ref timestamp);
                m_value.StartTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentTime, ref statusCode, ref timestamp);
                m_value.CurrentTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region State Access Methods
        /// <remarks />
        private ServiceResult OnRead_State(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.State;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.State;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_State(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.State, ref statusCode, ref timestamp);
                m_value.State = (ServerState)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo Access Methods
        /// <remarks />
        private ServiceResult OnRead_BuildInfo(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.BuildInfo;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.BuildInfo;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_BuildInfo(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.BuildInfo, ref statusCode, ref timestamp);
                m_value.BuildInfo = (BuildInfo)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecondsTillShutdown Access Methods
        /// <remarks />
        private ServiceResult OnRead_SecondsTillShutdown(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SecondsTillShutdown;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SecondsTillShutdown;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SecondsTillShutdown(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SecondsTillShutdown, ref statusCode, ref timestamp);
                m_value.SecondsTillShutdown = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ShutdownReason Access Methods
        /// <remarks />
        private ServiceResult OnRead_ShutdownReason(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ShutdownReason;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ShutdownReason;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ShutdownReason(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ShutdownReason, ref statusCode, ref timestamp);
                m_value.ShutdownReason = (LocalizedText)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerStatusDataType m_value;
        private ServerStatusState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region BuildInfoVariableState Class
    #if (!OPCUA_EXCLUDE_BuildInfoVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BuildInfoVariableState : BaseDataVariableState<Opc.Ua.BuildInfo>
    {
        #region Constructors
        /// <remarks />
        public BuildInfoVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.BuildInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BuildInfo, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAEJ1aWxkSW5mb1R5cGVJbnN0YW5jZQEA6wsBAOsL6wsAAAEAUgH/" +
           "////AQH/////BgAAABVwiQoCAAAAAAAKAAAAUHJvZHVjdFVyaQEA7AsALwA/7AsAAAAM/////wEBAAAA" +
           "AABAj0D/////AAAAABVwiQoCAAAAAAAQAAAATWFudWZhY3R1cmVyTmFtZQEA7QsALwA/7QsAAAAM////" +
           "/wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAALAAAAUHJvZHVjdE5hbWUBAO4LAC8AP+4LAAAADP//" +
           "//8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAADwAAAFNvZnR3YXJlVmVyc2lvbgEA7wsALwA/7wsA" +
           "AAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAALAAAAQnVpbGROdW1iZXIBAPALAC8AP/AL" +
           "AAAADP////8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAACQAAAEJ1aWxkRGF0ZQEA8QsALwA/8QsA" +
           "AAEAJgH/////AQEAAAAAAECPQP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> ProductUri
        {
            get
            {
                return m_productUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ManufacturerName
        {
            get
            {
                return m_manufacturerName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_manufacturerName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_manufacturerName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ProductName
        {
            get
            {
                return m_productName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SoftwareVersion
        {
            get
            {
                return m_softwareVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareVersion = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> BuildNumber
        {
            get
            {
                return m_buildNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> BuildDate
        {
            get
            {
                return m_buildDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildDate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_productUri != null)
            {
                children.Add(m_productUri);
            }

            if (m_manufacturerName != null)
            {
                children.Add(m_manufacturerName);
            }

            if (m_productName != null)
            {
                children.Add(m_productName);
            }

            if (m_softwareVersion != null)
            {
                children.Add(m_softwareVersion);
            }

            if (m_buildNumber != null)
            {
                children.Add(m_buildNumber);
            }

            if (m_buildDate != null)
            {
                children.Add(m_buildDate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ProductUri:
                {
                    if (createOrReplace)
                    {
                        if (ProductUri == null)
                        {
                            if (replacement == null)
                            {
                                ProductUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ManufacturerName:
                {
                    if (createOrReplace)
                    {
                        if (ManufacturerName == null)
                        {
                            if (replacement == null)
                            {
                                ManufacturerName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ManufacturerName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ManufacturerName;
                    break;
                }

                case Opc.Ua.BrowseNames.ProductName:
                {
                    if (createOrReplace)
                    {
                        if (ProductName == null)
                        {
                            if (replacement == null)
                            {
                                ProductName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductName;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareVersion:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareVersion == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareVersion = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SoftwareVersion = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SoftwareVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildNumber:
                {
                    if (createOrReplace)
                    {
                        if (BuildNumber == null)
                        {
                            if (replacement == null)
                            {
                                BuildNumber = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                BuildNumber = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = BuildNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildDate:
                {
                    if (createOrReplace)
                    {
                        if (BuildDate == null)
                        {
                            if (replacement == null)
                            {
                                BuildDate = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                BuildDate = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = BuildDate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_productUri;
        private BaseDataVariableState<string> m_manufacturerName;
        private BaseDataVariableState<string> m_productName;
        private BaseDataVariableState<string> m_softwareVersion;
        private BaseDataVariableState<string> m_buildNumber;
        private BaseDataVariableState<DateTime> m_buildDate;
        #endregion
    }

    #region BuildInfoVariableValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class BuildInfoVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public BuildInfoVariableValue(BuildInfoVariableState variable, BuildInfo value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new BuildInfo();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public BuildInfoVariableState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public BuildInfo Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(BuildInfoVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ProductUri;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ProductUri;
                    instance.OnWriteValue = OnWrite_ProductUri;
                    updateList.Add(instance);
                }
                instance = m_variable.ManufacturerName;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ManufacturerName;
                    instance.OnWriteValue = OnWrite_ManufacturerName;
                    updateList.Add(instance);
                }
                instance = m_variable.ProductName;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ProductName;
                    instance.OnWriteValue = OnWrite_ProductName;
                    updateList.Add(instance);
                }
                instance = m_variable.SoftwareVersion;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SoftwareVersion;
                    instance.OnWriteValue = OnWrite_SoftwareVersion;
                    updateList.Add(instance);
                }
                instance = m_variable.BuildNumber;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_BuildNumber;
                    instance.OnWriteValue = OnWrite_BuildNumber;
                    updateList.Add(instance);
                }
                instance = m_variable.BuildDate;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_BuildDate;
                    instance.OnWriteValue = OnWrite_BuildDate;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                BuildInfo newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (BuildInfo)extensionObject.Body;
                }
                else
                {
                    newValue = (BuildInfo)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (BuildInfo)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref BuildInfo newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.ProductUri, newValue.ProductUri)) UpdateChildVariableStatus(m_variable.ProductUri, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ManufacturerName, newValue.ManufacturerName)) UpdateChildVariableStatus(m_variable.ManufacturerName, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ProductName, newValue.ProductName)) UpdateChildVariableStatus(m_variable.ProductName, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SoftwareVersion, newValue.SoftwareVersion)) UpdateChildVariableStatus(m_variable.SoftwareVersion, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.BuildNumber, newValue.BuildNumber)) UpdateChildVariableStatus(m_variable.BuildNumber, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.BuildDate, newValue.BuildDate)) UpdateChildVariableStatus(m_variable.BuildDate, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region ProductUri Access Methods
        /// <remarks />
        private ServiceResult OnRead_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ProductUri;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ProductUri;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ProductUri, ref statusCode, ref timestamp);
                m_value.ProductUri = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ManufacturerName Access Methods
        /// <remarks />
        private ServiceResult OnRead_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ManufacturerName;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ManufacturerName;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ManufacturerName, ref statusCode, ref timestamp);
                m_value.ManufacturerName = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ProductName Access Methods
        /// <remarks />
        private ServiceResult OnRead_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ProductName;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ProductName;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ProductName, ref statusCode, ref timestamp);
                m_value.ProductName = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SoftwareVersion Access Methods
        /// <remarks />
        private ServiceResult OnRead_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SoftwareVersion;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SoftwareVersion;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SoftwareVersion, ref statusCode, ref timestamp);
                m_value.SoftwareVersion = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildNumber Access Methods
        /// <remarks />
        private ServiceResult OnRead_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.BuildNumber;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.BuildNumber;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.BuildNumber, ref statusCode, ref timestamp);
                m_value.BuildNumber = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildDate Access Methods
        /// <remarks />
        private ServiceResult OnRead_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.BuildDate;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.BuildDate;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.BuildDate, ref statusCode, ref timestamp);
                m_value.BuildDate = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private BuildInfo m_value;
        private BuildInfoVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsSummaryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsSummaryState : BaseDataVariableState<Opc.Ua.ServerDiagnosticsSummaryDataType>
    {
        #region Constructors
        /// <remarks />
        public ServerDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerDiagnosticsSummaryDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJAAAAFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeVR5cGVJbnN0YW5jZQEA" +
           "ZggBAGYIZggAAAEAWwP/////AQH/////DAAAABVgiQoCAAAAAAAPAAAAU2VydmVyVmlld0NvdW50AQBn" +
           "CAAvAD9nCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAQ3VycmVudFNlc3Npb25Db3VudAEA" +
           "aAgALwA/aAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAEN1bXVsYXRlZFNlc3Npb25Db3Vu" +
           "dAEAaQgALwA/aQgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAFNlY3VyaXR5UmVqZWN0ZWRT" +
           "ZXNzaW9uQ291bnQBAGoIAC8AP2oIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABSZWplY3Rl" +
           "ZFNlc3Npb25Db3VudAEAawgALwA/awgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFNlc3Np" +
           "b25UaW1lb3V0Q291bnQBAGwIAC8AP2wIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABEAAABTZXNz" +
           "aW9uQWJvcnRDb3VudAEAbQgALwA/bQgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAFB1Ymxp" +
           "c2hpbmdJbnRlcnZhbENvdW50AQBvCAAvAD9vCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAA" +
           "Q3VycmVudFN1YnNjcmlwdGlvbkNvdW50AQBwCAAvAD9wCAAAAAf/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAaAAAAQ3VtdWxhdGVkU3Vic2NyaXB0aW9uQ291bnQBAHEIAC8AP3EIAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAB0AAABTZWN1cml0eVJlamVjdGVkUmVxdWVzdHNDb3VudAEAcggALwA/cggAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJlamVjdGVkUmVxdWVzdHNDb3VudAEAcwgALwA/cwgAAAAH" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> ServerViewCount
        {
            get
            {
                return m_serverViewCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverViewCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverViewCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSessionCount
        {
            get
            {
                return m_currentSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSessionCount
        {
            get
            {
                return m_cumulatedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedSessionCount
        {
            get
            {
                return m_securityRejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedSessionCount
        {
            get
            {
                return m_rejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionTimeoutCount
        {
            get
            {
                return m_sessionTimeoutCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionTimeoutCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionTimeoutCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionAbortCount
        {
            get
            {
                return m_sessionAbortCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionAbortCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionAbortCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishingIntervalCount
        {
            get
            {
                return m_publishingIntervalCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingIntervalCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingIntervalCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionCount
        {
            get
            {
                return m_currentSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSubscriptionCount
        {
            get
            {
                return m_cumulatedSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedRequestsCount
        {
            get
            {
                return m_securityRejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedRequestsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedRequestsCount
        {
            get
            {
                return m_rejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedRequestsCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverViewCount != null)
            {
                children.Add(m_serverViewCount);
            }

            if (m_currentSessionCount != null)
            {
                children.Add(m_currentSessionCount);
            }

            if (m_cumulatedSessionCount != null)
            {
                children.Add(m_cumulatedSessionCount);
            }

            if (m_securityRejectedSessionCount != null)
            {
                children.Add(m_securityRejectedSessionCount);
            }

            if (m_rejectedSessionCount != null)
            {
                children.Add(m_rejectedSessionCount);
            }

            if (m_sessionTimeoutCount != null)
            {
                children.Add(m_sessionTimeoutCount);
            }

            if (m_sessionAbortCount != null)
            {
                children.Add(m_sessionAbortCount);
            }

            if (m_publishingIntervalCount != null)
            {
                children.Add(m_publishingIntervalCount);
            }

            if (m_currentSubscriptionCount != null)
            {
                children.Add(m_currentSubscriptionCount);
            }

            if (m_cumulatedSubscriptionCount != null)
            {
                children.Add(m_cumulatedSubscriptionCount);
            }

            if (m_securityRejectedRequestsCount != null)
            {
                children.Add(m_securityRejectedRequestsCount);
            }

            if (m_rejectedRequestsCount != null)
            {
                children.Add(m_rejectedRequestsCount);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerViewCount:
                {
                    if (createOrReplace)
                    {
                        if (ServerViewCount == null)
                        {
                            if (replacement == null)
                            {
                                ServerViewCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ServerViewCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ServerViewCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionTimeoutCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionTimeoutCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionTimeoutCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionTimeoutCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionTimeoutCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionAbortCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionAbortCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionAbortCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionAbortCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionAbortCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingIntervalCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishingIntervalCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishingIntervalCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishingIntervalCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishingIntervalCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedRequestsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedRequestsCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_serverViewCount;
        private BaseDataVariableState<uint> m_currentSessionCount;
        private BaseDataVariableState<uint> m_cumulatedSessionCount;
        private BaseDataVariableState<uint> m_securityRejectedSessionCount;
        private BaseDataVariableState<uint> m_rejectedSessionCount;
        private BaseDataVariableState<uint> m_sessionTimeoutCount;
        private BaseDataVariableState<uint> m_sessionAbortCount;
        private BaseDataVariableState<uint> m_publishingIntervalCount;
        private BaseDataVariableState<uint> m_currentSubscriptionCount;
        private BaseDataVariableState<uint> m_cumulatedSubscriptionCount;
        private BaseDataVariableState<uint> m_securityRejectedRequestsCount;
        private BaseDataVariableState<uint> m_rejectedRequestsCount;
        #endregion
    }

    #region ServerDiagnosticsSummaryValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerDiagnosticsSummaryValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ServerDiagnosticsSummaryValue(ServerDiagnosticsSummaryState variable, ServerDiagnosticsSummaryDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerDiagnosticsSummaryDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ServerDiagnosticsSummaryState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ServerDiagnosticsSummaryDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ServerDiagnosticsSummaryState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ServerViewCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ServerViewCount;
                    instance.OnWriteValue = OnWrite_ServerViewCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentSessionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentSessionCount;
                    instance.OnWriteValue = OnWrite_CurrentSessionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CumulatedSessionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CumulatedSessionCount;
                    instance.OnWriteValue = OnWrite_CumulatedSessionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SecurityRejectedSessionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SecurityRejectedSessionCount;
                    instance.OnWriteValue = OnWrite_SecurityRejectedSessionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RejectedSessionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RejectedSessionCount;
                    instance.OnWriteValue = OnWrite_RejectedSessionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SessionTimeoutCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionTimeoutCount;
                    instance.OnWriteValue = OnWrite_SessionTimeoutCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SessionAbortCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionAbortCount;
                    instance.OnWriteValue = OnWrite_SessionAbortCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentSubscriptionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentSubscriptionCount;
                    instance.OnWriteValue = OnWrite_CurrentSubscriptionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CumulatedSubscriptionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CumulatedSubscriptionCount;
                    instance.OnWriteValue = OnWrite_CumulatedSubscriptionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.PublishingIntervalCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_PublishingIntervalCount;
                    instance.OnWriteValue = OnWrite_PublishingIntervalCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SecurityRejectedRequestsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SecurityRejectedRequestsCount;
                    instance.OnWriteValue = OnWrite_SecurityRejectedRequestsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RejectedRequestsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RejectedRequestsCount;
                    instance.OnWriteValue = OnWrite_RejectedRequestsCount;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ServerDiagnosticsSummaryDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ServerDiagnosticsSummaryDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (ServerDiagnosticsSummaryDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ServerDiagnosticsSummaryDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ServerDiagnosticsSummaryDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.ServerViewCount, newValue.ServerViewCount)) UpdateChildVariableStatus(m_variable.ServerViewCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentSessionCount, newValue.CurrentSessionCount)) UpdateChildVariableStatus(m_variable.CurrentSessionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CumulatedSessionCount, newValue.CumulatedSessionCount)) UpdateChildVariableStatus(m_variable.CumulatedSessionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SecurityRejectedSessionCount, newValue.SecurityRejectedSessionCount)) UpdateChildVariableStatus(m_variable.SecurityRejectedSessionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RejectedSessionCount, newValue.RejectedSessionCount)) UpdateChildVariableStatus(m_variable.RejectedSessionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SessionTimeoutCount, newValue.SessionTimeoutCount)) UpdateChildVariableStatus(m_variable.SessionTimeoutCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SessionAbortCount, newValue.SessionAbortCount)) UpdateChildVariableStatus(m_variable.SessionAbortCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentSubscriptionCount, newValue.CurrentSubscriptionCount)) UpdateChildVariableStatus(m_variable.CurrentSubscriptionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CumulatedSubscriptionCount, newValue.CumulatedSubscriptionCount)) UpdateChildVariableStatus(m_variable.CumulatedSubscriptionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.PublishingIntervalCount, newValue.PublishingIntervalCount)) UpdateChildVariableStatus(m_variable.PublishingIntervalCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SecurityRejectedRequestsCount, newValue.SecurityRejectedRequestsCount)) UpdateChildVariableStatus(m_variable.SecurityRejectedRequestsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RejectedRequestsCount, newValue.RejectedRequestsCount)) UpdateChildVariableStatus(m_variable.RejectedRequestsCount, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region ServerViewCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_ServerViewCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ServerViewCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ServerViewCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ServerViewCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ServerViewCount, ref statusCode, ref timestamp);
                m_value.ServerViewCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSessionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentSessionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentSessionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentSessionCount, ref statusCode, ref timestamp);
                m_value.CurrentSessionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSessionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CumulatedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CumulatedSessionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CumulatedSessionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CumulatedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CumulatedSessionCount, ref statusCode, ref timestamp);
                m_value.CumulatedSessionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedSessionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SecurityRejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SecurityRejectedSessionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedSessionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SecurityRejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SecurityRejectedSessionCount, ref statusCode, ref timestamp);
                m_value.SecurityRejectedSessionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedSessionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RejectedSessionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RejectedSessionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RejectedSessionCount, ref statusCode, ref timestamp);
                m_value.RejectedSessionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionTimeoutCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionTimeoutCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionTimeoutCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionTimeoutCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionTimeoutCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionTimeoutCount, ref statusCode, ref timestamp);
                m_value.SessionTimeoutCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionAbortCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionAbortCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionAbortCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionAbortCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionAbortCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionAbortCount, ref statusCode, ref timestamp);
                m_value.SessionAbortCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentSubscriptionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentSubscriptionCount, ref statusCode, ref timestamp);
                m_value.CurrentSubscriptionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSubscriptionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CumulatedSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CumulatedSubscriptionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CumulatedSubscriptionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CumulatedSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CumulatedSubscriptionCount, ref statusCode, ref timestamp);
                m_value.CumulatedSubscriptionCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingIntervalCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_PublishingIntervalCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.PublishingIntervalCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.PublishingIntervalCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_PublishingIntervalCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.PublishingIntervalCount, ref statusCode, ref timestamp);
                m_value.PublishingIntervalCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedRequestsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SecurityRejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SecurityRejectedRequestsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedRequestsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SecurityRejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SecurityRejectedRequestsCount, ref statusCode, ref timestamp);
                m_value.SecurityRejectedRequestsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedRequestsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RejectedRequestsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RejectedRequestsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RejectedRequestsCount, ref statusCode, ref timestamp);
                m_value.RejectedRequestsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryDataType m_value;
        private ServerDiagnosticsSummaryState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsArrayState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsArrayState : BaseDataVariableState<Opc.Ua.SamplingIntervalDiagnosticsDataType[]>
    {
        #region Constructors
        /// <remarks />
        public SamplingIntervalDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAALAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5VHlwZUlu" +
           "c3RhbmNlAQB0CAEAdAh0CAAAAQBYAwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsState : BaseDataVariableState<Opc.Ua.SamplingIntervalDiagnosticsDataType>
    {
        #region Constructors
        /// <remarks />
        public SamplingIntervalDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJwAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc1R5cGVJbnN0YW5j" +
           "ZQEAdQgBAHUIdQgAAAEAWAP/////AQH/////BAAAABVgiQoCAAAAAAAQAAAAU2FtcGxpbmdJbnRlcnZh" +
           "bAEAdggALwA/dggAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAU2FtcGxlZE1vbml0b3Jl" +
           "ZEl0ZW1zQ291bnQBALEtAC8AP7EtAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABNYXhTYW1w" +
           "bGVkTW9uaXRvcmVkSXRlbXNDb3VudAEAsi0ALwA/si0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "IwAAAERpc2FibGVkTW9uaXRvcmVkSXRlbXNTYW1wbGluZ0NvdW50AQCzLQAvAD+zLQAAAAf/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> SamplingInterval
        {
            get
            {
                return m_samplingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SampledMonitoredItemsCount
        {
            get
            {
                return m_sampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxSampledMonitoredItemsCount
        {
            get
            {
                return m_maxSampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemsSamplingCount
        {
            get
            {
                return m_disabledMonitoredItemsSamplingCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemsSamplingCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemsSamplingCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_samplingInterval != null)
            {
                children.Add(m_samplingInterval);
            }

            if (m_sampledMonitoredItemsCount != null)
            {
                children.Add(m_sampledMonitoredItemsCount);
            }

            if (m_maxSampledMonitoredItemsCount != null)
            {
                children.Add(m_maxSampledMonitoredItemsCount);
            }

            if (m_disabledMonitoredItemsSamplingCount != null)
            {
                children.Add(m_disabledMonitoredItemsSamplingCount);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SamplingInterval:
                {
                    if (createOrReplace)
                    {
                        if (SamplingInterval == null)
                        {
                            if (replacement == null)
                            {
                                SamplingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                SamplingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = SamplingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.SampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (SampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                SampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxSampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxSampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxSampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemsSamplingCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemsSamplingCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemsSamplingCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemsSamplingCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_samplingInterval;
        private BaseDataVariableState<uint> m_sampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_maxSampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemsSamplingCount;
        #endregion
    }

    #region SamplingIntervalDiagnosticsValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SamplingIntervalDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public SamplingIntervalDiagnosticsValue(SamplingIntervalDiagnosticsState variable, SamplingIntervalDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SamplingIntervalDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public SamplingIntervalDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public SamplingIntervalDiagnosticsDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(SamplingIntervalDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SamplingInterval;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SamplingInterval;
                    instance.OnWriteValue = OnWrite_SamplingInterval;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                SamplingIntervalDiagnosticsDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (SamplingIntervalDiagnosticsDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (SamplingIntervalDiagnosticsDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (SamplingIntervalDiagnosticsDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref SamplingIntervalDiagnosticsDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.SamplingInterval, newValue.SamplingInterval)) UpdateChildVariableStatus(m_variable.SamplingInterval, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region SamplingInterval Access Methods
        /// <remarks />
        private ServiceResult OnRead_SamplingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SamplingInterval;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SamplingInterval;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SamplingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SamplingInterval, ref statusCode, ref timestamp);
                m_value.SamplingInterval = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SamplingIntervalDiagnosticsDataType m_value;
        private SamplingIntervalDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SubscriptionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsArrayState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsArrayState : BaseDataVariableState<Opc.Ua.SubscriptionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <remarks />
        public SubscriptionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAKAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXlUeXBlSW5zdGFu" +
           "Y2UBAHsIAQB7CHsIAAABAGoDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SubscriptionDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsState : BaseDataVariableState<Opc.Ua.SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <remarks />
        public SubscriptionDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIwAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQB8" +
           "CAEAfAh8CAAAAQBqA/////8BAf////8fAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAH0IAC8AP30I" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABTdWJzY3JpcHRpb25JZAEAfggALwA/fggAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFByaW9yaXR5AQB/CAAvAD9/CAAAAAP/////AQH/////" +
           "AAAAABVgiQoCAAAAAAASAAAAUHVibGlzaGluZ0ludGVydmFsAQCACAAvAD+ACAAAAQAiAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABEAAABNYXhLZWVwQWxpdmVDb3VudAEAgQgALwA/gQgAAAAH/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEAAAAE1heExpZmV0aW1lQ291bnQBALgiAC8AP7giAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABoAAABNYXhOb3RpZmljYXRpb25zUGVyUHVibGlzaAEAgwgALwA/gwgAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFB1Ymxpc2hpbmdFbmFibGVkAQCECAAvAD+ECAAAAAH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAALAAAATW9kaWZ5Q291bnQBAIUIAC8AP4UIAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABFbmFibGVDb3VudAEAhggALwA/hggAAAAH/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADAAAAERpc2FibGVDb3VudAEAhwgALwA/hwgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FQAAAFJlcHVibGlzaFJlcXVlc3RDb3VudAEAiAgALwA/iAgAAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAHAAAAFJlcHVibGlzaE1lc3NhZ2VSZXF1ZXN0Q291bnQBAIkIAC8AP4kIAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABUAAABSZXB1Ymxpc2hNZXNzYWdlQ291bnQBAIoIAC8AP4oIAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABQAAABUcmFuc2ZlclJlcXVlc3RDb3VudAEAiwgALwA/iwgAAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAGwAAAFRyYW5zZmVycmVkVG9BbHRDbGllbnRDb3VudAEAjAgALwA/jAgA" +
           "AAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHAAAAFRyYW5zZmVycmVkVG9TYW1lQ2xpZW50Q291bnQB" +
           "AI0IAC8AP40IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQdWJsaXNoUmVxdWVzdENvdW50" +
           "AQCOCAAvAD+OCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAARGF0YUNoYW5nZU5vdGlmaWNh" +
           "dGlvbnNDb3VudAEAjwgALwA/jwgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAEV2ZW50Tm90" +
           "aWZpY2F0aW9uc0NvdW50AQC2CwAvAD+2CwAAAAf/////AQH/////AAAAABVgiQoCAAAAAAASAAAATm90" +
           "aWZpY2F0aW9uc0NvdW50AQCRCAAvAD+RCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAATGF0" +
           "ZVB1Ymxpc2hSZXF1ZXN0Q291bnQBALkiAC8AP7kiAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABUA" +
           "AABDdXJyZW50S2VlcEFsaXZlQ291bnQBALoiAC8AP7oiAAAAB/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABQAAABDdXJyZW50TGlmZXRpbWVDb3VudAEAuyIALwA/uyIAAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAGgAAAFVuYWNrbm93bGVkZ2VkTWVzc2FnZUNvdW50AQC8IgAvAD+8IgAAAAf/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAVAAAARGlzY2FyZGVkTWVzc2FnZUNvdW50AQC9IgAvAD+9IgAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAASAAAATW9uaXRvcmVkSXRlbUNvdW50AQC+IgAvAD++IgAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAaAAAARGlzYWJsZWRNb25pdG9yZWRJdGVtQ291bnQBAL8iAC8AP78iAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABwAAABNb25pdG9yaW5nUXVldWVPdmVyZmxvd0NvdW50AQDAIgAv" +
           "AD/AIgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAASAAAATmV4dFNlcXVlbmNlTnVtYmVyAQDBIgAv" +
           "AD/BIgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAARXZlbnRRdWV1ZU92ZXJmbG93Q291bnQB" +
           "AMYiAC8AP8YiAAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SubscriptionId
        {
            get
            {
                return m_subscriptionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> Priority
        {
            get
            {
                return m_priority;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priority, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priority = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> PublishingInterval
        {
            get
            {
                return m_publishingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxKeepAliveCount
        {
            get
            {
                return m_maxKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxLifetimeCount
        {
            get
            {
                return m_maxLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxNotificationsPerPublish
        {
            get
            {
                return m_maxNotificationsPerPublish;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNotificationsPerPublish, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNotificationsPerPublish = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<bool> PublishingEnabled
        {
            get
            {
                return m_publishingEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingEnabled = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> ModifyCount
        {
            get
            {
                return m_modifyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EnableCount
        {
            get
            {
                return m_enableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisableCount
        {
            get
            {
                return m_disableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishRequestCount
        {
            get
            {
                return m_republishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageRequestCount
        {
            get
            {
                return m_republishMessageRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageCount
        {
            get
            {
                return m_republishMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferRequestCount
        {
            get
            {
                return m_transferRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToAltClientCount
        {
            get
            {
                return m_transferredToAltClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToAltClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToAltClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToSameClientCount
        {
            get
            {
                return m_transferredToSameClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToSameClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToSameClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishRequestCount
        {
            get
            {
                return m_publishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DataChangeNotificationsCount
        {
            get
            {
                return m_dataChangeNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataChangeNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataChangeNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventNotificationsCount
        {
            get
            {
                return m_eventNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NotificationsCount
        {
            get
            {
                return m_notificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_notificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_notificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> LatePublishRequestCount
        {
            get
            {
                return m_latePublishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_latePublishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_latePublishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentKeepAliveCount
        {
            get
            {
                return m_currentKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentLifetimeCount
        {
            get
            {
                return m_currentLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnacknowledgedMessageCount
        {
            get
            {
                return m_unacknowledgedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unacknowledgedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unacknowledgedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DiscardedMessageCount
        {
            get
            {
                return m_discardedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discardedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discardedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoredItemCount
        {
            get
            {
                return m_monitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemCount
        {
            get
            {
                return m_disabledMonitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoringQueueOverflowCount
        {
            get
            {
                return m_monitoringQueueOverflowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoringQueueOverflowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoringQueueOverflowCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NextSequenceNumber
        {
            get
            {
                return m_nextSequenceNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nextSequenceNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nextSequenceNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventQueueOverflowCount
        {
            get
            {
                return m_eventQueueOverflowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventQueueOverflowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventQueueOverflowCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_subscriptionId != null)
            {
                children.Add(m_subscriptionId);
            }

            if (m_priority != null)
            {
                children.Add(m_priority);
            }

            if (m_publishingInterval != null)
            {
                children.Add(m_publishingInterval);
            }

            if (m_maxKeepAliveCount != null)
            {
                children.Add(m_maxKeepAliveCount);
            }

            if (m_maxLifetimeCount != null)
            {
                children.Add(m_maxLifetimeCount);
            }

            if (m_maxNotificationsPerPublish != null)
            {
                children.Add(m_maxNotificationsPerPublish);
            }

            if (m_publishingEnabled != null)
            {
                children.Add(m_publishingEnabled);
            }

            if (m_modifyCount != null)
            {
                children.Add(m_modifyCount);
            }

            if (m_enableCount != null)
            {
                children.Add(m_enableCount);
            }

            if (m_disableCount != null)
            {
                children.Add(m_disableCount);
            }

            if (m_republishRequestCount != null)
            {
                children.Add(m_republishRequestCount);
            }

            if (m_republishMessageRequestCount != null)
            {
                children.Add(m_republishMessageRequestCount);
            }

            if (m_republishMessageCount != null)
            {
                children.Add(m_republishMessageCount);
            }

            if (m_transferRequestCount != null)
            {
                children.Add(m_transferRequestCount);
            }

            if (m_transferredToAltClientCount != null)
            {
                children.Add(m_transferredToAltClientCount);
            }

            if (m_transferredToSameClientCount != null)
            {
                children.Add(m_transferredToSameClientCount);
            }

            if (m_publishRequestCount != null)
            {
                children.Add(m_publishRequestCount);
            }

            if (m_dataChangeNotificationsCount != null)
            {
                children.Add(m_dataChangeNotificationsCount);
            }

            if (m_eventNotificationsCount != null)
            {
                children.Add(m_eventNotificationsCount);
            }

            if (m_notificationsCount != null)
            {
                children.Add(m_notificationsCount);
            }

            if (m_latePublishRequestCount != null)
            {
                children.Add(m_latePublishRequestCount);
            }

            if (m_currentKeepAliveCount != null)
            {
                children.Add(m_currentKeepAliveCount);
            }

            if (m_currentLifetimeCount != null)
            {
                children.Add(m_currentLifetimeCount);
            }

            if (m_unacknowledgedMessageCount != null)
            {
                children.Add(m_unacknowledgedMessageCount);
            }

            if (m_discardedMessageCount != null)
            {
                children.Add(m_discardedMessageCount);
            }

            if (m_monitoredItemCount != null)
            {
                children.Add(m_monitoredItemCount);
            }

            if (m_disabledMonitoredItemCount != null)
            {
                children.Add(m_disabledMonitoredItemCount);
            }

            if (m_monitoringQueueOverflowCount != null)
            {
                children.Add(m_monitoringQueueOverflowCount);
            }

            if (m_nextSequenceNumber != null)
            {
                children.Add(m_nextSequenceNumber);
            }

            if (m_eventQueueOverflowCount != null)
            {
                children.Add(m_eventQueueOverflowCount);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionId:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionId == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionId = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SubscriptionId = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SubscriptionId;
                    break;
                }

                case Opc.Ua.BrowseNames.Priority:
                {
                    if (createOrReplace)
                    {
                        if (Priority == null)
                        {
                            if (replacement == null)
                            {
                                Priority = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                Priority = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = Priority;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingInterval:
                {
                    if (createOrReplace)
                    {
                        if (PublishingInterval == null)
                        {
                            if (replacement == null)
                            {
                                PublishingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                PublishingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = PublishingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNotificationsPerPublish:
                {
                    if (createOrReplace)
                    {
                        if (MaxNotificationsPerPublish == null)
                        {
                            if (replacement == null)
                            {
                                MaxNotificationsPerPublish = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxNotificationsPerPublish = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNotificationsPerPublish;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingEnabled:
                {
                    if (createOrReplace)
                    {
                        if (PublishingEnabled == null)
                        {
                            if (replacement == null)
                            {
                                PublishingEnabled = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                PublishingEnabled = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = PublishingEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ModifyCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ModifyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EnableCount:
                {
                    if (createOrReplace)
                    {
                        if (EnableCount == null)
                        {
                            if (replacement == null)
                            {
                                EnableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EnableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EnableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisableCount:
                {
                    if (createOrReplace)
                    {
                        if (DisableCount == null)
                        {
                            if (replacement == null)
                            {
                                DisableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToAltClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToAltClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToAltClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToAltClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToAltClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToSameClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToSameClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToSameClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToSameClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToSameClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DataChangeNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (DataChangeNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                DataChangeNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DataChangeNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataChangeNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EventNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (EventNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                EventNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (NotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                NotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.LatePublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (LatePublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                LatePublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                LatePublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = LatePublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnacknowledgedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (UnacknowledgedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                UnacknowledgedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnacknowledgedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnacknowledgedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscardedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (DiscardedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                DiscardedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DiscardedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscardedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoringQueueOverflowCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoringQueueOverflowCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoringQueueOverflowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoringQueueOverflowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoringQueueOverflowCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NextSequenceNumber:
                {
                    if (createOrReplace)
                    {
                        if (NextSequenceNumber == null)
                        {
                            if (replacement == null)
                            {
                                NextSequenceNumber = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NextSequenceNumber = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NextSequenceNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.EventQueueOverflowCount:
                {
                    if (createOrReplace)
                    {
                        if (EventQueueOverflowCount == null)
                        {
                            if (replacement == null)
                            {
                                EventQueueOverflowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventQueueOverflowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventQueueOverflowCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<uint> m_subscriptionId;
        private BaseDataVariableState<byte> m_priority;
        private BaseDataVariableState<double> m_publishingInterval;
        private BaseDataVariableState<uint> m_maxKeepAliveCount;
        private BaseDataVariableState<uint> m_maxLifetimeCount;
        private BaseDataVariableState<uint> m_maxNotificationsPerPublish;
        private BaseDataVariableState<bool> m_publishingEnabled;
        private BaseDataVariableState<uint> m_modifyCount;
        private BaseDataVariableState<uint> m_enableCount;
        private BaseDataVariableState<uint> m_disableCount;
        private BaseDataVariableState<uint> m_republishRequestCount;
        private BaseDataVariableState<uint> m_republishMessageRequestCount;
        private BaseDataVariableState<uint> m_republishMessageCount;
        private BaseDataVariableState<uint> m_transferRequestCount;
        private BaseDataVariableState<uint> m_transferredToAltClientCount;
        private BaseDataVariableState<uint> m_transferredToSameClientCount;
        private BaseDataVariableState<uint> m_publishRequestCount;
        private BaseDataVariableState<uint> m_dataChangeNotificationsCount;
        private BaseDataVariableState<uint> m_eventNotificationsCount;
        private BaseDataVariableState<uint> m_notificationsCount;
        private BaseDataVariableState<uint> m_latePublishRequestCount;
        private BaseDataVariableState<uint> m_currentKeepAliveCount;
        private BaseDataVariableState<uint> m_currentLifetimeCount;
        private BaseDataVariableState<uint> m_unacknowledgedMessageCount;
        private BaseDataVariableState<uint> m_discardedMessageCount;
        private BaseDataVariableState<uint> m_monitoredItemCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemCount;
        private BaseDataVariableState<uint> m_monitoringQueueOverflowCount;
        private BaseDataVariableState<uint> m_nextSequenceNumber;
        private BaseDataVariableState<uint> m_eventQueueOverflowCount;
        #endregion
    }

    #region SubscriptionDiagnosticsValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SubscriptionDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public SubscriptionDiagnosticsValue(SubscriptionDiagnosticsState variable, SubscriptionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SubscriptionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public SubscriptionDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public SubscriptionDiagnosticsDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(SubscriptionDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionId;
                    instance.OnWriteValue = OnWrite_SessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.SubscriptionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SubscriptionId;
                    instance.OnWriteValue = OnWrite_SubscriptionId;
                    updateList.Add(instance);
                }
                instance = m_variable.Priority;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Priority;
                    instance.OnWriteValue = OnWrite_Priority;
                    updateList.Add(instance);
                }
                instance = m_variable.PublishingInterval;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_PublishingInterval;
                    instance.OnWriteValue = OnWrite_PublishingInterval;
                    updateList.Add(instance);
                }
                instance = m_variable.MaxKeepAliveCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MaxKeepAliveCount;
                    instance.OnWriteValue = OnWrite_MaxKeepAliveCount;
                    updateList.Add(instance);
                }
                instance = m_variable.MaxLifetimeCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MaxLifetimeCount;
                    instance.OnWriteValue = OnWrite_MaxLifetimeCount;
                    updateList.Add(instance);
                }
                instance = m_variable.MaxNotificationsPerPublish;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MaxNotificationsPerPublish;
                    instance.OnWriteValue = OnWrite_MaxNotificationsPerPublish;
                    updateList.Add(instance);
                }
                instance = m_variable.PublishingEnabled;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_PublishingEnabled;
                    instance.OnWriteValue = OnWrite_PublishingEnabled;
                    updateList.Add(instance);
                }
                instance = m_variable.ModifyCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ModifyCount;
                    instance.OnWriteValue = OnWrite_ModifyCount;
                    updateList.Add(instance);
                }
                instance = m_variable.EnableCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_EnableCount;
                    instance.OnWriteValue = OnWrite_EnableCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DisableCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DisableCount;
                    instance.OnWriteValue = OnWrite_DisableCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RepublishRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RepublishRequestCount;
                    instance.OnWriteValue = OnWrite_RepublishRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RepublishMessageRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RepublishMessageRequestCount;
                    instance.OnWriteValue = OnWrite_RepublishMessageRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RepublishMessageCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RepublishMessageCount;
                    instance.OnWriteValue = OnWrite_RepublishMessageCount;
                    updateList.Add(instance);
                }
                instance = m_variable.TransferRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TransferRequestCount;
                    instance.OnWriteValue = OnWrite_TransferRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.TransferredToAltClientCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TransferredToAltClientCount;
                    instance.OnWriteValue = OnWrite_TransferredToAltClientCount;
                    updateList.Add(instance);
                }
                instance = m_variable.TransferredToSameClientCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TransferredToSameClientCount;
                    instance.OnWriteValue = OnWrite_TransferredToSameClientCount;
                    updateList.Add(instance);
                }
                instance = m_variable.PublishRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_PublishRequestCount;
                    instance.OnWriteValue = OnWrite_PublishRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DataChangeNotificationsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DataChangeNotificationsCount;
                    instance.OnWriteValue = OnWrite_DataChangeNotificationsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.EventNotificationsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_EventNotificationsCount;
                    instance.OnWriteValue = OnWrite_EventNotificationsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.NotificationsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_NotificationsCount;
                    instance.OnWriteValue = OnWrite_NotificationsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.LatePublishRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LatePublishRequestCount;
                    instance.OnWriteValue = OnWrite_LatePublishRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentKeepAliveCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentKeepAliveCount;
                    instance.OnWriteValue = OnWrite_CurrentKeepAliveCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentLifetimeCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentLifetimeCount;
                    instance.OnWriteValue = OnWrite_CurrentLifetimeCount;
                    updateList.Add(instance);
                }
                instance = m_variable.UnacknowledgedMessageCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_UnacknowledgedMessageCount;
                    instance.OnWriteValue = OnWrite_UnacknowledgedMessageCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DiscardedMessageCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DiscardedMessageCount;
                    instance.OnWriteValue = OnWrite_DiscardedMessageCount;
                    updateList.Add(instance);
                }
                instance = m_variable.MonitoredItemCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MonitoredItemCount;
                    instance.OnWriteValue = OnWrite_MonitoredItemCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DisabledMonitoredItemCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DisabledMonitoredItemCount;
                    instance.OnWriteValue = OnWrite_DisabledMonitoredItemCount;
                    updateList.Add(instance);
                }
                instance = m_variable.MonitoringQueueOverflowCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MonitoringQueueOverflowCount;
                    instance.OnWriteValue = OnWrite_MonitoringQueueOverflowCount;
                    updateList.Add(instance);
                }
                instance = m_variable.NextSequenceNumber;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_NextSequenceNumber;
                    instance.OnWriteValue = OnWrite_NextSequenceNumber;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                SubscriptionDiagnosticsDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (SubscriptionDiagnosticsDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (SubscriptionDiagnosticsDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (SubscriptionDiagnosticsDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref SubscriptionDiagnosticsDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.SessionId, newValue.SessionId)) UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SubscriptionId, newValue.SubscriptionId)) UpdateChildVariableStatus(m_variable.SubscriptionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Priority, newValue.Priority)) UpdateChildVariableStatus(m_variable.Priority, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.PublishingInterval, newValue.PublishingInterval)) UpdateChildVariableStatus(m_variable.PublishingInterval, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MaxKeepAliveCount, newValue.MaxKeepAliveCount)) UpdateChildVariableStatus(m_variable.MaxKeepAliveCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MaxLifetimeCount, newValue.MaxLifetimeCount)) UpdateChildVariableStatus(m_variable.MaxLifetimeCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MaxNotificationsPerPublish, newValue.MaxNotificationsPerPublish)) UpdateChildVariableStatus(m_variable.MaxNotificationsPerPublish, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.PublishingEnabled, newValue.PublishingEnabled)) UpdateChildVariableStatus(m_variable.PublishingEnabled, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ModifyCount, newValue.ModifyCount)) UpdateChildVariableStatus(m_variable.ModifyCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.EnableCount, newValue.EnableCount)) UpdateChildVariableStatus(m_variable.EnableCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DisableCount, newValue.DisableCount)) UpdateChildVariableStatus(m_variable.DisableCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RepublishRequestCount, newValue.RepublishRequestCount)) UpdateChildVariableStatus(m_variable.RepublishRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RepublishMessageRequestCount, newValue.RepublishMessageRequestCount)) UpdateChildVariableStatus(m_variable.RepublishMessageRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RepublishMessageCount, newValue.RepublishMessageCount)) UpdateChildVariableStatus(m_variable.RepublishMessageCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TransferRequestCount, newValue.TransferRequestCount)) UpdateChildVariableStatus(m_variable.TransferRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TransferredToAltClientCount, newValue.TransferredToAltClientCount)) UpdateChildVariableStatus(m_variable.TransferredToAltClientCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TransferredToSameClientCount, newValue.TransferredToSameClientCount)) UpdateChildVariableStatus(m_variable.TransferredToSameClientCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.PublishRequestCount, newValue.PublishRequestCount)) UpdateChildVariableStatus(m_variable.PublishRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DataChangeNotificationsCount, newValue.DataChangeNotificationsCount)) UpdateChildVariableStatus(m_variable.DataChangeNotificationsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.EventNotificationsCount, newValue.EventNotificationsCount)) UpdateChildVariableStatus(m_variable.EventNotificationsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.NotificationsCount, newValue.NotificationsCount)) UpdateChildVariableStatus(m_variable.NotificationsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LatePublishRequestCount, newValue.LatePublishRequestCount)) UpdateChildVariableStatus(m_variable.LatePublishRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentKeepAliveCount, newValue.CurrentKeepAliveCount)) UpdateChildVariableStatus(m_variable.CurrentKeepAliveCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentLifetimeCount, newValue.CurrentLifetimeCount)) UpdateChildVariableStatus(m_variable.CurrentLifetimeCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.UnacknowledgedMessageCount, newValue.UnacknowledgedMessageCount)) UpdateChildVariableStatus(m_variable.UnacknowledgedMessageCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DiscardedMessageCount, newValue.DiscardedMessageCount)) UpdateChildVariableStatus(m_variable.DiscardedMessageCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MonitoredItemCount, newValue.MonitoredItemCount)) UpdateChildVariableStatus(m_variable.MonitoredItemCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DisabledMonitoredItemCount, newValue.DisabledMonitoredItemCount)) UpdateChildVariableStatus(m_variable.DisabledMonitoredItemCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MonitoringQueueOverflowCount, newValue.MonitoringQueueOverflowCount)) UpdateChildVariableStatus(m_variable.MonitoringQueueOverflowCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.NextSequenceNumber, newValue.NextSequenceNumber)) UpdateChildVariableStatus(m_variable.NextSequenceNumber, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region SessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
                m_value.SessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SubscriptionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_SubscriptionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SubscriptionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SubscriptionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SubscriptionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SubscriptionId, ref statusCode, ref timestamp);
                m_value.SubscriptionId = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Priority Access Methods
        /// <remarks />
        private ServiceResult OnRead_Priority(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Priority;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Priority;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Priority(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Priority, ref statusCode, ref timestamp);
                m_value.Priority = (byte)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingInterval Access Methods
        /// <remarks />
        private ServiceResult OnRead_PublishingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.PublishingInterval;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.PublishingInterval;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_PublishingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.PublishingInterval, ref statusCode, ref timestamp);
                m_value.PublishingInterval = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxKeepAliveCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_MaxKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MaxKeepAliveCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MaxKeepAliveCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MaxKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MaxKeepAliveCount, ref statusCode, ref timestamp);
                m_value.MaxKeepAliveCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxLifetimeCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_MaxLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MaxLifetimeCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MaxLifetimeCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MaxLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MaxLifetimeCount, ref statusCode, ref timestamp);
                m_value.MaxLifetimeCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxNotificationsPerPublish Access Methods
        /// <remarks />
        private ServiceResult OnRead_MaxNotificationsPerPublish(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MaxNotificationsPerPublish;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MaxNotificationsPerPublish;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MaxNotificationsPerPublish(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MaxNotificationsPerPublish, ref statusCode, ref timestamp);
                m_value.MaxNotificationsPerPublish = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingEnabled Access Methods
        /// <remarks />
        private ServiceResult OnRead_PublishingEnabled(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.PublishingEnabled;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.PublishingEnabled;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_PublishingEnabled(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.PublishingEnabled, ref statusCode, ref timestamp);
                m_value.PublishingEnabled = (bool)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_ModifyCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ModifyCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ModifyCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ModifyCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ModifyCount, ref statusCode, ref timestamp);
                m_value.ModifyCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EnableCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_EnableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.EnableCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.EnableCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_EnableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.EnableCount, ref statusCode, ref timestamp);
                m_value.EnableCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisableCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DisableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DisableCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DisableCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DisableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DisableCount, ref statusCode, ref timestamp);
                m_value.DisableCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RepublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RepublishRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RepublishRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RepublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RepublishRequestCount, ref statusCode, ref timestamp);
                m_value.RepublishRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RepublishMessageRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RepublishMessageRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RepublishMessageRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RepublishMessageRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RepublishMessageRequestCount, ref statusCode, ref timestamp);
                m_value.RepublishMessageRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RepublishMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RepublishMessageCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RepublishMessageCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RepublishMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RepublishMessageCount, ref statusCode, ref timestamp);
                m_value.RepublishMessageCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TransferRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TransferRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TransferRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TransferRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TransferRequestCount, ref statusCode, ref timestamp);
                m_value.TransferRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToAltClientCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TransferredToAltClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TransferredToAltClientCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TransferredToAltClientCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TransferredToAltClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TransferredToAltClientCount, ref statusCode, ref timestamp);
                m_value.TransferredToAltClientCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToSameClientCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TransferredToSameClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TransferredToSameClientCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TransferredToSameClientCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TransferredToSameClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TransferredToSameClientCount, ref statusCode, ref timestamp);
                m_value.TransferredToSameClientCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_PublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.PublishRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.PublishRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_PublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.PublishRequestCount, ref statusCode, ref timestamp);
                m_value.PublishRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DataChangeNotificationsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DataChangeNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DataChangeNotificationsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DataChangeNotificationsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DataChangeNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DataChangeNotificationsCount, ref statusCode, ref timestamp);
                m_value.DataChangeNotificationsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EventNotificationsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_EventNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.EventNotificationsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.EventNotificationsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_EventNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.EventNotificationsCount, ref statusCode, ref timestamp);
                m_value.EventNotificationsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NotificationsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_NotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.NotificationsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.NotificationsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_NotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.NotificationsCount, ref statusCode, ref timestamp);
                m_value.NotificationsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LatePublishRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_LatePublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LatePublishRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LatePublishRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LatePublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LatePublishRequestCount, ref statusCode, ref timestamp);
                m_value.LatePublishRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentKeepAliveCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentKeepAliveCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentKeepAliveCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentKeepAliveCount, ref statusCode, ref timestamp);
                m_value.CurrentKeepAliveCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentLifetimeCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentLifetimeCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentLifetimeCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentLifetimeCount, ref statusCode, ref timestamp);
                m_value.CurrentLifetimeCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnacknowledgedMessageCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_UnacknowledgedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.UnacknowledgedMessageCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.UnacknowledgedMessageCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_UnacknowledgedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.UnacknowledgedMessageCount, ref statusCode, ref timestamp);
                m_value.UnacknowledgedMessageCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DiscardedMessageCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DiscardedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DiscardedMessageCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DiscardedMessageCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DiscardedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DiscardedMessageCount, ref statusCode, ref timestamp);
                m_value.DiscardedMessageCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoredItemCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_MonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MonitoredItemCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MonitoredItemCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MonitoredItemCount, ref statusCode, ref timestamp);
                m_value.MonitoredItemCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisabledMonitoredItemCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DisabledMonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DisabledMonitoredItemCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DisabledMonitoredItemCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DisabledMonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DisabledMonitoredItemCount, ref statusCode, ref timestamp);
                m_value.DisabledMonitoredItemCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoringQueueOverflowCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_MonitoringQueueOverflowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MonitoringQueueOverflowCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MonitoringQueueOverflowCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MonitoringQueueOverflowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MonitoringQueueOverflowCount, ref statusCode, ref timestamp);
                m_value.MonitoringQueueOverflowCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NextSequenceNumber Access Methods
        /// <remarks />
        private ServiceResult OnRead_NextSequenceNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.NextSequenceNumber;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.NextSequenceNumber;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_NextSequenceNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.NextSequenceNumber, ref statusCode, ref timestamp);
                m_value.NextSequenceNumber = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SubscriptionDiagnosticsDataType m_value;
        private SubscriptionDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsArrayState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsArrayState : BaseDataVariableState<Opc.Ua.SessionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <remarks />
        public SessionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAIwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5VHlwZUluc3RhbmNlAQCU" +
           "CAEAlAiUCAAAAQBhAwEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsVariableState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsVariableState : BaseDataVariableState<Opc.Ua.SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <remarks />
        public SessionDiagnosticsVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJgAAAFNlc3Npb25EaWFnbm9zdGljc1ZhcmlhYmxlVHlwZUluc3RhbmNl" +
           "AQCVCAEAlQiVCAAAAQBhA/////8BAf////8rAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAJYIAC8A" +
           "P5YIAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABTZXNzaW9uTmFtZQEAlwgALwA/lwgAAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAENsaWVudERlc2NyaXB0aW9uAQCYCAAvAD+YCAAAAQA0" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXJ2ZXJVcmkBAJkIAC8AP5kIAAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAsAAABFbmRwb2ludFVybAEAmggALwA/mggAAAAM/////wEB/////wAAAAAX" +
           "YIkKAgAAAAAACQAAAExvY2FsZUlkcwEAmwgALwA/mwgAAAEAJwEBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAABQAAABBY3R1YWxTZXNzaW9uVGltZW91dAEAnAgALwA/nAgAAAEAIgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAWAAAATWF4UmVzcG9uc2VNZXNzYWdlU2l6ZQEA6gsALwA/6gsAAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAFAAAAENsaWVudENvbm5lY3Rpb25UaW1lAQCdCAAvAD+dCAAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABUAAABDbGllbnRMYXN0Q29udGFjdFRpbWUBAJ4IAC8AP54IAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAEN1cnJlbnRTdWJzY3JpcHRpb25zQ291bnQBAJ8I" +
           "AC8AP58IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABDdXJyZW50TW9uaXRvcmVkSXRlbXND" +
           "b3VudAEAoAgALwA/oAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHQAAAEN1cnJlbnRQdWJsaXNo" +
           "UmVxdWVzdHNJblF1ZXVlAQChCAAvAD+hCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVG90" +
           "YWxSZXF1ZXN0Q291bnQBAMQiAC8AP8QiAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFVu" +
           "YXV0aG9yaXplZFJlcXVlc3RDb3VudAEAdC4ALwA/dC4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAFJlYWRDb3VudAEAqQgALwA/qQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAQAAAASGlz" +
           "dG9yeVJlYWRDb3VudAEAqggALwA/qggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAV3Jp" +
           "dGVDb3VudAEAqwgALwA/qwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAASGlzdG9yeVVw" +
           "ZGF0ZUNvdW50AQCsCAAvAD+sCAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABDYWxsQ291" +
           "bnQBAK0IAC8AP60IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAENyZWF0ZU1vbml0b3Jl" +
           "ZEl0ZW1zQ291bnQBAK4IAC8AP64IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE1vZGlm" +
           "eU1vbml0b3JlZEl0ZW1zQ291bnQBAK8IAC8AP68IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FgAAAFNldE1vbml0b3JpbmdNb2RlQ291bnQBALAIAC8AP7AIAAABAGcD/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEgAAAFNldFRyaWdnZXJpbmdDb3VudAEAsQgALwA/sQgAAAEAZwP/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAZAAAARGVsZXRlTW9uaXRvcmVkSXRlbXNDb3VudAEAsggALwA/sggAAAEAZwP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAXAAAAQ3JlYXRlU3Vic2NyaXB0aW9uQ291bnQBALMIAC8AP7MIAAABAGcD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAE1vZGlmeVN1YnNjcmlwdGlvbkNvdW50AQC0CAAvAD+0" +
           "CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABYAAABTZXRQdWJsaXNoaW5nTW9kZUNvdW50AQC1" +
           "CAAvAD+1CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABQdWJsaXNoQ291bnQBALYIAC8A" +
           "P7YIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFJlcHVibGlzaENvdW50AQC3CAAvAD+3" +
           "CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABoAAABUcmFuc2ZlclN1YnNjcmlwdGlvbnNDb3Vu" +
           "dAEAuAgALwA/uAgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAYAAAARGVsZXRlU3Vic2NyaXB0" +
           "aW9uc0NvdW50AQC5CAAvAD+5CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABBZGROb2Rl" +
           "c0NvdW50AQC6CAAvAD+6CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIAAABBZGRSZWZlcmVu" +
           "Y2VzQ291bnQBALsIAC8AP7sIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERlbGV0ZU5v" +
           "ZGVzQ291bnQBALwIAC8AP7wIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAERlbGV0ZVJl" +
           "ZmVyZW5jZXNDb3VudAEAvQgALwA/vQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQnJv" +
           "d3NlQ291bnQBAL4IAC8AP74IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEJyb3dzZU5l" +
           "eHRDb3VudAEAvwgALwA/vwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAiAAAAVHJhbnNsYXRl" +
           "QnJvd3NlUGF0aHNUb05vZGVJZHNDb3VudAEAwAgALwA/wAgAAAEAZwP/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAUXVlcnlGaXJzdENvdW50AQDBCAAvAD/BCAAAAQBnA/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABRdWVyeU5leHRDb3VudAEAwggALwA/wggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAA" +
           "AAASAAAAUmVnaXN0ZXJOb2Rlc0NvdW50AQCqCgAvAD+qCgAAAQBnA/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABQAAABVbnJlZ2lzdGVyTm9kZXNDb3VudAEAqwoALwA/qwoAAAEAZwP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SessionName
        {
            get
            {
                return m_sessionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ApplicationDescription> ClientDescription
        {
            get
            {
                return m_clientDescription;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientDescription, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientDescription = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ServerUri
        {
            get
            {
                return m_serverUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIds = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> ActualSessionTimeout
        {
            get
            {
                return m_actualSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actualSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actualSessionTimeout = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxResponseMessageSize
        {
            get
            {
                return m_maxResponseMessageSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxResponseMessageSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxResponseMessageSize = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientConnectionTime
        {
            get
            {
                return m_clientConnectionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientConnectionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientConnectionTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientLastContactTime
        {
            get
            {
                return m_clientLastContactTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientLastContactTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientLastContactTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionsCount
        {
            get
            {
                return m_currentSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentMonitoredItemsCount
        {
            get
            {
                return m_currentMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentPublishRequestsInQueue
        {
            get
            {
                return m_currentPublishRequestsInQueue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentPublishRequestsInQueue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentPublishRequestsInQueue = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TotalRequestCount
        {
            get
            {
                return m_totalRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_totalRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_totalRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnauthorizedRequestCount
        {
            get
            {
                return m_unauthorizedRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unauthorizedRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unauthorizedRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ReadCount
        {
            get
            {
                return m_readCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryReadCount
        {
            get
            {
                return m_historyReadCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyReadCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyReadCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> WriteCount
        {
            get
            {
                return m_writeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryUpdateCount
        {
            get
            {
                return m_historyUpdateCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyUpdateCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyUpdateCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CallCount
        {
            get
            {
                return m_callCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_callCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_callCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateMonitoredItemsCount
        {
            get
            {
                return m_createMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifyMonitoredItemsCount
        {
            get
            {
                return m_modifyMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetMonitoringModeCount
        {
            get
            {
                return m_setMonitoringModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setMonitoringModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setMonitoringModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetTriggeringCount
        {
            get
            {
                return m_setTriggeringCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setTriggeringCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setTriggeringCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteMonitoredItemsCount
        {
            get
            {
                return m_deleteMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateSubscriptionCount
        {
            get
            {
                return m_createSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifySubscriptionCount
        {
            get
            {
                return m_modifySubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifySubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifySubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetPublishingModeCount
        {
            get
            {
                return m_setPublishingModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPublishingModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPublishingModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> PublishCount
        {
            get
            {
                return m_publishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RepublishCount
        {
            get
            {
                return m_republishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TransferSubscriptionsCount
        {
            get
            {
                return m_transferSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteSubscriptionsCount
        {
            get
            {
                return m_deleteSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddNodesCount
        {
            get
            {
                return m_addNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddReferencesCount
        {
            get
            {
                return m_addReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteNodesCount
        {
            get
            {
                return m_deleteNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteReferencesCount
        {
            get
            {
                return m_deleteReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseCount
        {
            get
            {
                return m_browseCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseNextCount
        {
            get
            {
                return m_browseNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TranslateBrowsePathsToNodeIdsCount
        {
            get
            {
                return m_translateBrowsePathsToNodeIdsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_translateBrowsePathsToNodeIdsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_translateBrowsePathsToNodeIdsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryFirstCount
        {
            get
            {
                return m_queryFirstCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryFirstCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryFirstCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryNextCount
        {
            get
            {
                return m_queryNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RegisterNodesCount
        {
            get
            {
                return m_registerNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_registerNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_registerNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> UnregisterNodesCount
        {
            get
            {
                return m_unregisterNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unregisterNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unregisterNodesCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_sessionName != null)
            {
                children.Add(m_sessionName);
            }

            if (m_clientDescription != null)
            {
                children.Add(m_clientDescription);
            }

            if (m_serverUri != null)
            {
                children.Add(m_serverUri);
            }

            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            if (m_localeIds != null)
            {
                children.Add(m_localeIds);
            }

            if (m_actualSessionTimeout != null)
            {
                children.Add(m_actualSessionTimeout);
            }

            if (m_maxResponseMessageSize != null)
            {
                children.Add(m_maxResponseMessageSize);
            }

            if (m_clientConnectionTime != null)
            {
                children.Add(m_clientConnectionTime);
            }

            if (m_clientLastContactTime != null)
            {
                children.Add(m_clientLastContactTime);
            }

            if (m_currentSubscriptionsCount != null)
            {
                children.Add(m_currentSubscriptionsCount);
            }

            if (m_currentMonitoredItemsCount != null)
            {
                children.Add(m_currentMonitoredItemsCount);
            }

            if (m_currentPublishRequestsInQueue != null)
            {
                children.Add(m_currentPublishRequestsInQueue);
            }

            if (m_totalRequestCount != null)
            {
                children.Add(m_totalRequestCount);
            }

            if (m_unauthorizedRequestCount != null)
            {
                children.Add(m_unauthorizedRequestCount);
            }

            if (m_readCount != null)
            {
                children.Add(m_readCount);
            }

            if (m_historyReadCount != null)
            {
                children.Add(m_historyReadCount);
            }

            if (m_writeCount != null)
            {
                children.Add(m_writeCount);
            }

            if (m_historyUpdateCount != null)
            {
                children.Add(m_historyUpdateCount);
            }

            if (m_callCount != null)
            {
                children.Add(m_callCount);
            }

            if (m_createMonitoredItemsCount != null)
            {
                children.Add(m_createMonitoredItemsCount);
            }

            if (m_modifyMonitoredItemsCount != null)
            {
                children.Add(m_modifyMonitoredItemsCount);
            }

            if (m_setMonitoringModeCount != null)
            {
                children.Add(m_setMonitoringModeCount);
            }

            if (m_setTriggeringCount != null)
            {
                children.Add(m_setTriggeringCount);
            }

            if (m_deleteMonitoredItemsCount != null)
            {
                children.Add(m_deleteMonitoredItemsCount);
            }

            if (m_createSubscriptionCount != null)
            {
                children.Add(m_createSubscriptionCount);
            }

            if (m_modifySubscriptionCount != null)
            {
                children.Add(m_modifySubscriptionCount);
            }

            if (m_setPublishingModeCount != null)
            {
                children.Add(m_setPublishingModeCount);
            }

            if (m_publishCount != null)
            {
                children.Add(m_publishCount);
            }

            if (m_republishCount != null)
            {
                children.Add(m_republishCount);
            }

            if (m_transferSubscriptionsCount != null)
            {
                children.Add(m_transferSubscriptionsCount);
            }

            if (m_deleteSubscriptionsCount != null)
            {
                children.Add(m_deleteSubscriptionsCount);
            }

            if (m_addNodesCount != null)
            {
                children.Add(m_addNodesCount);
            }

            if (m_addReferencesCount != null)
            {
                children.Add(m_addReferencesCount);
            }

            if (m_deleteNodesCount != null)
            {
                children.Add(m_deleteNodesCount);
            }

            if (m_deleteReferencesCount != null)
            {
                children.Add(m_deleteReferencesCount);
            }

            if (m_browseCount != null)
            {
                children.Add(m_browseCount);
            }

            if (m_browseNextCount != null)
            {
                children.Add(m_browseNextCount);
            }

            if (m_translateBrowsePathsToNodeIdsCount != null)
            {
                children.Add(m_translateBrowsePathsToNodeIdsCount);
            }

            if (m_queryFirstCount != null)
            {
                children.Add(m_queryFirstCount);
            }

            if (m_queryNextCount != null)
            {
                children.Add(m_queryNextCount);
            }

            if (m_registerNodesCount != null)
            {
                children.Add(m_registerNodesCount);
            }

            if (m_unregisterNodesCount != null)
            {
                children.Add(m_unregisterNodesCount);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionName:
                {
                    if (createOrReplace)
                    {
                        if (SessionName == null)
                        {
                            if (replacement == null)
                            {
                                SessionName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SessionName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SessionName;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientDescription:
                {
                    if (createOrReplace)
                    {
                        if (ClientDescription == null)
                        {
                            if (replacement == null)
                            {
                                ClientDescription = new BaseDataVariableState<ApplicationDescription>(this);
                            }
                            else
                            {
                                ClientDescription = (BaseDataVariableState<ApplicationDescription>)replacement;
                            }
                        }
                    }

                    instance = ClientDescription;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerUri:
                {
                    if (createOrReplace)
                    {
                        if (ServerUri == null)
                        {
                            if (replacement == null)
                            {
                                ServerUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ServerUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerUri;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIds:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIds == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIds = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                LocaleIds = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIds;
                    break;
                }

                case Opc.Ua.BrowseNames.ActualSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (ActualSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                ActualSessionTimeout = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                ActualSessionTimeout = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = ActualSessionTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxResponseMessageSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxResponseMessageSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxResponseMessageSize = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxResponseMessageSize = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxResponseMessageSize;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientConnectionTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientConnectionTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientConnectionTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientConnectionTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientConnectionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientLastContactTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientLastContactTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientLastContactTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientLastContactTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientLastContactTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue:
                {
                    if (createOrReplace)
                    {
                        if (CurrentPublishRequestsInQueue == null)
                        {
                            if (replacement == null)
                            {
                                CurrentPublishRequestsInQueue = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentPublishRequestsInQueue = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentPublishRequestsInQueue;
                    break;
                }

                case Opc.Ua.BrowseNames.TotalRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TotalRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TotalRequestCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TotalRequestCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TotalRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnauthorizedRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (UnauthorizedRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                UnauthorizedRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnauthorizedRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnauthorizedRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ReadCount:
                {
                    if (createOrReplace)
                    {
                        if (ReadCount == null)
                        {
                            if (replacement == null)
                            {
                                ReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryReadCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryReadCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.WriteCount:
                {
                    if (createOrReplace)
                    {
                        if (WriteCount == null)
                        {
                            if (replacement == null)
                            {
                                WriteCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                WriteCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = WriteCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryUpdateCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryUpdateCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryUpdateCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryUpdateCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryUpdateCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CallCount:
                {
                    if (createOrReplace)
                    {
                        if (CallCount == null)
                        {
                            if (replacement == null)
                            {
                                CallCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CallCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CallCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifyMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifyMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetMonitoringModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetMonitoringModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetMonitoringModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetMonitoringModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetMonitoringModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetTriggeringCount:
                {
                    if (createOrReplace)
                    {
                        if (SetTriggeringCount == null)
                        {
                            if (replacement == null)
                            {
                                SetTriggeringCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetTriggeringCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetTriggeringCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateSubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateSubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifySubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifySubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifySubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifySubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifySubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPublishingModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetPublishingModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetPublishingModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetPublishingModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetPublishingModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                PublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = PublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RepublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RepublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TransferSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TransferSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseNextCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseNextCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount:
                {
                    if (createOrReplace)
                    {
                        if (TranslateBrowsePathsToNodeIdsCount == null)
                        {
                            if (replacement == null)
                            {
                                TranslateBrowsePathsToNodeIdsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TranslateBrowsePathsToNodeIdsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TranslateBrowsePathsToNodeIdsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryFirstCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryFirstCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryFirstCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryFirstCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryFirstCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryNextCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryNextCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RegisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (RegisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                RegisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RegisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RegisterNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnregisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (UnregisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                UnregisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                UnregisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = UnregisterNodesCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_sessionName;
        private BaseDataVariableState<ApplicationDescription> m_clientDescription;
        private BaseDataVariableState<string> m_serverUri;
        private BaseDataVariableState<string> m_endpointUrl;
        private BaseDataVariableState<string[]> m_localeIds;
        private BaseDataVariableState<double> m_actualSessionTimeout;
        private BaseDataVariableState<uint> m_maxResponseMessageSize;
        private BaseDataVariableState<DateTime> m_clientConnectionTime;
        private BaseDataVariableState<DateTime> m_clientLastContactTime;
        private BaseDataVariableState<uint> m_currentSubscriptionsCount;
        private BaseDataVariableState<uint> m_currentMonitoredItemsCount;
        private BaseDataVariableState<uint> m_currentPublishRequestsInQueue;
        private BaseDataVariableState<ServiceCounterDataType> m_totalRequestCount;
        private BaseDataVariableState<uint> m_unauthorizedRequestCount;
        private BaseDataVariableState<ServiceCounterDataType> m_readCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyReadCount;
        private BaseDataVariableState<ServiceCounterDataType> m_writeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyUpdateCount;
        private BaseDataVariableState<ServiceCounterDataType> m_callCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifyMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setMonitoringModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setTriggeringCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createSubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifySubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setPublishingModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_publishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_republishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_transferSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_translateBrowsePathsToNodeIdsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryFirstCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_registerNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_unregisterNodesCount;
        #endregion
    }

    #region SessionDiagnosticsVariableValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionDiagnosticsVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public SessionDiagnosticsVariableValue(SessionDiagnosticsVariableState variable, SessionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public SessionDiagnosticsVariableState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public SessionDiagnosticsDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(SessionDiagnosticsVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionId;
                    instance.OnWriteValue = OnWrite_SessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.SessionName;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionName;
                    instance.OnWriteValue = OnWrite_SessionName;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientDescription;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientDescription;
                    instance.OnWriteValue = OnWrite_ClientDescription;
                    updateList.Add(instance);
                }
                instance = m_variable.ServerUri;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ServerUri;
                    instance.OnWriteValue = OnWrite_ServerUri;
                    updateList.Add(instance);
                }
                instance = m_variable.EndpointUrl;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_EndpointUrl;
                    instance.OnWriteValue = OnWrite_EndpointUrl;
                    updateList.Add(instance);
                }
                instance = m_variable.LocaleIds;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LocaleIds;
                    instance.OnWriteValue = OnWrite_LocaleIds;
                    updateList.Add(instance);
                }
                instance = m_variable.ActualSessionTimeout;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ActualSessionTimeout;
                    instance.OnWriteValue = OnWrite_ActualSessionTimeout;
                    updateList.Add(instance);
                }
                instance = m_variable.MaxResponseMessageSize;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_MaxResponseMessageSize;
                    instance.OnWriteValue = OnWrite_MaxResponseMessageSize;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientConnectionTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientConnectionTime;
                    instance.OnWriteValue = OnWrite_ClientConnectionTime;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientLastContactTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientLastContactTime;
                    instance.OnWriteValue = OnWrite_ClientLastContactTime;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentSubscriptionsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentSubscriptionsCount;
                    instance.OnWriteValue = OnWrite_CurrentSubscriptionsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentMonitoredItemsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentMonitoredItemsCount;
                    instance.OnWriteValue = OnWrite_CurrentMonitoredItemsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CurrentPublishRequestsInQueue;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CurrentPublishRequestsInQueue;
                    instance.OnWriteValue = OnWrite_CurrentPublishRequestsInQueue;
                    updateList.Add(instance);
                }
                instance = m_variable.TotalRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TotalRequestCount;
                    instance.OnWriteValue = OnWrite_TotalRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.UnauthorizedRequestCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_UnauthorizedRequestCount;
                    instance.OnWriteValue = OnWrite_UnauthorizedRequestCount;
                    updateList.Add(instance);
                }
                instance = m_variable.ReadCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ReadCount;
                    instance.OnWriteValue = OnWrite_ReadCount;
                    updateList.Add(instance);
                }
                instance = m_variable.HistoryReadCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_HistoryReadCount;
                    instance.OnWriteValue = OnWrite_HistoryReadCount;
                    updateList.Add(instance);
                }
                instance = m_variable.WriteCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_WriteCount;
                    instance.OnWriteValue = OnWrite_WriteCount;
                    updateList.Add(instance);
                }
                instance = m_variable.HistoryUpdateCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_HistoryUpdateCount;
                    instance.OnWriteValue = OnWrite_HistoryUpdateCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CallCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CallCount;
                    instance.OnWriteValue = OnWrite_CallCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CreateMonitoredItemsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateMonitoredItemsCount;
                    instance.OnWriteValue = OnWrite_CreateMonitoredItemsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.ModifyMonitoredItemsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ModifyMonitoredItemsCount;
                    instance.OnWriteValue = OnWrite_ModifyMonitoredItemsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SetMonitoringModeCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SetMonitoringModeCount;
                    instance.OnWriteValue = OnWrite_SetMonitoringModeCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SetTriggeringCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SetTriggeringCount;
                    instance.OnWriteValue = OnWrite_SetTriggeringCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DeleteMonitoredItemsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DeleteMonitoredItemsCount;
                    instance.OnWriteValue = OnWrite_DeleteMonitoredItemsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.CreateSubscriptionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateSubscriptionCount;
                    instance.OnWriteValue = OnWrite_CreateSubscriptionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.ModifySubscriptionCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ModifySubscriptionCount;
                    instance.OnWriteValue = OnWrite_ModifySubscriptionCount;
                    updateList.Add(instance);
                }
                instance = m_variable.SetPublishingModeCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SetPublishingModeCount;
                    instance.OnWriteValue = OnWrite_SetPublishingModeCount;
                    updateList.Add(instance);
                }
                instance = m_variable.PublishCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_PublishCount;
                    instance.OnWriteValue = OnWrite_PublishCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RepublishCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RepublishCount;
                    instance.OnWriteValue = OnWrite_RepublishCount;
                    updateList.Add(instance);
                }
                instance = m_variable.TransferSubscriptionsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TransferSubscriptionsCount;
                    instance.OnWriteValue = OnWrite_TransferSubscriptionsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DeleteSubscriptionsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DeleteSubscriptionsCount;
                    instance.OnWriteValue = OnWrite_DeleteSubscriptionsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.AddNodesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_AddNodesCount;
                    instance.OnWriteValue = OnWrite_AddNodesCount;
                    updateList.Add(instance);
                }
                instance = m_variable.AddReferencesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_AddReferencesCount;
                    instance.OnWriteValue = OnWrite_AddReferencesCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DeleteNodesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DeleteNodesCount;
                    instance.OnWriteValue = OnWrite_DeleteNodesCount;
                    updateList.Add(instance);
                }
                instance = m_variable.DeleteReferencesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_DeleteReferencesCount;
                    instance.OnWriteValue = OnWrite_DeleteReferencesCount;
                    updateList.Add(instance);
                }
                instance = m_variable.BrowseCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_BrowseCount;
                    instance.OnWriteValue = OnWrite_BrowseCount;
                    updateList.Add(instance);
                }
                instance = m_variable.BrowseNextCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_BrowseNextCount;
                    instance.OnWriteValue = OnWrite_BrowseNextCount;
                    updateList.Add(instance);
                }
                instance = m_variable.TranslateBrowsePathsToNodeIdsCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TranslateBrowsePathsToNodeIdsCount;
                    instance.OnWriteValue = OnWrite_TranslateBrowsePathsToNodeIdsCount;
                    updateList.Add(instance);
                }
                instance = m_variable.QueryFirstCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_QueryFirstCount;
                    instance.OnWriteValue = OnWrite_QueryFirstCount;
                    updateList.Add(instance);
                }
                instance = m_variable.QueryNextCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_QueryNextCount;
                    instance.OnWriteValue = OnWrite_QueryNextCount;
                    updateList.Add(instance);
                }
                instance = m_variable.RegisterNodesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_RegisterNodesCount;
                    instance.OnWriteValue = OnWrite_RegisterNodesCount;
                    updateList.Add(instance);
                }
                instance = m_variable.UnregisterNodesCount;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_UnregisterNodesCount;
                    instance.OnWriteValue = OnWrite_UnregisterNodesCount;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                SessionDiagnosticsDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (SessionDiagnosticsDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (SessionDiagnosticsDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (SessionDiagnosticsDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref SessionDiagnosticsDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.SessionId, newValue.SessionId)) UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SessionName, newValue.SessionName)) UpdateChildVariableStatus(m_variable.SessionName, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientDescription, newValue.ClientDescription)) UpdateChildVariableStatus(m_variable.ClientDescription, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ServerUri, newValue.ServerUri)) UpdateChildVariableStatus(m_variable.ServerUri, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.EndpointUrl, newValue.EndpointUrl)) UpdateChildVariableStatus(m_variable.EndpointUrl, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LocaleIds, newValue.LocaleIds)) UpdateChildVariableStatus(m_variable.LocaleIds, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ActualSessionTimeout, newValue.ActualSessionTimeout)) UpdateChildVariableStatus(m_variable.ActualSessionTimeout, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.MaxResponseMessageSize, newValue.MaxResponseMessageSize)) UpdateChildVariableStatus(m_variable.MaxResponseMessageSize, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientConnectionTime, newValue.ClientConnectionTime)) UpdateChildVariableStatus(m_variable.ClientConnectionTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientLastContactTime, newValue.ClientLastContactTime)) UpdateChildVariableStatus(m_variable.ClientLastContactTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentSubscriptionsCount, newValue.CurrentSubscriptionsCount)) UpdateChildVariableStatus(m_variable.CurrentSubscriptionsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentMonitoredItemsCount, newValue.CurrentMonitoredItemsCount)) UpdateChildVariableStatus(m_variable.CurrentMonitoredItemsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CurrentPublishRequestsInQueue, newValue.CurrentPublishRequestsInQueue)) UpdateChildVariableStatus(m_variable.CurrentPublishRequestsInQueue, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TotalRequestCount, newValue.TotalRequestCount)) UpdateChildVariableStatus(m_variable.TotalRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.UnauthorizedRequestCount, newValue.UnauthorizedRequestCount)) UpdateChildVariableStatus(m_variable.UnauthorizedRequestCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ReadCount, newValue.ReadCount)) UpdateChildVariableStatus(m_variable.ReadCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.HistoryReadCount, newValue.HistoryReadCount)) UpdateChildVariableStatus(m_variable.HistoryReadCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.WriteCount, newValue.WriteCount)) UpdateChildVariableStatus(m_variable.WriteCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.HistoryUpdateCount, newValue.HistoryUpdateCount)) UpdateChildVariableStatus(m_variable.HistoryUpdateCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CallCount, newValue.CallCount)) UpdateChildVariableStatus(m_variable.CallCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CreateMonitoredItemsCount, newValue.CreateMonitoredItemsCount)) UpdateChildVariableStatus(m_variable.CreateMonitoredItemsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ModifyMonitoredItemsCount, newValue.ModifyMonitoredItemsCount)) UpdateChildVariableStatus(m_variable.ModifyMonitoredItemsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SetMonitoringModeCount, newValue.SetMonitoringModeCount)) UpdateChildVariableStatus(m_variable.SetMonitoringModeCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SetTriggeringCount, newValue.SetTriggeringCount)) UpdateChildVariableStatus(m_variable.SetTriggeringCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DeleteMonitoredItemsCount, newValue.DeleteMonitoredItemsCount)) UpdateChildVariableStatus(m_variable.DeleteMonitoredItemsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CreateSubscriptionCount, newValue.CreateSubscriptionCount)) UpdateChildVariableStatus(m_variable.CreateSubscriptionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ModifySubscriptionCount, newValue.ModifySubscriptionCount)) UpdateChildVariableStatus(m_variable.ModifySubscriptionCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SetPublishingModeCount, newValue.SetPublishingModeCount)) UpdateChildVariableStatus(m_variable.SetPublishingModeCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.PublishCount, newValue.PublishCount)) UpdateChildVariableStatus(m_variable.PublishCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RepublishCount, newValue.RepublishCount)) UpdateChildVariableStatus(m_variable.RepublishCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TransferSubscriptionsCount, newValue.TransferSubscriptionsCount)) UpdateChildVariableStatus(m_variable.TransferSubscriptionsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DeleteSubscriptionsCount, newValue.DeleteSubscriptionsCount)) UpdateChildVariableStatus(m_variable.DeleteSubscriptionsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.AddNodesCount, newValue.AddNodesCount)) UpdateChildVariableStatus(m_variable.AddNodesCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.AddReferencesCount, newValue.AddReferencesCount)) UpdateChildVariableStatus(m_variable.AddReferencesCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DeleteNodesCount, newValue.DeleteNodesCount)) UpdateChildVariableStatus(m_variable.DeleteNodesCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.DeleteReferencesCount, newValue.DeleteReferencesCount)) UpdateChildVariableStatus(m_variable.DeleteReferencesCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.BrowseCount, newValue.BrowseCount)) UpdateChildVariableStatus(m_variable.BrowseCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.BrowseNextCount, newValue.BrowseNextCount)) UpdateChildVariableStatus(m_variable.BrowseNextCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TranslateBrowsePathsToNodeIdsCount, newValue.TranslateBrowsePathsToNodeIdsCount)) UpdateChildVariableStatus(m_variable.TranslateBrowsePathsToNodeIdsCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.QueryFirstCount, newValue.QueryFirstCount)) UpdateChildVariableStatus(m_variable.QueryFirstCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.QueryNextCount, newValue.QueryNextCount)) UpdateChildVariableStatus(m_variable.QueryNextCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.RegisterNodesCount, newValue.RegisterNodesCount)) UpdateChildVariableStatus(m_variable.RegisterNodesCount, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.UnregisterNodesCount, newValue.UnregisterNodesCount)) UpdateChildVariableStatus(m_variable.UnregisterNodesCount, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region SessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
                m_value.SessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionName Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionName;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionName;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionName, ref statusCode, ref timestamp);
                m_value.SessionName = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientDescription Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientDescription(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientDescription;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientDescription;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientDescription(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientDescription, ref statusCode, ref timestamp);
                m_value.ClientDescription = (ApplicationDescription)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ServerUri Access Methods
        /// <remarks />
        private ServiceResult OnRead_ServerUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ServerUri;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ServerUri;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ServerUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ServerUri, ref statusCode, ref timestamp);
                m_value.ServerUri = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EndpointUrl Access Methods
        /// <remarks />
        private ServiceResult OnRead_EndpointUrl(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.EndpointUrl;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.EndpointUrl;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_EndpointUrl(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.EndpointUrl, ref statusCode, ref timestamp);
                m_value.EndpointUrl = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LocaleIds Access Methods
        /// <remarks />
        private ServiceResult OnRead_LocaleIds(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LocaleIds;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LocaleIds;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LocaleIds(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LocaleIds, ref statusCode, ref timestamp);
                m_value.LocaleIds = (StringCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ActualSessionTimeout Access Methods
        /// <remarks />
        private ServiceResult OnRead_ActualSessionTimeout(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ActualSessionTimeout;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ActualSessionTimeout;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ActualSessionTimeout(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ActualSessionTimeout, ref statusCode, ref timestamp);
                m_value.ActualSessionTimeout = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxResponseMessageSize Access Methods
        /// <remarks />
        private ServiceResult OnRead_MaxResponseMessageSize(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.MaxResponseMessageSize;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.MaxResponseMessageSize;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_MaxResponseMessageSize(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.MaxResponseMessageSize, ref statusCode, ref timestamp);
                m_value.MaxResponseMessageSize = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientConnectionTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientConnectionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientConnectionTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientConnectionTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientConnectionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientConnectionTime, ref statusCode, ref timestamp);
                m_value.ClientConnectionTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientLastContactTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientLastContactTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientLastContactTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientLastContactTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientLastContactTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientLastContactTime, ref statusCode, ref timestamp);
                m_value.ClientLastContactTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentSubscriptionsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentSubscriptionsCount, ref statusCode, ref timestamp);
                m_value.CurrentSubscriptionsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentMonitoredItemsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentMonitoredItemsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentMonitoredItemsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentMonitoredItemsCount, ref statusCode, ref timestamp);
                m_value.CurrentMonitoredItemsCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentPublishRequestsInQueue Access Methods
        /// <remarks />
        private ServiceResult OnRead_CurrentPublishRequestsInQueue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CurrentPublishRequestsInQueue;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CurrentPublishRequestsInQueue;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CurrentPublishRequestsInQueue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CurrentPublishRequestsInQueue, ref statusCode, ref timestamp);
                m_value.CurrentPublishRequestsInQueue = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TotalRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TotalRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TotalRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TotalRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TotalRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TotalRequestCount, ref statusCode, ref timestamp);
                m_value.TotalRequestCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnauthorizedRequestCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_UnauthorizedRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.UnauthorizedRequestCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.UnauthorizedRequestCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_UnauthorizedRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.UnauthorizedRequestCount, ref statusCode, ref timestamp);
                m_value.UnauthorizedRequestCount = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ReadCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_ReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ReadCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ReadCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ReadCount, ref statusCode, ref timestamp);
                m_value.ReadCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryReadCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_HistoryReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.HistoryReadCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.HistoryReadCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_HistoryReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.HistoryReadCount, ref statusCode, ref timestamp);
                m_value.HistoryReadCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region WriteCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_WriteCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.WriteCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.WriteCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_WriteCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.WriteCount, ref statusCode, ref timestamp);
                m_value.WriteCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryUpdateCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_HistoryUpdateCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.HistoryUpdateCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.HistoryUpdateCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_HistoryUpdateCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.HistoryUpdateCount, ref statusCode, ref timestamp);
                m_value.HistoryUpdateCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CallCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CallCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CallCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CallCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CallCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CallCount, ref statusCode, ref timestamp);
                m_value.CallCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateMonitoredItemsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateMonitoredItemsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateMonitoredItemsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateMonitoredItemsCount, ref statusCode, ref timestamp);
                m_value.CreateMonitoredItemsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyMonitoredItemsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_ModifyMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ModifyMonitoredItemsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ModifyMonitoredItemsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ModifyMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ModifyMonitoredItemsCount, ref statusCode, ref timestamp);
                m_value.ModifyMonitoredItemsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetMonitoringModeCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SetMonitoringModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SetMonitoringModeCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SetMonitoringModeCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SetMonitoringModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SetMonitoringModeCount, ref statusCode, ref timestamp);
                m_value.SetMonitoringModeCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetTriggeringCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SetTriggeringCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SetTriggeringCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SetTriggeringCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SetTriggeringCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SetTriggeringCount, ref statusCode, ref timestamp);
                m_value.SetTriggeringCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteMonitoredItemsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DeleteMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DeleteMonitoredItemsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DeleteMonitoredItemsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DeleteMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DeleteMonitoredItemsCount, ref statusCode, ref timestamp);
                m_value.DeleteMonitoredItemsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateSubscriptionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateSubscriptionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateSubscriptionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateSubscriptionCount, ref statusCode, ref timestamp);
                m_value.CreateSubscriptionCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifySubscriptionCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_ModifySubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ModifySubscriptionCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ModifySubscriptionCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ModifySubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ModifySubscriptionCount, ref statusCode, ref timestamp);
                m_value.ModifySubscriptionCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetPublishingModeCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_SetPublishingModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SetPublishingModeCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SetPublishingModeCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SetPublishingModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SetPublishingModeCount, ref statusCode, ref timestamp);
                m_value.SetPublishingModeCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_PublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.PublishCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.PublishCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_PublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.PublishCount, ref statusCode, ref timestamp);
                m_value.PublishCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RepublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RepublishCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RepublishCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RepublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RepublishCount, ref statusCode, ref timestamp);
                m_value.RepublishCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferSubscriptionsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TransferSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TransferSubscriptionsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TransferSubscriptionsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TransferSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TransferSubscriptionsCount, ref statusCode, ref timestamp);
                m_value.TransferSubscriptionsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteSubscriptionsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DeleteSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DeleteSubscriptionsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DeleteSubscriptionsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DeleteSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DeleteSubscriptionsCount, ref statusCode, ref timestamp);
                m_value.DeleteSubscriptionsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddNodesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_AddNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.AddNodesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.AddNodesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_AddNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.AddNodesCount, ref statusCode, ref timestamp);
                m_value.AddNodesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddReferencesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_AddReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.AddReferencesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.AddReferencesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_AddReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.AddReferencesCount, ref statusCode, ref timestamp);
                m_value.AddReferencesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteNodesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DeleteNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DeleteNodesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DeleteNodesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DeleteNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DeleteNodesCount, ref statusCode, ref timestamp);
                m_value.DeleteNodesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteReferencesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_DeleteReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.DeleteReferencesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.DeleteReferencesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_DeleteReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.DeleteReferencesCount, ref statusCode, ref timestamp);
                m_value.DeleteReferencesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_BrowseCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.BrowseCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.BrowseCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_BrowseCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.BrowseCount, ref statusCode, ref timestamp);
                m_value.BrowseCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseNextCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_BrowseNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.BrowseNextCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.BrowseNextCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_BrowseNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.BrowseNextCount, ref statusCode, ref timestamp);
                m_value.BrowseNextCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TranslateBrowsePathsToNodeIdsCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_TranslateBrowsePathsToNodeIdsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TranslateBrowsePathsToNodeIdsCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TranslateBrowsePathsToNodeIdsCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TranslateBrowsePathsToNodeIdsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TranslateBrowsePathsToNodeIdsCount, ref statusCode, ref timestamp);
                m_value.TranslateBrowsePathsToNodeIdsCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryFirstCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_QueryFirstCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.QueryFirstCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.QueryFirstCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_QueryFirstCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.QueryFirstCount, ref statusCode, ref timestamp);
                m_value.QueryFirstCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryNextCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_QueryNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.QueryNextCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.QueryNextCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_QueryNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.QueryNextCount, ref statusCode, ref timestamp);
                m_value.QueryNextCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RegisterNodesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_RegisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.RegisterNodesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.RegisterNodesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_RegisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.RegisterNodesCount, ref statusCode, ref timestamp);
                m_value.RegisterNodesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnregisterNodesCount Access Methods
        /// <remarks />
        private ServiceResult OnRead_UnregisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.UnregisterNodesCount;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.UnregisterNodesCount;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_UnregisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.UnregisterNodesCount, ref statusCode, ref timestamp);
                m_value.UnregisterNodesCount = (ServiceCounterDataType)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionDiagnosticsDataType m_value;
        private SessionDiagnosticsVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionSecurityDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsArrayState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsArrayState : BaseDataVariableState<Opc.Ua.SessionSecurityDiagnosticsDataType[]>
    {
        #region Constructors
        /// <remarks />
        public SessionSecurityDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAKwAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzQXJyYXlUeXBlSW5z" +
           "dGFuY2UBAMMIAQDDCMMIAAABAGQDAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionSecurityDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsState : BaseDataVariableState<Opc.Ua.SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <remarks />
        public SessionSecurityDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJgAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzVHlwZUluc3RhbmNl" +
           "AQDECAEAxAjECAAAAQBkA/////8BAf////8JAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAMUIAC8A" +
           "P8UIAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABDbGllbnRVc2VySWRPZlNlc3Npb24BAMYI" +
           "AC8AP8YIAAAADP////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDbGllbnRVc2VySWRIaXN0b3J5AQDH" +
           "CAAvAD/HCAAAAAwBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABcAAABBdXRoZW50aWNhdGlv" +
           "bk1lY2hhbmlzbQEAyAgALwA/yAgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEVuY29kaW5n" +
           "AQDJCAAvAD/JCAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVHJhbnNwb3J0UHJvdG9jb2wB" +
           "AMoIAC8AP8oIAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZWN1cml0eU1vZGUBAMsIAC8A" +
           "P8sIAAABAC4B/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQDMCAAv" +
           "AD/MCAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUBAPILAC8A" +
           "P/ILAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ClientUserIdOfSession
        {
            get
            {
                return m_clientUserIdOfSession;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdOfSession, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdOfSession = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> ClientUserIdHistory
        {
            get
            {
                return m_clientUserIdHistory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdHistory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdHistory = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> AuthenticationMechanism
        {
            get
            {
                return m_authenticationMechanism;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationMechanism, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationMechanism = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> Encoding
        {
            get
            {
                return m_encoding;
            }

            set
            {
                if (!Object.ReferenceEquals(m_encoding, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_encoding = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> TransportProtocol
        {
            get
            {
                return m_transportProtocol;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportProtocol, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportProtocol = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_clientUserIdOfSession != null)
            {
                children.Add(m_clientUserIdOfSession);
            }

            if (m_clientUserIdHistory != null)
            {
                children.Add(m_clientUserIdHistory);
            }

            if (m_authenticationMechanism != null)
            {
                children.Add(m_authenticationMechanism);
            }

            if (m_encoding != null)
            {
                children.Add(m_encoding);
            }

            if (m_transportProtocol != null)
            {
                children.Add(m_transportProtocol);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdOfSession:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdOfSession == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdOfSession = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ClientUserIdOfSession = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdOfSession;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdHistory:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdHistory == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdHistory = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                ClientUserIdHistory = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdHistory;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationMechanism:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationMechanism == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationMechanism = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                AuthenticationMechanism = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationMechanism;
                    break;
                }

                case Opc.Ua.BrowseNames.Encoding:
                {
                    if (createOrReplace)
                    {
                        if (Encoding == null)
                        {
                            if (replacement == null)
                            {
                                Encoding = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                Encoding = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = Encoding;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportProtocol:
                {
                    if (createOrReplace)
                    {
                        if (TransportProtocol == null)
                        {
                            if (replacement == null)
                            {
                                TransportProtocol = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                TransportProtocol = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = TransportProtocol;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new BaseDataVariableState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (BaseDataVariableState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_clientUserIdOfSession;
        private BaseDataVariableState<string[]> m_clientUserIdHistory;
        private BaseDataVariableState<string> m_authenticationMechanism;
        private BaseDataVariableState<string> m_encoding;
        private BaseDataVariableState<string> m_transportProtocol;
        private BaseDataVariableState<MessageSecurityMode> m_securityMode;
        private BaseDataVariableState<string> m_securityPolicyUri;
        private BaseDataVariableState<byte[]> m_clientCertificate;
        #endregion
    }

    #region SessionSecurityDiagnosticsValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionSecurityDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public SessionSecurityDiagnosticsValue(SessionSecurityDiagnosticsState variable, SessionSecurityDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionSecurityDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public SessionSecurityDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(SessionSecurityDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SessionId;
                    instance.OnWriteValue = OnWrite_SessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientUserIdOfSession;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientUserIdOfSession;
                    instance.OnWriteValue = OnWrite_ClientUserIdOfSession;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientUserIdHistory;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientUserIdHistory;
                    instance.OnWriteValue = OnWrite_ClientUserIdHistory;
                    updateList.Add(instance);
                }
                instance = m_variable.AuthenticationMechanism;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_AuthenticationMechanism;
                    instance.OnWriteValue = OnWrite_AuthenticationMechanism;
                    updateList.Add(instance);
                }
                instance = m_variable.Encoding;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Encoding;
                    instance.OnWriteValue = OnWrite_Encoding;
                    updateList.Add(instance);
                }
                instance = m_variable.TransportProtocol;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_TransportProtocol;
                    instance.OnWriteValue = OnWrite_TransportProtocol;
                    updateList.Add(instance);
                }
                instance = m_variable.SecurityMode;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SecurityMode;
                    instance.OnWriteValue = OnWrite_SecurityMode;
                    updateList.Add(instance);
                }
                instance = m_variable.SecurityPolicyUri;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_SecurityPolicyUri;
                    instance.OnWriteValue = OnWrite_SecurityPolicyUri;
                    updateList.Add(instance);
                }
                instance = m_variable.ClientCertificate;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_ClientCertificate;
                    instance.OnWriteValue = OnWrite_ClientCertificate;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                SessionSecurityDiagnosticsDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (SessionSecurityDiagnosticsDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (SessionSecurityDiagnosticsDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (SessionSecurityDiagnosticsDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref SessionSecurityDiagnosticsDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.SessionId, newValue.SessionId)) UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientUserIdOfSession, newValue.ClientUserIdOfSession)) UpdateChildVariableStatus(m_variable.ClientUserIdOfSession, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientUserIdHistory, newValue.ClientUserIdHistory)) UpdateChildVariableStatus(m_variable.ClientUserIdHistory, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.AuthenticationMechanism, newValue.AuthenticationMechanism)) UpdateChildVariableStatus(m_variable.AuthenticationMechanism, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Encoding, newValue.Encoding)) UpdateChildVariableStatus(m_variable.Encoding, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.TransportProtocol, newValue.TransportProtocol)) UpdateChildVariableStatus(m_variable.TransportProtocol, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SecurityMode, newValue.SecurityMode)) UpdateChildVariableStatus(m_variable.SecurityMode, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.SecurityPolicyUri, newValue.SecurityPolicyUri)) UpdateChildVariableStatus(m_variable.SecurityPolicyUri, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.ClientCertificate, newValue.ClientCertificate)) UpdateChildVariableStatus(m_variable.ClientCertificate, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region SessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SessionId, ref statusCode, ref timestamp);
                m_value.SessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdOfSession Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientUserIdOfSession(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientUserIdOfSession;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientUserIdOfSession;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientUserIdOfSession(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientUserIdOfSession, ref statusCode, ref timestamp);
                m_value.ClientUserIdOfSession = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdHistory Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientUserIdHistory(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientUserIdHistory;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientUserIdHistory;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientUserIdHistory(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientUserIdHistory, ref statusCode, ref timestamp);
                m_value.ClientUserIdHistory = (StringCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AuthenticationMechanism Access Methods
        /// <remarks />
        private ServiceResult OnRead_AuthenticationMechanism(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.AuthenticationMechanism;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.AuthenticationMechanism;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_AuthenticationMechanism(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.AuthenticationMechanism, ref statusCode, ref timestamp);
                m_value.AuthenticationMechanism = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Encoding Access Methods
        /// <remarks />
        private ServiceResult OnRead_Encoding(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Encoding;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Encoding;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Encoding(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Encoding, ref statusCode, ref timestamp);
                m_value.Encoding = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransportProtocol Access Methods
        /// <remarks />
        private ServiceResult OnRead_TransportProtocol(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.TransportProtocol;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.TransportProtocol;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_TransportProtocol(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.TransportProtocol, ref statusCode, ref timestamp);
                m_value.TransportProtocol = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityMode Access Methods
        /// <remarks />
        private ServiceResult OnRead_SecurityMode(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SecurityMode;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SecurityMode;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SecurityMode(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SecurityMode, ref statusCode, ref timestamp);
                m_value.SecurityMode = (MessageSecurityMode)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityPolicyUri Access Methods
        /// <remarks />
        private ServiceResult OnRead_SecurityPolicyUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.SecurityPolicyUri;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.SecurityPolicyUri;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_SecurityPolicyUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.SecurityPolicyUri, ref statusCode, ref timestamp);
                m_value.SecurityPolicyUri = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientCertificate Access Methods
        /// <remarks />
        private ServiceResult OnRead_ClientCertificate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.ClientCertificate;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.ClientCertificate;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_ClientCertificate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.ClientCertificate, ref statusCode, ref timestamp);
                m_value.ClientCertificate = (byte[])Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionSecurityDiagnosticsDataType m_value;
        private SessionSecurityDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region OptionSetState Class
    #if (!OPCUA_EXCLUDE_OptionSetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OptionSetState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public OptionSetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.OptionSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (BitMask != null)
            {
                BitMask.Initialize(context, BitMask_InitializationString);
            }
        }

        #region Initialization String
        private const string BitMask_InitializationString =
           "//////////8XYIkKAgAAAAAABwAAAEJpdE1hc2sBALUtAC4ARLUtAAAAAQEAAAABAAAAAAAAAAEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAE9wdGlvblNldFR5cGVJbnN0YW5jZQEA3ywBAN8s3ywAAAAY////" +
           "/wEB/////wIAAAAXYIkKAgAAAAAADwAAAE9wdGlvblNldFZhbHVlcwEA4CwALgBE4CwAAAAVAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAHAAAAQml0TWFzawEAtS0ALgBEtS0AAAABAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText[]> OptionSetValues
        {
            get
            {
                return m_optionSetValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_optionSetValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_optionSetValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool[]> BitMask
        {
            get
            {
                return m_bitMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_bitMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_bitMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_optionSetValues != null)
            {
                children.Add(m_optionSetValues);
            }

            if (m_bitMask != null)
            {
                children.Add(m_bitMask);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OptionSetValues:
                {
                    if (createOrReplace)
                    {
                        if (OptionSetValues == null)
                        {
                            if (replacement == null)
                            {
                                OptionSetValues = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                OptionSetValues = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = OptionSetValues;
                    break;
                }

                case Opc.Ua.BrowseNames.BitMask:
                {
                    if (createOrReplace)
                    {
                        if (BitMask == null)
                        {
                            if (replacement == null)
                            {
                                BitMask = new PropertyState<bool[]>(this);
                            }
                            else
                            {
                                BitMask = (PropertyState<bool[]>)replacement;
                            }
                        }
                    }

                    instance = BitMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText[]> m_optionSetValues;
        private PropertyState<bool[]> m_bitMask;
        #endregion
    }

    #region OptionSetState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class OptionSetState<T> : OptionSetState
    {
        #region Constructors
        /// <remarks />
        public OptionSetState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SelectionListState Class
    #if (!OPCUA_EXCLUDE_SelectionListState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SelectionListState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public SelectionListState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SelectionListType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SelectionDescriptions != null)
            {
                SelectionDescriptions.Initialize(context, SelectionDescriptions_InitializationString);
            }

            if (RestrictToList != null)
            {
                RestrictToList.Initialize(context, RestrictToList_InitializationString);
            }
        }

        #region Initialization String
        private const string SelectionDescriptions_InitializationString =
           "//////////8XYIkKAgAAAAAAFQAAAFNlbGVjdGlvbkRlc2NyaXB0aW9ucwEA4UQALgBE4UQAAAAVAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string RestrictToList_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFJlc3RyaWN0VG9MaXN0AQC4PwAuAES4PwAAAAH/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGQAAAFNlbGVjdGlvbkxpc3RUeXBlSW5zdGFuY2UBALU/AQC1P7U/AAAA" +
           "GP////8BAf////8DAAAAF2CJCgIAAAAAAAoAAABTZWxlY3Rpb25zAQDgRAAuAETgRAAAABgBAAAAAQAA" +
           "AAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABTZWxlY3Rpb25EZXNjcmlwdGlvbnMBAOFEAC4AROFE" +
           "AAAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADgAAAFJlc3RyaWN0VG9MaXN0AQC4PwAu" +
           "AES4PwAAAAH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<object[]> Selections
        {
            get
            {
                return m_selections;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selections, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selections = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText[]> SelectionDescriptions
        {
            get
            {
                return m_selectionDescriptions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selectionDescriptions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selectionDescriptions = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> RestrictToList
        {
            get
            {
                return m_restrictToList;
            }

            set
            {
                if (!Object.ReferenceEquals(m_restrictToList, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_restrictToList = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_selections != null)
            {
                children.Add(m_selections);
            }

            if (m_selectionDescriptions != null)
            {
                children.Add(m_selectionDescriptions);
            }

            if (m_restrictToList != null)
            {
                children.Add(m_restrictToList);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Selections:
                {
                    if (createOrReplace)
                    {
                        if (Selections == null)
                        {
                            if (replacement == null)
                            {
                                Selections = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                Selections = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = Selections;
                    break;
                }

                case Opc.Ua.BrowseNames.SelectionDescriptions:
                {
                    if (createOrReplace)
                    {
                        if (SelectionDescriptions == null)
                        {
                            if (replacement == null)
                            {
                                SelectionDescriptions = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                SelectionDescriptions = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = SelectionDescriptions;
                    break;
                }

                case Opc.Ua.BrowseNames.RestrictToList:
                {
                    if (createOrReplace)
                    {
                        if (RestrictToList == null)
                        {
                            if (replacement == null)
                            {
                                RestrictToList = new PropertyState<bool>(this);
                            }
                            else
                            {
                                RestrictToList = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = RestrictToList;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<object[]> m_selections;
        private PropertyState<LocalizedText[]> m_selectionDescriptions;
        private PropertyState<bool> m_restrictToList;
        #endregion
    }

    #region SelectionListState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SelectionListState<T> : SelectionListState
    {
        #region Constructors
        /// <remarks />
        public SelectionListState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AudioVariableState Class
    #if (!OPCUA_EXCLUDE_AudioVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AudioVariableState : BaseDataVariableState<byte[]>
    {
        #region Constructors
        /// <remarks />
        public AudioVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AudioVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.AudioDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ListId != null)
            {
                ListId.Initialize(context, ListId_InitializationString);
            }

            if (AgencyId != null)
            {
                AgencyId.Initialize(context, AgencyId_InitializationString);
            }

            if (VersionId != null)
            {
                VersionId.Initialize(context, VersionId_InitializationString);
            }
        }

        #region Initialization String
        private const string ListId_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAExpc3RJZAEAREYALgBEREYAAAAM/////wEB/////wAAAAA=";

        private const string AgencyId_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAEFnZW5jeUlkAQBFRgAuAERFRgAAAAz/////AQH/////AAAAAA==";

        private const string VersionId_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFZlcnNpb25JZAEARkYALgBERkYAAAAM/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGQAAAEF1ZGlvVmFyaWFibGVUeXBlSW5zdGFuY2UBAEJGAQBCRkJGAAAB" +
           "ALM//////wEB/////wMAAAAVYIkKAgAAAAAABgAAAExpc3RJZAEAREYALgBEREYAAAAM/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAEFnZW5jeUlkAQBFRgAuAERFRgAAAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAAVmVyc2lvbklkAQBGRgAuAERGRgAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ListId
        {
            get
            {
                return m_listId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_listId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_listId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> AgencyId
        {
            get
            {
                return m_agencyId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_agencyId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_agencyId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> VersionId
        {
            get
            {
                return m_versionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_versionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_versionId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_listId != null)
            {
                children.Add(m_listId);
            }

            if (m_agencyId != null)
            {
                children.Add(m_agencyId);
            }

            if (m_versionId != null)
            {
                children.Add(m_versionId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ListId:
                {
                    if (createOrReplace)
                    {
                        if (ListId == null)
                        {
                            if (replacement == null)
                            {
                                ListId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ListId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ListId;
                    break;
                }

                case Opc.Ua.BrowseNames.AgencyId:
                {
                    if (createOrReplace)
                    {
                        if (AgencyId == null)
                        {
                            if (replacement == null)
                            {
                                AgencyId = new PropertyState<string>(this);
                            }
                            else
                            {
                                AgencyId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = AgencyId;
                    break;
                }

                case Opc.Ua.BrowseNames.VersionId:
                {
                    if (createOrReplace)
                    {
                        if (VersionId == null)
                        {
                            if (replacement == null)
                            {
                                VersionId = new PropertyState<string>(this);
                            }
                            else
                            {
                                VersionId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = VersionId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_listId;
        private PropertyState<string> m_agencyId;
        private PropertyState<string> m_versionId;
        #endregion
    }
    #endif
    #endregion

    #region GetMonitoredItemsMethodState Class
    #if (!OPCUA_EXCLUDE_GetMonitoredItemsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetMonitoredItemsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetMonitoredItemsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetMonitoredItemsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAEdldE1vbml0b3JlZEl0ZW1zTWV0aG9kVHlwZQEA5ywALwEA5yzn" +
           "LAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgsAC4AROgsAACWAQAAAAEA" +
           "KgEBHQAAAA4AAABTdWJzY3JpcHRpb25JZAAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA6SwALgBE6SwAAJYCAAAAAQAqAQEgAAAADQAA" +
           "AFNlcnZlckhhbmRsZXMABwEAAAABAAAAAAAAAAABACoBASAAAAANAAAAQ2xpZW50SGFuZGxlcwAHAQAA" +
           "AAEAAAAAAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetMonitoredItemsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            uint[] serverHandles = (uint[])_outputArguments[0];
            uint[] clientHandles = (uint[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    ref serverHandles,
                    ref clientHandles);
            }

            _outputArguments[0] = serverHandles;
            _outputArguments[1] = clientHandles;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetMonitoredItemsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        ref uint[] serverHandles,
        ref uint[] clientHandles);
    #endif
    #endregion

    #region ResendDataMethodState Class
    #if (!OPCUA_EXCLUDE_ResendDataMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ResendDataMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ResendDataMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ResendDataMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAFJlc2VuZERhdGFNZXRob2RUeXBlAQBLMgAvAQBLMksyAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDIALgBETDIAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ResendDataMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ResendDataMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region SetSubscriptionDurableMethodState Class
    #if (!OPCUA_EXCLUDE_SetSubscriptionDurableMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetSubscriptionDurableMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public SetSubscriptionDurableMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new SetSubscriptionDurableMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGVNZXRob2RUeXBlAQDQMQAv" +
           "AQDQMdAxAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA0TEALgBE0TEAAJYC" +
           "AAAAAQAqAQEdAAAADgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACoBAR4AAAAPAAAATGlmZXRp" +
           "bWVJbkhvdXJzAAf/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAQDSMQAuAETSMQAAlgEAAAABACoBASUAAAAWAAAAUmV2aXNlZExpZmV0aW1l" +
           "SW5Ib3VycwAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public SetSubscriptionDurableMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint lifetimeInHours = (uint)_inputArguments[1];

            uint revisedLifetimeInHours = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    lifetimeInHours,
                    ref revisedLifetimeInHours);
            }

            _outputArguments[0] = revisedLifetimeInHours;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult SetSubscriptionDurableMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        uint lifetimeInHours,
        ref uint revisedLifetimeInHours);
    #endif
    #endregion

    #region RequestServerStateChangeMethodState Class
    #if (!OPCUA_EXCLUDE_RequestServerStateChangeMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RequestServerStateChangeMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RequestServerStateChangeMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RequestServerStateChangeMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZU1ldGhvZFR5cGUBAFgy" +
           "AC8BAFgyWDIAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBZMgAuAERZMgAA" +
           "lgUAAAABACoBARYAAAAFAAAAU3RhdGUBAFQD/////wAAAAAAAQAqAQEiAAAAEwAAAEVzdGltYXRlZFJl" +
           "dHVyblRpbWUADf////8AAAAAAAEAKgEBIgAAABMAAABTZWNvbmRzVGlsbFNodXRkb3duAAf/////AAAA" +
           "AAABACoBARUAAAAGAAAAUmVhc29uABX/////AAAAAAABACoBARYAAAAHAAAAUmVzdGFydAAB/////wAA" +
           "AAAAAQAoAQEAAAABAAAABQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RequestServerStateChangeMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ServerState state = (ServerState)_inputArguments[0];
            DateTime estimatedReturnTime = (DateTime)_inputArguments[1];
            uint secondsTillShutdown = (uint)_inputArguments[2];
            LocalizedText reason = (LocalizedText)_inputArguments[3];
            bool restart = (bool)_inputArguments[4];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    state,
                    estimatedReturnTime,
                    secondsTillShutdown,
                    reason,
                    restart);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RequestServerStateChangeMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ServerState state,
        DateTime estimatedReturnTime,
        uint secondsTillShutdown,
        LocalizedText reason,
        bool restart);
    #endif
    #endregion

    #region StateMachineState Class
    #if (!OPCUA_EXCLUDE_StateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public StateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDSCgAvAQDKCtIKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAjA4ALgBEjA4AAAAY/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAFN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA+wgBAPsI+wgAAP//" +
           "//8CAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANEKAC8BAMMK0QoAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQCIDgAuAESIDgAAABj/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFRyYW5zaXRpb24BANIKAC8BAMoK0goAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQCMDgAuAESMDgAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public StateVariableState CurrentState
        {
            get
            {
                return m_currentState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentState = value;
            }
        }

        /// <remarks />
        public TransitionVariableState LastTransition
        {
            get
            {
                return m_lastTransition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentState != null)
            {
                children.Add(m_currentState);
            }

            if (m_lastTransition != null)
            {
                children.Add(m_lastTransition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new StateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new TransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private StateVariableState m_currentState;
        private TransitionVariableState m_lastTransition;
        #endregion
    }
    #endif
    #endregion

    #region StateVariableState Class
    #if (!OPCUA_EXCLUDE_StateVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <remarks />
        public StateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.StateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (EffectiveDisplayName != null)
            {
                EffectiveDisplayName.Initialize(context, EffectiveDisplayName_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMUKAC4ARMUKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAxgoALgBExgoAAAAH/////wEB/////wAAAAA=";

        private const string EffectiveDisplayName_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQDHCgAuAETHCgAAABX/////" +
           "AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGQAAAFN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMMKAQDDCsMKAAAA" +
           "Ff////8BAf////8EAAAAFWCJCgIAAAAAAAIAAABJZAEAxAoALgBExAoAAAAY/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABAAAAE5hbWUBAMUKAC4ARMUKAAAAFP////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABO" +
           "dW1iZXIBAMYKAC4ARMYKAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABFZmZlY3RpdmVEaXNw" +
           "bGF5TmFtZQEAxwoALgBExwoAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> EffectiveDisplayName
        {
            get
            {
                return m_effectiveDisplayName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveDisplayName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveDisplayName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_effectiveDisplayName != null)
            {
                children.Add(m_effectiveDisplayName);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveDisplayName:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveDisplayName == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveDisplayName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                EffectiveDisplayName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = EffectiveDisplayName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<LocalizedText> m_effectiveDisplayName;
        #endregion
    }
    #endif
    #endregion

    #region TransitionVariableState Class
    #if (!OPCUA_EXCLUDE_TransitionVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <remarks />
        public TransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMwKAC4ARMwKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAzQoALgBEzQoAAAAH/////wEB/////wAAAAA=";

        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQDOCgAuAETOCgAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQDALAAuAETALAAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHgAAAFRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEAygoBAMoK" +
           "ygoAAAAV/////wEB/////wUAAAAVYIkKAgAAAAAAAgAAAElkAQDLCgAuAETLCgAAABj/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAEAAAATmFtZQEAzAoALgBEzAoAAAAU/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAE51bWJlcgEAzQoALgBEzQoAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRp" +
           "b25UaW1lAQDOCgAuAETOCgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABcAAABFZmZlY3RpdmVU" +
           "cmFuc2l0aW9uVGltZQEAwCwALgBEwCwAAAEAJgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateMachineState Class
    #if (!OPCUA_EXCLUDE_FiniteStateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateMachineState : StateMachineState
    {
        #region Constructors
        /// <remarks />
        public FiniteStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FiniteStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }

            if (AvailableStates != null)
            {
                AvailableStates.Initialize(context, AvailableStates_InitializationString);
            }

            if (AvailableTransitions != null)
            {
                AvailableTransitions.Initialize(context, AvailableTransitions_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDVCgAvAQDPCtUKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAlA4ALgBElA4AAAAR/////wEB/////wAAAAA=";

        private const string AvailableStates_InitializationString =
           "//////////8XYIkKAgAAAAAADwAAAEF2YWlsYWJsZVN0YXRlcwEA40QALwA/40QAAAARAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAAA==";

        private const string AvailableTransitions_InitializationString =
           "//////////8XYIkKAgAAAAAAFAAAAEF2YWlsYWJsZVRyYW5zaXRpb25zAQDkRAAvAD/kRAAAABEBAAAA" +
           "AQAAAAAAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEZpbml0ZVN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA0woBANMK" +
           "0woAAP////8EAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANQKAC8BAMgK1AoAAAAV/////wEB" +
           "/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQCQDgAuAESQDgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAATGFzdFRyYW5zaXRpb24BANUKAC8BAM8K1QoAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQCUDgAuAESUDgAAABH/////AQH/////AAAAABdgiQoCAAAAAAAPAAAAQXZhaWxhYmxlU3Rh" +
           "dGVzAQDjRAAvAD/jRAAAABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABQAAABBdmFpbGFi" +
           "bGVUcmFuc2l0aW9ucwEA5EQALwA/5EQAAAARAQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new FiniteStateVariableState CurrentState
        {
            get { return (FiniteStateVariableState)base.CurrentState; }
            set { base.CurrentState = value; }
        }

        /// <remarks />
        public new FiniteTransitionVariableState LastTransition
        {
            get { return (FiniteTransitionVariableState)base.LastTransition; }
            set { base.LastTransition = value; }
        }

        /// <remarks />
        public BaseDataVariableState<NodeId[]> AvailableStates
        {
            get
            {
                return m_availableStates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_availableStates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_availableStates = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<NodeId[]> AvailableTransitions
        {
            get
            {
                return m_availableTransitions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_availableTransitions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_availableTransitions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_availableStates != null)
            {
                children.Add(m_availableStates);
            }

            if (m_availableTransitions != null)
            {
                children.Add(m_availableTransitions);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new FiniteStateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (FiniteStateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }

                case Opc.Ua.BrowseNames.AvailableStates:
                {
                    if (createOrReplace)
                    {
                        if (AvailableStates == null)
                        {
                            if (replacement == null)
                            {
                                AvailableStates = new BaseDataVariableState<NodeId[]>(this);
                            }
                            else
                            {
                                AvailableStates = (BaseDataVariableState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = AvailableStates;
                    break;
                }

                case Opc.Ua.BrowseNames.AvailableTransitions:
                {
                    if (createOrReplace)
                    {
                        if (AvailableTransitions == null)
                        {
                            if (replacement == null)
                            {
                                AvailableTransitions = new BaseDataVariableState<NodeId[]>(this);
                            }
                            else
                            {
                                AvailableTransitions = (BaseDataVariableState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = AvailableTransitions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId[]> m_availableStates;
        private BaseDataVariableState<NodeId[]> m_availableTransitions;
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteStateVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateVariableState : StateVariableState
    {
        #region Constructors
        /// <remarks />
        public FiniteStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHwAAAEZpbml0ZVN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMgKAQDI" +
           "CsgKAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAyQoALgBEyQoAAAAR/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region FiniteTransitionVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteTransitionVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteTransitionVariableState : TransitionVariableState
    {
        #region Constructors
        /// <remarks />
        public FiniteTransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteTransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJAAAAEZpbml0ZVRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEA" +
           "zwoBAM8KzwoAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDQCgAuAETQCgAAABH/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineStateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineStateState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public StateMachineStateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEQAAAFN0YXRlVHlwZUluc3RhbmNlAQADCQEAAwkDCQAA/////wEAAAAV" +
           "YIkKAgAAAAAACwAAAFN0YXRlTnVtYmVyAQAECQAuAEQECQAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> StateNumber
        {
            get
            {
                return m_stateNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stateNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stateNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_stateNumber != null)
            {
                children.Add(m_stateNumber);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StateNumber:
                {
                    if (createOrReplace)
                    {
                        if (StateNumber == null)
                        {
                            if (replacement == null)
                            {
                                StateNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                StateNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = StateNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_stateNumber;
        #endregion
    }
    #endif
    #endregion

    #region StateMachineInitialStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineInitialStateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineInitialStateState : StateMachineStateState
    {
        #region Constructors
        /// <remarks />
        public StateMachineInitialStateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.InitialStateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAEluaXRpYWxTdGF0ZVR5cGVJbnN0YW5jZQEABQkBAAUJBQkAAP//" +
           "//8BAAAAFWCJCgIAAAAAAAsAAABTdGF0ZU51bWJlcgIAAM1EDwAALgBEzUQPAAAH/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineTransitionState Class
    #if (!OPCUA_EXCLUDE_StateMachineTransitionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineTransitionState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public StateMachineTransitionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAFRyYW5zaXRpb25UeXBlSW5zdGFuY2UBAAYJAQAGCQYJAAD/////" +
           "AQAAABVgiQoCAAAAAAAQAAAAVHJhbnNpdGlvbk51bWJlcgEACAkALgBECAkAAAAH/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region StateMachineChoiceStateTypeState Class
    #if (!OPCUA_EXCLUDE_StateMachineChoiceStateTypeState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineChoiceStateTypeState : StateMachineStateState
    {
        #region Constructors
        /// <remarks />
        public StateMachineChoiceStateTypeState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ChoiceStateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAENob2ljZVN0YXRlVHlwZUluc3RhbmNlAQAFOwEABTsFOwAA////" +
           "/wEAAAAVYIkKAgAAAAAACwAAAFN0YXRlTnVtYmVyAgAAzkQPAAAuAETORA8AAAf/////AQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region GuardVariableState Class
    #if (!OPCUA_EXCLUDE_GuardVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GuardVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <remarks />
        public GuardVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.GuardVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGQAAAEd1YXJkVmFyaWFibGVUeXBlSW5zdGFuY2UBAAk7AQAJOwk7AAAA" +
           "Ff////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExpressionGuardVariableState Class
    #if (!OPCUA_EXCLUDE_ExpressionGuardVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExpressionGuardVariableState : GuardVariableState
    {
        #region Constructors
        /// <remarks />
        public ExpressionGuardVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ExpressionGuardVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIwAAAEV4cHJlc3Npb25HdWFyZFZhcmlhYmxlVHlwZUluc3RhbmNlAQAY" +
           "OwEAGDsYOwAAABX/////AQH/////AQAAABVgiQoCAAAAAAAKAAAARXhwcmVzc2lvbgEAGTsALgBEGTsA" +
           "AAEASgL/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ContentFilter> Expression
        {
            get
            {
                return m_expression;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expression, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expression = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_expression != null)
            {
                children.Add(m_expression);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Expression:
                {
                    if (createOrReplace)
                    {
                        if (Expression == null)
                        {
                            if (replacement == null)
                            {
                                Expression = new PropertyState<ContentFilter>(this);
                            }
                            else
                            {
                                Expression = (PropertyState<ContentFilter>)replacement;
                            }
                        }
                    }

                    instance = Expression;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ContentFilter> m_expression;
        #endregion
    }
    #endif
    #endregion

    #region ElseGuardVariableState Class
    #if (!OPCUA_EXCLUDE_ElseGuardVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ElseGuardVariableState : GuardVariableState
    {
        #region Constructors
        /// <remarks />
        public ElseGuardVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ElseGuardVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHQAAAEVsc2VHdWFyZFZhcmlhYmxlVHlwZUluc3RhbmNlAQDVOwEA1TvV" +
           "OwAAABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RationalNumberState Class
    #if (!OPCUA_EXCLUDE_RationalNumberState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RationalNumberState : BaseDataVariableState<Opc.Ua.RationalNumber>
    {
        #region Constructors
        /// <remarks />
        public RationalNumberState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.RationalNumberType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.RationalNumber, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGgAAAFJhdGlvbmFsTnVtYmVyVHlwZUluc3RhbmNlAQAtRQEALUUtRQAA" +
           "AQB2Sf////8BAf////8CAAAAFWCJCgIAAAAAAAkAAABOdW1lcmF0b3IBADBFAC8APzBFAAAABv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABEZW5vbWluYXRvcgEAMUUALwA/MUUAAAAH/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<int> Numerator
        {
            get
            {
                return m_numerator;
            }

            set
            {
                if (!Object.ReferenceEquals(m_numerator, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_numerator = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> Denominator
        {
            get
            {
                return m_denominator;
            }

            set
            {
                if (!Object.ReferenceEquals(m_denominator, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_denominator = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_numerator != null)
            {
                children.Add(m_numerator);
            }

            if (m_denominator != null)
            {
                children.Add(m_denominator);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Numerator:
                {
                    if (createOrReplace)
                    {
                        if (Numerator == null)
                        {
                            if (replacement == null)
                            {
                                Numerator = new BaseDataVariableState<int>(this);
                            }
                            else
                            {
                                Numerator = (BaseDataVariableState<int>)replacement;
                            }
                        }
                    }

                    instance = Numerator;
                    break;
                }

                case Opc.Ua.BrowseNames.Denominator:
                {
                    if (createOrReplace)
                    {
                        if (Denominator == null)
                        {
                            if (replacement == null)
                            {
                                Denominator = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                Denominator = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = Denominator;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<int> m_numerator;
        private BaseDataVariableState<uint> m_denominator;
        #endregion
    }

    #region RationalNumberValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class RationalNumberValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public RationalNumberValue(RationalNumberState variable, RationalNumber value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new RationalNumber();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public RationalNumberState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public RationalNumber Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(RationalNumberState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.Numerator;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Numerator;
                    instance.OnWriteValue = OnWrite_Numerator;
                    updateList.Add(instance);
                }
                instance = m_variable.Denominator;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Denominator;
                    instance.OnWriteValue = OnWrite_Denominator;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                RationalNumber newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (RationalNumber)extensionObject.Body;
                }
                else
                {
                    newValue = (RationalNumber)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (RationalNumber)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref RationalNumber newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.Numerator, newValue.Numerator)) UpdateChildVariableStatus(m_variable.Numerator, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Denominator, newValue.Denominator)) UpdateChildVariableStatus(m_variable.Denominator, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region Numerator Access Methods
        /// <remarks />
        private ServiceResult OnRead_Numerator(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Numerator;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Numerator;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Numerator(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Numerator, ref statusCode, ref timestamp);
                m_value.Numerator = (int)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Denominator Access Methods
        /// <remarks />
        private ServiceResult OnRead_Denominator(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Denominator;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Denominator;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Denominator(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Denominator, ref statusCode, ref timestamp);
                m_value.Denominator = (uint)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private RationalNumber m_value;
        private RationalNumberState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region VectorState Class
    #if (!OPCUA_EXCLUDE_VectorState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class VectorState : BaseDataVariableState<Opc.Ua.Vector>
    {
        #region Constructors
        /// <remarks />
        public VectorState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.VectorType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Vector, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (VectorUnit != null)
            {
                VectorUnit.Initialize(context, VectorUnit_InitializationString);
            }
        }

        #region Initialization String
        private const string VectorUnit_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAFZlY3RvclVuaXQBADNFAC4ARDNFAAABAHcD/////wEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAEgAAAFZlY3RvclR5cGVJbnN0YW5jZQEAMkUBADJFMkUAAAEAd0n/////" +
           "AQH/////AQAAABVgiQoCAAAAAAAKAAAAVmVjdG9yVW5pdAEAM0UALgBEM0UAAAEAdwP/////AQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EUInformation> VectorUnit
        {
            get
            {
                return m_vectorUnit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vectorUnit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vectorUnit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_vectorUnit != null)
            {
                children.Add(m_vectorUnit);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.VectorUnit:
                {
                    if (createOrReplace)
                    {
                        if (VectorUnit == null)
                        {
                            if (replacement == null)
                            {
                                VectorUnit = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                VectorUnit = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = VectorUnit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EUInformation> m_vectorUnit;
        #endregion
    }
    #endif
    #endregion

    #region ThreeDVectorState Class
    #if (!OPCUA_EXCLUDE_ThreeDVectorState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ThreeDVectorState : VectorState
    {
        #region Constructors
        /// <remarks />
        public ThreeDVectorState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ThreeDVectorType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ThreeDVector, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAGAAAAFRocmVlRFZlY3RvclR5cGVJbnN0YW5jZQEANEUBADRFNEUAAAEA" +
           "eEn/////AQH/////AwAAABVgiQoCAAAAAAABAAAAWAEAUUkALwA/UUkAAAAL/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAAQAAAFkBAFJJAC8AP1JJAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAAAEAAABaAQBT" +
           "SQAvAD9TSQAAAAv/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> X
        {
            get
            {
                return m_x;
            }

            set
            {
                if (!Object.ReferenceEquals(m_x, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_x = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> Y
        {
            get
            {
                return m_y;
            }

            set
            {
                if (!Object.ReferenceEquals(m_y, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_y = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> Z
        {
            get
            {
                return m_z;
            }

            set
            {
                if (!Object.ReferenceEquals(m_z, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_z = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_x != null)
            {
                children.Add(m_x);
            }

            if (m_y != null)
            {
                children.Add(m_y);
            }

            if (m_z != null)
            {
                children.Add(m_z);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.X:
                {
                    if (createOrReplace)
                    {
                        if (X == null)
                        {
                            if (replacement == null)
                            {
                                X = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                X = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = X;
                    break;
                }

                case Opc.Ua.BrowseNames.Y:
                {
                    if (createOrReplace)
                    {
                        if (Y == null)
                        {
                            if (replacement == null)
                            {
                                Y = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                Y = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = Y;
                    break;
                }

                case Opc.Ua.BrowseNames.Z:
                {
                    if (createOrReplace)
                    {
                        if (Z == null)
                        {
                            if (replacement == null)
                            {
                                Z = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                Z = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = Z;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_x;
        private BaseDataVariableState<double> m_y;
        private BaseDataVariableState<double> m_z;
        #endregion
    }

    #region ThreeDVectorValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ThreeDVectorValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ThreeDVectorValue(ThreeDVectorState variable, ThreeDVector value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ThreeDVector();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ThreeDVectorState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ThreeDVector Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ThreeDVectorState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.X;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_X;
                    instance.OnWriteValue = OnWrite_X;
                    updateList.Add(instance);
                }
                instance = m_variable.Y;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Y;
                    instance.OnWriteValue = OnWrite_Y;
                    updateList.Add(instance);
                }
                instance = m_variable.Z;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Z;
                    instance.OnWriteValue = OnWrite_Z;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ThreeDVector newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ThreeDVector)extensionObject.Body;
                }
                else
                {
                    newValue = (ThreeDVector)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ThreeDVector)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ThreeDVector newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.X, newValue.X)) UpdateChildVariableStatus(m_variable.X, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Y, newValue.Y)) UpdateChildVariableStatus(m_variable.Y, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Z, newValue.Z)) UpdateChildVariableStatus(m_variable.Z, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region X Access Methods
        /// <remarks />
        private ServiceResult OnRead_X(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.X;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.X;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_X(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.X, ref statusCode, ref timestamp);
                m_value.X = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Y Access Methods
        /// <remarks />
        private ServiceResult OnRead_Y(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Y;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Y;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Y(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Y, ref statusCode, ref timestamp);
                m_value.Y = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Z Access Methods
        /// <remarks />
        private ServiceResult OnRead_Z(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Z;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Z;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Z(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Z, ref statusCode, ref timestamp);
                m_value.Z = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ThreeDVector m_value;
        private ThreeDVectorState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region CartesianCoordinatesState Class
    #if (!OPCUA_EXCLUDE_CartesianCoordinatesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CartesianCoordinatesState : BaseDataVariableState<Opc.Ua.CartesianCoordinates>
    {
        #region Constructors
        /// <remarks />
        public CartesianCoordinatesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.CartesianCoordinatesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.CartesianCoordinates, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LengthUnit != null)
            {
                LengthUnit.Initialize(context, LengthUnit_InitializationString);
            }
        }

        #region Initialization String
        private const string LengthUnit_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAExlbmd0aFVuaXQBAFVJAC4ARFVJAAABAHcD/////wEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAIAAAAENhcnRlc2lhbkNvb3JkaW5hdGVzVHlwZUluc3RhbmNlAQBUSQEA" +
           "VElUSQAAAQB5Sf////8BAf////8BAAAAFWCJCgIAAAAAAAoAAABMZW5ndGhVbml0AQBVSQAuAERVSQAA" +
           "AQB3A/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EUInformation> LengthUnit
        {
            get
            {
                return m_lengthUnit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lengthUnit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lengthUnit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_lengthUnit != null)
            {
                children.Add(m_lengthUnit);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LengthUnit:
                {
                    if (createOrReplace)
                    {
                        if (LengthUnit == null)
                        {
                            if (replacement == null)
                            {
                                LengthUnit = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                LengthUnit = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = LengthUnit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EUInformation> m_lengthUnit;
        #endregion
    }
    #endif
    #endregion

    #region ThreeDCartesianCoordinatesState Class
    #if (!OPCUA_EXCLUDE_ThreeDCartesianCoordinatesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ThreeDCartesianCoordinatesState : CartesianCoordinatesState
    {
        #region Constructors
        /// <remarks />
        public ThreeDCartesianCoordinatesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ThreeDCartesianCoordinatesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ThreeDCartesianCoordinates, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJgAAAFRocmVlRENhcnRlc2lhbkNvb3JkaW5hdGVzVHlwZUluc3RhbmNl" +
           "AQBWSQEAVklWSQAAAQB6Sf////8BAf////8DAAAAFWCJCgIAAAAAAAEAAABYAQBYSQAvAD9YSQAAAAv/" +
           "////AQH/////AAAAABVgiQoCAAAAAAABAAAAWQEAWUkALwA/WUkAAAAL/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAAQAAAFoBAFpJAC8AP1pJAAAAC/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> X
        {
            get
            {
                return m_x;
            }

            set
            {
                if (!Object.ReferenceEquals(m_x, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_x = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> Y
        {
            get
            {
                return m_y;
            }

            set
            {
                if (!Object.ReferenceEquals(m_y, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_y = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> Z
        {
            get
            {
                return m_z;
            }

            set
            {
                if (!Object.ReferenceEquals(m_z, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_z = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_x != null)
            {
                children.Add(m_x);
            }

            if (m_y != null)
            {
                children.Add(m_y);
            }

            if (m_z != null)
            {
                children.Add(m_z);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.X:
                {
                    if (createOrReplace)
                    {
                        if (X == null)
                        {
                            if (replacement == null)
                            {
                                X = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                X = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = X;
                    break;
                }

                case Opc.Ua.BrowseNames.Y:
                {
                    if (createOrReplace)
                    {
                        if (Y == null)
                        {
                            if (replacement == null)
                            {
                                Y = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                Y = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = Y;
                    break;
                }

                case Opc.Ua.BrowseNames.Z:
                {
                    if (createOrReplace)
                    {
                        if (Z == null)
                        {
                            if (replacement == null)
                            {
                                Z = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                Z = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = Z;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_x;
        private BaseDataVariableState<double> m_y;
        private BaseDataVariableState<double> m_z;
        #endregion
    }

    #region ThreeDCartesianCoordinatesValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ThreeDCartesianCoordinatesValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ThreeDCartesianCoordinatesValue(ThreeDCartesianCoordinatesState variable, ThreeDCartesianCoordinates value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ThreeDCartesianCoordinates();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ThreeDCartesianCoordinatesState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ThreeDCartesianCoordinates Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ThreeDCartesianCoordinatesState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.X;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_X;
                    instance.OnWriteValue = OnWrite_X;
                    updateList.Add(instance);
                }
                instance = m_variable.Y;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Y;
                    instance.OnWriteValue = OnWrite_Y;
                    updateList.Add(instance);
                }
                instance = m_variable.Z;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Z;
                    instance.OnWriteValue = OnWrite_Z;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ThreeDCartesianCoordinates newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ThreeDCartesianCoordinates)extensionObject.Body;
                }
                else
                {
                    newValue = (ThreeDCartesianCoordinates)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ThreeDCartesianCoordinates)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ThreeDCartesianCoordinates newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.X, newValue.X)) UpdateChildVariableStatus(m_variable.X, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Y, newValue.Y)) UpdateChildVariableStatus(m_variable.Y, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Z, newValue.Z)) UpdateChildVariableStatus(m_variable.Z, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region X Access Methods
        /// <remarks />
        private ServiceResult OnRead_X(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.X;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.X;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_X(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.X, ref statusCode, ref timestamp);
                m_value.X = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Y Access Methods
        /// <remarks />
        private ServiceResult OnRead_Y(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Y;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Y;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Y(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Y, ref statusCode, ref timestamp);
                m_value.Y = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Z Access Methods
        /// <remarks />
        private ServiceResult OnRead_Z(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Z;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Z;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Z(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Z, ref statusCode, ref timestamp);
                m_value.Z = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ThreeDCartesianCoordinates m_value;
        private ThreeDCartesianCoordinatesState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region OrientationState Class
    #if (!OPCUA_EXCLUDE_OrientationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OrientationState : BaseDataVariableState<Opc.Ua.Orientation>
    {
        #region Constructors
        /// <remarks />
        public OrientationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.OrientationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Orientation, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AngleUnit != null)
            {
                AngleUnit.Initialize(context, AngleUnit_InitializationString);
            }
        }

        #region Initialization String
        private const string AngleUnit_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEFuZ2xlVW5pdAEAXEkALgBEXEkAAAEAdwP/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFwAAAE9yaWVudGF0aW9uVHlwZUluc3RhbmNlAQBbSQEAW0lbSQAAAQB7" +
           "Sf////8BAf////8BAAAAFWCJCgIAAAAAAAkAAABBbmdsZVVuaXQBAFxJAC4ARFxJAAABAHcD/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EUInformation> AngleUnit
        {
            get
            {
                return m_angleUnit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_angleUnit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_angleUnit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_angleUnit != null)
            {
                children.Add(m_angleUnit);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AngleUnit:
                {
                    if (createOrReplace)
                    {
                        if (AngleUnit == null)
                        {
                            if (replacement == null)
                            {
                                AngleUnit = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                AngleUnit = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = AngleUnit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EUInformation> m_angleUnit;
        #endregion
    }
    #endif
    #endregion

    #region ThreeDOrientationState Class
    #if (!OPCUA_EXCLUDE_ThreeDOrientationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ThreeDOrientationState : OrientationState
    {
        #region Constructors
        /// <remarks />
        public ThreeDOrientationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ThreeDOrientationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ThreeDOrientation, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHQAAAFRocmVlRE9yaWVudGF0aW9uVHlwZUluc3RhbmNlAQBdSQEAXUld" +
           "SQAAAQB8Sf////8BAf////8DAAAAFWCJCgIAAAAAAAEAAABBAQBfSQAvAD9fSQAAAAv/////AQH/////" +
           "AAAAABVgiQoCAAAAAAABAAAAQgEAYEkALwA/YEkAAAAL/////wEB/////wAAAAAVYIkKAgAAAAAAAQAA" +
           "AEMBAGFJAC8AP2FJAAAAC/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> A
        {
            get
            {
                return m_a;
            }

            set
            {
                if (!Object.ReferenceEquals(m_a, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_a = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> B
        {
            get
            {
                return m_b;
            }

            set
            {
                if (!Object.ReferenceEquals(m_b, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_b = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> C
        {
            get
            {
                return m_c;
            }

            set
            {
                if (!Object.ReferenceEquals(m_c, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_c = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_a != null)
            {
                children.Add(m_a);
            }

            if (m_b != null)
            {
                children.Add(m_b);
            }

            if (m_c != null)
            {
                children.Add(m_c);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.A:
                {
                    if (createOrReplace)
                    {
                        if (A == null)
                        {
                            if (replacement == null)
                            {
                                A = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                A = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = A;
                    break;
                }

                case Opc.Ua.BrowseNames.B:
                {
                    if (createOrReplace)
                    {
                        if (B == null)
                        {
                            if (replacement == null)
                            {
                                B = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                B = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = B;
                    break;
                }

                case Opc.Ua.BrowseNames.C:
                {
                    if (createOrReplace)
                    {
                        if (C == null)
                        {
                            if (replacement == null)
                            {
                                C = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                C = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = C;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_a;
        private BaseDataVariableState<double> m_b;
        private BaseDataVariableState<double> m_c;
        #endregion
    }

    #region ThreeDOrientationValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ThreeDOrientationValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ThreeDOrientationValue(ThreeDOrientationState variable, ThreeDOrientation value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ThreeDOrientation();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ThreeDOrientationState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ThreeDOrientation Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ThreeDOrientationState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.A;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_A;
                    instance.OnWriteValue = OnWrite_A;
                    updateList.Add(instance);
                }
                instance = m_variable.B;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_B;
                    instance.OnWriteValue = OnWrite_B;
                    updateList.Add(instance);
                }
                instance = m_variable.C;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_C;
                    instance.OnWriteValue = OnWrite_C;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ThreeDOrientation newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ThreeDOrientation)extensionObject.Body;
                }
                else
                {
                    newValue = (ThreeDOrientation)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ThreeDOrientation)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ThreeDOrientation newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.A, newValue.A)) UpdateChildVariableStatus(m_variable.A, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.B, newValue.B)) UpdateChildVariableStatus(m_variable.B, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.C, newValue.C)) UpdateChildVariableStatus(m_variable.C, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region A Access Methods
        /// <remarks />
        private ServiceResult OnRead_A(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.A;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.A;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_A(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.A, ref statusCode, ref timestamp);
                m_value.A = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region B Access Methods
        /// <remarks />
        private ServiceResult OnRead_B(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.B;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.B;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_B(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.B, ref statusCode, ref timestamp);
                m_value.B = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region C Access Methods
        /// <remarks />
        private ServiceResult OnRead_C(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.C;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.C;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_C(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.C, ref statusCode, ref timestamp);
                m_value.C = (double)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ThreeDOrientation m_value;
        private ThreeDOrientationState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region FrameState Class
    #if (!OPCUA_EXCLUDE_FrameState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FrameState : BaseDataVariableState<Opc.Ua.Frame>
    {
        #region Constructors
        /// <remarks />
        public FrameState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FrameType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Frame, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Constant != null)
            {
                Constant.Initialize(context, Constant_InitializationString);
            }

            if (BaseFrame != null)
            {
                BaseFrame.Initialize(context, BaseFrame_InitializationString);
            }

            if (FixedBase != null)
            {
                FixedBase.Initialize(context, FixedBase_InitializationString);
            }
        }

        #region Initialization String
        private const string Constant_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAENvbnN0YW50AQBkSQAuAERkSQAAAAH/////AQH/////AAAAAA==";

        private const string BaseFrame_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEJhc2VGcmFtZQEAZUkALwA/ZUkAAAAR/////wEB/////wAAAAA=";

        private const string FixedBase_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEZpeGVkQmFzZQEAZkkALgBEZkkAAAAB/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAEQAAAEZyYW1lVHlwZUluc3RhbmNlAQBiSQEAYkliSQAAAQB9Sf////8B" +
           "Af////8FAAAAFWCJCgIAAAAAABQAAABDYXJ0ZXNpYW5Db29yZGluYXRlcwEAcUkALwEAVElxSQAAAQB5" +
           "Sf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABPcmllbnRhdGlvbgEAY0kALwEAW0ljSQAAAQB7Sf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABDb25zdGFudAEAZEkALgBEZEkAAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEJhc2VGcmFtZQEAZUkALwA/ZUkAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEZpeGVkQmFzZQEAZkkALgBEZkkAAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CartesianCoordinatesState CartesianCoordinates
        {
            get
            {
                return m_cartesianCoordinates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cartesianCoordinates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cartesianCoordinates = value;
            }
        }

        /// <remarks />
        public OrientationState Orientation
        {
            get
            {
                return m_orientation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_orientation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_orientation = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Constant
        {
            get
            {
                return m_constant;
            }

            set
            {
                if (!Object.ReferenceEquals(m_constant, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_constant = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<NodeId> BaseFrame
        {
            get
            {
                return m_baseFrame;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseFrame, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseFrame = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> FixedBase
        {
            get
            {
                return m_fixedBase;
            }

            set
            {
                if (!Object.ReferenceEquals(m_fixedBase, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_fixedBase = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_cartesianCoordinates != null)
            {
                children.Add(m_cartesianCoordinates);
            }

            if (m_orientation != null)
            {
                children.Add(m_orientation);
            }

            if (m_constant != null)
            {
                children.Add(m_constant);
            }

            if (m_baseFrame != null)
            {
                children.Add(m_baseFrame);
            }

            if (m_fixedBase != null)
            {
                children.Add(m_fixedBase);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CartesianCoordinates:
                {
                    if (createOrReplace)
                    {
                        if (CartesianCoordinates == null)
                        {
                            if (replacement == null)
                            {
                                CartesianCoordinates = new CartesianCoordinatesState(this);
                            }
                            else
                            {
                                CartesianCoordinates = (CartesianCoordinatesState)replacement;
                            }
                        }
                    }

                    instance = CartesianCoordinates;
                    break;
                }

                case Opc.Ua.BrowseNames.Orientation:
                {
                    if (createOrReplace)
                    {
                        if (Orientation == null)
                        {
                            if (replacement == null)
                            {
                                Orientation = new OrientationState(this);
                            }
                            else
                            {
                                Orientation = (OrientationState)replacement;
                            }
                        }
                    }

                    instance = Orientation;
                    break;
                }

                case Opc.Ua.BrowseNames.Constant:
                {
                    if (createOrReplace)
                    {
                        if (Constant == null)
                        {
                            if (replacement == null)
                            {
                                Constant = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Constant = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Constant;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseFrame:
                {
                    if (createOrReplace)
                    {
                        if (BaseFrame == null)
                        {
                            if (replacement == null)
                            {
                                BaseFrame = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                BaseFrame = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BaseFrame;
                    break;
                }

                case Opc.Ua.BrowseNames.FixedBase:
                {
                    if (createOrReplace)
                    {
                        if (FixedBase == null)
                        {
                            if (replacement == null)
                            {
                                FixedBase = new PropertyState<bool>(this);
                            }
                            else
                            {
                                FixedBase = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = FixedBase;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CartesianCoordinatesState m_cartesianCoordinates;
        private OrientationState m_orientation;
        private PropertyState<bool> m_constant;
        private BaseDataVariableState<NodeId> m_baseFrame;
        private PropertyState<bool> m_fixedBase;
        #endregion
    }
    #endif
    #endregion

    #region ThreeDFrameState Class
    #if (!OPCUA_EXCLUDE_ThreeDFrameState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ThreeDFrameState : FrameState
    {
        #region Constructors
        /// <remarks />
        public ThreeDFrameState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ThreeDFrameType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ThreeDFrame, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFwAAAFRocmVlREZyYW1lVHlwZUluc3RhbmNlAQBnSQEAZ0lnSQAAAQB+" +
           "Sf////8BAf////8CAAAAFWCJCgIAAAAAABQAAABDYXJ0ZXNpYW5Db29yZGluYXRlcwEAbEkALwEAVkls" +
           "SQAAAQB6Sf////8BAf////8DAAAAFWCJCgIAAAAAAAEAAABYAQBuSQAvAD9uSQAAAAv/////AQH/////" +
           "AAAAABVgiQoCAAAAAAABAAAAWQEAb0kALwA/b0kAAAAL/////wEB/////wAAAAAVYIkKAgAAAAAAAQAA" +
           "AFoBAHBJAC8AP3BJAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABPcmllbnRhdGlvbgEAaEkA" +
           "LwEAXUloSQAAAQB8Sf////8BAf////8DAAAAFWCJCgIAAAAAAAEAAABBAQCCSgAvAD+CSgAAAAv/////" +
           "AQH/////AAAAABVgiQoCAAAAAAABAAAAQgEAg0oALwA/g0oAAAAL/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAAQAAAEMBAIRKAC8AP4RKAAAAC/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new ThreeDCartesianCoordinatesState CartesianCoordinates
        {
            get { return (ThreeDCartesianCoordinatesState)base.CartesianCoordinates; }
            set { base.CartesianCoordinates = value; }
        }

        /// <remarks />
        public new ThreeDOrientationState Orientation
        {
            get { return (ThreeDOrientationState)base.Orientation; }
            set { base.Orientation = value; }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CartesianCoordinates:
                {
                    if (createOrReplace)
                    {
                        if (CartesianCoordinates == null)
                        {
                            if (replacement == null)
                            {
                                CartesianCoordinates = new ThreeDCartesianCoordinatesState(this);
                            }
                            else
                            {
                                CartesianCoordinates = (ThreeDCartesianCoordinatesState)replacement;
                            }
                        }
                    }

                    instance = CartesianCoordinates;
                    break;
                }

                case Opc.Ua.BrowseNames.Orientation:
                {
                    if (createOrReplace)
                    {
                        if (Orientation == null)
                        {
                            if (replacement == null)
                            {
                                Orientation = new ThreeDOrientationState(this);
                            }
                            else
                            {
                                Orientation = (ThreeDOrientationState)replacement;
                            }
                        }
                    }

                    instance = Orientation;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }

    #region ThreeDFrameValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ThreeDFrameValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ThreeDFrameValue(ThreeDFrameState variable, ThreeDFrame value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ThreeDFrame();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ThreeDFrameState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ThreeDFrame Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ThreeDFrameState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.CartesianCoordinates;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CartesianCoordinates;
                    instance.OnWriteValue = OnWrite_CartesianCoordinates;
                    updateList.Add(instance);
                }
                instance = m_variable.Orientation;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_Orientation;
                    instance.OnWriteValue = OnWrite_Orientation;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ThreeDFrame newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ThreeDFrame)extensionObject.Body;
                }
                else
                {
                    newValue = (ThreeDFrame)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ThreeDFrame)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ThreeDFrame newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.CartesianCoordinates, newValue.CartesianCoordinates)) UpdateChildVariableStatus(m_variable.CartesianCoordinates, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.Orientation, newValue.Orientation)) UpdateChildVariableStatus(m_variable.Orientation, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region CartesianCoordinates Access Methods
        /// <remarks />
        private ServiceResult OnRead_CartesianCoordinates(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CartesianCoordinates;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CartesianCoordinates;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CartesianCoordinates(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CartesianCoordinates, ref statusCode, ref timestamp);
                m_value.CartesianCoordinates = (ThreeDCartesianCoordinates)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Orientation Access Methods
        /// <remarks />
        private ServiceResult OnRead_Orientation(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.Orientation;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.Orientation;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_Orientation(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.Orientation, ref statusCode, ref timestamp);
                m_value.Orientation = (ThreeDOrientation)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ThreeDFrame m_value;
        private ThreeDFrameState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region BitFieldState Class
    #if (!OPCUA_EXCLUDE_BitFieldState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BitFieldState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public BitFieldState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.BitFieldType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.UInteger, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFAAAAEJpdEZpZWxkVHlwZUluc3RhbmNlAQCvfgEAr36vfgAAABz/////" +
           "AQH/////AQAAABdgiQoCAAAAAAAUAAAAQml0RmllbGRzRGVmaW5pdGlvbnMBALB+AC4ARLB+AAABAKV+" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<BitFieldDefinition[]> BitFieldsDefinitions
        {
            get
            {
                return m_bitFieldsDefinitions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_bitFieldsDefinitions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_bitFieldsDefinitions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_bitFieldsDefinitions != null)
            {
                children.Add(m_bitFieldsDefinitions);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.BitFieldsDefinitions:
                {
                    if (createOrReplace)
                    {
                        if (BitFieldsDefinitions == null)
                        {
                            if (replacement == null)
                            {
                                BitFieldsDefinitions = new PropertyState<BitFieldDefinition[]>(this);
                            }
                            else
                            {
                                BitFieldsDefinitions = (PropertyState<BitFieldDefinition[]>)replacement;
                            }
                        }
                    }

                    instance = BitFieldsDefinitions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<BitFieldDefinition[]> m_bitFieldsDefinitions;
        #endregion
    }

    #region BitFieldState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class BitFieldState<T> : BitFieldState
    {
        #region Constructors
        /// <remarks />
        public BitFieldState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TransitionEventState Class
    #if (!OPCUA_EXCLUDE_TransitionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionEventState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public TransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5jZQEABwkBAAcJBwkA" +
           "AP////8LAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAA1EQPAAAuAETURA8AAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAA1UQPAAAuAETVRA8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQIAANZEDwAALgBE1kQPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUCAADXRA8AAC4ARNdEDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAgAA2EQPAAAuAETYRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGlt" +
           "ZQIAANlEDwAALgBE2UQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIAANtE" +
           "DwAALgBE20QPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA3EQPAAAuAETc" +
           "RA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAVHJhbnNpdGlvbgEA1goALwEAygrWCgAAABX/" +
           "////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAKoOAC4ARKoOAAAAGP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABGcm9tU3RhdGUBANcKAC8BAMMK1woAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQCiDgAuAESiDgAAABj/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAVG9TdGF0ZQEA2AoA" +
           "LwEAwwrYCgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAKYOAC4ARKYOAAAAGP////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }

        /// <remarks />
        public StateVariableState FromState
        {
            get
            {
                return m_fromState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_fromState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_fromState = value;
            }
        }

        /// <remarks />
        public StateVariableState ToState
        {
            get
            {
                return m_toState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_toState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_toState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            if (m_fromState != null)
            {
                children.Add(m_fromState);
            }

            if (m_toState != null)
            {
                children.Add(m_toState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new TransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }

                case Opc.Ua.BrowseNames.FromState:
                {
                    if (createOrReplace)
                    {
                        if (FromState == null)
                        {
                            if (replacement == null)
                            {
                                FromState = new StateVariableState(this);
                            }
                            else
                            {
                                FromState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = FromState;
                    break;
                }

                case Opc.Ua.BrowseNames.ToState:
                {
                    if (createOrReplace)
                    {
                        if (ToState == null)
                        {
                            if (replacement == null)
                            {
                                ToState = new StateVariableState(this);
                            }
                            else
                            {
                                ToState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = ToState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TransitionVariableState m_transition;
        private StateVariableState m_fromState;
        private StateVariableState m_toState;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateStateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateStateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateStateEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public AuditUpdateStateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEF1ZGl0VXBkYXRlU3RhdGVFdmVudFR5cGVJbnN0YW5jZQEACwkB" +
           "AAsJCwkAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAA4UQPAAAuAEThRA8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAA4kQPAAAuAETiRA8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAONEDwAALgBE40QPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAADkRA8AAC4AROREDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAA5UQPAAAuAETlRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAAOZEDwAALgBE5kQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAAOhEDwAALgBE6EQPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA6UQP" +
           "AAAuAETpRA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAA7kQP" +
           "AAAuAETuRA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAADvRA8AAC4ARO9E" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAPBEDwAALgBE8EQPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAPFEDwAALgBE8UQPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAPJEDwAALgBE8kQPAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAA80QPAAAuAETzRA8AABH/////AQH/////" +
           "AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAD0RA8AAC4ARPREDwAAGAEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAVYIkKAgAAAAAACgAAAE9sZFN0YXRlSWQBANkKAC4ARNkKAAAAGP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABOZXdTdGF0ZUlkAQDaCgAuAETaCgAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState OldStateId
        {
            get
            {
                return m_oldStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldStateId = value;
            }
        }

        /// <remarks />
        public PropertyState NewStateId
        {
            get
            {
                return m_newStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newStateId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_oldStateId != null)
            {
                children.Add(m_oldStateId);
            }

            if (m_newStateId != null)
            {
                children.Add(m_newStateId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OldStateId:
                {
                    if (createOrReplace)
                    {
                        if (OldStateId == null)
                        {
                            if (replacement == null)
                            {
                                OldStateId = new PropertyState(this);
                            }
                            else
                            {
                                OldStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldStateId;
                    break;
                }

                case Opc.Ua.BrowseNames.NewStateId:
                {
                    if (createOrReplace)
                    {
                        if (NewStateId == null)
                        {
                            if (replacement == null)
                            {
                                NewStateId = new PropertyState(this);
                            }
                            else
                            {
                                NewStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewStateId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_oldStateId;
        private PropertyState m_newStateId;
        #endregion
    }
    #endif
    #endregion

    #region OpenMethodState Class
    #if (!OPCUA_EXCLUDE_OpenMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public OpenMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAE9wZW5NZXRob2RUeXBlAQDaLQAvAQDaLdotAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA2y0ALgBE2y0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBANwtAC4ARNwtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public OpenMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            byte mode = (byte)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    mode,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult OpenMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte mode,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseMethodState Class
    #if (!OPCUA_EXCLUDE_CloseMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CloseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAENsb3NlTWV0aG9kVHlwZQEA3S0ALwEA3S3dLQAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAN4tAC4ARN4tAACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CloseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CloseMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle);
    #endif
    #endregion

    #region ReadMethodState Class
    #if (!OPCUA_EXCLUDE_ReadMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReadMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ReadMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ReadMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFJlYWRNZXRob2RUeXBlAQDfLQAvAQDfLd8tAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4C0ALgBE4C0AAJYCAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOEtAC4AROEtAACWAQAA" +
           "AAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ReadMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];
            int length = (int)_inputArguments[1];

            byte[] data = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    length,
                    ref data);
            }

            _outputArguments[0] = data;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ReadMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        int length,
        ref byte[] data);
    #endif
    #endregion

    #region WriteMethodState Class
    #if (!OPCUA_EXCLUDE_WriteMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriteMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public WriteMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new WriteMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFdyaXRlTWV0aG9kVHlwZQEA4i0ALwEA4i3iLQAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOMtAC4AROMtAACWAgAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public WriteMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];
            byte[] data = (byte[])_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    data);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult WriteMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        byte[] data);
    #endif
    #endregion

    #region GetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_GetPositionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetPositionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEdldFBvc2l0aW9uTWV0aG9kVHlwZQEA5C0ALwEA5C3kLQAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOUtAC4AROUtAACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQDmLQAuAETmLQAAlgEAAAABACoBARcAAAAIAAAAUG9zaXRpb24A" +
           "Cf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];

            ulong position = (ulong)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref position);
            }

            _outputArguments[0] = position;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetPositionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ref ulong position);
    #endif
    #endregion

    #region SetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_SetPositionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetPositionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public SetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new SetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFNldFBvc2l0aW9uTWV0aG9kVHlwZQEA5y0ALwEA5y3nLQAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgtAC4AROgtAACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public SetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];
            ulong position = (ulong)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    position);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult SetPositionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ulong position);
    #endif
    #endregion

    #region FileDirectoryState Class
    #if (!OPCUA_EXCLUDE_FileDirectoryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileDirectoryState : FolderState
    {
        #region Constructors
        /// <remarks />
        public FileDirectoryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileDirectoryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAEZpbGVEaXJlY3RvcnlUeXBlSW5zdGFuY2UBACk0AQApNCk0AAD/" +
           "////BAAAAARhggoEAAAAAAAPAAAAQ3JlYXRlRGlyZWN0b3J5AQBLNAAvAQBLNEs0AAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDQALgBETDQAAJYBAAAAAQAqAQEcAAAADQAAAERp" +
           "cmVjdG9yeU5hbWUADP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAE00AC4ARE00AACWAQAAAAEAKgEBHgAAAA8AAABEaXJlY3RvcnlOb2Rl" +
           "SWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAoAAABDcmVhdGVG" +
           "aWxlAQBONAAvAQBONE40AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATzQA" +
           "LgBETzQAAJYCAAAAAQAqAQEXAAAACAAAAEZpbGVOYW1lAAz/////AAAAAAABACoBAR4AAAAPAAAAUmVx" +
           "dWVzdEZpbGVPcGVuAAH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQBQNAAuAERQNAAAlgIAAAABACoBARkAAAAKAAAARmlsZU5vZGVJZAAR" +
           "/////wAAAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAIAAAAB" +
           "Af////8AAAAABGHCCgQAAAAWAAAARGVsZXRlRmlsZVN5c3RlbU9iamVjdAAABgAAAERlbGV0ZQEAUTQA" +
           "LwEAUTRRNAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFI0AC4ARFI0AACW" +
           "AQAAAAEAKgEBHQAAAA4AAABPYmplY3RUb0RlbGV0ZQAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB" +
           "/////wAAAAAEYYIKBAAAAAAACgAAAE1vdmVPckNvcHkBAFM0AC8BAFM0UzQAAAEB/////wIAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBUNAAuAERUNAAAlgQAAAABACoBASEAAAASAAAAT2JqZWN0" +
           "VG9Nb3ZlT3JDb3B5ABH/////AAAAAAABACoBAR4AAAAPAAAAVGFyZ2V0RGlyZWN0b3J5ABH/////AAAA" +
           "AAABACoBARkAAAAKAAAAQ3JlYXRlQ29weQAB/////wAAAAAAAQAqAQEWAAAABwAAAE5ld05hbWUADP//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBAFU0AC4ARFU0AACWAQAAAAEAKgEBGAAAAAkAAABOZXdOb2RlSWQAEf////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CreateDirectoryMethodState CreateDirectory
        {
            get
            {
                return m_createDirectoryMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createDirectoryMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createDirectoryMethod = value;
            }
        }

        /// <remarks />
        public CreateFileMethodState CreateFile
        {
            get
            {
                return m_createFileMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createFileMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createFileMethod = value;
            }
        }

        /// <remarks />
        public DeleteFileMethodState DeleteFileSystemObject
        {
            get
            {
                return m_deleteFileSystemObjectMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteFileSystemObjectMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteFileSystemObjectMethod = value;
            }
        }

        /// <remarks />
        public MoveOrCopyMethodState MoveOrCopy
        {
            get
            {
                return m_moveOrCopyMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_moveOrCopyMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_moveOrCopyMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createDirectoryMethod != null)
            {
                children.Add(m_createDirectoryMethod);
            }

            if (m_createFileMethod != null)
            {
                children.Add(m_createFileMethod);
            }

            if (m_deleteFileSystemObjectMethod != null)
            {
                children.Add(m_deleteFileSystemObjectMethod);
            }

            if (m_moveOrCopyMethod != null)
            {
                children.Add(m_moveOrCopyMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateDirectory:
                {
                    if (createOrReplace)
                    {
                        if (CreateDirectory == null)
                        {
                            if (replacement == null)
                            {
                                CreateDirectory = new CreateDirectoryMethodState(this);
                            }
                            else
                            {
                                CreateDirectory = (CreateDirectoryMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateDirectory;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateFile:
                {
                    if (createOrReplace)
                    {
                        if (CreateFile == null)
                        {
                            if (replacement == null)
                            {
                                CreateFile = new CreateFileMethodState(this);
                            }
                            else
                            {
                                CreateFile = (CreateFileMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateFile;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteFileSystemObject:
                {
                    if (createOrReplace)
                    {
                        if (DeleteFileSystemObject == null)
                        {
                            if (replacement == null)
                            {
                                DeleteFileSystemObject = new DeleteFileMethodState(this);
                            }
                            else
                            {
                                DeleteFileSystemObject = (DeleteFileMethodState)replacement;
                            }
                        }
                    }

                    instance = DeleteFileSystemObject;
                    break;
                }

                case Opc.Ua.BrowseNames.MoveOrCopy:
                {
                    if (createOrReplace)
                    {
                        if (MoveOrCopy == null)
                        {
                            if (replacement == null)
                            {
                                MoveOrCopy = new MoveOrCopyMethodState(this);
                            }
                            else
                            {
                                MoveOrCopy = (MoveOrCopyMethodState)replacement;
                            }
                        }
                    }

                    instance = MoveOrCopy;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CreateDirectoryMethodState m_createDirectoryMethod;
        private CreateFileMethodState m_createFileMethod;
        private DeleteFileMethodState m_deleteFileSystemObjectMethod;
        private MoveOrCopyMethodState m_moveOrCopyMethod;
        #endregion
    }
    #endif
    #endregion

    #region CreateDirectoryMethodState Class
    #if (!OPCUA_EXCLUDE_CreateDirectoryMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateDirectoryMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CreateDirectoryMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateDirectoryMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAENyZWF0ZURpcmVjdG9yeU1ldGhvZFR5cGUBAB40AC8BAB40HjQA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAfNAAuAEQfNAAAlgEAAAABACoB" +
           "ARwAAAANAAAARGlyZWN0b3J5TmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAIDQALgBEIDQAAJYBAAAAAQAqAQEeAAAADwAAAERp" +
           "cmVjdG9yeU5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CreateDirectoryMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string directoryName = (string)_inputArguments[0];

            NodeId directoryNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    directoryName,
                    ref directoryNodeId);
            }

            _outputArguments[0] = directoryNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CreateDirectoryMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string directoryName,
        ref NodeId directoryNodeId);
    #endif
    #endregion

    #region CreateFileMethodState Class
    #if (!OPCUA_EXCLUDE_CreateFileMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateFileMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CreateFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAENyZWF0ZUZpbGVNZXRob2RUeXBlAQAhNAAvAQAhNCE0AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIjQALgBEIjQAAJYCAAAAAQAqAQEXAAAA" +
           "CAAAAEZpbGVOYW1lAAz/////AAAAAAABACoBAR4AAAAPAAAAUmVxdWVzdEZpbGVPcGVuAAH/////AAAA" +
           "AAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAj" +
           "NAAuAEQjNAAAlgIAAAABACoBARkAAAAKAAAARmlsZU5vZGVJZAAR/////wAAAAAAAQAqAQEZAAAACgAA" +
           "AEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CreateFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string fileName = (string)_inputArguments[0];
            bool requestFileOpen = (bool)_inputArguments[1];

            NodeId fileNodeId = (NodeId)_outputArguments[0];
            uint fileHandle = (uint)_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileName,
                    requestFileOpen,
                    ref fileNodeId,
                    ref fileHandle);
            }

            _outputArguments[0] = fileNodeId;
            _outputArguments[1] = fileHandle;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CreateFileMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string fileName,
        bool requestFileOpen,
        ref NodeId fileNodeId,
        ref uint fileHandle);
    #endif
    #endregion

    #region DeleteFileMethodState Class
    #if (!OPCUA_EXCLUDE_DeleteFileMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeleteFileMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DeleteFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DeleteFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAERlbGV0ZUZpbGVNZXRob2RUeXBlAQAkNAAvAQAkNCQ0AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJTQALgBEJTQAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAE9iamVjdFRvRGVsZXRlABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DeleteFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId objectToDelete = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToDelete);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DeleteFileMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId objectToDelete);
    #endif
    #endregion

    #region MoveOrCopyMethodState Class
    #if (!OPCUA_EXCLUDE_MoveOrCopyMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MoveOrCopyMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public MoveOrCopyMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new MoveOrCopyMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAE1vdmVPckNvcHlNZXRob2RUeXBlAQAmNAAvAQAmNCY0AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJzQALgBEJzQAAJYEAAAAAQAqAQEhAAAA" +
           "EgAAAE9iamVjdFRvTW92ZU9yQ29weQAR/////wAAAAAAAQAqAQEeAAAADwAAAFRhcmdldERpcmVjdG9y" +
           "eQAR/////wAAAAAAAQAqAQEZAAAACgAAAENyZWF0ZUNvcHkAAf////8AAAAAAAEAKgEBFgAAAAcAAABO" +
           "ZXdOYW1lAAz/////AAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQAoNAAuAEQoNAAAlgEAAAABACoBARgAAAAJAAAATmV3Tm9kZUlkABH/////AAAA" +
           "AAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public MoveOrCopyMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId objectToMoveOrCopy = (NodeId)_inputArguments[0];
            NodeId targetDirectory = (NodeId)_inputArguments[1];
            bool createCopy = (bool)_inputArguments[2];
            string newName = (string)_inputArguments[3];

            NodeId newNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToMoveOrCopy,
                    targetDirectory,
                    createCopy,
                    newName,
                    ref newNodeId);
            }

            _outputArguments[0] = newNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult MoveOrCopyMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId objectToMoveOrCopy,
        NodeId targetDirectory,
        bool createCopy,
        string newName,
        ref NodeId newNodeId);
    #endif
    #endregion

    #region TemporaryFileTransferState Class
    #if (!OPCUA_EXCLUDE_TemporaryFileTransferState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TemporaryFileTransferState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public TemporaryFileTransferState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TemporaryFileTransferType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFRlbXBvcmFyeUZpbGVUcmFuc2ZlclR5cGVJbnN0YW5jZQEAgD0B" +
           "AIA9gD0AAP////8EAAAAFWCJCgIAAAAAABcAAABDbGllbnRQcm9jZXNzaW5nVGltZW91dAEAgT0ALgBE" +
           "gT0AAAEAIgH/////AQH/////AAAAAARhggoEAAAAAAATAAAAR2VuZXJhdGVGaWxlRm9yUmVhZAEAgj0A" +
           "LwEAgj2CPQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIM9AC4ARIM9AACW" +
           "AQAAAAEAKgEBHgAAAA8AAABHZW5lcmF0ZU9wdGlvbnMAGP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAIQ9AC4ARIQ9AACWAwAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlTm9kZUlkABH/////AAAAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAA" +
           "AAAAAQAqAQElAAAAFgAAAENvbXBsZXRpb25TdGF0ZU1hY2hpbmUAEf////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAMAAAABAf////8AAAAABGGCCgQAAAAAABQAAABHZW5lcmF0ZUZpbGVGb3JXcml0ZQEAhT0ALwEAhT2F" +
           "PQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOc/AC4AROc/AACWAQAAAAEA" +
           "KgEBHgAAAA8AAABHZW5lcmF0ZU9wdGlvbnMAGP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAIY9AC4ARIY9AACWAgAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlTm9kZUlkABH/////AAAAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAENsb3NlQW5kQ29tbWl0AQCHPQAvAQCH" +
           "PYc9AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAiD0ALgBEiD0AAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAIk9AC4ARIk9AACWAQAAAAEAKgEBJQAAABYAAABD" +
           "b21wbGV0aW9uU3RhdGVNYWNoaW5lABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> ClientProcessingTimeout
        {
            get
            {
                return m_clientProcessingTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientProcessingTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientProcessingTimeout = value;
            }
        }

        /// <remarks />
        public GenerateFileForReadMethodState GenerateFileForRead
        {
            get
            {
                return m_generateFileForReadMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_generateFileForReadMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_generateFileForReadMethod = value;
            }
        }

        /// <remarks />
        public GenerateFileForWriteMethodState GenerateFileForWrite
        {
            get
            {
                return m_generateFileForWriteMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_generateFileForWriteMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_generateFileForWriteMethod = value;
            }
        }

        /// <remarks />
        public CloseAndCommitMethodState CloseAndCommit
        {
            get
            {
                return m_closeAndCommitMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeAndCommitMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeAndCommitMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientProcessingTimeout != null)
            {
                children.Add(m_clientProcessingTimeout);
            }

            if (m_generateFileForReadMethod != null)
            {
                children.Add(m_generateFileForReadMethod);
            }

            if (m_generateFileForWriteMethod != null)
            {
                children.Add(m_generateFileForWriteMethod);
            }

            if (m_closeAndCommitMethod != null)
            {
                children.Add(m_closeAndCommitMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientProcessingTimeout:
                {
                    if (createOrReplace)
                    {
                        if (ClientProcessingTimeout == null)
                        {
                            if (replacement == null)
                            {
                                ClientProcessingTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                ClientProcessingTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ClientProcessingTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.GenerateFileForRead:
                {
                    if (createOrReplace)
                    {
                        if (GenerateFileForRead == null)
                        {
                            if (replacement == null)
                            {
                                GenerateFileForRead = new GenerateFileForReadMethodState(this);
                            }
                            else
                            {
                                GenerateFileForRead = (GenerateFileForReadMethodState)replacement;
                            }
                        }
                    }

                    instance = GenerateFileForRead;
                    break;
                }

                case Opc.Ua.BrowseNames.GenerateFileForWrite:
                {
                    if (createOrReplace)
                    {
                        if (GenerateFileForWrite == null)
                        {
                            if (replacement == null)
                            {
                                GenerateFileForWrite = new GenerateFileForWriteMethodState(this);
                            }
                            else
                            {
                                GenerateFileForWrite = (GenerateFileForWriteMethodState)replacement;
                            }
                        }
                    }

                    instance = GenerateFileForWrite;
                    break;
                }

                case Opc.Ua.BrowseNames.CloseAndCommit:
                {
                    if (createOrReplace)
                    {
                        if (CloseAndCommit == null)
                        {
                            if (replacement == null)
                            {
                                CloseAndCommit = new CloseAndCommitMethodState(this);
                            }
                            else
                            {
                                CloseAndCommit = (CloseAndCommitMethodState)replacement;
                            }
                        }
                    }

                    instance = CloseAndCommit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_clientProcessingTimeout;
        private GenerateFileForReadMethodState m_generateFileForReadMethod;
        private GenerateFileForWriteMethodState m_generateFileForWriteMethod;
        private CloseAndCommitMethodState m_closeAndCommitMethod;
        #endregion
    }
    #endif
    #endregion

    #region GenerateFileForReadMethodState Class
    #if (!OPCUA_EXCLUDE_GenerateFileForReadMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GenerateFileForReadMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GenerateFileForReadMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GenerateFileForReadMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAEdlbmVyYXRlRmlsZUZvclJlYWRNZXRob2RUeXBlAQCzPQAvAQCz" +
           "PbM9AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAtD0ALgBEtD0AAJYBAAAA" +
           "AQAqAQEeAAAADwAAAEdlbmVyYXRlT3B0aW9ucwAY/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAtT0ALgBEtT0AAJYDAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVOb2RlSWQAEf////8AAAAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACoBASUAAAAWAAAAQ29tcGxldGlvblN0YXRlTWFjaGluZQAR/////wAAAAAAAQAoAQEAAAABAAAAAwAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GenerateFileForReadMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            object generateOptions = (object)_inputArguments[0];

            NodeId fileNodeId = (NodeId)_outputArguments[0];
            uint fileHandle = (uint)_outputArguments[1];
            NodeId completionStateMachine = (NodeId)_outputArguments[2];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    generateOptions,
                    ref fileNodeId,
                    ref fileHandle,
                    ref completionStateMachine);
            }

            _outputArguments[0] = fileNodeId;
            _outputArguments[1] = fileHandle;
            _outputArguments[2] = completionStateMachine;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GenerateFileForReadMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        object generateOptions,
        ref NodeId fileNodeId,
        ref uint fileHandle,
        ref NodeId completionStateMachine);
    #endif
    #endregion

    #region GenerateFileForWriteMethodState Class
    #if (!OPCUA_EXCLUDE_GenerateFileForWriteMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GenerateFileForWriteMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GenerateFileForWriteMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GenerateFileForWriteMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAEdlbmVyYXRlRmlsZUZvcldyaXRlTWV0aG9kVHlwZQEAtj0ALwEA" +
           "tj22PQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOg/AC4AROg/AACWAQAA" +
           "AAEAKgEBHgAAAA8AAABHZW5lcmF0ZU9wdGlvbnMAGP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBALc9AC4ARLc9AACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlTm9kZUlkABH/////AAAAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GenerateFileForWriteMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            object generateOptions = (object)_inputArguments[0];

            NodeId fileNodeId = (NodeId)_outputArguments[0];
            uint fileHandle = (uint)_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    generateOptions,
                    ref fileNodeId,
                    ref fileHandle);
            }

            _outputArguments[0] = fileNodeId;
            _outputArguments[1] = fileHandle;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GenerateFileForWriteMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        object generateOptions,
        ref NodeId fileNodeId,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseAndCommitMethodState Class
    #if (!OPCUA_EXCLUDE_CloseAndCommitMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseAndCommitMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CloseAndCommitMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseAndCommitMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAENsb3NlQW5kQ29tbWl0TWV0aG9kVHlwZQEAuD0ALwEAuD24PQAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBALk9AC4ARLk9AACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQC6PQAuAES6PQAAlgEAAAABACoBASUAAAAWAAAAQ29tcGxl" +
           "dGlvblN0YXRlTWFjaGluZQAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CloseAndCommitMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];

            NodeId completionStateMachine = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref completionStateMachine);
            }

            _outputArguments[0] = completionStateMachine;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CloseAndCommitMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ref NodeId completionStateMachine);
    #endif
    #endregion

    #region FileTransferStateMachineState Class
    #if (!OPCUA_EXCLUDE_FileTransferStateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileTransferStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <remarks />
        public FileTransferStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileTransferStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEZpbGVUcmFuc2ZlclN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA" +
           "uz0BALs9uz0AAP////8CAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUCAAAYRQ8AAC8BAMgKGEUP" +
           "AAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAgAAGUUPAAAuAEQZRQ8AABH/////AQH/////" +
           "AAAAAARhggoEAAAAAAAFAAAAUmVzZXQBAOM9AC8BAOM94z0AAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private MethodState m_resetMethod;
        #endregion
    }
    #endif
    #endregion

    #region RoleSetState Class
    #if (!OPCUA_EXCLUDE_RoleSetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RoleSetState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public RoleSetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RoleSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEwAAAFJvbGVTZXRUeXBlSW5zdGFuY2UBAPc8AQD3PPc8AAD/////AgAA" +
           "AARhggoEAAAAAAAHAAAAQWRkUm9sZQEAfT4ALwEAfT59PgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAH4+AC4ARH4+AACWAgAAAAEAKgEBFwAAAAgAAABSb2xlTmFtZQAM/////wAA" +
           "AAAAAQAqAQEbAAAADAAAAE5hbWVzcGFjZVVyaQAM/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB////" +
           "/wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAfz4ALgBEfz4AAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAFJvbGVOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAA" +
           "AAoAAABSZW1vdmVSb2xlAQCAPgAvAQCAPoA+AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEAgT4ALgBEgT4AAJYBAAAAAQAqAQEZAAAACgAAAFJvbGVOb2RlSWQAEf////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddRoleMethodState AddRole
        {
            get
            {
                return m_addRoleMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addRoleMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addRoleMethod = value;
            }
        }

        /// <remarks />
        public RemoveRoleMethodState RemoveRole
        {
            get
            {
                return m_removeRoleMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeRoleMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeRoleMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addRoleMethod != null)
            {
                children.Add(m_addRoleMethod);
            }

            if (m_removeRoleMethod != null)
            {
                children.Add(m_removeRoleMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddRole:
                {
                    if (createOrReplace)
                    {
                        if (AddRole == null)
                        {
                            if (replacement == null)
                            {
                                AddRole = new AddRoleMethodState(this);
                            }
                            else
                            {
                                AddRole = (AddRoleMethodState)replacement;
                            }
                        }
                    }

                    instance = AddRole;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveRole:
                {
                    if (createOrReplace)
                    {
                        if (RemoveRole == null)
                        {
                            if (replacement == null)
                            {
                                RemoveRole = new RemoveRoleMethodState(this);
                            }
                            else
                            {
                                RemoveRole = (RemoveRoleMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveRole;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddRoleMethodState m_addRoleMethod;
        private RemoveRoleMethodState m_removeRoleMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddRoleMethodState Class
    #if (!OPCUA_EXCLUDE_AddRoleMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddRoleMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddRoleMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddRoleMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAEFkZFJvbGVNZXRob2RUeXBlAQCCPgAvAQCCPoI+AAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAgz4ALgBEgz4AAJYCAAAAAQAqAQEXAAAACAAA" +
           "AFJvbGVOYW1lAAz/////AAAAAAABACoBARsAAAAMAAAATmFtZXNwYWNlVXJpAAz/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCEPgAuAESE" +
           "PgAAlgEAAAABACoBARkAAAAKAAAAUm9sZU5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddRoleMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string roleName = (string)_inputArguments[0];
            string namespaceUri = (string)_inputArguments[1];

            NodeId roleNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    roleName,
                    namespaceUri,
                    ref roleNodeId);
            }

            _outputArguments[0] = roleNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddRoleMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string roleName,
        string namespaceUri,
        ref NodeId roleNodeId);
    #endif
    #endregion

    #region RemoveRoleMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveRoleMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveRoleMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveRoleMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveRoleMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAFJlbW92ZVJvbGVNZXRob2RUeXBlAQCFPgAvAQCFPoU+AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAhj4ALgBEhj4AAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAFJvbGVOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveRoleMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId roleNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    roleNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveRoleMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId roleNodeId);
    #endif
    #endregion

    #region RoleState Class
    #if (!OPCUA_EXCLUDE_RoleState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RoleState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public RoleState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RoleType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ApplicationsExclude != null)
            {
                ApplicationsExclude.Initialize(context, ApplicationsExclude_InitializationString);
            }

            if (Applications != null)
            {
                Applications.Initialize(context, Applications_InitializationString);
            }

            if (EndpointsExclude != null)
            {
                EndpointsExclude.Initialize(context, EndpointsExclude_InitializationString);
            }

            if (Endpoints != null)
            {
                Endpoints.Initialize(context, Endpoints_InitializationString);
            }

            if (CustomConfiguration != null)
            {
                CustomConfiguration.Initialize(context, CustomConfiguration_InitializationString);
            }

            if (AddIdentity != null)
            {
                AddIdentity.Initialize(context, AddIdentity_InitializationString);
            }

            if (RemoveIdentity != null)
            {
                RemoveIdentity.Initialize(context, RemoveIdentity_InitializationString);
            }

            if (AddApplication != null)
            {
                AddApplication.Initialize(context, AddApplication_InitializationString);
            }

            if (RemoveApplication != null)
            {
                RemoveApplication.Initialize(context, RemoveApplication_InitializationString);
            }

            if (AddEndpoint != null)
            {
                AddEndpoint.Initialize(context, AddEndpoint_InitializationString);
            }

            if (RemoveEndpoint != null)
            {
                RemoveEndpoint.Initialize(context, RemoveEndpoint_InitializationString);
            }
        }

        #region Initialization String
        private const string ApplicationsExclude_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAEFwcGxpY2F0aW9uc0V4Y2x1ZGUBADI8AC4ARDI8AAAAAf////8B" +
           "Af////8AAAAA";

        private const string Applications_InitializationString =
           "//////////8XYIkKAgAAAAAADAAAAEFwcGxpY2F0aW9ucwEALj8ALgBELj8AAAAMAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAAA==";

        private const string EndpointsExclude_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZHBvaW50c0V4Y2x1ZGUBADM8AC4ARDM8AAAAAf////8BAf//" +
           "//8AAAAA";

        private const string Endpoints_InitializationString =
           "//////////8XYIkKAgAAAAAACQAAAEVuZHBvaW50cwEALz8ALgBELz8AAAEAqDwBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAA";

        private const string CustomConfiguration_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAEN1c3RvbUNvbmZpZ3VyYXRpb24BAEteAC4AREteAAAAAf////8B" +
           "Af////8AAAAA";

        private const string AddIdentity_InitializationString =
           "//////////8EYYIKBAAAAAAACwAAAEFkZElkZW50aXR5AQAIPQAvAQAIPQg9AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEACT0ALgBECT0AAJYBAAAAAQAqAQEVAAAABAAAAFJ1bGUB" +
           "ABI9/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string RemoveIdentity_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFJlbW92ZUlkZW50aXR5AQAKPQAvAQAKPQo9AAABAf////8BAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEACz0ALgBECz0AAJYBAAAAAQAqAQEVAAAABAAAAFJ1" +
           "bGUBABI9/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string AddApplication_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEFkZEFwcGxpY2F0aW9uAQAwPwAvAQAwPzA/AAABAf////8BAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMT8ALgBEMT8AAJYBAAAAAQAqAQEdAAAADgAAAEFw" +
           "cGxpY2F0aW9uVXJpAAz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string RemoveApplication_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAFJlbW92ZUFwcGxpY2F0aW9uAQAyPwAvAQAyPzI/AAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMz8ALgBEMz8AAJYBAAAAAQAqAQEdAAAADgAA" +
           "AEFwcGxpY2F0aW9uVXJpAAz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string AddEndpoint_InitializationString =
           "//////////8EYYIKBAAAAAAACwAAAEFkZEVuZHBvaW50AQA0PwAvAQA0PzQ/AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANT8ALgBENT8AAJYBAAAAAQAqAQEZAAAACAAAAEVuZHBv" +
           "aW50AQCoPP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveEndpoint_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFJlbW92ZUVuZHBvaW50AQA2PwAvAQA2PzY/AAABAf////8BAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANz8ALgBENz8AAJYBAAAAAQAqAQEZAAAACAAAAEVu" +
           "ZHBvaW50AQCoPP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEAAAAFJvbGVUeXBlSW5zdGFuY2UBAAQ9AQAEPQQ9AAD/////DAAAABdg" +
           "iQoCAAAAAAAKAAAASWRlbnRpdGllcwEALT8ALgBELT8AAAEAEj0BAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAABMAAABBcHBsaWNhdGlvbnNFeGNsdWRlAQAyPAAuAEQyPAAAAAH/////AQH/////AAAA" +
           "ABdgiQoCAAAAAAAMAAAAQXBwbGljYXRpb25zAQAuPwAuAEQuPwAAAAwBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAABAAAABFbmRwb2ludHNFeGNsdWRlAQAzPAAuAEQzPAAAAAH/////AQH/////AAAA" +
           "ABdgiQoCAAAAAAAJAAAARW5kcG9pbnRzAQAvPwAuAEQvPwAAAQCoPAEAAAABAAAAAAAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAAEwAAAEN1c3RvbUNvbmZpZ3VyYXRpb24BAEteAC4AREteAAAAAf////8BAf////8A" +
           "AAAABGGCCgQAAAAAAAsAAABBZGRJZGVudGl0eQEACD0ALwEACD0IPQAAAQH/////AQAAABdgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBAAk9AC4ARAk9AACWAQAAAAEAKgEBFQAAAAQAAABSdWxlAQASPf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAA4AAABSZW1vdmVJZGVudGl0" +
           "eQEACj0ALwEACj0KPQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAs9AC4A" +
           "RAs9AACWAQAAAAEAKgEBFQAAAAQAAABSdWxlAQASPf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAAA4AAABBZGRBcHBsaWNhdGlvbgEAMD8ALwEAMD8wPwAAAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADE/AC4ARDE/AACWAQAAAAEAKgEBHQAAAA4AAABBcHBs" +
           "aWNhdGlvblVyaQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAEQAA" +
           "AFJlbW92ZUFwcGxpY2F0aW9uAQAyPwAvAQAyPzI/AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAMz8ALgBEMz8AAJYBAAAAAQAqAQEdAAAADgAAAEFwcGxpY2F0aW9uVXJpAAz/////" +
           "AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAQWRkRW5kcG9pbnQBADQ/" +
           "AC8BADQ/ND8AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQA1PwAuAEQ1PwAA" +
           "lgEAAAABACoBARkAAAAIAAAARW5kcG9pbnQBAKg8/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAADgAAAFJlbW92ZUVuZHBvaW50AQA2PwAvAQA2PzY/AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANz8ALgBENz8AAJYBAAAAAQAqAQEZAAAACAAAAEVuZHBv" +
           "aW50AQCoPP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<IdentityMappingRuleType[]> Identities
        {
            get
            {
                return m_identities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_identities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_identities = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ApplicationsExclude
        {
            get
            {
                return m_applicationsExclude;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applicationsExclude, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applicationsExclude = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> Applications
        {
            get
            {
                return m_applications;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applications, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applications = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> EndpointsExclude
        {
            get
            {
                return m_endpointsExclude;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointsExclude, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointsExclude = value;
            }
        }

        /// <remarks />
        public PropertyState<EndpointType[]> Endpoints
        {
            get
            {
                return m_endpoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpoints = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> CustomConfiguration
        {
            get
            {
                return m_customConfiguration;
            }

            set
            {
                if (!Object.ReferenceEquals(m_customConfiguration, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_customConfiguration = value;
            }
        }

        /// <remarks />
        public AddIdentityMethodState AddIdentity
        {
            get
            {
                return m_addIdentityMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addIdentityMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addIdentityMethod = value;
            }
        }

        /// <remarks />
        public RemoveIdentityMethodState RemoveIdentity
        {
            get
            {
                return m_removeIdentityMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeIdentityMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeIdentityMethod = value;
            }
        }

        /// <remarks />
        public AddApplicationMethodState AddApplication
        {
            get
            {
                return m_addApplicationMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addApplicationMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addApplicationMethod = value;
            }
        }

        /// <remarks />
        public RemoveApplicationMethodState RemoveApplication
        {
            get
            {
                return m_removeApplicationMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeApplicationMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeApplicationMethod = value;
            }
        }

        /// <remarks />
        public AddEndpointMethodState AddEndpoint
        {
            get
            {
                return m_addEndpointMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addEndpointMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addEndpointMethod = value;
            }
        }

        /// <remarks />
        public RemoveEndpointMethodState RemoveEndpoint
        {
            get
            {
                return m_removeEndpointMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeEndpointMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeEndpointMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_identities != null)
            {
                children.Add(m_identities);
            }

            if (m_applicationsExclude != null)
            {
                children.Add(m_applicationsExclude);
            }

            if (m_applications != null)
            {
                children.Add(m_applications);
            }

            if (m_endpointsExclude != null)
            {
                children.Add(m_endpointsExclude);
            }

            if (m_endpoints != null)
            {
                children.Add(m_endpoints);
            }

            if (m_customConfiguration != null)
            {
                children.Add(m_customConfiguration);
            }

            if (m_addIdentityMethod != null)
            {
                children.Add(m_addIdentityMethod);
            }

            if (m_removeIdentityMethod != null)
            {
                children.Add(m_removeIdentityMethod);
            }

            if (m_addApplicationMethod != null)
            {
                children.Add(m_addApplicationMethod);
            }

            if (m_removeApplicationMethod != null)
            {
                children.Add(m_removeApplicationMethod);
            }

            if (m_addEndpointMethod != null)
            {
                children.Add(m_addEndpointMethod);
            }

            if (m_removeEndpointMethod != null)
            {
                children.Add(m_removeEndpointMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Identities:
                {
                    if (createOrReplace)
                    {
                        if (Identities == null)
                        {
                            if (replacement == null)
                            {
                                Identities = new PropertyState<IdentityMappingRuleType[]>(this);
                            }
                            else
                            {
                                Identities = (PropertyState<IdentityMappingRuleType[]>)replacement;
                            }
                        }
                    }

                    instance = Identities;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplicationsExclude:
                {
                    if (createOrReplace)
                    {
                        if (ApplicationsExclude == null)
                        {
                            if (replacement == null)
                            {
                                ApplicationsExclude = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ApplicationsExclude = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ApplicationsExclude;
                    break;
                }

                case Opc.Ua.BrowseNames.Applications:
                {
                    if (createOrReplace)
                    {
                        if (Applications == null)
                        {
                            if (replacement == null)
                            {
                                Applications = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                Applications = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = Applications;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointsExclude:
                {
                    if (createOrReplace)
                    {
                        if (EndpointsExclude == null)
                        {
                            if (replacement == null)
                            {
                                EndpointsExclude = new PropertyState<bool>(this);
                            }
                            else
                            {
                                EndpointsExclude = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = EndpointsExclude;
                    break;
                }

                case Opc.Ua.BrowseNames.Endpoints:
                {
                    if (createOrReplace)
                    {
                        if (Endpoints == null)
                        {
                            if (replacement == null)
                            {
                                Endpoints = new PropertyState<EndpointType[]>(this);
                            }
                            else
                            {
                                Endpoints = (PropertyState<EndpointType[]>)replacement;
                            }
                        }
                    }

                    instance = Endpoints;
                    break;
                }

                case Opc.Ua.BrowseNames.CustomConfiguration:
                {
                    if (createOrReplace)
                    {
                        if (CustomConfiguration == null)
                        {
                            if (replacement == null)
                            {
                                CustomConfiguration = new PropertyState<bool>(this);
                            }
                            else
                            {
                                CustomConfiguration = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = CustomConfiguration;
                    break;
                }

                case Opc.Ua.BrowseNames.AddIdentity:
                {
                    if (createOrReplace)
                    {
                        if (AddIdentity == null)
                        {
                            if (replacement == null)
                            {
                                AddIdentity = new AddIdentityMethodState(this);
                            }
                            else
                            {
                                AddIdentity = (AddIdentityMethodState)replacement;
                            }
                        }
                    }

                    instance = AddIdentity;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveIdentity:
                {
                    if (createOrReplace)
                    {
                        if (RemoveIdentity == null)
                        {
                            if (replacement == null)
                            {
                                RemoveIdentity = new RemoveIdentityMethodState(this);
                            }
                            else
                            {
                                RemoveIdentity = (RemoveIdentityMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveIdentity;
                    break;
                }

                case Opc.Ua.BrowseNames.AddApplication:
                {
                    if (createOrReplace)
                    {
                        if (AddApplication == null)
                        {
                            if (replacement == null)
                            {
                                AddApplication = new AddApplicationMethodState(this);
                            }
                            else
                            {
                                AddApplication = (AddApplicationMethodState)replacement;
                            }
                        }
                    }

                    instance = AddApplication;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveApplication:
                {
                    if (createOrReplace)
                    {
                        if (RemoveApplication == null)
                        {
                            if (replacement == null)
                            {
                                RemoveApplication = new RemoveApplicationMethodState(this);
                            }
                            else
                            {
                                RemoveApplication = (RemoveApplicationMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveApplication;
                    break;
                }

                case Opc.Ua.BrowseNames.AddEndpoint:
                {
                    if (createOrReplace)
                    {
                        if (AddEndpoint == null)
                        {
                            if (replacement == null)
                            {
                                AddEndpoint = new AddEndpointMethodState(this);
                            }
                            else
                            {
                                AddEndpoint = (AddEndpointMethodState)replacement;
                            }
                        }
                    }

                    instance = AddEndpoint;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveEndpoint:
                {
                    if (createOrReplace)
                    {
                        if (RemoveEndpoint == null)
                        {
                            if (replacement == null)
                            {
                                RemoveEndpoint = new RemoveEndpointMethodState(this);
                            }
                            else
                            {
                                RemoveEndpoint = (RemoveEndpointMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveEndpoint;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<IdentityMappingRuleType[]> m_identities;
        private PropertyState<bool> m_applicationsExclude;
        private PropertyState<string[]> m_applications;
        private PropertyState<bool> m_endpointsExclude;
        private PropertyState<EndpointType[]> m_endpoints;
        private PropertyState<bool> m_customConfiguration;
        private AddIdentityMethodState m_addIdentityMethod;
        private RemoveIdentityMethodState m_removeIdentityMethod;
        private AddApplicationMethodState m_addApplicationMethod;
        private RemoveApplicationMethodState m_removeApplicationMethod;
        private AddEndpointMethodState m_addEndpointMethod;
        private RemoveEndpointMethodState m_removeEndpointMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddIdentityMethodState Class
    #if (!OPCUA_EXCLUDE_AddIdentityMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddIdentityMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddIdentityMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddIdentityMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEFkZElkZW50aXR5TWV0aG9kVHlwZQEAFD0ALwEAFD0UPQAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABU9AC4ARBU9AACWAQAAAAEAKgEBFQAA" +
           "AAQAAABSdWxlAQASPf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddIdentityMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            IdentityMappingRuleType rule = (IdentityMappingRuleType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    rule);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddIdentityMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        IdentityMappingRuleType rule);
    #endif
    #endregion

    #region RemoveIdentityMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveIdentityMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveIdentityMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveIdentityMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveIdentityMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlbW92ZUlkZW50aXR5TWV0aG9kVHlwZQEAFj0ALwEAFj0WPQAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABc9AC4ARBc9AACWAQAAAAEAKgEB" +
           "FQAAAAQAAABSdWxlAQASPf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveIdentityMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            IdentityMappingRuleType rule = (IdentityMappingRuleType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    rule);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveIdentityMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        IdentityMappingRuleType rule);
    #endif
    #endregion

    #region AddApplicationMethodState Class
    #if (!OPCUA_EXCLUDE_AddApplicationMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddApplicationMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddApplicationMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddApplicationMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEFkZEFwcGxpY2F0aW9uTWV0aG9kVHlwZQEAOD8ALwEAOD84PwAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADk/AC4ARDk/AACWAQAAAAEAKgEB" +
           "HQAAAA4AAABBcHBsaWNhdGlvblVyaQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddApplicationMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string applicationUri = (string)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    applicationUri);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddApplicationMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string applicationUri);
    #endif
    #endregion

    #region RemoveApplicationMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveApplicationMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveApplicationMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveApplicationMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveApplicationMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFJlbW92ZUFwcGxpY2F0aW9uTWV0aG9kVHlwZQEAOj8ALwEAOj86" +
           "PwAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADs/AC4ARDs/AACWAQAAAAEA" +
           "KgEBHQAAAA4AAABBcHBsaWNhdGlvblVyaQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveApplicationMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string applicationUri = (string)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    applicationUri);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveApplicationMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string applicationUri);
    #endif
    #endregion

    #region AddEndpointMethodState Class
    #if (!OPCUA_EXCLUDE_AddEndpointMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddEndpointMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddEndpointMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddEndpointMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEFkZEVuZHBvaW50TWV0aG9kVHlwZQEAPD8ALwEAPD88PwAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAD0/AC4ARD0/AACWAQAAAAEAKgEBGQAA" +
           "AAgAAABFbmRwb2ludAEAqDz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddEndpointMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            EndpointType endpoint = (EndpointType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    endpoint);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddEndpointMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        EndpointType endpoint);
    #endif
    #endregion

    #region RemoveEndpointMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveEndpointMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveEndpointMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveEndpointMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveEndpointMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlbW92ZUVuZHBvaW50TWV0aG9kVHlwZQEAPj8ALwEAPj8+PwAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAD8/AC4ARD8/AACWAQAAAAEAKgEB" +
           "GQAAAAgAAABFbmRwb2ludAEAqDz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveEndpointMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            EndpointType endpoint = (EndpointType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    endpoint);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveEndpointMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        EndpointType endpoint);
    #endif
    #endregion

    #region RoleMappingRuleChangedAuditEventState Class
    #if (!OPCUA_EXCLUDE_RoleMappingRuleChangedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RoleMappingRuleChangedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public RoleMappingRuleChangedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RoleMappingRuleChangedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAFJvbGVNYXBwaW5nUnVsZUNoYW5nZWRBdWRpdEV2ZW50VHlwZUlu" +
           "c3RhbmNlAQDpRAEA6UTpRAAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAAlRQ8AAC4ARCVF" +
           "DwAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAAmRQ8AAC4ARCZFDwAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAJ0UPAAAuAEQnRQ8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAChFDwAALgBEKEUPAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABAAAAFRpbWUCAAApRQ8AAC4ARClFDwABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACwAAAFJlY2VpdmVUaW1lAgAAKkUPAAAuAEQqRQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABNZXNzYWdlAgAALEUPAAAuAEQsRQ8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2" +
           "ZXJpdHkCAAAtRQ8AAC4ARC1FDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1l" +
           "U3RhbXACAAAyRQ8AAC4ARDJFDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIA" +
           "ADNFDwAALgBEM0UPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAANEUPAAAu" +
           "AEQ0RQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAANUUP" +
           "AAAuAEQ1RQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAANkUPAAAu" +
           "AEQ2RQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAAA3RQ8AAC4ARDdFDwAA" +
           "Ef////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAADhFDwAALgBEOEUPAAAY" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DictionaryEntryState Class
    #if (!OPCUA_EXCLUDE_DictionaryEntryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DictionaryEntryState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DictionaryEntryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DictionaryEntryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAERpY3Rpb25hcnlFbnRyeVR5cGVJbnN0YW5jZQEAtUQBALVEtUQA" +
           "AP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DictionaryFolderState Class
    #if (!OPCUA_EXCLUDE_DictionaryFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DictionaryFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public DictionaryFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DictionaryFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAERpY3Rpb25hcnlGb2xkZXJUeXBlSW5zdGFuY2UBALdEAQC3RLdE" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region IrdiDictionaryEntryState Class
    #if (!OPCUA_EXCLUDE_IrdiDictionaryEntryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IrdiDictionaryEntryState : DictionaryEntryState
    {
        #region Constructors
        /// <remarks />
        public IrdiDictionaryEntryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IrdiDictionaryEntryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAElyZGlEaWN0aW9uYXJ5RW50cnlUeXBlSW5zdGFuY2UBAL5EAQC+" +
           "RL5EAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region UriDictionaryEntryState Class
    #if (!OPCUA_EXCLUDE_UriDictionaryEntryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UriDictionaryEntryState : DictionaryEntryState
    {
        #region Constructors
        /// <remarks />
        public UriDictionaryEntryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UriDictionaryEntryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFVyaURpY3Rpb25hcnlFbnRyeVR5cGVJbnN0YW5jZQEAwEQBAMBE" +
           "wEQAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region BaseInterfaceState Class
    #if (!OPCUA_EXCLUDE_BaseInterfaceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseInterfaceState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public BaseInterfaceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseInterfaceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAEJhc2VJbnRlcmZhY2VUeXBlSW5zdGFuY2UBAMJEAQDCRMJEAAD/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region IOrderedObjectState Class
    #if (!OPCUA_EXCLUDE_IOrderedObjectState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IOrderedObjectState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IOrderedObjectState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IOrderedObjectType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAElPcmRlcmVkT2JqZWN0VHlwZUluc3RhbmNlAQDZWwEA2VvZWwAA" +
           "/////wEAAAAVYIkKAgAAAAAADAAAAE51bWJlckluTGlzdAEA3VsALgBE3VsAAAAa/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState NumberInList
        {
            get
            {
                return m_numberInList;
            }

            set
            {
                if (!Object.ReferenceEquals(m_numberInList, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_numberInList = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_numberInList != null)
            {
                children.Add(m_numberInList);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NumberInList:
                {
                    if (createOrReplace)
                    {
                        if (NumberInList == null)
                        {
                            if (replacement == null)
                            {
                                NumberInList = new PropertyState(this);
                            }
                            else
                            {
                                NumberInList = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NumberInList;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_numberInList;
        #endregion
    }
    #endif
    #endregion

    #region OrderedListState Class
    #if (!OPCUA_EXCLUDE_OrderedListState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OrderedListState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public OrderedListState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OrderedListType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (NodeVersion != null)
            {
                NodeVersion.Initialize(context, NodeVersion_InitializationString);
            }
        }

        #region Initialization String
        private const string NodeVersion_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAE5vZGVWZXJzaW9uAQDlWwAuAETlWwAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAE9yZGVyZWRMaXN0VHlwZUluc3RhbmNlAQDeWwEA3lveWwAAAQAA" +
           "AAApAAEAVQgBAAAAFWCJCgIAAAAAAAsAAABOb2RlVmVyc2lvbgEA5VsALgBE5VsAAAAM/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> NodeVersion
        {
            get
            {
                return m_nodeVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodeVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodeVersion = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodeVersion != null)
            {
                children.Add(m_nodeVersion);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodeVersion:
                {
                    if (createOrReplace)
                    {
                        if (NodeVersion == null)
                        {
                            if (replacement == null)
                            {
                                NodeVersion = new PropertyState<string>(this);
                            }
                            else
                            {
                                NodeVersion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NodeVersion;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_nodeVersion;
        #endregion
    }
    #endif
    #endregion

    #region DataItemState Class
    #if (!OPCUA_EXCLUDE_DataItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataItemState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public DataItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DataItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Any;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (ValuePrecision != null)
            {
                ValuePrecision.Initialize(context, ValuePrecision_InitializationString);
            }
        }

        #region Initialization String
        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BAD4JAC4ARD4JAAAADP////8BAf////8AAAAA";

        private const string ValuePrecision_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFZhbHVlUHJlY2lzaW9uAQA/CQAuAEQ/CQAAAAv/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFAAAAERhdGFJdGVtVHlwZUluc3RhbmNlAQA9CQEAPQk9CQAAABgBAf//" +
           "//8CAAAAFWCJCgIAAAAAAAoAAABEZWZpbml0aW9uAQA+CQAuAEQ+CQAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVmFsdWVQcmVjaXNpb24BAD8JAC4ARD8JAAAAC/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ValuePrecision
        {
            get
            {
                return m_valuePrecision;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valuePrecision, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valuePrecision = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_valuePrecision != null)
            {
                children.Add(m_valuePrecision);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.ValuePrecision:
                {
                    if (createOrReplace)
                    {
                        if (ValuePrecision == null)
                        {
                            if (replacement == null)
                            {
                                ValuePrecision = new PropertyState<double>(this);
                            }
                            else
                            {
                                ValuePrecision = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ValuePrecision;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_definition;
        private PropertyState<double> m_valuePrecision;
        #endregion
    }

    #region DataItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DataItemState<T> : DataItemState
    {
        #region Constructors
        /// <remarks />
        public DataItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region BaseAnalogState Class
    #if (!OPCUA_EXCLUDE_BaseAnalogState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseAnalogState : DataItemState
    {
        #region Constructors
        /// <remarks />
        public BaseAnalogState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.BaseAnalogType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }

            if (EURange != null)
            {
                EURange.Initialize(context, EURange_InitializationString);
            }

            if (EngineeringUnits != null)
            {
                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEAn0QALgBEn0QAAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string EURange_InitializationString =
           "//////////8VYIkKAgAAAAAABwAAAEVVUmFuZ2UBAKBEAC4ARKBEAAABAHQD/////wEB/////wAAAAA=";

        private const string EngineeringUnits_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAKFEAC4ARKFEAAABAHcD/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFgAAAEJhc2VBbmFsb2dUeXBlSW5zdGFuY2UBANY7AQDWO9Y7AAAAGgEB" +
           "/////wMAAAAVYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEAn0QALgBEn0QAAAEAdAP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEAoEQALgBEoEQAAAEAdAP/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAoUQALgBEoUQAAAEAdwP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        #endregion
    }

    #region BaseAnalogState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class BaseAnalogState<T> : BaseAnalogState
    {
        #region Constructors
        /// <remarks />
        public BaseAnalogState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AnalogItemState Class
    #if (!OPCUA_EXCLUDE_AnalogItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AnalogItemState : BaseAnalogState
    {
        #region Constructors
        /// <remarks />
        public AnalogItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AnalogItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFgAAAEFuYWxvZ0l0ZW1UeXBlSW5zdGFuY2UBAEAJAQBACUAJAAAAGgEB" +
           "/////wEAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBAEEJAC4AREEJAAABAHQD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region AnalogItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class AnalogItemState<T> : AnalogItemState
    {
        #region Constructors
        /// <remarks />
        public AnalogItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AnalogUnitState Class
    #if (!OPCUA_EXCLUDE_AnalogUnitState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AnalogUnitState : BaseAnalogState
    {
        #region Constructors
        /// <remarks />
        public AnalogUnitState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AnalogUnitType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAFgAAAEFuYWxvZ1VuaXRUeXBlSW5zdGFuY2UBAFlEAQBZRFlEAAAAGgEB" +
           "/////wEAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAF5EAC4ARF5EAAABAHcD/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region AnalogUnitState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class AnalogUnitState<T> : AnalogUnitState
    {
        #region Constructors
        /// <remarks />
        public AnalogUnitState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AnalogUnitRangeState Class
    #if (!OPCUA_EXCLUDE_AnalogUnitRangeState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AnalogUnitRangeState : AnalogItemState
    {
        #region Constructors
        /// <remarks />
        public AnalogUnitRangeState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AnalogUnitRangeType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAGwAAAEFuYWxvZ1VuaXRSYW5nZVR5cGVJbnN0YW5jZQEAokQBAKJEokQA" +
           "AAAaAQH/////AgAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQIAAEpFDwAALgBESkUPAAEAdAP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAp0QALgBEp0QAAAEAdwP/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region AnalogUnitRangeState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class AnalogUnitRangeState<T> : AnalogUnitRangeState
    {
        #region Constructors
        /// <remarks />
        public AnalogUnitRangeState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region DiscreteItemState Class
    #if (!OPCUA_EXCLUDE_DiscreteItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteItemState : DataItemState
    {
        #region Constructors
        /// <remarks />
        public DiscreteItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DiscreteItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAGAAAAERpc2NyZXRlSXRlbVR5cGVJbnN0YW5jZQEARAkBAEQJRAkAAAAY" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region DiscreteItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DiscreteItemState<T> : DiscreteItemState
    {
        #region Constructors
        /// <remarks />
        public DiscreteItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TwoStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_TwoStateDiscreteState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateDiscreteState : DiscreteItemState<bool>
    {
        #region Constructors
        /// <remarks />
        public TwoStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Boolean, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHAAAAFR3b1N0YXRlRGlzY3JldGVUeXBlSW5zdGFuY2UBAEUJAQBFCUUJ" +
           "AAAAAQEB/////wIAAAAVYIkKAgAAAAAACgAAAEZhbHNlU3RhdGUBAEYJAC4AREYJAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABUcnVlU3RhdGUBAEcJAC4AREcJAAAAFf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_falseState;
        private PropertyState<LocalizedText> m_trueState;
        #endregion
    }
    #endif
    #endregion

    #region MultiStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateDiscreteState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.UInteger, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHgAAAE11bHRpU3RhdGVEaXNjcmV0ZVR5cGVJbnN0YW5jZQEASAkBAEgJ" +
           "SAkAAAAcAQH/////AQAAABdgiQoCAAAAAAALAAAARW51bVN0cmluZ3MBAEkJAC4AREkJAAAAFQEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region MultiStateDiscreteState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateDiscreteState<T> : MultiStateDiscreteState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region MultiStateValueDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateValueDiscreteState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateValueDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <remarks />
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateValueDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Any;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAIwAAAE11bHRpU3RhdGVWYWx1ZURpc2NyZXRlVHlwZUluc3RhbmNlAQDm" +
           "KwEA5ivmKwAAABoBAf////8CAAAAF2CJCgIAAAAAAAoAAABFbnVtVmFsdWVzAQDpKwAuAETpKwAAAQCq" +
           "HQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAFZhbHVlQXNUZXh0AQDFLAAuAETFLAAA" +
           "ABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EnumValueType[]> EnumValues
        {
            get
            {
                return m_enumValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enumValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enumValues = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ValueAsText
        {
            get
            {
                return m_valueAsText;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valueAsText, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valueAsText = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_enumValues != null)
            {
                children.Add(m_enumValues);
            }

            if (m_valueAsText != null)
            {
                children.Add(m_valueAsText);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EnumValues:
                {
                    if (createOrReplace)
                    {
                        if (EnumValues == null)
                        {
                            if (replacement == null)
                            {
                                EnumValues = new PropertyState<EnumValueType[]>(this);
                            }
                            else
                            {
                                EnumValues = (PropertyState<EnumValueType[]>)replacement;
                            }
                        }
                    }

                    instance = EnumValues;
                    break;
                }

                case Opc.Ua.BrowseNames.ValueAsText:
                {
                    if (createOrReplace)
                    {
                        if (ValueAsText == null)
                        {
                            if (replacement == null)
                            {
                                ValueAsText = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ValueAsText = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ValueAsText;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EnumValueType[]> m_enumValues;
        private PropertyState<LocalizedText> m_valueAsText;
        #endregion
    }

    #region MultiStateValueDiscreteState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateValueDiscreteState<T> : MultiStateValueDiscreteState
    {
        #region Constructors
        /// <remarks />
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ArrayItemState Class
    #if (!OPCUA_EXCLUDE_ArrayItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ArrayItemState : DataItemState
    {
        #region Constructors
        /// <remarks />
        public ArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEA+C4ALgBE+C4AAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAFQAAAEFycmF5SXRlbVR5cGVJbnN0YW5jZQEA9S4BAPUu9S4AAAAYAAAA" +
           "AAEB/////wUAAAAVYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEA+C4ALgBE+C4AAAEAdAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEA+S4ALgBE+S4AAAEAdAP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEA+i4ALgBE+i4AAAEAdwP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAFAAAAVGl0bGUBAPsuAC4ARPsuAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0A" +
           "AABBeGlzU2NhbGVUeXBlAQD8LgAuAET8LgAAAQAtL/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Title
        {
            get
            {
                return m_title;
            }

            set
            {
                if (!Object.ReferenceEquals(m_title, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_title = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisScaleEnumeration> AxisScaleType
        {
            get
            {
                return m_axisScaleType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisScaleType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisScaleType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            if (m_title != null)
            {
                children.Add(m_title);
            }

            if (m_axisScaleType != null)
            {
                children.Add(m_axisScaleType);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }

                case Opc.Ua.BrowseNames.Title:
                {
                    if (createOrReplace)
                    {
                        if (Title == null)
                        {
                            if (replacement == null)
                            {
                                Title = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Title = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Title;
                    break;
                }

                case Opc.Ua.BrowseNames.AxisScaleType:
                {
                    if (createOrReplace)
                    {
                        if (AxisScaleType == null)
                        {
                            if (replacement == null)
                            {
                                AxisScaleType = new PropertyState<AxisScaleEnumeration>(this);
                            }
                            else
                            {
                                AxisScaleType = (PropertyState<AxisScaleEnumeration>)replacement;
                            }
                        }
                    }

                    instance = AxisScaleType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        private PropertyState<LocalizedText> m_title;
        private PropertyState<AxisScaleEnumeration> m_axisScaleType;
        #endregion
    }

    #region ArrayItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ArrayItemState<T> : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public ArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region YArrayItemState Class
    #if (!OPCUA_EXCLUDE_YArrayItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class YArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public YArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.YArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFgAAAFlBcnJheUl0ZW1UeXBlSW5zdGFuY2UBAP0uAQD9Lv0uAAAAGAEA" +
           "AAABAAAAAAAAAAEB/////wUAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UCAABYRQ8AAC4ARFhFDwABAHQD" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMCAABZRQ8AAC4ARFlFDwAB" +
           "AHcD/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAgAAWkUPAAAuAERaRQ8AABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQIAAFtFDwAALgBEW0UPAAEALS//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAFLwAuAEQFLwAAAQAvL/////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }

    #region YArrayItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class YArrayItemState<T> : YArrayItemState
    {
        #region Constructors
        /// <remarks />
        public YArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region XYArrayItemState Class
    #if (!OPCUA_EXCLUDE_XYArrayItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class XYArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public XYArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.XYArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.XVType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFwAAAFhZQXJyYXlJdGVtVHlwZUluc3RhbmNlAQAGLwEABi8GLwAAAQAw" +
           "LwEAAAABAAAAAAAAAAEB/////wUAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UCAABfRQ8AAC4ARF9FDwAB" +
           "AHQD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMCAABgRQ8AAC4ARGBF" +
           "DwABAHcD/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAgAAYUUPAAAuAERhRQ8AABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQIAAGJFDwAALgBEYkUPAAEALS//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAOLwAuAEQOLwAAAQAvL/////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }

    #region XYArrayItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class XYArrayItemState<T> : XYArrayItemState
    {
        #region Constructors
        /// <remarks />
        public XYArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ImageItemState Class
    #if (!OPCUA_EXCLUDE_ImageItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ImageItemState : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public ImageItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ImageItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return 3;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFQAAAEltYWdlSXRlbVR5cGVJbnN0YW5jZQEADy8BAA8vDy8AAAAYAgAA" +
           "AAIAAAAAAAAAAAAAAAEB/////wYAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UCAABmRQ8AAC4ARGZFDwAB" +
           "AHQD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMCAABnRQ8AAC4ARGdF" +
           "DwABAHcD/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAgAAaEUPAAAuAERoRQ8AABX/////" +
           "AQH/////AAAAABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQIAAGlFDwAALgBEaUUPAAEALS//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAXLwAuAEQXLwAAAQAvL/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA8AAABZQXhpc0RlZmluaXRpb24BABgvAC4ARBgvAAABAC8v/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        #endregion
    }

    #region ImageItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ImageItemState<T> : ImageItemState
    {
        #region Constructors
        /// <remarks />
        public ImageItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region CubeItemState Class
    #if (!OPCUA_EXCLUDE_CubeItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CubeItemState : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public CubeItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.CubeItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return 4;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkCAgAAAAAAFAAAAEN1YmVJdGVtVHlwZUluc3RhbmNlAQAZLwEAGS8ZLwAAABgDAAAA" +
           "AwAAAAAAAAAAAAAAAAAAAAEB/////wcAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UCAABtRQ8AAC4ARG1F" +
           "DwABAHQD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMCAABuRQ8AAC4A" +
           "RG5FDwABAHcD/////wEB/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAgAAb0UPAAAuAERvRQ8AABX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAANAAAAQXhpc1NjYWxlVHlwZQIAAHBFDwAALgBEcEUPAAEALS//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAPAAAAWEF4aXNEZWZpbml0aW9uAQAhLwAuAEQhLwAAAQAvL///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABZQXhpc0RlZmluaXRpb24BACIvAC4ARCIvAAABAC8v////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADwAAAFpBeGlzRGVmaW5pdGlvbgEAIy8ALgBEIy8AAAEALy//////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> ZAxisDefinition
        {
            get
            {
                return m_zAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_zAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_zAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            if (m_zAxisDefinition != null)
            {
                children.Add(m_zAxisDefinition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.ZAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (ZAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                ZAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                ZAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = ZAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        private PropertyState<AxisInformation> m_zAxisDefinition;
        #endregion
    }

    #region CubeItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class CubeItemState<T> : CubeItemState
    {
        #region Constructors
        /// <remarks />
        public CubeItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region NDimensionArrayItemState Class
    #if (!OPCUA_EXCLUDE_NDimensionArrayItemState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NDimensionArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <remarks />
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.NDimensionArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHwAAAE5EaW1lbnNpb25BcnJheUl0ZW1UeXBlSW5zdGFuY2UBACQvAQAk" +
           "LyQvAAAAGAAAAAABAf////8FAAAAFWCJCgIAAAAAAAcAAABFVVJhbmdlAgAAdEUPAAAuAER0RQ8AAQB0" +
           "A/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABFbmdpbmVlcmluZ1VuaXRzAgAAdUUPAAAuAER1RQ8A" +
           "AQB3A/////8BAf////8AAAAAFWCJCgIAAAAAAAUAAABUaXRsZQIAAHZFDwAALgBEdkUPAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADQAAAEF4aXNTY2FsZVR5cGUCAAB3RQ8AAC4ARHdFDwABAC0v/////wEB" +
           "/////wAAAAAXYIkKAgAAAAAADgAAAEF4aXNEZWZpbml0aW9uAQAsLwAuAEQsLwAAAQAvLwEAAAABAAAA" +
           "AAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation[]> AxisDefinition
        {
            get
            {
                return m_axisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_axisDefinition != null)
            {
                children.Add(m_axisDefinition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (AxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                AxisDefinition = new PropertyState<AxisInformation[]>(this);
                            }
                            else
                            {
                                AxisDefinition = (PropertyState<AxisInformation[]>)replacement;
                            }
                        }
                    }

                    instance = AxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation[]> m_axisDefinition;
        #endregion
    }

    #region NDimensionArrayItemState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class NDimensionArrayItemState<T> : NDimensionArrayItemState
    {
        #region Constructors
        /// <remarks />
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SyntaxReferenceEntryState Class
    #if (!OPCUA_EXCLUDE_SyntaxReferenceEntryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SyntaxReferenceEntryState : DictionaryEntryState
    {
        #region Constructors
        /// <remarks />
        public SyntaxReferenceEntryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SyntaxReferenceEntryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFN5bnRheFJlZmVyZW5jZUVudHJ5VHlwZUluc3RhbmNlAQC3fgEA" +
           "t363fgAA/////wEAAAAVYIkKAgAAAAAACgAAAENvbW1vbk5hbWUBALl+AC4ARLl+AAAADP////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> CommonName
        {
            get
            {
                return m_commonName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_commonName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_commonName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_commonName != null)
            {
                children.Add(m_commonName);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CommonName:
                {
                    if (createOrReplace)
                    {
                        if (CommonName == null)
                        {
                            if (replacement == null)
                            {
                                CommonName = new PropertyState<string>(this);
                            }
                            else
                            {
                                CommonName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CommonName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_commonName;
        #endregion
    }
    #endif
    #endregion

    #region UnitState Class
    #if (!OPCUA_EXCLUDE_UnitState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UnitState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public UnitState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UnitType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Description != null)
            {
                Description.Initialize(context, Description_InitializationString);
            }

            if (Discipline != null)
            {
                Discipline.Initialize(context, Discipline_InitializationString);
            }
        }

        #region Initialization String
        private const string Description_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAERlc2NyaXB0aW9uAQC8fgAuAES8fgAAABX/////AQH/////AAAA" +
           "AA==";

        private const string Discipline_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERpc2NpcGxpbmUBAL5+AC4ARL5+AAAADP////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEAAAAFVuaXRUeXBlSW5zdGFuY2UBALp+AQC6frp+AAD/////BAAAABVg" +
           "iQoCAAAAAAAGAAAAU3ltYm9sAQC7fgAuAES7fgAAABX/////AQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "RGVzY3JpcHRpb24BALx+AC4ARLx+AAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABVbml0U3lz" +
           "dGVtAQC9fgAuAES9fgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAKAAAARGlzY2lwbGluZQEAvn4A" +
           "LgBEvn4AAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> Symbol
        {
            get
            {
                return m_symbol;
            }

            set
            {
                if (!Object.ReferenceEquals(m_symbol, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_symbol = value;
            }
        }

        /// <remarks />
        public new PropertyState<LocalizedText> Description
        {
            get
            {
                return m_description;
            }

            set
            {
                if (!Object.ReferenceEquals(m_description, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_description = value;
            }
        }

        /// <remarks />
        public PropertyState<string> UnitSystem
        {
            get
            {
                return m_unitSystem;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unitSystem, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unitSystem = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Discipline
        {
            get
            {
                return m_discipline;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discipline, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discipline = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_symbol != null)
            {
                children.Add(m_symbol);
            }

            if (m_description != null)
            {
                children.Add(m_description);
            }

            if (m_unitSystem != null)
            {
                children.Add(m_unitSystem);
            }

            if (m_discipline != null)
            {
                children.Add(m_discipline);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Symbol:
                {
                    if (createOrReplace)
                    {
                        if (Symbol == null)
                        {
                            if (replacement == null)
                            {
                                Symbol = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Symbol = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Symbol;
                    break;
                }

                case Opc.Ua.BrowseNames.Description:
                {
                    if (createOrReplace)
                    {
                        if (Description == null)
                        {
                            if (replacement == null)
                            {
                                Description = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Description = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Description;
                    break;
                }

                case Opc.Ua.BrowseNames.UnitSystem:
                {
                    if (createOrReplace)
                    {
                        if (UnitSystem == null)
                        {
                            if (replacement == null)
                            {
                                UnitSystem = new PropertyState<string>(this);
                            }
                            else
                            {
                                UnitSystem = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = UnitSystem;
                    break;
                }

                case Opc.Ua.BrowseNames.Discipline:
                {
                    if (createOrReplace)
                    {
                        if (Discipline == null)
                        {
                            if (replacement == null)
                            {
                                Discipline = new PropertyState<string>(this);
                            }
                            else
                            {
                                Discipline = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Discipline;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_symbol;
        private PropertyState<LocalizedText> m_description;
        private PropertyState<string> m_unitSystem;
        private PropertyState<string> m_discipline;
        #endregion
    }
    #endif
    #endregion

    #region ServerUnitState Class
    #if (!OPCUA_EXCLUDE_ServerUnitState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerUnitState : UnitState
    {
        #region Constructors
        /// <remarks />
        public ServerUnitState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerUnitType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AlternativeUnits != null)
            {
                AlternativeUnits.Initialize(context, AlternativeUnits_InitializationString);
            }

            if (CoherentUnit != null)
            {
                CoherentUnit.Initialize(context, CoherentUnit_InitializationString);
            }
        }

        #region Initialization String
        private const string AlternativeUnits_InitializationString =
           "//////////8EYIAKAQAAAAAAEAAAAEFsdGVybmF0aXZlVW5pdHMBAMR+AC8AOsR+AAD/////AAAAAA==";

        private const string CoherentUnit_InitializationString =
           "//////////8EYIAKAQAAAAAADAAAAENvaGVyZW50VW5pdAEAzn4ALwEAun7OfgAA/////wIAAAAVYIkK" +
           "AgAAAAAABgAAAFN5bWJvbAEAz34ALgBEz34AAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFVu" +
           "aXRTeXN0ZW0BANF+AC4ARNF+AAAADP////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAFNlcnZlclVuaXRUeXBlSW5zdGFuY2UBAL9+AQC/fr9+AAD/////" +
           "BQAAABVgiQoCAAAAAAAGAAAAU3ltYm9sAgAAeUUPAAAuAER5RQ8AABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAVW5pdFN5c3RlbQIAAHtFDwAALgBEe0UPAAAM/////wEB/////wAAAAAEYIAKAQAAAAAA" +
           "EAAAAEFsdGVybmF0aXZlVW5pdHMBAMR+AC8AOsR+AAD/////AAAAABVgiQoCAAAAAAAPAAAAQ29udmVy" +
           "c2lvbkxpbWl0AQDNfgAuAETNfgAAAQC0fv////8BAf////8AAAAABGCACgEAAAAAAAwAAABDb2hlcmVu" +
           "dFVuaXQBAM5+AC8BALp+zn4AAP////8CAAAAFWCJCgIAAAAAAAYAAABTeW1ib2wBAM9+AC4ARM9+AAAA" +
           "Ff////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABVbml0U3lzdGVtAQDRfgAuAETRfgAAAAz/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseObjectState AlternativeUnits
        {
            get
            {
                return m_alternativeUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_alternativeUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_alternativeUnits = value;
            }
        }

        /// <remarks />
        public PropertyState<ConversionLimitEnum> ConversionLimit
        {
            get
            {
                return m_conversionLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conversionLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conversionLimit = value;
            }
        }

        /// <remarks />
        public UnitState CoherentUnit
        {
            get
            {
                return m_coherentUnit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_coherentUnit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_coherentUnit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_alternativeUnits != null)
            {
                children.Add(m_alternativeUnits);
            }

            if (m_conversionLimit != null)
            {
                children.Add(m_conversionLimit);
            }

            if (m_coherentUnit != null)
            {
                children.Add(m_coherentUnit);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AlternativeUnits:
                {
                    if (createOrReplace)
                    {
                        if (AlternativeUnits == null)
                        {
                            if (replacement == null)
                            {
                                AlternativeUnits = new BaseObjectState(this);
                            }
                            else
                            {
                                AlternativeUnits = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = AlternativeUnits;
                    break;
                }

                case Opc.Ua.BrowseNames.ConversionLimit:
                {
                    if (createOrReplace)
                    {
                        if (ConversionLimit == null)
                        {
                            if (replacement == null)
                            {
                                ConversionLimit = new PropertyState<ConversionLimitEnum>(this);
                            }
                            else
                            {
                                ConversionLimit = (PropertyState<ConversionLimitEnum>)replacement;
                            }
                        }
                    }

                    instance = ConversionLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.CoherentUnit:
                {
                    if (createOrReplace)
                    {
                        if (CoherentUnit == null)
                        {
                            if (replacement == null)
                            {
                                CoherentUnit = new UnitState(this);
                            }
                            else
                            {
                                CoherentUnit = (UnitState)replacement;
                            }
                        }
                    }

                    instance = CoherentUnit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseObjectState m_alternativeUnits;
        private PropertyState<ConversionLimitEnum> m_conversionLimit;
        private UnitState m_coherentUnit;
        #endregion
    }
    #endif
    #endregion

    #region AlternativeUnitState Class
    #if (!OPCUA_EXCLUDE_AlternativeUnitState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlternativeUnitState : UnitState
    {
        #region Constructors
        /// <remarks />
        public AlternativeUnitState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlternativeUnitType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LinearConversion != null)
            {
                LinearConversion.Initialize(context, LinearConversion_InitializationString);
            }

            if (MathMLConversion != null)
            {
                MathMLConversion.Initialize(context, MathMLConversion_InitializationString);
            }

            if (MathMLInverseConversion != null)
            {
                MathMLInverseConversion.Initialize(context, MathMLInverseConversion_InitializationString);
            }
        }

        #region Initialization String
        private const string LinearConversion_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAExpbmVhckNvbnZlcnNpb24BANh+AC4ARNh+AAABALN+/////wEB" +
           "/////wAAAAA=";

        private const string MathMLConversion_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAE1hdGhNTENvbnZlcnNpb24BANl+AC4ARNl+AAAADP////8BAf//" +
           "//8AAAAA";

        private const string MathMLInverseConversion_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAE1hdGhNTEludmVyc2VDb252ZXJzaW9uAQDafgAuAETafgAAAAz/" +
           "////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAEFsdGVybmF0aXZlVW5pdFR5cGVJbnN0YW5jZQEA034BANN+034A" +
           "AP////8FAAAAFWCJCgIAAAAAAAYAAABTeW1ib2wCAAB9RQ8AAC4ARH1FDwAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABVbml0U3lzdGVtAgAAf0UPAAAuAER/RQ8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAATGluZWFyQ29udmVyc2lvbgEA2H4ALgBE2H4AAAEAs37/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAATWF0aE1MQ29udmVyc2lvbgEA2X4ALgBE2X4AAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFwAAAE1hdGhNTEludmVyc2VDb252ZXJzaW9uAQDafgAuAETafgAAAAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LinearConversionDataType> LinearConversion
        {
            get
            {
                return m_linearConversion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_linearConversion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_linearConversion = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MathMLConversion
        {
            get
            {
                return m_mathMLConversion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mathMLConversion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mathMLConversion = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MathMLInverseConversion
        {
            get
            {
                return m_mathMLInverseConversion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mathMLInverseConversion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mathMLInverseConversion = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_linearConversion != null)
            {
                children.Add(m_linearConversion);
            }

            if (m_mathMLConversion != null)
            {
                children.Add(m_mathMLConversion);
            }

            if (m_mathMLInverseConversion != null)
            {
                children.Add(m_mathMLInverseConversion);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LinearConversion:
                {
                    if (createOrReplace)
                    {
                        if (LinearConversion == null)
                        {
                            if (replacement == null)
                            {
                                LinearConversion = new PropertyState<LinearConversionDataType>(this);
                            }
                            else
                            {
                                LinearConversion = (PropertyState<LinearConversionDataType>)replacement;
                            }
                        }
                    }

                    instance = LinearConversion;
                    break;
                }

                case Opc.Ua.BrowseNames.MathMLConversion:
                {
                    if (createOrReplace)
                    {
                        if (MathMLConversion == null)
                        {
                            if (replacement == null)
                            {
                                MathMLConversion = new PropertyState<string>(this);
                            }
                            else
                            {
                                MathMLConversion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MathMLConversion;
                    break;
                }

                case Opc.Ua.BrowseNames.MathMLInverseConversion:
                {
                    if (createOrReplace)
                    {
                        if (MathMLInverseConversion == null)
                        {
                            if (replacement == null)
                            {
                                MathMLInverseConversion = new PropertyState<string>(this);
                            }
                            else
                            {
                                MathMLInverseConversion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MathMLInverseConversion;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LinearConversionDataType> m_linearConversion;
        private PropertyState<string> m_mathMLConversion;
        private PropertyState<string> m_mathMLInverseConversion;
        #endregion
    }
    #endif
    #endregion

    #region QuantityState Class
    #if (!OPCUA_EXCLUDE_QuantityState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class QuantityState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public QuantityState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.QuantityType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Symbol != null)
            {
                Symbol.Initialize(context, Symbol_InitializationString);
            }

            if (Description != null)
            {
                Description.Initialize(context, Description_InitializationString);
            }

            if (Annotation != null)
            {
                Annotation.Initialize(context, Annotation_InitializationString);
            }

            if (ConversionService != null)
            {
                ConversionService.Initialize(context, ConversionService_InitializationString);
            }
        }

        #region Initialization String
        private const string Symbol_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAFN5bWJvbAEA3H4ALgBE3H4AAAAV/////wEB/////wAAAAA=";

        private const string Description_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAERlc2NyaXB0aW9uAQDdfgAuAETdfgAAABX/////AQH/////AAAA" +
           "AA==";

        private const string Annotation_InitializationString =
           "//////////8XYIkKAgAAAAAACgAAAEFubm90YXRpb24BAN5+AC4ARN5+AAABALJ+AQAAAAEAAAAAAAAA" +
           "AQH/////AAAAAA==";

        private const string ConversionService_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAENvbnZlcnNpb25TZXJ2aWNlAQDffgAuAETffgAAAQDHXP////8B" +
           "Af////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFAAAAFF1YW50aXR5VHlwZUluc3RhbmNlAQDbfgEA237bfgAA/////wYA" +
           "AAAVYIkKAgAAAAAABgAAAFN5bWJvbAEA3H4ALgBE3H4AAAAV/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAERlc2NyaXB0aW9uAQDdfgAuAETdfgAAABX/////AQH/////AAAAABdgiQoCAAAAAAAKAAAAQW5u" +
           "b3RhdGlvbgEA3n4ALgBE3n4AAAEAsn4BAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABEAAABD" +
           "b252ZXJzaW9uU2VydmljZQEA334ALgBE334AAAEAx1z/////AQH/////AAAAABVgiQoCAAAAAAAJAAAA" +
           "RGltZW5zaW9uAQDgfgAuAETgfgAAAQC2fv////8BAf////8AAAAABGCACgEAAAAAAAsAAABTZXJ2ZXJV" +
           "bml0cwEA4X4ALwA64X4AAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> Symbol
        {
            get
            {
                return m_symbol;
            }

            set
            {
                if (!Object.ReferenceEquals(m_symbol, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_symbol = value;
            }
        }

        /// <remarks />
        public new PropertyState<LocalizedText> Description
        {
            get
            {
                return m_description;
            }

            set
            {
                if (!Object.ReferenceEquals(m_description, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_description = value;
            }
        }

        /// <remarks />
        public PropertyState<AnnotationDataType[]> Annotation
        {
            get
            {
                return m_annotation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_annotation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_annotation = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ConversionService
        {
            get
            {
                return m_conversionService;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conversionService, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conversionService = value;
            }
        }

        /// <remarks />
        public PropertyState<QuantityDimension> Dimension
        {
            get
            {
                return m_dimension;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dimension, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dimension = value;
            }
        }

        /// <remarks />
        public BaseObjectState ServerUnits
        {
            get
            {
                return m_serverUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_symbol != null)
            {
                children.Add(m_symbol);
            }

            if (m_description != null)
            {
                children.Add(m_description);
            }

            if (m_annotation != null)
            {
                children.Add(m_annotation);
            }

            if (m_conversionService != null)
            {
                children.Add(m_conversionService);
            }

            if (m_dimension != null)
            {
                children.Add(m_dimension);
            }

            if (m_serverUnits != null)
            {
                children.Add(m_serverUnits);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Symbol:
                {
                    if (createOrReplace)
                    {
                        if (Symbol == null)
                        {
                            if (replacement == null)
                            {
                                Symbol = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Symbol = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Symbol;
                    break;
                }

                case Opc.Ua.BrowseNames.Description:
                {
                    if (createOrReplace)
                    {
                        if (Description == null)
                        {
                            if (replacement == null)
                            {
                                Description = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Description = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Description;
                    break;
                }

                case Opc.Ua.BrowseNames.Annotation:
                {
                    if (createOrReplace)
                    {
                        if (Annotation == null)
                        {
                            if (replacement == null)
                            {
                                Annotation = new PropertyState<AnnotationDataType[]>(this);
                            }
                            else
                            {
                                Annotation = (PropertyState<AnnotationDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Annotation;
                    break;
                }

                case Opc.Ua.BrowseNames.ConversionService:
                {
                    if (createOrReplace)
                    {
                        if (ConversionService == null)
                        {
                            if (replacement == null)
                            {
                                ConversionService = new PropertyState<string>(this);
                            }
                            else
                            {
                                ConversionService = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ConversionService;
                    break;
                }

                case Opc.Ua.BrowseNames.Dimension:
                {
                    if (createOrReplace)
                    {
                        if (Dimension == null)
                        {
                            if (replacement == null)
                            {
                                Dimension = new PropertyState<QuantityDimension>(this);
                            }
                            else
                            {
                                Dimension = (PropertyState<QuantityDimension>)replacement;
                            }
                        }
                    }

                    instance = Dimension;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerUnits:
                {
                    if (createOrReplace)
                    {
                        if (ServerUnits == null)
                        {
                            if (replacement == null)
                            {
                                ServerUnits = new BaseObjectState(this);
                            }
                            else
                            {
                                ServerUnits = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = ServerUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_symbol;
        private PropertyState<LocalizedText> m_description;
        private PropertyState<AnnotationDataType[]> m_annotation;
        private PropertyState<string> m_conversionService;
        private PropertyState<QuantityDimension> m_dimension;
        private BaseObjectState m_serverUnits;
        #endregion
    }
    #endif
    #endregion

    #region QuantitiesFolderState Class
    #if (!OPCUA_EXCLUDE_QuantitiesFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class QuantitiesFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public QuantitiesFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.QuantitiesFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFF1YW50aXRpZXNGb2xkZXJUeXBlSW5zdGFuY2UBAPZ+AQD2fvZ+" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TwoStateVariableState Class
    #if (!OPCUA_EXCLUDE_TwoStateVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateVariableState : StateVariableState
    {
        #region Constructors
        /// <remarks />
        public TwoStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }

            if (TrueState != null)
            {
                TrueState.Initialize(context, TrueState_InitializationString);
            }

            if (FalseState != null)
            {
                FalseState.Initialize(context, FalseState_InitializationString);
            }
        }

        #region Initialization String
        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQAoIwAuAEQoIwAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQApIwAuAEQpIwAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string TrueState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFRydWVTdGF0ZQEAZisALgBEZisAAAAV/////wEB/////wAAAAA=";

        private const string FalseState_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAEZhbHNlU3RhdGUBAGcrAC4ARGcrAAAAFf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHAAAAFR3b1N0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBACMjAQAjIyMj" +
           "AAAAFf////8BAf////8FAAAAFWCJCgIAAAAAAAIAAABJZAEAJCMALgBEJCMAAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQAoIwAuAEQoIwAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABcAAABFZmZlY3RpdmVUcmFuc2l0aW9uVGltZQEAKSMALgBEKSMAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAAVHJ1ZVN0YXRlAQBmKwAuAERmKwAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAARmFsc2VTdGF0ZQEAZysALgBEZysAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<bool> Id
        {
            get { return (PropertyState<bool>)base.Id; }
            set { base.Id = value; }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Id = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }

                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        private PropertyState<LocalizedText> m_trueState;
        private PropertyState<LocalizedText> m_falseState;
        #endregion
    }
    #endif
    #endregion

    #region ConditionVariableState Class
    #if (!OPCUA_EXCLUDE_ConditionVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionVariableState : BaseDataVariableState
    {
        #region Constructors
        /// <remarks />
        public ConditionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ConditionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIECAgAAAAAAHQAAAENvbmRpdGlvblZhcmlhYmxlVHlwZUluc3RhbmNlAQAqIwEAKiMq" +
           "IwAAABgBAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABACsjAC4ARCsjAAABACYB" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> SourceTimestamp
        {
            get
            {
                return m_sourceTimestamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceTimestamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceTimestamp = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sourceTimestamp != null)
            {
                children.Add(m_sourceTimestamp);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SourceTimestamp:
                {
                    if (createOrReplace)
                    {
                        if (SourceTimestamp == null)
                        {
                            if (replacement == null)
                            {
                                SourceTimestamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                SourceTimestamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = SourceTimestamp;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_sourceTimestamp;
        #endregion
    }

    #region ConditionVariableState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ConditionVariableState<T> : ConditionVariableState
    {
        #region Constructors
        /// <remarks />
        public ConditionVariableState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ConditionState Class
    #if (!OPCUA_EXCLUDE_ConditionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionState : BaseEventState
    {
        #region Constructors
        /// <remarks />
        public ConditionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAENvbmRpdGlvblR5cGVJbnN0YW5jZQEA3goBAN4K3goAAP////8X" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAi0UPAAAuAESLRQ8AAA//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAARXZlbnRUeXBlAgAAjEUPAAAuAESMRQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQIAAI1FDwAALgBEjUUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUCAACORQ8AAC4ARI5FDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAgAA" +
           "j0UPAAAuAESPRQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQIAAJBF" +
           "DwAALgBEkEUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIAAJJFDwAALgBE" +
           "kkUPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAk0UPAAAuAESTRQ8AAAX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAaCsALgBEaCsAAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAaSsALgBEaSsAAAAV////" +
           "/wEB/////wAAAAAXYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNsYXNzSWQBAOs/AC4AROs/AAAAEQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAENvbmRpdGlvblN1YkNsYXNzTmFtZQEA7D8A" +
           "LgBE7D8AAAAVAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAANAAAAQ29uZGl0aW9uTmFtZQEA" +
           "MSMALgBEMSMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5jaElkAQAyIwAuAEQyIwAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQAiDwAuAEQiDwAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQAzIwAvAQAjIzMjAAAAFf////8BAf////8EAAAA" +
           "FWCJCgIAAAAAAAIAAABJZAEANCMALgBENCMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAEVm" +
           "ZmVjdGl2ZURpc3BsYXlOYW1lAQA3IwAuAEQ3IwAAABX/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "VHJhbnNpdGlvblRpbWUBADgjAC4ARDgjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAEVm" +
           "ZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQA5IwAuAEQ5IwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQA8IwAvAQAqIzwjAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAD0jAC4ARD0jAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAPiMALwEAKiM+IwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQA/IwAuAEQ/IwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQBA" +
           "IwAvAQAqI0AjAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAEEj" +
           "AC4AREEjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAQiMALgBE" +
           "QiMAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAEQjAC8BAEQjRCMAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAQyMALwEAQyNDIwAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEARSMALwEARSNFIwAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEYjAC4AREYjAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ConditionName
        {
            get
            {
                return m_conditionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionName = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> BranchId
        {
            get
            {
                return m_branchId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_branchId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_branchId = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Retain
        {
            get
            {
                return m_retain;
            }

            set
            {
                if (!Object.ReferenceEquals(m_retain, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_retain = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState EnabledState
        {
            get
            {
                return m_enabledState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledState = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<StatusCode> Quality
        {
            get
            {
                return m_quality;
            }

            set
            {
                if (!Object.ReferenceEquals(m_quality, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_quality = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<ushort> LastSeverity
        {
            get
            {
                return m_lastSeverity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastSeverity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastSeverity = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }

        /// <remarks />
        public MethodState Disable
        {
            get
            {
                return m_disableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableMethod = value;
            }
        }

        /// <remarks />
        public MethodState Enable
        {
            get
            {
                return m_enableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState AddComment
        {
            get
            {
                return m_addCommentMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCommentMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCommentMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionName != null)
            {
                children.Add(m_conditionName);
            }

            if (m_branchId != null)
            {
                children.Add(m_branchId);
            }

            if (m_retain != null)
            {
                children.Add(m_retain);
            }

            if (m_enabledState != null)
            {
                children.Add(m_enabledState);
            }

            if (m_quality != null)
            {
                children.Add(m_quality);
            }

            if (m_lastSeverity != null)
            {
                children.Add(m_lastSeverity);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            if (m_disableMethod != null)
            {
                children.Add(m_disableMethod);
            }

            if (m_enableMethod != null)
            {
                children.Add(m_enableMethod);
            }

            if (m_addCommentMethod != null)
            {
                children.Add(m_addCommentMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionName = new PropertyState<string>(this);
                            }
                            else
                            {
                                ConditionName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ConditionName;
                    break;
                }

                case Opc.Ua.BrowseNames.BranchId:
                {
                    if (createOrReplace)
                    {
                        if (BranchId == null)
                        {
                            if (replacement == null)
                            {
                                BranchId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                BranchId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BranchId;
                    break;
                }

                case Opc.Ua.BrowseNames.Retain:
                {
                    if (createOrReplace)
                    {
                        if (Retain == null)
                        {
                            if (replacement == null)
                            {
                                Retain = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Retain = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Retain;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledState:
                {
                    if (createOrReplace)
                    {
                        if (EnabledState == null)
                        {
                            if (replacement == null)
                            {
                                EnabledState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                EnabledState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = EnabledState;
                    break;
                }

                case Opc.Ua.BrowseNames.Quality:
                {
                    if (createOrReplace)
                    {
                        if (Quality == null)
                        {
                            if (replacement == null)
                            {
                                Quality = new ConditionVariableState<StatusCode>(this);
                            }
                            else
                            {
                                Quality = (ConditionVariableState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = Quality;
                    break;
                }

                case Opc.Ua.BrowseNames.LastSeverity:
                {
                    if (createOrReplace)
                    {
                        if (LastSeverity == null)
                        {
                            if (replacement == null)
                            {
                                LastSeverity = new ConditionVariableState<ushort>(this);
                            }
                            else
                            {
                                LastSeverity = (ConditionVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = LastSeverity;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new ConditionVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (ConditionVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }

                case Opc.Ua.BrowseNames.Disable:
                {
                    if (createOrReplace)
                    {
                        if (Disable == null)
                        {
                            if (replacement == null)
                            {
                                Disable = new MethodState(this);
                            }
                            else
                            {
                                Disable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Disable;
                    break;
                }

                case Opc.Ua.BrowseNames.Enable:
                {
                    if (createOrReplace)
                    {
                        if (Enable == null)
                        {
                            if (replacement == null)
                            {
                                Enable = new MethodState(this);
                            }
                            else
                            {
                                Enable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Enable;
                    break;
                }

                case Opc.Ua.BrowseNames.AddComment:
                {
                    if (createOrReplace)
                    {
                        if (AddComment == null)
                        {
                            if (replacement == null)
                            {
                                AddComment = new AddCommentMethodState(this);
                            }
                            else
                            {
                                AddComment = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = AddComment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_conditionName;
        private PropertyState<NodeId> m_branchId;
        private PropertyState<bool> m_retain;
        private TwoStateVariableState m_enabledState;
        private ConditionVariableState<StatusCode> m_quality;
        private ConditionVariableState<ushort> m_lastSeverity;
        private ConditionVariableState<LocalizedText> m_comment;
        private PropertyState<string> m_clientUserId;
        private MethodState m_disableMethod;
        private MethodState m_enableMethod;
        private AddCommentMethodState m_addCommentMethod;
        #endregion
    }
    #endif
    #endregion

    #region ConditionRefresh2MethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefresh2MethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefresh2MethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ConditionRefresh2MethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefresh2MethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAENvbmRpdGlvblJlZnJlc2gyTWV0aG9kVHlwZQEAcjIALwEAcjJy" +
           "MgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHMyAC4ARHMyAACWAgAAAAEA" +
           "KgEBVgAAAA4AAABTdWJzY3JpcHRpb25JZAEAIAH/////AAAAAAMAAAAALwAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgc3Vic2NyaXB0aW9uIHRvIHJlZnJlc2guAQAqAQFZAAAADwAAAE1vbml0b3JlZEl0ZW1J" +
           "ZAEAIAH/////AAAAAAMAAAAAMQAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgbW9uaXRvcmVkIGl0ZW0g" +
           "dG8gcmVmcmVzaC4BACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ConditionRefresh2MethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint monitoredItemId = (uint)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    monitoredItemId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ConditionRefresh2MethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId,
        uint monitoredItemId);
    #endif
    #endregion

    #region ConditionRefreshMethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefreshMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefreshMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ConditionRefreshMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefreshMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAENvbmRpdGlvblJlZnJlc2hNZXRob2RUeXBlAQAvIwAvAQAvIy8j" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMCMALgBEMCMAAJYBAAAAAQAq" +
           "AQFWAAAADgAAAFN1YnNjcmlwdGlvbklkAQAgAf////8AAAAAAwAAAAAvAAAAVGhlIGlkZW50aWZpZXIg" +
           "Zm9yIHRoZSBzdWJzY3JpcHRpb24gdG8gcmVmcmVzaC4BACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ConditionRefreshMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ConditionRefreshMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region AddCommentMethodState Class
    #if (!OPCUA_EXCLUDE_AddCommentMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCommentMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddCommentMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCommentMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAEFkZENvbW1lbnRNZXRob2RUeXBlAQAXDwAvAQAXDxcPAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAGA8ALgBEGA8AAJYCAAAAAQAqAQFGAAAA" +
           "BwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0" +
           "byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50" +
           "IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddCommentMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            byte[] eventId = (byte[])_inputArguments[0];
            LocalizedText comment = (LocalizedText)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    eventId,
                    comment);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddCommentMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte[] eventId,
        LocalizedText comment);
    #endif
    #endregion

    #region DialogConditionState Class
    #if (!OPCUA_EXCLUDE_DialogConditionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogConditionState : ConditionState
    {
        #region Constructors
        /// <remarks />
        public DialogConditionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DialogConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Respond2 != null)
            {
                Respond2.Initialize(context, Respond2_InitializationString);
            }
        }

        #region Initialization String
        private const string Respond2_InitializationString =
           "//////////8EYYIKBAAAAAAACAAAAFJlc3BvbmQyAQD4XgAvAQD4XvheAAABAQEAAAABAPkLAAEA3yIB" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA+V4ALgBE+V4AAJYCAAAAAQAqAQEfAAAAEAAA" +
           "AFNlbGVjdGVkUmVzcG9uc2UABv////8AAAAAAAEAKgEBFgAAAAcAAABDb21tZW50ABX/////AAAAAAAB" +
           "ACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAERpYWxvZ0NvbmRpdGlvblR5cGVJbnN0YW5jZQEADgsBAA4LDgsA" +
           "AP////8gAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAlEUPAAAuAESURQ8AAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAlUUPAAAuAESVRQ8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQIAAJZFDwAALgBElkUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUCAACXRQ8AAC4ARJdFDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAgAAmEUPAAAuAESYRQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGlt" +
           "ZQIAAJlFDwAALgBEmUUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIAAJtF" +
           "DwAALgBEm0UPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAnEUPAAAuAESc" +
           "RQ8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAIAAJ1FDwAALgBE" +
           "nUUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQIAAJ5FDwAA" +
           "LgBEnkUPAAAV/////wEB/////wAAAAAXYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNsYXNzSWQCAACf" +
           "RQ8AAC4ARJ9FDwAAEQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAENvbmRpdGlvblN1" +
           "YkNsYXNzTmFtZQIAAKBFDwAALgBEoEUPAAAVAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAN" +
           "AAAAQ29uZGl0aW9uTmFtZQIAAKFFDwAALgBEoUUPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AEJyYW5jaElkAgAAokUPAAAuAESiRQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWlu" +
           "AgAAo0UPAAAuAESjRQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQBL" +
           "IwAvAQAjI0sjAAAAFf////8BAQEAAAABACwjAAEAXyMBAAAAFWCJCgIAAAAAAAIAAABJZAEATCMALgBE" +
           "TCMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkCAAClRQ8AAC8BACojpUUPAAAT" +
           "/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAKZFDwAALgBEpkUPAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AgAAp0UPAAAvAQAqI6dFDwAA" +
           "Bf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAACoRQ8AAC4ARKhFDwAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQCAACpRQ8AAC8BACojqUUPAAAV////" +
           "/wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAKpFDwAALgBEqkUPAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAq0UPAAAuAESrRQ8AAAz/////" +
           "AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQIAAKxFDwAALwEARCOsRQ8AAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAgAArUUPAAAvAQBDI61FDwABAQEAAAABAPkLAAEA8woA" +
           "AAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AgAArkUPAAAvAQBFI65FDwABAQEAAAABAPkLAAEADQsB" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAK9FDwAALgBEr0UPAJYCAAAAAQAqAQFGAAAA" +
           "BwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0" +
           "byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50" +
           "IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABEaWFsb2dTdGF0ZQEAXyMALwEAIyNfIwAAABX/////AQEBAAAAAQAsIwEBAEsjAgAAABVgiQoC" +
           "AAAAAAACAAAASWQBAGAjAC4ARGAjAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABUcmFuc2l0" +
           "aW9uVGltZQEAZCMALgBEZCMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUHJvbXB0AQAP" +
           "CwAuAEQPCwAAABX/////AQH/////AAAAABdgiQoCAAAAAAARAAAAUmVzcG9uc2VPcHRpb25TZXQBAGgj" +
           "AC4ARGgjAAAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADwAAAERlZmF1bHRSZXNwb25z" +
           "ZQEAaSMALgBEaSMAAAAG/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAE9rUmVzcG9uc2UBAGojAC4A" +
           "RGojAAAABv////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDYW5jZWxSZXNwb25zZQEAayMALgBEayMA" +
           "AAAG/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RSZXNwb25zZQEAbCMALgBEbCMAAAAG////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABwAAAFJlc3BvbmQBAG0jAC8BAG0jbSMAAAEBAQAAAAEA+QsAAQDf" +
           "IgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBuIwAuAERuIwAAlgEAAAABACoBAR8AAAAQ" +
           "AAAAU2VsZWN0ZWRSZXNwb25zZQAG/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAACAAAAFJlc3BvbmQyAQD4XgAvAQD4XvheAAABAQEAAAABAPkLAAEA3yIBAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEA+V4ALgBE+V4AAJYCAAAAAQAqAQEfAAAAEAAAAFNlbGVjdGVkUmVz" +
           "cG9uc2UABv////8AAAAAAAEAKgEBFgAAAAcAAABDb21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAAC" +
           "AAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState DialogState
        {
            get
            {
                return m_dialogState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dialogState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dialogState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Prompt
        {
            get
            {
                return m_prompt;
            }

            set
            {
                if (!Object.ReferenceEquals(m_prompt, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_prompt = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText[]> ResponseOptionSet
        {
            get
            {
                return m_responseOptionSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_responseOptionSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_responseOptionSet = value;
            }
        }

        /// <remarks />
        public PropertyState<int> DefaultResponse
        {
            get
            {
                return m_defaultResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> OkResponse
        {
            get
            {
                return m_okResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_okResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_okResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> CancelResponse
        {
            get
            {
                return m_cancelResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cancelResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cancelResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> LastResponse
        {
            get
            {
                return m_lastResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastResponse = value;
            }
        }

        /// <remarks />
        public DialogResponseMethodState Respond
        {
            get
            {
                return m_respondMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_respondMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_respondMethod = value;
            }
        }

        /// <remarks />
        public DialogResponse2MethodState Respond2
        {
            get
            {
                return m_respond2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_respond2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_respond2Method = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dialogState != null)
            {
                children.Add(m_dialogState);
            }

            if (m_prompt != null)
            {
                children.Add(m_prompt);
            }

            if (m_responseOptionSet != null)
            {
                children.Add(m_responseOptionSet);
            }

            if (m_defaultResponse != null)
            {
                children.Add(m_defaultResponse);
            }

            if (m_okResponse != null)
            {
                children.Add(m_okResponse);
            }

            if (m_cancelResponse != null)
            {
                children.Add(m_cancelResponse);
            }

            if (m_lastResponse != null)
            {
                children.Add(m_lastResponse);
            }

            if (m_respondMethod != null)
            {
                children.Add(m_respondMethod);
            }

            if (m_respond2Method != null)
            {
                children.Add(m_respond2Method);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DialogState:
                {
                    if (createOrReplace)
                    {
                        if (DialogState == null)
                        {
                            if (replacement == null)
                            {
                                DialogState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                DialogState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = DialogState;
                    break;
                }

                case Opc.Ua.BrowseNames.Prompt:
                {
                    if (createOrReplace)
                    {
                        if (Prompt == null)
                        {
                            if (replacement == null)
                            {
                                Prompt = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Prompt = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Prompt;
                    break;
                }

                case Opc.Ua.BrowseNames.ResponseOptionSet:
                {
                    if (createOrReplace)
                    {
                        if (ResponseOptionSet == null)
                        {
                            if (replacement == null)
                            {
                                ResponseOptionSet = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                ResponseOptionSet = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = ResponseOptionSet;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultResponse:
                {
                    if (createOrReplace)
                    {
                        if (DefaultResponse == null)
                        {
                            if (replacement == null)
                            {
                                DefaultResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                DefaultResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = DefaultResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.OkResponse:
                {
                    if (createOrReplace)
                    {
                        if (OkResponse == null)
                        {
                            if (replacement == null)
                            {
                                OkResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                OkResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = OkResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.CancelResponse:
                {
                    if (createOrReplace)
                    {
                        if (CancelResponse == null)
                        {
                            if (replacement == null)
                            {
                                CancelResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                CancelResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = CancelResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.LastResponse:
                {
                    if (createOrReplace)
                    {
                        if (LastResponse == null)
                        {
                            if (replacement == null)
                            {
                                LastResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                LastResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = LastResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.Respond:
                {
                    if (createOrReplace)
                    {
                        if (Respond == null)
                        {
                            if (replacement == null)
                            {
                                Respond = new DialogResponseMethodState(this);
                            }
                            else
                            {
                                Respond = (DialogResponseMethodState)replacement;
                            }
                        }
                    }

                    instance = Respond;
                    break;
                }

                case Opc.Ua.BrowseNames.Respond2:
                {
                    if (createOrReplace)
                    {
                        if (Respond2 == null)
                        {
                            if (replacement == null)
                            {
                                Respond2 = new DialogResponse2MethodState(this);
                            }
                            else
                            {
                                Respond2 = (DialogResponse2MethodState)replacement;
                            }
                        }
                    }

                    instance = Respond2;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_dialogState;
        private PropertyState<LocalizedText> m_prompt;
        private PropertyState<LocalizedText[]> m_responseOptionSet;
        private PropertyState<int> m_defaultResponse;
        private PropertyState<int> m_okResponse;
        private PropertyState<int> m_cancelResponse;
        private PropertyState<int> m_lastResponse;
        private DialogResponseMethodState m_respondMethod;
        private DialogResponse2MethodState m_respond2Method;
        #endregion
    }
    #endif
    #endregion

    #region DialogResponseMethodState Class
    #if (!OPCUA_EXCLUDE_DialogResponseMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogResponseMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DialogResponseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DialogResponseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAERpYWxvZ1Jlc3BvbnNlTWV0aG9kVHlwZQEARyMALwEARyNHIwAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEgjAC4AREgjAACWAQAAAAEAKgEB" +
           "HwAAABAAAABTZWxlY3RlZFJlc3BvbnNlAAb/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DialogResponseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            int selectedResponse = (int)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    selectedResponse);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DialogResponseMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        int selectedResponse);
    #endif
    #endregion

    #region DialogResponse2MethodState Class
    #if (!OPCUA_EXCLUDE_DialogResponse2MethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogResponse2MethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DialogResponse2MethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DialogResponse2MethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAERpYWxvZ1Jlc3BvbnNlMk1ldGhvZFR5cGUBAPpeAC8BAPpe+l4A" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD7XgAuAET7XgAAlgIAAAABACoB" +
           "AR8AAAAQAAAAU2VsZWN0ZWRSZXNwb25zZQAG/////wAAAAAAAQAqAQEWAAAABwAAAENvbW1lbnQAFf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DialogResponse2MethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            int selectedResponse = (int)_inputArguments[0];
            LocalizedText comment = (LocalizedText)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    selectedResponse,
                    comment);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DialogResponse2MethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        int selectedResponse,
        LocalizedText comment);
    #endif
    #endregion

    #region AcknowledgeableConditionState Class
    #if (!OPCUA_EXCLUDE_AcknowledgeableConditionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AcknowledgeableConditionState : ConditionState
    {
        #region Constructors
        /// <remarks />
        public AcknowledgeableConditionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ConfirmedState != null)
            {
                ConfirmedState.Initialize(context, ConfirmedState_InitializationString);
            }

            if (Confirm != null)
            {
                Confirm.Initialize(context, Confirm_InitializationString);
            }
        }

        #region Initialization String
        private const string ConfirmedState_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAENvbmZpcm1lZFN0YXRlAQCOIwAvAQAjI44jAAAAFf////8BAQEA" +
           "AAABACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAjyMALgBEjyMAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCTIwAuAESTIwAAAQAmAf////8BAf////8AAAAA";

        private const string Confirm_InitializationString =
           "//////////8EYYIKBAAAAAAABwAAAENvbmZpcm0BAJkjAC8BAJkjmSMAAAEBAQAAAAEA+QsAAQABIwEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCaIwAuAESaIwAAlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEFja25vd2xlZGdlYWJsZUNvbmRpdGlvblR5cGVJbnN0YW5jZQEA" +
           "QQsBAEELQQsAAP////8bAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAtEUPAAAuAES0RQ8AAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAtUUPAAAuAES1RQ8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAALZFDwAALgBEtkUPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAC3RQ8AAC4ARLdFDwAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAQAAABUaW1lAgAAuEUPAAAuAES4RQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABS" +
           "ZWNlaXZlVGltZQIAALlFDwAALgBEuUUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVz" +
           "c2FnZQIAALtFDwAALgBEu0UPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA" +
           "vEUPAAAuAES8RQ8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAIA" +
           "AL1FDwAALgBEvUUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFt" +
           "ZQIAAL5FDwAALgBEvkUPAAAV/////wEB/////wAAAAAXYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNs" +
           "YXNzSWQCAAC/RQ8AAC4ARL9FDwAAEQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAENv" +
           "bmRpdGlvblN1YkNsYXNzTmFtZQIAAMBFDwAALgBEwEUPAAAVAQAAAAEAAAAAAAAAAQH/////AAAAABVg" +
           "iQoCAAAAAAANAAAAQ29uZGl0aW9uTmFtZQIAAMFFDwAALgBEwUUPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAEJyYW5jaElkAgAAwkUPAAAuAETCRQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAUmV0YWluAgAAw0UPAAAuAETDRQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxl" +
           "ZFN0YXRlAQBxIwAvAQAjI3EjAAAAFf////8BAQIAAAABACwjAAEAhSMBACwjAAEAjiMBAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEAciMALgBEciMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkC" +
           "AADFRQ8AAC8BACojxUUPAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFt" +
           "cAIAAMZFDwAALgBExkUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5" +
           "AgAAx0UPAAAvAQAqI8dFDwAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3Rh" +
           "bXACAADIRQ8AAC4ARMhFDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQCAADJ" +
           "RQ8AAC8BACojyUUPAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIA" +
           "AMpFDwAALgBEykUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAA" +
           "y0UPAAAuAETLRQ8AAAz/////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQIAAMxFDwAALwEA" +
           "RCPMRQ8AAQEBAAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAgAAzUUPAAAvAQBDI81F" +
           "DwABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AgAAzkUPAAAvAQBFI85F" +
           "DwABAQEAAAABAPkLAAEADQsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAM9FDwAALgBE" +
           "z0UPAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZp" +
           "ZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMA" +
           "AAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAAB" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABBY2tlZFN0YXRlAQCFIwAvAQAjI4UjAAAAFf////8BAQEAAAAB" +
           "ACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAhiMALgBEhiMAAAAB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCKIwAuAESKIwAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABDb25maXJtZWRTdGF0ZQEAjiMALwEAIyOOIwAAABX/////AQEBAAAAAQAsIwEBAHEjAgAA" +
           "ABVgiQoCAAAAAAACAAAASWQBAI8jAC4ARI8jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABU" +
           "cmFuc2l0aW9uVGltZQEAkyMALgBEkyMAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNr" +
           "bm93bGVkZ2UBAJcjAC8BAJcjlyMAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQCYIwAuAESYIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAA" +
           "ACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENv" +
           "bW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24u" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAABwAAAENvbmZpcm0BAJkjAC8BAJkjmSMA" +
           "AAEBAQAAAAEA+QsAAQABIwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCaIwAuAESaIwAA" +
           "lgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBm" +
           "b3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAk" +
           "AAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState AckedState
        {
            get
            {
                return m_ackedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_ackedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_ackedState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState ConfirmedState
        {
            get
            {
                return m_confirmedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmedState = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Acknowledge
        {
            get
            {
                return m_acknowledgeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_acknowledgeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_acknowledgeMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Confirm
        {
            get
            {
                return m_confirmMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_ackedState != null)
            {
                children.Add(m_ackedState);
            }

            if (m_confirmedState != null)
            {
                children.Add(m_confirmedState);
            }

            if (m_acknowledgeMethod != null)
            {
                children.Add(m_acknowledgeMethod);
            }

            if (m_confirmMethod != null)
            {
                children.Add(m_confirmMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AckedState:
                {
                    if (createOrReplace)
                    {
                        if (AckedState == null)
                        {
                            if (replacement == null)
                            {
                                AckedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                AckedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = AckedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfirmedState:
                {
                    if (createOrReplace)
                    {
                        if (ConfirmedState == null)
                        {
                            if (replacement == null)
                            {
                                ConfirmedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ConfirmedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ConfirmedState;
                    break;
                }

                case Opc.Ua.BrowseNames.Acknowledge:
                {
                    if (createOrReplace)
                    {
                        if (Acknowledge == null)
                        {
                            if (replacement == null)
                            {
                                Acknowledge = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Acknowledge = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Acknowledge;
                    break;
                }

                case Opc.Ua.BrowseNames.Confirm:
                {
                    if (createOrReplace)
                    {
                        if (Confirm == null)
                        {
                            if (replacement == null)
                            {
                                Confirm = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Confirm = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Confirm;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_ackedState;
        private TwoStateVariableState m_confirmedState;
        private AddCommentMethodState m_acknowledgeMethod;
        private AddCommentMethodState m_confirmMethod;
        #endregion
    }
    #endif
    #endregion

    #region AlarmConditionState Class
    #if (!OPCUA_EXCLUDE_AlarmConditionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmConditionState : AcknowledgeableConditionState
    {
        #region Constructors
        /// <remarks />
        public AlarmConditionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SuppressedState != null)
            {
                SuppressedState.Initialize(context, SuppressedState_InitializationString);
            }

            if (OutOfServiceState != null)
            {
                OutOfServiceState.Initialize(context, OutOfServiceState_InitializationString);
            }

            if (ShelvingState != null)
            {
                ShelvingState.Initialize(context, ShelvingState_InitializationString);
            }

            if (MaxTimeShelved != null)
            {
                MaxTimeShelved.Initialize(context, MaxTimeShelved_InitializationString);
            }

            if (AudibleEnabled != null)
            {
                AudibleEnabled.Initialize(context, AudibleEnabled_InitializationString);
            }

            if (AudibleSound != null)
            {
                AudibleSound.Initialize(context, AudibleSound_InitializationString);
            }

            if (SilenceState != null)
            {
                SilenceState.Initialize(context, SilenceState_InitializationString);
            }

            if (OnDelay != null)
            {
                OnDelay.Initialize(context, OnDelay_InitializationString);
            }

            if (OffDelay != null)
            {
                OffDelay.Initialize(context, OffDelay_InitializationString);
            }

            if (FirstInGroupFlag != null)
            {
                FirstInGroupFlag.Initialize(context, FirstInGroupFlag_InitializationString);
            }

            if (FirstInGroup != null)
            {
                FirstInGroup.Initialize(context, FirstInGroup_InitializationString);
            }

            if (LatchedState != null)
            {
                LatchedState.Initialize(context, LatchedState_InitializationString);
            }

            if (ReAlarmTime != null)
            {
                ReAlarmTime.Initialize(context, ReAlarmTime_InitializationString);
            }

            if (ReAlarmRepeatCount != null)
            {
                ReAlarmRepeatCount.Initialize(context, ReAlarmRepeatCount_InitializationString);
            }

            if (Silence != null)
            {
                Silence.Initialize(context, Silence_InitializationString);
            }

            if (Suppress != null)
            {
                Suppress.Initialize(context, Suppress_InitializationString);
            }

            if (Suppress2 != null)
            {
                Suppress2.Initialize(context, Suppress2_InitializationString);
            }

            if (Unsuppress != null)
            {
                Unsuppress.Initialize(context, Unsuppress_InitializationString);
            }

            if (Unsuppress2 != null)
            {
                Unsuppress2.Initialize(context, Unsuppress2_InitializationString);
            }

            if (RemoveFromService != null)
            {
                RemoveFromService.Initialize(context, RemoveFromService_InitializationString);
            }

            if (RemoveFromService2 != null)
            {
                RemoveFromService2.Initialize(context, RemoveFromService2_InitializationString);
            }

            if (PlaceInService != null)
            {
                PlaceInService.Initialize(context, PlaceInService_InitializationString);
            }

            if (PlaceInService2 != null)
            {
                PlaceInService2.Initialize(context, PlaceInService2_InitializationString);
            }

            if (Reset != null)
            {
                Reset.Initialize(context, Reset_InitializationString);
            }

            if (Reset2 != null)
            {
                Reset2.Initialize(context, Reset2_InitializationString);
            }

            if (GetGroupMemberships != null)
            {
                GetGroupMemberships.Initialize(context, GetGroupMemberships_InitializationString);
            }
        }

        #region Initialization String
        private const string SuppressedState_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFN1cHByZXNzZWRTdGF0ZQEA0SMALwEAIyPRIwAAABX/////AQEB" +
           "AAAAAQAsIwEBAJ4jAgAAABVgiQoCAAAAAAACAAAASWQBANIjAC4ARNIjAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEA1iMALgBE1iMAAAEAJgH/////AQH/////AAAAAA==";

        private const string OutOfServiceState_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE91dE9mU2VydmljZVN0YXRlAQDzPwAvAQAjI/M/AAAAFf////8B" +
           "Af////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA9D8ALgBE9D8AAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAFRyYW5zaXRpb25UaW1lAQD4PwAuAET4PwAAAQAmAf////8BAf////8AAAAA";

        private const string ShelvingState_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAFNoZWx2aW5nU3RhdGUBANojAC8BAHEL2iMAAAEAAAABACwjAQEA" +
           "niMGAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANsjAC8BAMgK2yMAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQDcIwAuAETcIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFRyYW5zaXRpb24BAOAjAC8BAM8K4CMAAAAV/////wEB/////wIAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQDhIwAuAEThIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAOQj" +
           "AC4AROQjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVuc2hlbHZlVGltZQEA5SMALgBE" +
           "5SMAAAEAIgH/////AQH/////AAAAAARhggoEAAAAAAALAAAAVGltZWRTaGVsdmUBAP0jAC8BAIUL/SMA" +
           "AAEBAQAAAAEA+QsAAQBVKwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD+IwAuAET+IwAA" +
           "lgEAAAABACoBAR0AAAAMAAAAU2hlbHZpbmdUaW1lAQAiAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAAAgAAABVbnNoZWx2ZQEA+yMALwEAgwv7IwAAAQEBAAAAAQD5CwABAFUr" +
           "AAAAAARhggoEAAAAAAANAAAAT25lU2hvdFNoZWx2ZQEA/CMALwEAhAv8IwAAAQEBAAAAAQD5CwABAFUr" +
           "AAAAAA==";

        private const string MaxTimeShelved_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heFRpbWVTaGVsdmVkAQAAJAAuAEQAJAAAAQAiAf////8BAf//" +
           "//8AAAAA";

        private const string AudibleEnabled_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAEF1ZGlibGVFbmFibGVkAQAFQAAuAEQFQAAAAAH/////AQH/////" +
           "AAAAAA==";

        private const string AudibleSound_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAEF1ZGlibGVTb3VuZAEABkAALwEAQkYGQAAAAQCzP/////8BAf//" +
           "//8AAAAA";

        private const string SilenceState_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFNpbGVuY2VTdGF0ZQEA/D8ALwEAIyP8PwAAABX/////AQH/////" +
           "AgAAABVgiQoCAAAAAAACAAAASWQBAP0/AC4ARP0/AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABUcmFuc2l0aW9uVGltZQEAAUAALgBEAUAAAAEAJgH/////AQH/////AAAAAA==";

        private const string OnDelay_InitializationString =
           "//////////8VYIkKAgAAAAAABwAAAE9uRGVsYXkBAAtAAC4ARAtAAAABACIB/////wEB/////wAAAAA=";

        private const string OffDelay_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAE9mZkRlbGF5AQAMQAAuAEQMQAAAAQAiAf////8BAf////8AAAAA";

        private const string FirstInGroupFlag_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEZpcnN0SW5Hcm91cEZsYWcBAA1AAC8APw1AAAAAAf////8BAf//" +
           "//8AAAAA";

        private const string FirstInGroup_InitializationString =
           "//////////8EYIAKAQAAAAAADAAAAEZpcnN0SW5Hcm91cAEADkAALwEAFUAOQAAA/////wAAAAA=";

        private const string LatchedState_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAExhdGNoZWRTdGF0ZQEADkcALwEAIyMORwAAABX/////AQH/////" +
           "AgAAABVgiQoCAAAAAAACAAAASWQBAA9HAC4ARA9HAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABUcmFuc2l0aW9uVGltZQEAE0cALgBEE0cAAAEAJgH/////AQH/////AAAAAA==";

        private const string ReAlarmTime_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFJlQWxhcm1UaW1lAQAQQAAuAEQQQAAAAQAiAf////8BAf////8A" +
           "AAAA";

        private const string ReAlarmRepeatCount_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAFJlQWxhcm1SZXBlYXRDb3VudAEAEUAALwA/EUAAAAAE/////wEB" +
           "/////wAAAAA=";

        private const string Silence_InitializationString =
           "//////////8EYYIKBAAAAAAABwAAAFNpbGVuY2UBABJAAC8BABJAEkAAAAEBAQAAAAEA+QsAAQBaQwAA" +
           "AAA=";

        private const string Suppress_InitializationString =
           "//////////8EYYIKBAAAAAAACAAAAFN1cHByZXNzAQATQAAvAQATQBNAAAABAQEAAAABAPkLAAEASUMA" +
           "AAAA";

        private const string Suppress2_InitializationString =
           "//////////8EYYIKBAAAAAAACQAAAFN1cHByZXNzMgEA/F4ALwEA/F78XgAAAQEBAAAAAQD5CwABAElD" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAP1eAC4ARP1eAACWAQAAAAEAKgEBFgAAAAcA" +
           "AABDb21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string Unsuppress_InitializationString =
           "//////////8EYYIKBAAAAAAACgAAAFVuc3VwcHJlc3MBAMxFAC8BAMxFzEUAAAEBAQAAAAEA+QsAAQBJ" +
           "QwAAAAA=";

        private const string Unsuppress2_InitializationString =
           "//////////8EYYIKBAAAAAAACwAAAFVuc3VwcHJlc3MyAQD+XgAvAQD+Xv5eAAABAQEAAAABAPkLAAEA" +
           "SUMBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/14ALgBE/14AAJYBAAAAAQAqAQEWAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveFromService_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAFJlbW92ZUZyb21TZXJ2aWNlAQDNRQAvAQDNRc1FAAABAQEAAAAB" +
           "APkLAAEAa0MAAAAA";

        private const string RemoveFromService2_InitializationString =
           "//////////8EYYIKBAAAAAAAEgAAAFJlbW92ZUZyb21TZXJ2aWNlMgEAAF8ALwEAAF8AXwAAAQEBAAAA" +
           "AQD5CwABAGtDAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAFfAC4ARAFfAACWAQAAAAEA" +
           "KgEBFgAAAAcAAABDb21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string PlaceInService_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFBsYWNlSW5TZXJ2aWNlAQDORQAvAQDORc5FAAABAQEAAAABAPkL" +
           "AAEAa0MAAAAA";

        private const string PlaceInService2_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFBsYWNlSW5TZXJ2aWNlMgEAAl8ALwEAAl8CXwAAAQEBAAAAAQD5" +
           "CwABAGtDAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAANfAC4ARANfAACWAQAAAAEAKgEB" +
           "FgAAAAcAAABDb21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string Reset_InitializationString =
           "//////////8EYYIKBAAAAAAABQAAAFJlc2V0AQAXRwAvAQAXRxdHAAABAQEAAAABAPkLAAEApToAAAAA";

        private const string Reset2_InitializationString =
           "//////////8EYYIKBAAAAAAABgAAAFJlc2V0MgEABF8ALwEABF8EXwAAAQEBAAAAAQD5CwABAKU6AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAVfAC4ARAVfAACWAQAAAAEAKgEBFgAAAAcAAABD" +
           "b21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string GetGroupMemberships_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAEdldEdyb3VwTWVtYmVyc2hpcHMBAKhgAC8BAKhgqGAAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAQmIALgBEQmIAAJYBAAAAAQAqAQEZAAAA" +
           "BgAAAEdyb3VwcwARAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAEFsYXJtQ29uZGl0aW9uVHlwZUluc3RhbmNlAQBjCwEAYwtjCwAA" +
           "/////zYAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADURQ8AAC4ARNRFDwAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADVRQ8AAC4ARNVFDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAgAA1kUPAAAuAETWRQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQIAANdFDwAALgBE10UPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUCAADYRQ8AAC4ARNhFDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AgAA2UUPAAAuAETZRQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAA20UP" +
           "AAAuAETbRQ8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADcRQ8AAC4ARNxF" +
           "DwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAgAA3UUPAAAuAETd" +
           "RQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1lAgAA3kUPAAAu" +
           "AETeRQ8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3ViQ2xhc3NJZAIAAN9F" +
           "DwAALgBE30UPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAAQ29uZGl0aW9uU3Vi" +
           "Q2xhc3NOYW1lAgAA4EUPAAAuAETgRQ8AABUBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA0A" +
           "AABDb25kaXRpb25OYW1lAgAA4UUPAAAuAEThRQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "QnJhbmNoSWQCAADiRQ8AAC4AROJFDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4C" +
           "AADjRQ8AAC4ARONFDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAJ4j" +
           "AC8BACMjniMAAAAV/////wEBBQAAAAEALCMAAgAA9EUPAAEALCMAAgAA/UUPAAEALCMAAQDIIwEALCMA" +
           "AQDRIwEALCMAAQDaIwEAAAAVYIkKAgAAAAAAAgAAAElkAQCfIwAuAESfIwAAAAH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAOVFDwAALwEAKiPlRQ8AABP/////AQH/////AQAAABVgiQoC" +
           "AAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA5kUPAAAuAETmRQ8AAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAADnRQ8AAC8BACoj50UPAAAF/////wEB/////wEAAAAVYIkK" +
           "AgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAOhFDwAALgBE6EUPAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAHAAAAQ29tbWVudAIAAOlFDwAALwEAKiPpRQ8AABX/////AQH/////AQAAABVgiQoCAAAA" +
           "AAAPAAAAU291cmNlVGltZXN0YW1wAgAA6kUPAAAuAETqRQ8AAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAwAAABDbGllbnRVc2VySWQCAADrRQ8AAC4AROtFDwAADP////8BAf////8AAAAABGGCCgQAAAAA" +
           "AAcAAABEaXNhYmxlAgAA7EUPAAAvAQBEI+xFDwABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYA" +
           "AABFbmFibGUCAADtRQ8AAC8BAEMj7UUPAAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFk" +
           "ZENvbW1lbnQCAADuRQ8AAC8BAEUj7kUPAAEBAQAAAAEA+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAgAA70UPAAAuAETvRQ8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAA" +
           "AAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25k" +
           "aXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUCAAD0" +
           "RQ8AAC8BACMj9EUPAAAV/////wEBAQAAAAEALCMBAQCeIwEAAAAVYIkKAgAAAAAAAgAAAElkAgAA9UUP" +
           "AAAuAET1RQ8AAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UCAAAGRg8AAC8B" +
           "AJcjBkYPAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAB0YP" +
           "AAAuAEQHRg8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRl" +
           "bnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8A" +
           "AAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAA" +
           "AgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDIIwAvAQAjI8gjAAAAFf////8B" +
           "AQEAAAABACwjAQEAniMEAAAAFWCJCgIAAAAAAAIAAABJZAEAySMALgBEySMAAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQDMIwAuAETMIwAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAM0jAC4ARM0jAAABACYB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQDOIwAuAETOIwAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUBAHArAC4ARHArAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA8AAABTdXBwcmVzc2VkU3RhdGUBANEjAC8BACMj0SMAAAAV/////wEBAQAAAAEALCMB" +
           "AQCeIwIAAAAVYIkKAgAAAAAAAgAAAElkAQDSIwAuAETSIwAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAAVHJhbnNpdGlvblRpbWUBANYjAC4ARNYjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EQAAAE91dE9mU2VydmljZVN0YXRlAQDzPwAvAQAjI/M/AAAAFf////8BAf////8CAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAEA9D8ALgBE9D8AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25U" +
           "aW1lAQD4PwAuAET4PwAAAQAmAf////8BAf////8AAAAABGCACgEAAAAAAA0AAABTaGVsdmluZ1N0YXRl" +
           "AQDaIwAvAQBxC9ojAAABAAAAAQAsIwEBAJ4jBgAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQDb" +
           "IwAvAQDICtsjAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEA3CMALgBE3CMAAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDgIwAvAQDPCuAjAAAAFf////8B" +
           "Af////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA4SMALgBE4SMAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAFRyYW5zaXRpb25UaW1lAQDkIwAuAETkIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAwAAABVbnNoZWx2ZVRpbWUBAOUjAC4AROUjAAABACIB/////wEB/////wAAAAAEYYIKBAAAAAAACwAA" +
           "AFRpbWVkU2hlbHZlAQD9IwAvAQCFC/0jAAABAQEAAAABAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEA/iMALgBE/iMAAJYBAAAAAQAqAQEdAAAADAAAAFNoZWx2aW5nVGltZQEAIgH/" +
           "////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAIAAAAVW5zaGVsdmUBAPsj" +
           "AC8BAIML+yMAAAEBAQAAAAEA+QsAAQBVKwAAAAAEYYIKBAAAAAAADQAAAE9uZVNob3RTaGVsdmUBAPwj" +
           "AC8BAIQL/CMAAAEBAQAAAAEA+QsAAQBVKwAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2" +
           "ZWQBAP8jAC4ARP8jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABNYXhUaW1lU2hlbHZlZAEA" +
           "ACQALgBEACQAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQXVkaWJsZUVuYWJsZWQBAAVA" +
           "AC4ARAVAAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABBdWRpYmxlU291bmQBAAZAAC8BAEJG" +
           "BkAAAAEAsz//////AQH/////AAAAABVgiQoCAAAAAAAMAAAAU2lsZW5jZVN0YXRlAQD8PwAvAQAjI/w/" +
           "AAAAFf////8BAf////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA/T8ALgBE/T8AAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQABQAAuAEQBQAAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAcAAABPbkRlbGF5AQALQAAuAEQLQAAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAgAAABPZmZEZWxheQEADEAALgBEDEAAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARmly" +
           "c3RJbkdyb3VwRmxhZwEADUAALwA/DUAAAAAB/////wEB/////wAAAAAEYIAKAQAAAAAADAAAAEZpcnN0" +
           "SW5Hcm91cAEADkAALwEAFUAOQAAA/////wAAAAAVYIkKAgAAAAAADAAAAExhdGNoZWRTdGF0ZQEADkcA" +
           "LwEAIyMORwAAABX/////AQH/////AgAAABVgiQoCAAAAAAACAAAASWQBAA9HAC4ARA9HAAAAAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEAE0cALgBEE0cAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAALAAAAUmVBbGFybVRpbWUBABBAAC4ARBBAAAABACIB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEgAAAFJlQWxhcm1SZXBlYXRDb3VudAEAEUAALwA/EUAAAAAE/////wEB/////wAA" +
           "AAAEYYIKBAAAAAAABwAAAFNpbGVuY2UBABJAAC8BABJAEkAAAAEBAQAAAAEA+QsAAQBaQwAAAAAEYYIK" +
           "BAAAAAAACAAAAFN1cHByZXNzAQATQAAvAQATQBNAAAABAQEAAAABAPkLAAEASUMAAAAABGGCCgQAAAAA" +
           "AAkAAABTdXBwcmVzczIBAPxeAC8BAPxe/F4AAAEBAQAAAAEA+QsAAQBJQwEAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQD9XgAuAET9XgAAlgEAAAABACoBARYAAAAHAAAAQ29tbWVudAAV/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAACgAAAFVuc3VwcHJlc3MBAMxFAC8B" +
           "AMxFzEUAAAEBAQAAAAEA+QsAAQBJQwAAAAAEYYIKBAAAAAAACwAAAFVuc3VwcHJlc3MyAQD+XgAvAQD+" +
           "Xv5eAAABAQEAAAABAPkLAAEASUMBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/14ALgBE" +
           "/14AAJYBAAAAAQAqAQEWAAAABwAAAENvbW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAABEAAABSZW1vdmVGcm9tU2VydmljZQEAzUUALwEAzUXNRQAAAQEBAAAAAQD5" +
           "CwABAGtDAAAAAARhggoEAAAAAAASAAAAUmVtb3ZlRnJvbVNlcnZpY2UyAQAAXwAvAQAAXwBfAAABAQEA" +
           "AAABAPkLAAEAa0MBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAAV8ALgBEAV8AAJYBAAAA" +
           "AQAqAQEWAAAABwAAAENvbW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGC" +
           "CgQAAAAAAA4AAABQbGFjZUluU2VydmljZQEAzkUALwEAzkXORQAAAQEBAAAAAQD5CwABAGtDAAAAAARh" +
           "ggoEAAAAAAAPAAAAUGxhY2VJblNlcnZpY2UyAQACXwAvAQACXwJfAAABAQEAAAABAPkLAAEAa0MBAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAA18ALgBEA18AAJYBAAAAAQAqAQEWAAAABwAAAENv" +
           "bW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNl" +
           "dAEAF0cALwEAF0cXRwAAAQEBAAAAAQD5CwABAKU6AAAAAARhggoEAAAAAAAGAAAAUmVzZXQyAQAEXwAv" +
           "AQAEXwRfAAABAQEAAAABAPkLAAEApToBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABV8A" +
           "LgBEBV8AAJYBAAAAAQAqAQEWAAAABwAAAENvbW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAABMAAABHZXRHcm91cE1lbWJlcnNoaXBzAQCoYAAvAQCoYKhgAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAEJiAC4AREJiAACWAQAAAAEAKgEBGQAA" +
           "AAYAAABHcm91cHMAEQEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState ActiveState
        {
            get
            {
                return m_activeState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_activeState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_activeState = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> InputNode
        {
            get
            {
                return m_inputNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputNode = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState SuppressedState
        {
            get
            {
                return m_suppressedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState OutOfServiceState
        {
            get
            {
                return m_outOfServiceState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_outOfServiceState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_outOfServiceState = value;
            }
        }

        /// <remarks />
        public ShelvedStateMachineState ShelvingState
        {
            get
            {
                return m_shelvingState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingState = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SuppressedOrShelved
        {
            get
            {
                return m_suppressedOrShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedOrShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedOrShelved = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeShelved
        {
            get
            {
                return m_maxTimeShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeShelved = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AudibleEnabled
        {
            get
            {
                return m_audibleEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_audibleEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_audibleEnabled = value;
            }
        }

        /// <remarks />
        public AudioVariableState AudibleSound
        {
            get
            {
                return m_audibleSound;
            }

            set
            {
                if (!Object.ReferenceEquals(m_audibleSound, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_audibleSound = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState SilenceState
        {
            get
            {
                return m_silenceState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_silenceState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_silenceState = value;
            }
        }

        /// <remarks />
        public PropertyState<double> OnDelay
        {
            get
            {
                return m_onDelay;
            }

            set
            {
                if (!Object.ReferenceEquals(m_onDelay, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_onDelay = value;
            }
        }

        /// <remarks />
        public PropertyState<double> OffDelay
        {
            get
            {
                return m_offDelay;
            }

            set
            {
                if (!Object.ReferenceEquals(m_offDelay, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_offDelay = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<bool> FirstInGroupFlag
        {
            get
            {
                return m_firstInGroupFlag;
            }

            set
            {
                if (!Object.ReferenceEquals(m_firstInGroupFlag, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_firstInGroupFlag = value;
            }
        }

        /// <remarks />
        public AlarmGroupState FirstInGroup
        {
            get
            {
                return m_firstInGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_firstInGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_firstInGroup = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LatchedState
        {
            get
            {
                return m_latchedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_latchedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_latchedState = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ReAlarmTime
        {
            get
            {
                return m_reAlarmTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reAlarmTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reAlarmTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<short> ReAlarmRepeatCount
        {
            get
            {
                return m_reAlarmRepeatCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reAlarmRepeatCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reAlarmRepeatCount = value;
            }
        }

        /// <remarks />
        public MethodState Silence
        {
            get
            {
                return m_silenceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_silenceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_silenceMethod = value;
            }
        }

        /// <remarks />
        public MethodState Suppress
        {
            get
            {
                return m_suppressMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState Suppress2
        {
            get
            {
                return m_suppress2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppress2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppress2Method = value;
            }
        }

        /// <remarks />
        public MethodState Unsuppress
        {
            get
            {
                return m_unsuppressMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unsuppressMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unsuppressMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState Unsuppress2
        {
            get
            {
                return m_unsuppress2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unsuppress2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unsuppress2Method = value;
            }
        }

        /// <remarks />
        public MethodState RemoveFromService
        {
            get
            {
                return m_removeFromServiceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeFromServiceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeFromServiceMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState RemoveFromService2
        {
            get
            {
                return m_removeFromService2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeFromService2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeFromService2Method = value;
            }
        }

        /// <remarks />
        public MethodState PlaceInService
        {
            get
            {
                return m_placeInServiceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_placeInServiceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_placeInServiceMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState PlaceInService2
        {
            get
            {
                return m_placeInService2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_placeInService2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_placeInService2Method = value;
            }
        }

        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState Reset2
        {
            get
            {
                return m_reset2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reset2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reset2Method = value;
            }
        }

        /// <remarks />
        public GetGroupMembershipsMethodState GetGroupMemberships
        {
            get
            {
                return m_getGroupMembershipsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getGroupMembershipsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getGroupMembershipsMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_activeState != null)
            {
                children.Add(m_activeState);
            }

            if (m_inputNode != null)
            {
                children.Add(m_inputNode);
            }

            if (m_suppressedState != null)
            {
                children.Add(m_suppressedState);
            }

            if (m_outOfServiceState != null)
            {
                children.Add(m_outOfServiceState);
            }

            if (m_shelvingState != null)
            {
                children.Add(m_shelvingState);
            }

            if (m_suppressedOrShelved != null)
            {
                children.Add(m_suppressedOrShelved);
            }

            if (m_maxTimeShelved != null)
            {
                children.Add(m_maxTimeShelved);
            }

            if (m_audibleEnabled != null)
            {
                children.Add(m_audibleEnabled);
            }

            if (m_audibleSound != null)
            {
                children.Add(m_audibleSound);
            }

            if (m_silenceState != null)
            {
                children.Add(m_silenceState);
            }

            if (m_onDelay != null)
            {
                children.Add(m_onDelay);
            }

            if (m_offDelay != null)
            {
                children.Add(m_offDelay);
            }

            if (m_firstInGroupFlag != null)
            {
                children.Add(m_firstInGroupFlag);
            }

            if (m_firstInGroup != null)
            {
                children.Add(m_firstInGroup);
            }

            if (m_latchedState != null)
            {
                children.Add(m_latchedState);
            }

            if (m_reAlarmTime != null)
            {
                children.Add(m_reAlarmTime);
            }

            if (m_reAlarmRepeatCount != null)
            {
                children.Add(m_reAlarmRepeatCount);
            }

            if (m_silenceMethod != null)
            {
                children.Add(m_silenceMethod);
            }

            if (m_suppressMethod != null)
            {
                children.Add(m_suppressMethod);
            }

            if (m_suppress2Method != null)
            {
                children.Add(m_suppress2Method);
            }

            if (m_unsuppressMethod != null)
            {
                children.Add(m_unsuppressMethod);
            }

            if (m_unsuppress2Method != null)
            {
                children.Add(m_unsuppress2Method);
            }

            if (m_removeFromServiceMethod != null)
            {
                children.Add(m_removeFromServiceMethod);
            }

            if (m_removeFromService2Method != null)
            {
                children.Add(m_removeFromService2Method);
            }

            if (m_placeInServiceMethod != null)
            {
                children.Add(m_placeInServiceMethod);
            }

            if (m_placeInService2Method != null)
            {
                children.Add(m_placeInService2Method);
            }

            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            if (m_reset2Method != null)
            {
                children.Add(m_reset2Method);
            }

            if (m_getGroupMembershipsMethod != null)
            {
                children.Add(m_getGroupMembershipsMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActiveState:
                {
                    if (createOrReplace)
                    {
                        if (ActiveState == null)
                        {
                            if (replacement == null)
                            {
                                ActiveState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ActiveState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ActiveState;
                    break;
                }

                case Opc.Ua.BrowseNames.InputNode:
                {
                    if (createOrReplace)
                    {
                        if (InputNode == null)
                        {
                            if (replacement == null)
                            {
                                InputNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                InputNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = InputNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedState:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedState == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                SuppressedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = SuppressedState;
                    break;
                }

                case Opc.Ua.BrowseNames.OutOfServiceState:
                {
                    if (createOrReplace)
                    {
                        if (OutOfServiceState == null)
                        {
                            if (replacement == null)
                            {
                                OutOfServiceState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                OutOfServiceState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = OutOfServiceState;
                    break;
                }

                case Opc.Ua.BrowseNames.ShelvingState:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingState == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingState = new ShelvedStateMachineState(this);
                            }
                            else
                            {
                                ShelvingState = (ShelvedStateMachineState)replacement;
                            }
                        }
                    }

                    instance = ShelvingState;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedOrShelved:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedOrShelved == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedOrShelved = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SuppressedOrShelved = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SuppressedOrShelved;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeShelved:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeShelved == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeShelved = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeShelved = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeShelved;
                    break;
                }

                case Opc.Ua.BrowseNames.AudibleEnabled:
                {
                    if (createOrReplace)
                    {
                        if (AudibleEnabled == null)
                        {
                            if (replacement == null)
                            {
                                AudibleEnabled = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AudibleEnabled = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AudibleEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.AudibleSound:
                {
                    if (createOrReplace)
                    {
                        if (AudibleSound == null)
                        {
                            if (replacement == null)
                            {
                                AudibleSound = new AudioVariableState(this);
                            }
                            else
                            {
                                AudibleSound = (AudioVariableState)replacement;
                            }
                        }
                    }

                    instance = AudibleSound;
                    break;
                }

                case Opc.Ua.BrowseNames.SilenceState:
                {
                    if (createOrReplace)
                    {
                        if (SilenceState == null)
                        {
                            if (replacement == null)
                            {
                                SilenceState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                SilenceState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = SilenceState;
                    break;
                }

                case Opc.Ua.BrowseNames.OnDelay:
                {
                    if (createOrReplace)
                    {
                        if (OnDelay == null)
                        {
                            if (replacement == null)
                            {
                                OnDelay = new PropertyState<double>(this);
                            }
                            else
                            {
                                OnDelay = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = OnDelay;
                    break;
                }

                case Opc.Ua.BrowseNames.OffDelay:
                {
                    if (createOrReplace)
                    {
                        if (OffDelay == null)
                        {
                            if (replacement == null)
                            {
                                OffDelay = new PropertyState<double>(this);
                            }
                            else
                            {
                                OffDelay = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = OffDelay;
                    break;
                }

                case Opc.Ua.BrowseNames.FirstInGroupFlag:
                {
                    if (createOrReplace)
                    {
                        if (FirstInGroupFlag == null)
                        {
                            if (replacement == null)
                            {
                                FirstInGroupFlag = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                FirstInGroupFlag = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = FirstInGroupFlag;
                    break;
                }

                case Opc.Ua.BrowseNames.FirstInGroup:
                {
                    if (createOrReplace)
                    {
                        if (FirstInGroup == null)
                        {
                            if (replacement == null)
                            {
                                FirstInGroup = new AlarmGroupState(this);
                            }
                            else
                            {
                                FirstInGroup = (AlarmGroupState)replacement;
                            }
                        }
                    }

                    instance = FirstInGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.LatchedState:
                {
                    if (createOrReplace)
                    {
                        if (LatchedState == null)
                        {
                            if (replacement == null)
                            {
                                LatchedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LatchedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LatchedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ReAlarmTime:
                {
                    if (createOrReplace)
                    {
                        if (ReAlarmTime == null)
                        {
                            if (replacement == null)
                            {
                                ReAlarmTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                ReAlarmTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ReAlarmTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ReAlarmRepeatCount:
                {
                    if (createOrReplace)
                    {
                        if (ReAlarmRepeatCount == null)
                        {
                            if (replacement == null)
                            {
                                ReAlarmRepeatCount = new BaseDataVariableState<short>(this);
                            }
                            else
                            {
                                ReAlarmRepeatCount = (BaseDataVariableState<short>)replacement;
                            }
                        }
                    }

                    instance = ReAlarmRepeatCount;
                    break;
                }

                case Opc.Ua.BrowseNames.Silence:
                {
                    if (createOrReplace)
                    {
                        if (Silence == null)
                        {
                            if (replacement == null)
                            {
                                Silence = new MethodState(this);
                            }
                            else
                            {
                                Silence = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Silence;
                    break;
                }

                case Opc.Ua.BrowseNames.Suppress:
                {
                    if (createOrReplace)
                    {
                        if (Suppress == null)
                        {
                            if (replacement == null)
                            {
                                Suppress = new MethodState(this);
                            }
                            else
                            {
                                Suppress = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Suppress;
                    break;
                }

                case Opc.Ua.BrowseNames.Suppress2:
                {
                    if (createOrReplace)
                    {
                        if (Suppress2 == null)
                        {
                            if (replacement == null)
                            {
                                Suppress2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                Suppress2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Suppress2;
                    break;
                }

                case Opc.Ua.BrowseNames.Unsuppress:
                {
                    if (createOrReplace)
                    {
                        if (Unsuppress == null)
                        {
                            if (replacement == null)
                            {
                                Unsuppress = new MethodState(this);
                            }
                            else
                            {
                                Unsuppress = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Unsuppress;
                    break;
                }

                case Opc.Ua.BrowseNames.Unsuppress2:
                {
                    if (createOrReplace)
                    {
                        if (Unsuppress2 == null)
                        {
                            if (replacement == null)
                            {
                                Unsuppress2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                Unsuppress2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Unsuppress2;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveFromService:
                {
                    if (createOrReplace)
                    {
                        if (RemoveFromService == null)
                        {
                            if (replacement == null)
                            {
                                RemoveFromService = new MethodState(this);
                            }
                            else
                            {
                                RemoveFromService = (MethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveFromService;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveFromService2:
                {
                    if (createOrReplace)
                    {
                        if (RemoveFromService2 == null)
                        {
                            if (replacement == null)
                            {
                                RemoveFromService2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                RemoveFromService2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveFromService2;
                    break;
                }

                case Opc.Ua.BrowseNames.PlaceInService:
                {
                    if (createOrReplace)
                    {
                        if (PlaceInService == null)
                        {
                            if (replacement == null)
                            {
                                PlaceInService = new MethodState(this);
                            }
                            else
                            {
                                PlaceInService = (MethodState)replacement;
                            }
                        }
                    }

                    instance = PlaceInService;
                    break;
                }

                case Opc.Ua.BrowseNames.PlaceInService2:
                {
                    if (createOrReplace)
                    {
                        if (PlaceInService2 == null)
                        {
                            if (replacement == null)
                            {
                                PlaceInService2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                PlaceInService2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = PlaceInService2;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset2:
                {
                    if (createOrReplace)
                    {
                        if (Reset2 == null)
                        {
                            if (replacement == null)
                            {
                                Reset2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                Reset2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Reset2;
                    break;
                }

                case Opc.Ua.BrowseNames.GetGroupMemberships:
                {
                    if (createOrReplace)
                    {
                        if (GetGroupMemberships == null)
                        {
                            if (replacement == null)
                            {
                                GetGroupMemberships = new GetGroupMembershipsMethodState(this);
                            }
                            else
                            {
                                GetGroupMemberships = (GetGroupMembershipsMethodState)replacement;
                            }
                        }
                    }

                    instance = GetGroupMemberships;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_activeState;
        private PropertyState<NodeId> m_inputNode;
        private TwoStateVariableState m_suppressedState;
        private TwoStateVariableState m_outOfServiceState;
        private ShelvedStateMachineState m_shelvingState;
        private PropertyState<bool> m_suppressedOrShelved;
        private PropertyState<double> m_maxTimeShelved;
        private PropertyState<bool> m_audibleEnabled;
        private AudioVariableState m_audibleSound;
        private TwoStateVariableState m_silenceState;
        private PropertyState<double> m_onDelay;
        private PropertyState<double> m_offDelay;
        private BaseDataVariableState<bool> m_firstInGroupFlag;
        private AlarmGroupState m_firstInGroup;
        private TwoStateVariableState m_latchedState;
        private PropertyState<double> m_reAlarmTime;
        private BaseDataVariableState<short> m_reAlarmRepeatCount;
        private MethodState m_silenceMethod;
        private MethodState m_suppressMethod;
        private WithCommentMethodState m_suppress2Method;
        private MethodState m_unsuppressMethod;
        private WithCommentMethodState m_unsuppress2Method;
        private MethodState m_removeFromServiceMethod;
        private WithCommentMethodState m_removeFromService2Method;
        private MethodState m_placeInServiceMethod;
        private WithCommentMethodState m_placeInService2Method;
        private MethodState m_resetMethod;
        private WithCommentMethodState m_reset2Method;
        private GetGroupMembershipsMethodState m_getGroupMembershipsMethod;
        #endregion
    }
    #endif
    #endregion

    #region WithCommentMethodState Class
    #if (!OPCUA_EXCLUDE_WithCommentMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WithCommentMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public WithCommentMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new WithCommentMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFdpdGhDb21tZW50TWV0aG9kVHlwZQEABl8ALwEABl8GXwAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAdfAC4ARAdfAACWAQAAAAEAKgEBFgAA" +
           "AAcAAABDb21tZW50ABX/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public WithCommentMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            LocalizedText comment = (LocalizedText)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    comment);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult WithCommentMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        LocalizedText comment);
    #endif
    #endregion

    #region GetGroupMembershipsMethodState Class
    #if (!OPCUA_EXCLUDE_GetGroupMembershipsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetGroupMembershipsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetGroupMembershipsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetGroupMembershipsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAEdldEdyb3VwTWVtYmVyc2hpcHNNZXRob2RUeXBlAQCqYAAvAQCq" +
           "YKpgAAABAf////8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAENiAC4ARENiAACWAQAA" +
           "AAEAKgEBGQAAAAYAAABHcm91cHMAEQEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetGroupMembershipsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId[] groups = (NodeId[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref groups);
            }

            _outputArguments[0] = groups;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetGroupMembershipsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref NodeId[] groups);
    #endif
    #endregion

    #region AlarmGroupState Class
    #if (!OPCUA_EXCLUDE_AlarmGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmGroupState : FolderState
    {
        #region Constructors
        /// <remarks />
        public AlarmGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAEFsYXJtR3JvdXBUeXBlSW5zdGFuY2UBABVAAQAVQBVAAAD/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AlarmSuppressionGroupState Class
    #if (!OPCUA_EXCLUDE_AlarmSuppressionGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmSuppressionGroupState : AlarmGroupState
    {
        #region Constructors
        /// <remarks />
        public AlarmSuppressionGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmSuppressionGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAEFsYXJtU3VwcHJlc3Npb25Hcm91cFR5cGVJbnN0YW5jZQEAQH0B" +
           "AEB9QH0AAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ShelvedStateMachineState Class
    #if (!OPCUA_EXCLUDE_ShelvedStateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ShelvedStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <remarks />
        public ShelvedStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ShelvedStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TimedShelve2 != null)
            {
                TimedShelve2.Initialize(context, TimedShelve2_InitializationString);
            }

            if (Unshelve2 != null)
            {
                Unshelve2.Initialize(context, Unshelve2_InitializationString);
            }

            if (OneShotShelve2 != null)
            {
                OneShotShelve2.Initialize(context, OneShotShelve2_InitializationString);
            }
        }

        #region Initialization String
        private const string TimedShelve2_InitializationString =
           "//////////8EYYIKBAAAAAAADAAAAFRpbWVkU2hlbHZlMgEAtGAALwEAtGC0YAAAAQEDAAAAADUBAQB3" +
           "CwA1AQEAgQsBAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAtWAALgBEtWAA" +
           "AJYCAAAAAQAqAQEdAAAADAAAAFNoZWx2aW5nVGltZQEAIgH/////AAAAAAABACoBARYAAAAHAAAAQ29t" +
           "bWVudAAV/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string Unshelve2_InitializationString =
           "//////////8EYYIKBAAAAAAACQAAAFVuc2hlbHZlMgEAtmAALwEAtmC2YAAAAQEDAAAAADUBAQB8CwA1" +
           "AQEAfwsBAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAt2AALgBEt2AAAJYB" +
           "AAAAAQAqAQEWAAAABwAAAENvbW1lbnQAFf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string OneShotShelve2_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAE9uZVNob3RTaGVsdmUyAQC4YAAvAQC4YLhgAAABAQMAAAAANQEB" +
           "AHgLADUBAQB+CwEA+QsAAQBVKwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC5YAAuAES5" +
           "YAAAlgEAAAABACoBARYAAAAHAAAAQ29tbWVudAAV/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNoZWx2ZWRTdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAHELAQBx" +
           "C3ELAAD/////CAAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAgAAq0YPAAAvAQDICqtGDwAAFf//" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAIAAKxGDwAALgBErEYPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADAAAAFVuc2hlbHZlVGltZQEAmyMALgBEmyMAAAEAIgH/////AQH/////AAAAAARhggoE" +
           "AAAAAAALAAAAVGltZWRTaGVsdmUBAIULAC8BAIULhQsAAAEBAwAAAAA1AQEAdwsANQEBAIELAQD5CwAB" +
           "AFUrAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAK8LAC4ARK8LAACWAQAAAAEAKgEBHQAA" +
           "AAwAAABTaGVsdmluZ1RpbWUBACIB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAADAAAAFRpbWVkU2hlbHZlMgEAtGAALwEAtGC0YAAAAQEDAAAAADUBAQB3CwA1AQEAgQsBAPkL" +
           "AAEAVSsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAtWAALgBEtWAAAJYCAAAAAQAqAQEd" +
           "AAAADAAAAFNoZWx2aW5nVGltZQEAIgH/////AAAAAAABACoBARYAAAAHAAAAQ29tbWVudAAV/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAACAAAAFVuc2hlbHZlAQCDCwAvAQCD" +
           "C4MLAAABAQMAAAAANQEBAHwLADUBAQB/CwEA+QsAAQBVKwAAAAAEYYIKBAAAAAAACQAAAFVuc2hlbHZl" +
           "MgEAtmAALwEAtmC2YAAAAQEDAAAAADUBAQB8CwA1AQEAfwsBAPkLAAEAVSsBAAAAF2CpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEAt2AALgBEt2AAAJYBAAAAAQAqAQEWAAAABwAAAENvbW1lbnQAFf////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAA0AAABPbmVTaG90U2hlbHZlAQCE" +
           "CwAvAQCEC4QLAAABAQMAAAAANQEBAHgLADUBAQB+CwEA+QsAAQBVKwAAAAAEYYIKBAAAAAAADgAAAE9u" +
           "ZVNob3RTaGVsdmUyAQC4YAAvAQC4YLhgAAABAQMAAAAANQEBAHgLADUBAQB+CwEA+QsAAQBVKwEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC5YAAuAES5YAAAlgEAAAABACoBARYAAAAHAAAAQ29t" +
           "bWVudAAV/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> UnshelveTime
        {
            get
            {
                return m_unshelveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveTime = value;
            }
        }

        /// <remarks />
        public TimedShelveMethodState TimedShelve
        {
            get
            {
                return m_timedShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timedShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timedShelveMethod = value;
            }
        }

        /// <remarks />
        public TimedShelve2MethodState TimedShelve2
        {
            get
            {
                return m_timedShelve2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timedShelve2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timedShelve2Method = value;
            }
        }

        /// <remarks />
        public MethodState Unshelve
        {
            get
            {
                return m_unshelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState Unshelve2
        {
            get
            {
                return m_unshelve2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelve2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelve2Method = value;
            }
        }

        /// <remarks />
        public MethodState OneShotShelve
        {
            get
            {
                return m_oneShotShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oneShotShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oneShotShelveMethod = value;
            }
        }

        /// <remarks />
        public WithCommentMethodState OneShotShelve2
        {
            get
            {
                return m_oneShotShelve2Method;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oneShotShelve2Method, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oneShotShelve2Method = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_unshelveTime != null)
            {
                children.Add(m_unshelveTime);
            }

            if (m_timedShelveMethod != null)
            {
                children.Add(m_timedShelveMethod);
            }

            if (m_timedShelve2Method != null)
            {
                children.Add(m_timedShelve2Method);
            }

            if (m_unshelveMethod != null)
            {
                children.Add(m_unshelveMethod);
            }

            if (m_unshelve2Method != null)
            {
                children.Add(m_unshelve2Method);
            }

            if (m_oneShotShelveMethod != null)
            {
                children.Add(m_oneShotShelveMethod);
            }

            if (m_oneShotShelve2Method != null)
            {
                children.Add(m_oneShotShelve2Method);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UnshelveTime:
                {
                    if (createOrReplace)
                    {
                        if (UnshelveTime == null)
                        {
                            if (replacement == null)
                            {
                                UnshelveTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                UnshelveTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = UnshelveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.TimedShelve:
                {
                    if (createOrReplace)
                    {
                        if (TimedShelve == null)
                        {
                            if (replacement == null)
                            {
                                TimedShelve = new TimedShelveMethodState(this);
                            }
                            else
                            {
                                TimedShelve = (TimedShelveMethodState)replacement;
                            }
                        }
                    }

                    instance = TimedShelve;
                    break;
                }

                case Opc.Ua.BrowseNames.TimedShelve2:
                {
                    if (createOrReplace)
                    {
                        if (TimedShelve2 == null)
                        {
                            if (replacement == null)
                            {
                                TimedShelve2 = new TimedShelve2MethodState(this);
                            }
                            else
                            {
                                TimedShelve2 = (TimedShelve2MethodState)replacement;
                            }
                        }
                    }

                    instance = TimedShelve2;
                    break;
                }

                case Opc.Ua.BrowseNames.Unshelve:
                {
                    if (createOrReplace)
                    {
                        if (Unshelve == null)
                        {
                            if (replacement == null)
                            {
                                Unshelve = new MethodState(this);
                            }
                            else
                            {
                                Unshelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Unshelve;
                    break;
                }

                case Opc.Ua.BrowseNames.Unshelve2:
                {
                    if (createOrReplace)
                    {
                        if (Unshelve2 == null)
                        {
                            if (replacement == null)
                            {
                                Unshelve2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                Unshelve2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Unshelve2;
                    break;
                }

                case Opc.Ua.BrowseNames.OneShotShelve:
                {
                    if (createOrReplace)
                    {
                        if (OneShotShelve == null)
                        {
                            if (replacement == null)
                            {
                                OneShotShelve = new MethodState(this);
                            }
                            else
                            {
                                OneShotShelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = OneShotShelve;
                    break;
                }

                case Opc.Ua.BrowseNames.OneShotShelve2:
                {
                    if (createOrReplace)
                    {
                        if (OneShotShelve2 == null)
                        {
                            if (replacement == null)
                            {
                                OneShotShelve2 = new WithCommentMethodState(this);
                            }
                            else
                            {
                                OneShotShelve2 = (WithCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = OneShotShelve2;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_unshelveTime;
        private TimedShelveMethodState m_timedShelveMethod;
        private TimedShelve2MethodState m_timedShelve2Method;
        private MethodState m_unshelveMethod;
        private WithCommentMethodState m_unshelve2Method;
        private MethodState m_oneShotShelveMethod;
        private WithCommentMethodState m_oneShotShelve2Method;
        #endregion
    }
    #endif
    #endregion

    #region TimedShelveMethodState Class
    #if (!OPCUA_EXCLUDE_TimedShelveMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TimedShelveMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public TimedShelveMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new TimedShelveMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFRpbWVkU2hlbHZlTWV0aG9kVHlwZQEA1hcALwEA1hfWFwAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANcXAC4ARNcXAACWAQAAAAEAKgEBHQAA" +
           "AAwAAABTaGVsdmluZ1RpbWUBACIB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public TimedShelveMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            double shelvingTime = (double)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    shelvingTime);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult TimedShelveMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        double shelvingTime);
    #endif
    #endregion

    #region TimedShelve2MethodState Class
    #if (!OPCUA_EXCLUDE_TimedShelve2MethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TimedShelve2MethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public TimedShelve2MethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new TimedShelve2MethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFRpbWVkU2hlbHZlMk1ldGhvZFR5cGUBAEViAC8BAEViRWIAAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBGYgAuAERGYgAAlgIAAAABACoBAR0A" +
           "AAAMAAAAU2hlbHZpbmdUaW1lAQAiAf////8AAAAAAAEAKgEBFgAAAAcAAABDb21tZW50ABX/////AAAA" +
           "AAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public TimedShelve2MethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            double shelvingTime = (double)_inputArguments[0];
            LocalizedText comment = (LocalizedText)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    shelvingTime,
                    comment);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult TimedShelve2MethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        double shelvingTime,
        LocalizedText comment);
    #endif
    #endregion

    #region LimitAlarmState Class
    #if (!OPCUA_EXCLUDE_LimitAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class LimitAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <remarks />
        public LimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.LimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighLimit != null)
            {
                HighHighLimit.Initialize(context, HighHighLimit_InitializationString);
            }

            if (HighLimit != null)
            {
                HighLimit.Initialize(context, HighLimit_InitializationString);
            }

            if (LowLimit != null)
            {
                LowLimit.Initialize(context, LowLimit_InitializationString);
            }

            if (LowLowLimit != null)
            {
                LowLowLimit.Initialize(context, LowLowLimit_InitializationString);
            }

            if (BaseHighHighLimit != null)
            {
                BaseHighHighLimit.Initialize(context, BaseHighHighLimit_InitializationString);
            }

            if (BaseHighLimit != null)
            {
                BaseHighLimit.Initialize(context, BaseHighLimit_InitializationString);
            }

            if (BaseLowLimit != null)
            {
                BaseLowLimit.Initialize(context, BaseLowLimit_InitializationString);
            }

            if (BaseLowLowLimit != null)
            {
                BaseLowLowLimit.Initialize(context, BaseLowLowLimit_InitializationString);
            }

            if (SeverityHighHigh != null)
            {
                SeverityHighHigh.Initialize(context, SeverityHighHigh_InitializationString);
            }

            if (SeverityHigh != null)
            {
                SeverityHigh.Initialize(context, SeverityHigh_InitializationString);
            }

            if (SeverityLow != null)
            {
                SeverityLow.Initialize(context, SeverityLow_InitializationString);
            }

            if (SeverityLowLow != null)
            {
                SeverityLowLow.Initialize(context, SeverityLowLow_InitializationString);
            }

            if (HighHighDeadband != null)
            {
                HighHighDeadband.Initialize(context, HighHighDeadband_InitializationString);
            }

            if (HighDeadband != null)
            {
                HighDeadband.Initialize(context, HighDeadband_InitializationString);
            }

            if (LowDeadband != null)
            {
                LowDeadband.Initialize(context, LowDeadband_InitializationString);
            }

            if (LowLowDeadband != null)
            {
                LowLowDeadband.Initialize(context, LowLowDeadband_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoTGltaXQBAHQrAC4ARHQrAAAAC/////8BAf////8A" +
           "AAAA";

        private const string HighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hMaW1pdAEAdSsALgBEdSsAAAAL/////wEB/////wAAAAA=";

        private const string LowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd0xpbWl0AQB2KwAuAER2KwAAAAv/////AQH/////AAAAAA==";

        private const string LowLowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd0xpbWl0AQB3KwAuAER3KwAAAAv/////AQH/////AAAA" +
           "AA==";

        private const string BaseHighHighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAEJhc2VIaWdoSGlnaExpbWl0AQC8QAAuAES8QAAAAAv/////AQH/" +
           "////AAAAAA==";

        private const string BaseHighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEJhc2VIaWdoTGltaXQBAL1AAC4ARL1AAAAAC/////8BAf////8A" +
           "AAAA";

        private const string BaseLowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAEJhc2VMb3dMaW1pdAEAvkAALgBEvkAAAAAL/////wEB/////wAA" +
           "AAA=";

        private const string BaseLowLowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEJhc2VMb3dMb3dMaW1pdAEAv0AALgBEv0AAAAAL/////wEB////" +
           "/wAAAAA=";

        private const string SeverityHighHigh_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAFNldmVyaXR5SGlnaEhpZ2gBAMJgAC4ARMJgAAAABf////8BAf//" +
           "//8AAAAA";

        private const string SeverityHigh_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFNldmVyaXR5SGlnaAEAw2AALgBEw2AAAAAF/////wEB/////wAA" +
           "AAA=";

        private const string SeverityLow_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFNldmVyaXR5TG93AQDEYAAuAETEYAAAAAX/////AQH/////AAAA" +
           "AA==";

        private const string SeverityLowLow_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFNldmVyaXR5TG93TG93AQDFYAAuAETFYAAAAAX/////AQH/////" +
           "AAAAAA==";

        private const string HighHighDeadband_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEhpZ2hIaWdoRGVhZGJhbmQBAMZgAC4ARMZgAAAAC/////8BAf//" +
           "//8AAAAA";

        private const string HighDeadband_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAEhpZ2hEZWFkYmFuZAEAx2AALgBEx2AAAAAL/////wEB/////wAA" +
           "AAA=";

        private const string LowDeadband_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0RlYWRiYW5kAQDIYAAuAETIYAAAAAv/////AQH/////AAAA" +
           "AA==";

        private const string LowLowDeadband_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExvd0xvd0RlYWRiYW5kAQDJYAAuAETJYAAAAAv/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFgAAAExpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAIsLAQCLC4sLAAD/////" +
           "LAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAALhGDwAALgBEuEYPAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQIAALlGDwAALgBEuUYPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUCAAC6Rg8AAC4ARLpGDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAgAAu0YPAAAuAES7Rg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQIA" +
           "ALxGDwAALgBEvEYPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUCAAC9" +
           "Rg8AAC4ARL1GDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAAC/Rg8AAC4A" +
           "RL9GDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAMBGDwAALgBEwEYPAAAF" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAADBRg8AAC4ARMFGDwAA" +
           "Ef////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUCAADCRg8AAC4ARMJG" +
           "DwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lkAgAAw0YPAAAu" +
           "AETDRg8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRpb25TdWJDbGFz" +
           "c05hbWUCAADERg8AAC4ARMRGDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADQAAAENv" +
           "bmRpdGlvbk5hbWUCAADFRg8AAC4ARMVGDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFu" +
           "Y2hJZAIAAMZGDwAALgBExkYPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgIAAMdG" +
           "DwAALgBEx0YPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQIAAMlGDwAA" +
           "LwEAIyPJRg8AABX/////AQEFAAAAAQAsIwACAADhRg8AAQAsIwACAADqRg8AAQAsIwACAAD3Rg8AAQAs" +
           "IwACAAABRw8AAQAsIwACAAATRw8AAQAAABVgiQoCAAAAAAACAAAASWQCAADKRg8AAC4ARMpGDwAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAA0kYPAAAvAQAqI9JGDwAAE/////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAADTRg8AAC4ARNNGDwABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAANRGDwAALwEAKiPURg8AAAX/////AQH/" +
           "////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA1UYPAAAuAETVRg8AAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAA1kYPAAAvAQAqI9ZGDwAAFf////8BAf////8B" +
           "AAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAADXRg8AAC4ARNdGDwABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAANhGDwAALgBE2EYPAAAM/////wEB/////wAA" +
           "AAAEYYIKBAAAAAAABwAAAERpc2FibGUCAADZRg8AAC8BAEQj2UYPAAEBAQAAAAEA+QsAAQDzCgAAAAAE" +
           "YYIKBAAAAAAABgAAAEVuYWJsZQIAANpGDwAALwEAQyPaRg8AAQEBAAAAAQD5CwABAPMKAAAAAARhggoE" +
           "AAAAAAAKAAAAQWRkQ29tbWVudAIAANtGDwAALwEARSPbRg8AAQEBAAAAAQD5CwABAA0LAQAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADcRg8AAC4ARNxGDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVu" +
           "dElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVu" +
           "dC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQg" +
           "dG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNr" +
           "ZWRTdGF0ZQIAAOFGDwAALwEAIyPhRg8AABX/////AQEBAAAAAQAsIwECAADJRg8AAQAAABVgiQoCAAAA" +
           "AAACAAAASWQCAADiRg8AAC4AROJGDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3ds" +
           "ZWRnZQIAAPNGDwAALwEAlyPzRg8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMCAAD0Rg8AAC4ARPRGDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMA" +
           "AAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAA" +
           "Q29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlv" +
           "bi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUCAAD3Rg8A" +
           "AC8BACMj90YPAAAV/////wEBAQAAAAEALCMBAgAAyUYPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA+EYP" +
           "AAAuAET4Rg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAAAEcPAAAuAEQA" +
           "Rw8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAIAACxHDwAA" +
           "LgBELEcPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAEhpZ2hIaWdoTGltaXQBAHQrAC4ARHQr" +
           "AAAAC/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABIaWdoTGltaXQBAHUrAC4ARHUrAAAAC/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABMb3dMaW1pdAEAdisALgBEdisAAAAL/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACwAAAExvd0xvd0xpbWl0AQB3KwAuAER3KwAAAAv/////AQH/////AAAAABVgiQoCAAAA" +
           "AAARAAAAQmFzZUhpZ2hIaWdoTGltaXQBALxAAC4ARLxAAAAAC/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA0AAABCYXNlSGlnaExpbWl0AQC9QAAuAES9QAAAAAv/////AQH/////AAAAABVgiQoCAAAAAAAMAAAA" +
           "QmFzZUxvd0xpbWl0AQC+QAAuAES+QAAAAAv/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQmFzZUxv" +
           "d0xvd0xpbWl0AQC/QAAuAES/QAAAAAv/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAU2V2ZXJpdHlI" +
           "aWdoSGlnaAEAwmAALgBEwmAAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFNldmVyaXR5SGln" +
           "aAEAw2AALgBEw2AAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFNldmVyaXR5TG93AQDEYAAu" +
           "AETEYAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAU2V2ZXJpdHlMb3dMb3cBAMVgAC4ARMVg" +
           "AAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABIaWdoSGlnaERlYWRiYW5kAQDGYAAuAETGYAAA" +
           "AAv/////AQH/////AAAAABVgiQoCAAAAAAAMAAAASGlnaERlYWRiYW5kAQDHYAAuAETHYAAAAAv/////" +
           "AQH/////AAAAABVgiQoCAAAAAAALAAAATG93RGVhZGJhbmQBAMhgAC4ARMhgAAAAC/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA4AAABMb3dMb3dEZWFkYmFuZAEAyWAALgBEyWAAAAAL/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> HighHighLimit
        {
            get
            {
                return m_highHighLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> HighLimit
        {
            get
            {
                return m_highLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLimit
        {
            get
            {
                return m_lowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLowLimit
        {
            get
            {
                return m_lowLowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> BaseHighHighLimit
        {
            get
            {
                return m_baseHighHighLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseHighHighLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseHighHighLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> BaseHighLimit
        {
            get
            {
                return m_baseHighLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseHighLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseHighLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> BaseLowLimit
        {
            get
            {
                return m_baseLowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseLowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseLowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> BaseLowLowLimit
        {
            get
            {
                return m_baseLowLowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseLowLowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseLowLowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> SeverityHighHigh
        {
            get
            {
                return m_severityHighHigh;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severityHighHigh, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severityHighHigh = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> SeverityHigh
        {
            get
            {
                return m_severityHigh;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severityHigh, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severityHigh = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> SeverityLow
        {
            get
            {
                return m_severityLow;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severityLow, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severityLow = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> SeverityLowLow
        {
            get
            {
                return m_severityLowLow;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severityLowLow, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severityLowLow = value;
            }
        }

        /// <remarks />
        public PropertyState<double> HighHighDeadband
        {
            get
            {
                return m_highHighDeadband;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighDeadband, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighDeadband = value;
            }
        }

        /// <remarks />
        public PropertyState<double> HighDeadband
        {
            get
            {
                return m_highDeadband;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highDeadband, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highDeadband = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowDeadband
        {
            get
            {
                return m_lowDeadband;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowDeadband, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowDeadband = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLowDeadband
        {
            get
            {
                return m_lowLowDeadband;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowDeadband, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowDeadband = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighLimit != null)
            {
                children.Add(m_highHighLimit);
            }

            if (m_highLimit != null)
            {
                children.Add(m_highLimit);
            }

            if (m_lowLimit != null)
            {
                children.Add(m_lowLimit);
            }

            if (m_lowLowLimit != null)
            {
                children.Add(m_lowLowLimit);
            }

            if (m_baseHighHighLimit != null)
            {
                children.Add(m_baseHighHighLimit);
            }

            if (m_baseHighLimit != null)
            {
                children.Add(m_baseHighLimit);
            }

            if (m_baseLowLimit != null)
            {
                children.Add(m_baseLowLimit);
            }

            if (m_baseLowLowLimit != null)
            {
                children.Add(m_baseLowLowLimit);
            }

            if (m_severityHighHigh != null)
            {
                children.Add(m_severityHighHigh);
            }

            if (m_severityHigh != null)
            {
                children.Add(m_severityHigh);
            }

            if (m_severityLow != null)
            {
                children.Add(m_severityLow);
            }

            if (m_severityLowLow != null)
            {
                children.Add(m_severityLowLow);
            }

            if (m_highHighDeadband != null)
            {
                children.Add(m_highHighDeadband);
            }

            if (m_highDeadband != null)
            {
                children.Add(m_highDeadband);
            }

            if (m_lowDeadband != null)
            {
                children.Add(m_lowDeadband);
            }

            if (m_lowLowDeadband != null)
            {
                children.Add(m_lowLowDeadband);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighHighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighHighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighHighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighHighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.HighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseHighHighLimit:
                {
                    if (createOrReplace)
                    {
                        if (BaseHighHighLimit == null)
                        {
                            if (replacement == null)
                            {
                                BaseHighHighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                BaseHighHighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = BaseHighHighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseHighLimit:
                {
                    if (createOrReplace)
                    {
                        if (BaseHighLimit == null)
                        {
                            if (replacement == null)
                            {
                                BaseHighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                BaseHighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = BaseHighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseLowLimit:
                {
                    if (createOrReplace)
                    {
                        if (BaseLowLimit == null)
                        {
                            if (replacement == null)
                            {
                                BaseLowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                BaseLowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = BaseLowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseLowLowLimit:
                {
                    if (createOrReplace)
                    {
                        if (BaseLowLowLimit == null)
                        {
                            if (replacement == null)
                            {
                                BaseLowLowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                BaseLowLowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = BaseLowLowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.SeverityHighHigh:
                {
                    if (createOrReplace)
                    {
                        if (SeverityHighHigh == null)
                        {
                            if (replacement == null)
                            {
                                SeverityHighHigh = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                SeverityHighHigh = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = SeverityHighHigh;
                    break;
                }

                case Opc.Ua.BrowseNames.SeverityHigh:
                {
                    if (createOrReplace)
                    {
                        if (SeverityHigh == null)
                        {
                            if (replacement == null)
                            {
                                SeverityHigh = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                SeverityHigh = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = SeverityHigh;
                    break;
                }

                case Opc.Ua.BrowseNames.SeverityLow:
                {
                    if (createOrReplace)
                    {
                        if (SeverityLow == null)
                        {
                            if (replacement == null)
                            {
                                SeverityLow = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                SeverityLow = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = SeverityLow;
                    break;
                }

                case Opc.Ua.BrowseNames.SeverityLowLow:
                {
                    if (createOrReplace)
                    {
                        if (SeverityLowLow == null)
                        {
                            if (replacement == null)
                            {
                                SeverityLowLow = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                SeverityLowLow = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = SeverityLowLow;
                    break;
                }

                case Opc.Ua.BrowseNames.HighHighDeadband:
                {
                    if (createOrReplace)
                    {
                        if (HighHighDeadband == null)
                        {
                            if (replacement == null)
                            {
                                HighHighDeadband = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighHighDeadband = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighHighDeadband;
                    break;
                }

                case Opc.Ua.BrowseNames.HighDeadband:
                {
                    if (createOrReplace)
                    {
                        if (HighDeadband == null)
                        {
                            if (replacement == null)
                            {
                                HighDeadband = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighDeadband = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighDeadband;
                    break;
                }

                case Opc.Ua.BrowseNames.LowDeadband:
                {
                    if (createOrReplace)
                    {
                        if (LowDeadband == null)
                        {
                            if (replacement == null)
                            {
                                LowDeadband = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowDeadband = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowDeadband;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowDeadband:
                {
                    if (createOrReplace)
                    {
                        if (LowLowDeadband == null)
                        {
                            if (replacement == null)
                            {
                                LowLowDeadband = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLowDeadband = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLowDeadband;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_highHighLimit;
        private PropertyState<double> m_highLimit;
        private PropertyState<double> m_lowLimit;
        private PropertyState<double> m_lowLowLimit;
        private PropertyState<double> m_baseHighHighLimit;
        private PropertyState<double> m_baseHighLimit;
        private PropertyState<double> m_baseLowLimit;
        private PropertyState<double> m_baseLowLowLimit;
        private PropertyState<ushort> m_severityHighHigh;
        private PropertyState<ushort> m_severityHigh;
        private PropertyState<ushort> m_severityLow;
        private PropertyState<ushort> m_severityLowLow;
        private PropertyState<double> m_highHighDeadband;
        private PropertyState<double> m_highDeadband;
        private PropertyState<double> m_lowDeadband;
        private PropertyState<double> m_lowLowDeadband;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitStateMachineState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitStateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <remarks />
        public ExclusiveLimitStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEV4Y2x1c2l2ZUxpbWl0U3RhdGVNYWNoaW5lVHlwZUluc3RhbmNl" +
           "AQBmJAEAZiRmJAAA/////wEAAAAVYIkKAgAAAAAADAAAAEN1cnJlbnRTdGF0ZQIAAF5HDwAALwEAyApe" +
           "Rw8AABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQCAABfRw8AAC4ARF9HDwAAEf////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public ExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAH0kAQB9" +
           "JH0kAAD/////HQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAGtHDwAALgBEa0cPAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAGxHDwAALgBEbEcPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAABtRw8AAC4ARG1HDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAgAAbkcPAAAuAERuRw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAE" +
           "AAAAVGltZQIAAG9HDwAALgBEb0cPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2" +
           "ZVRpbWUCAABwRw8AAC4ARHBHDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UC" +
           "AAByRw8AAC4ARHJHDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAHNHDwAA" +
           "LgBEc0cPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAAB0Rw8A" +
           "AC4ARHRHDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUCAAB1" +
           "Rw8AAC4ARHVHDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lk" +
           "AgAAdkcPAAAuAER2Rw8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRp" +
           "b25TdWJDbGFzc05hbWUCAAB3Rw8AAC4ARHdHDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUCAAB4Rw8AAC4ARHhHDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAgAAABCcmFuY2hJZAIAAHlHDwAALgBEeUcPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJl" +
           "dGFpbgIAAHpHDwAALgBEekcPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0" +
           "ZQIAAHxHDwAALwEAIyN8Rw8AABX/////AQEFAAAAAQAsIwACAACURw8AAQAsIwACAACdRw8AAQAsIwAB" +
           "ALYkAQAsIwACAACrRw8AAQAsIwACAAC9Rw8AAQAAABVgiQoCAAAAAAACAAAASWQCAAB9Rw8AAC4ARH1H" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAAhUcPAAAvAQAqI4VHDwAAE///" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAACGRw8AAC4ARIZHDwABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAAIdHDwAALwEAKiOHRw8AAAX/" +
           "////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAiEcPAAAuAESIRw8AAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAAiUcPAAAvAQAqI4lHDwAAFf////8B" +
           "Af////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAACKRw8AAC4ARIpHDwABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAItHDwAALgBEi0cPAAAM/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAACMRw8AAC8BAEQjjEcPAAEBAQAAAAEA+QsAAQDz" +
           "CgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAI1HDwAALwEAQyONRw8AAQEBAAAAAQD5CwABAPMKAAAA" +
           "AARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAI5HDwAALwEARSOORw8AAQEBAAAAAQD5CwABAA0LAQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAACPRw8AAC4ARI9HDwCWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAQWNrZWRTdGF0ZQIAAJRHDwAALwEAIyOURw8AABX/////AQEBAAAAAQAsIwECAAB8Rw8AAQAAABVg" +
           "iQoCAAAAAAACAAAASWQCAACVRw8AAC4ARJVHDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABB" +
           "Y2tub3dsZWRnZQIAAKZHDwAALwEAlyOmRw8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMCAACnRw8AAC4ARKdHDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////" +
           "AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIA" +
           "AAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNv" +
           "bmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUB" +
           "ALYkAC8BACMjtiQAAAAV/////wEBAgAAAAEALCMBAgAAfEcPAAEALCMAAQDvJAEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQC3JAAuAES3JAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAA" +
           "qkcPAAAuAESqRw8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZl" +
           "ZAIAANZHDwAALgBE1kcPAAAB/////wEB/////wAAAAAEYIAKAQAAAAAACgAAAExpbWl0U3RhdGUBAO8k" +
           "AC8BAGYk7yQAAAEAAAABACwjAQEAtiQCAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBAPAkAC8B" +
           "AMgK8CQAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDxJAAuAETxJAAAABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAOAAAATGFzdFRyYW5zaXRpb24BAPUkAC8BAM8K9SQAAAAV/////wEB////" +
           "/wIAAAAVYIkKAgAAAAAAAgAAAElkAQD2JAAuAET2JAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAO" +
           "AAAAVHJhbnNpdGlvblRpbWUBAPkkAC4ARPkkAAABACYB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ExclusiveLimitStateMachineState LimitState
        {
            get
            {
                return m_limitState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_limitState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_limitState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_limitState != null)
            {
                children.Add(m_limitState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LimitState:
                {
                    if (createOrReplace)
                    {
                        if (LimitState == null)
                        {
                            if (replacement == null)
                            {
                                LimitState = new ExclusiveLimitStateMachineState(this);
                            }
                            else
                            {
                                LimitState = (ExclusiveLimitStateMachineState)replacement;
                            }
                        }
                    }

                    instance = LimitState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ExclusiveLimitStateMachineState m_limitState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLimitAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public NonExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighState != null)
            {
                HighHighState.Initialize(context, HighHighState_InitializationString);
            }

            if (HighState != null)
            {
                HighState.Initialize(context, HighState_InitializationString);
            }

            if (LowState != null)
            {
                LowState.Initialize(context, LowState_InitializationString);
            }

            if (LowLowState != null)
            {
                LowLowState.Initialize(context, LowLowState_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighState_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoU3RhdGUBACQnAC8BACMjJCcAAAAV/////wEBAQAA" +
           "AAEALCMBAQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQAlJwAuAEQlJwAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBACknAC4ARCknAAABACYB/////wEB/////wAAAAA=";

        private const string HighState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hTdGF0ZQEALScALwEAIyMtJwAAABX/////AQEBAAAAAQAs" +
           "IwEBAOsmAgAAABVgiQoCAAAAAAACAAAASWQBAC4nAC4ARC4nAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABUcmFuc2l0aW9uVGltZQEAMicALgBEMicAAAEAJgH/////AQH/////AAAAAA==";

        private const string LowState_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd1N0YXRlAQA2JwAvAQAjIzYnAAAAFf////8BAQEAAAABACwj" +
           "AQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEANycALgBENycAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAFRyYW5zaXRpb25UaW1lAQA7JwAuAEQ7JwAAAQAmAf////8BAf////8AAAAA";

        private const string LowLowState_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd1N0YXRlAQA/JwAvAQAjIz8nAAAAFf////8BAQEAAAAB" +
           "ACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEAQCcALgBEQCcAAAAB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQBEJwAuAEREJwAAAQAmAf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBALIm" +
           "AQCyJrImAAD/////IAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAABhIDwAALgBEGEgPAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAABlIDwAALgBEGUgPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAAaSA8AAC4ARBpIDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAG0gPAAAuAEQbSA8AAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAEAAAAVGltZQIAABxIDwAALgBEHEgPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVj" +
           "ZWl2ZVRpbWUCAAAdSA8AAC4ARB1IDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3Nh" +
           "Z2UCAAAfSA8AAC4ARB9IDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAACBI" +
           "DwAALgBEIEgPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAAAh" +
           "SA8AAC4ARCFIDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUC" +
           "AAAiSA8AAC4ARCJIDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFz" +
           "c0lkAgAAI0gPAAAuAEQjSA8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25k" +
           "aXRpb25TdWJDbGFzc05hbWUCAAAkSA8AAC4ARCRIDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAADQAAAENvbmRpdGlvbk5hbWUCAAAlSA8AAC4ARCVIDwAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABCcmFuY2hJZAIAACZIDwAALgBEJkgPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAA" +
           "AFJldGFpbgIAACdIDwAALgBEJ0gPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRT" +
           "dGF0ZQIAAClIDwAALwEAIyMpSA8AABX/////AQEFAAAAAQAsIwACAABBSA8AAQAsIwACAABKSA8AAQAs" +
           "IwABAOsmAQAsIwACAABYSA8AAQAsIwACAABqSA8AAQAAABVgiQoCAAAAAAACAAAASWQCAAAqSA8AAC4A" +
           "RCpIDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAAMkgPAAAvAQAqIzJIDwAA" +
           "E/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAAzSA8AAC4ARDNIDwAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAADRIDwAALwEAKiM0SA8A" +
           "AAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAANUgPAAAuAEQ1SA8A" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAANkgPAAAvAQAqIzZIDwAAFf//" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAA3SA8AAC4ARDdIDwABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAADhIDwAALgBEOEgPAAAM////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAAA5SA8AAC8BAEQjOUgPAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAADpIDwAALwEAQyM6SA8AAQEBAAAAAQD5CwABAPMK" +
           "AAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAADtIDwAALwEARSM7SA8AAQEBAAAAAQD5CwABAA0L" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAA8SA8AAC4ARDxIDwCWAgAAAAEAKgEBRgAA" +
           "AAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQg" +
           "dG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVu" +
           "dCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAQWNrZWRTdGF0ZQIAAEFIDwAALwEAIyNBSA8AABX/////AQEBAAAAAQAsIwECAAApSA8AAQAA" +
           "ABVgiQoCAAAAAAACAAAASWQCAABCSA8AAC4AREJIDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsA" +
           "AABBY2tub3dsZWRnZQIAAFNIDwAALwEAlyNTSA8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMCAABUSA8AAC4ARFRIDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//" +
           "////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoB" +
           "AUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhl" +
           "IGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3Rh" +
           "dGUBAOsmAC8BACMj6yYAAAAV/////wEBBQAAAAEALCMBAgAAKUgPAAEALCMAAQAkJwEALCMAAQAtJwEA" +
           "LCMAAQA2JwEALCMAAQA/JwEAAAAVYIkKAgAAAAAAAgAAAElkAQDsJgAuAETsJgAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAAV0gPAAAuAERXSA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAIAAINIDwAALgBEg0gPAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADQAAAEhpZ2hIaWdoU3RhdGUBACQnAC8BACMjJCcAAAAV/////wEBAQAAAAEALCMB" +
           "AQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQAlJwAuAEQlJwAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAAVHJhbnNpdGlvblRpbWUBACknAC4ARCknAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAEhpZ2hTdGF0ZQEALScALwEAIyMtJwAAABX/////AQEBAAAAAQAsIwEBAOsmAgAAABVgiQoCAAAA" +
           "AAACAAAASWQBAC4nAC4ARC4nAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABUcmFuc2l0aW9u" +
           "VGltZQEAMicALgBEMicAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATG93U3RhdGUBADYn" +
           "AC8BACMjNicAAAAV/////wEBAQAAAAEALCMBAQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQA3JwAuAEQ3" +
           "JwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBADsnAC4ARDsnAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAExvd0xvd1N0YXRlAQA/JwAvAQAjIz8nAAAAFf//" +
           "//8BAQEAAAABACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEAQCcALgBEQCcAAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQBEJwAuAEREJwAAAQAmAf////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState HighHighState
        {
            get
            {
                return m_highHighState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState HighState
        {
            get
            {
                return m_highState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowState
        {
            get
            {
                return m_lowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowLowState
        {
            get
            {
                return m_lowLowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighState != null)
            {
                children.Add(m_highHighState);
            }

            if (m_highState != null)
            {
                children.Add(m_highState);
            }

            if (m_lowState != null)
            {
                children.Add(m_lowState);
            }

            if (m_lowLowState != null)
            {
                children.Add(m_lowLowState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighState:
                {
                    if (createOrReplace)
                    {
                        if (HighHighState == null)
                        {
                            if (replacement == null)
                            {
                                HighHighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighHighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighHighState;
                    break;
                }

                case Opc.Ua.BrowseNames.HighState:
                {
                    if (createOrReplace)
                    {
                        if (HighState == null)
                        {
                            if (replacement == null)
                            {
                                HighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowState:
                {
                    if (createOrReplace)
                    {
                        if (LowState == null)
                        {
                            if (replacement == null)
                            {
                                LowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowState:
                {
                    if (createOrReplace)
                    {
                        if (LowLowState == null)
                        {
                            if (replacement == null)
                            {
                                LowLowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowLowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowLowState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_highHighState;
        private TwoStateVariableState m_highState;
        private TwoStateVariableState m_lowState;
        private TwoStateVariableState m_lowLowState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLevelAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLevelAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public NonExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAEwn" +
           "AQBMJ0wnAAD/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAMVIDwAALgBExUgPAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAMZIDwAALgBExkgPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADHSA8AAC4ARMdIDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAyEgPAAAuAETISA8AAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAEAAAAVGltZQIAAMlIDwAALgBEyUgPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVj" +
           "ZWl2ZVRpbWUCAADKSA8AAC4ARMpIDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3Nh" +
           "Z2UCAADMSA8AAC4ARMxIDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAM1I" +
           "DwAALgBEzUgPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAADO" +
           "SA8AAC4ARM5IDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUC" +
           "AADPSA8AAC4ARM9IDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFz" +
           "c0lkAgAA0EgPAAAuAETQSA8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25k" +
           "aXRpb25TdWJDbGFzc05hbWUCAADRSA8AAC4ARNFIDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAADQAAAENvbmRpdGlvbk5hbWUCAADSSA8AAC4ARNJIDwAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABCcmFuY2hJZAIAANNIDwAALgBE00gPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAA" +
           "AFJldGFpbgIAANRIDwAALgBE1EgPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRT" +
           "dGF0ZQIAANZIDwAALwEAIyPWSA8AABX/////AQEFAAAAAQAsIwACAADuSA8AAQAsIwACAAD3SA8AAQAs" +
           "IwACAAAESQ8AAQAsIwACAAAOSQ8AAQAsIwACAAAgSQ8AAQAAABVgiQoCAAAAAAACAAAASWQCAADXSA8A" +
           "AC4ARNdIDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAA30gPAAAvAQAqI99I" +
           "DwAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAADgSA8AAC4AROBI" +
           "DwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAAOFIDwAALwEAKiPh" +
           "SA8AAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA4kgPAAAuAETi" +
           "SA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAA40gPAAAvAQAqI+NIDwAA" +
           "Ff////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAADkSA8AAC4ARORIDwAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAOVIDwAALgBE5UgPAAAM" +
           "/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAADmSA8AAC8BAEQj5kgPAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAOdIDwAALwEAQyPnSA8AAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAOhIDwAALwEARSPoSA8AAQEBAAAAAQD5CwAB" +
           "AA0LAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADpSA8AAC4AROlIDwCWAgAAAAEAKgEB" +
           "RgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZl" +
           "bnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29t" +
           "bWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAQWNrZWRTdGF0ZQIAAO5IDwAALwEAIyPuSA8AABX/////AQEBAAAAAQAsIwECAADWSA8A" +
           "AQAAABVgiQoCAAAAAAACAAAASWQCAADvSA8AAC4ARO9IDwAAAf////8BAf////8AAAAABGGCCgQAAAAA" +
           "AAsAAABBY2tub3dsZWRnZQIAAABJDwAALwEAlyMASQ8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMCAAABSQ8AAC4ARAFJDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElk" +
           "AA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4B" +
           "ACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8g" +
           "dGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZl" +
           "U3RhdGUCAAAESQ8AAC8BACMjBEkPAAAV/////wEBBQAAAAEALCMBAgAA1kgPAAEALCMAAgAAe0kPAAEA" +
           "LCMAAgAAhEkPAAEALCMAAgAAjUkPAAEALCMAAgAAlkkPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAABUkP" +
           "AAAuAEQFSQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAADUkPAAAuAEQN" +
           "SQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAIAADlJDwAA" +
           "LgBEOUkPAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLevelAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLevelAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public ExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAAolAQAK" +
           "JQolAAD/////HQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAJ9JDwAALgBEn0kPAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAKBJDwAALgBEoEkPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAChSQ8AAC4ARKFJDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAgAAokkPAAAuAESiSQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAE" +
           "AAAAVGltZQIAAKNJDwAALgBEo0kPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2" +
           "ZVRpbWUCAACkSQ8AAC4ARKRJDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UC" +
           "AACmSQ8AAC4ARKZJDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAKdJDwAA" +
           "LgBEp0kPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAACoSQ8A" +
           "AC4ARKhJDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUCAACp" +
           "SQ8AAC4ARKlJDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lk" +
           "AgAAqkkPAAAuAESqSQ8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRp" +
           "b25TdWJDbGFzc05hbWUCAACrSQ8AAC4ARKtJDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUCAACsSQ8AAC4ARKxJDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAgAAABCcmFuY2hJZAIAAK1JDwAALgBErUkPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJl" +
           "dGFpbgIAAK5JDwAALgBErkkPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0" +
           "ZQIAALBJDwAALwEAIyOwSQ8AABX/////AQEFAAAAAQAsIwACAADISQ8AAQAsIwACAADRSQ8AAQAsIwAC" +
           "AADeSQ8AAQAsIwACAADoSQ8AAQAsIwACAAD6SQ8AAQAAABVgiQoCAAAAAAACAAAASWQCAACxSQ8AAC4A" +
           "RLFJDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAAuUkPAAAvAQAqI7lJDwAA" +
           "E/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAC6SQ8AAC4ARLpJDwAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAALtJDwAALwEAKiO7SQ8A" +
           "AAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAvEkPAAAuAES8SQ8A" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAAvUkPAAAvAQAqI71JDwAAFf//" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAC+SQ8AAC4ARL5JDwABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAL9JDwAALgBEv0kPAAAM////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAADASQ8AAC8BAEQjwEkPAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAMFJDwAALwEAQyPBSQ8AAQEBAAAAAQD5CwABAPMK" +
           "AAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAMJJDwAALwEARSPCSQ8AAQEBAAAAAQD5CwABAA0L" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADDSQ8AAC4ARMNJDwCWAgAAAAEAKgEBRgAA" +
           "AAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQg" +
           "dG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVu" +
           "dCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAQWNrZWRTdGF0ZQIAAMhJDwAALwEAIyPISQ8AABX/////AQEBAAAAAQAsIwECAACwSQ8AAQAA" +
           "ABVgiQoCAAAAAAACAAAASWQCAADJSQ8AAC4ARMlJDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsA" +
           "AABBY2tub3dsZWRnZQIAANpJDwAALwEAlyPaSQ8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMCAADbSQ8AAC4ARNtJDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//" +
           "////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoB" +
           "AUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhl" +
           "IGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3Rh" +
           "dGUCAADeSQ8AAC8BACMj3kkPAAAV/////wEBAgAAAAEALCMBAgAAsEkPAAEALCMAAgAAVUoPAAEAAAAV" +
           "YIkKAgAAAAAAAgAAAElkAgAA30kPAAAuAETfSQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAA" +
           "SW5wdXROb2RlAgAA50kPAAAuAETnSQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJl" +
           "c3NlZE9yU2hlbHZlZAIAABNKDwAALgBEE0oPAAAB/////wEB/////wAAAAAEYIAKAQAAAAAACgAAAExp" +
           "bWl0U3RhdGUCAABVSg8AAC8BAGYkVUoPAAEAAAABACwjAQIAAN5JDwABAAAAFWCJCgIAAAAAAAwAAABD" +
           "dXJyZW50U3RhdGUCAABWSg8AAC8BAMgKVkoPAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AgAAV0oPAAAuAERXSg8AABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveDeviationAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveDeviationAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public NonExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (BaseSetpointNode != null)
            {
                BaseSetpointNode.Initialize(context, BaseSetpointNode_InitializationString);
            }
        }

        #region Initialization String
        private const string BaseSetpointNode_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEJhc2VTZXRwb2ludE5vZGUBAIhBAC4ARIhBAAAAEf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAE5vbkV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCAKAEAgCiAKAAA/////x4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABjSg8AAC4ARGNKDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABkSg8AAC4ARGRKDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAZUoPAAAuAERlSg8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAGZKDwAALgBEZkoPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAABnSg8AAC4ARGdKDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAaEoPAAAuAERoSg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAakoPAAAuAERqSg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AABrSg8AAC4ARGtKDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lk" +
           "AgAAbEoPAAAuAERsSg8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NO" +
           "YW1lAgAAbUoPAAAuAERtSg8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3Vi" +
           "Q2xhc3NJZAIAAG5KDwAALgBEbkoPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAA" +
           "Q29uZGl0aW9uU3ViQ2xhc3NOYW1lAgAAb0oPAAAuAERvSg8AABUBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAAcEoPAAAuAERwSg8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAQnJhbmNoSWQCAABxSg8AAC4ARHFKDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABSZXRhaW4CAABySg8AAC4ARHJKDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFi" +
           "bGVkU3RhdGUCAAB0Sg8AAC8BACMjdEoPAAAV/////wEBBQAAAAEALCMAAgAAjEoPAAEALCMAAgAAlUoP" +
           "AAEALCMAAgAAokoPAAEALCMAAgAArEoPAAEALCMAAgAAvkoPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA" +
           "dUoPAAAuAER1Sg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAH1KDwAALwEA" +
           "KiN9Sg8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAfkoPAAAu" +
           "AER+Sg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAAB/Sg8AAC8B" +
           "ACojf0oPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAIBKDwAA" +
           "LgBEgEoPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAIFKDwAALwEAKiOB" +
           "Sg8AABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAgkoPAAAuAESC" +
           "Sg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACDSg8AAC4ARINK" +
           "DwAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAAhEoPAAAvAQBEI4RKDwABAQEA" +
           "AAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAACFSg8AAC8BAEMjhUoPAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAACGSg8AAC8BAEUjhkoPAAEBAQAAAAEA" +
           "+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAh0oPAAAuAESHSg8AlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAEFja2VkU3RhdGUCAACMSg8AAC8BACMjjEoPAAAV/////wEBAQAAAAEALCMBAgAA" +
           "dEoPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAjUoPAAAuAESNSg8AAAH/////AQH/////AAAAAARhggoE" +
           "AAAAAAALAAAAQWNrbm93bGVkZ2UCAACeSg8AAC8BAJcjnkoPAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAn0oPAAAuAESfSg8AlgIAAAABACoBAUYAAAAHAAAARXZl" +
           "bnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1l" +
           "bnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRk" +
           "IHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFj" +
           "dGl2ZVN0YXRlAgAAokoPAAAvAQAjI6JKDwAAFf////8BAQUAAAABACwjAQIAAHRKDwABACwjAAIAABlL" +
           "DwABACwjAAIAACJLDwABACwjAAIAACtLDwABACwjAAIAADRLDwABAAAAFWCJCgIAAAAAAAIAAABJZAIA" +
           "AKNKDwAALgBEo0oPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQIAAKtKDwAA" +
           "LgBEq0oPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQCAADX" +
           "Sg8AAC4ARNdKDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZXRwb2ludE5vZGUBABopAC4A" +
           "RBopAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABCYXNlU2V0cG9pbnROb2RlAQCIQQAuAESI" +
           "QQAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> BaseSetpointNode
        {
            get
            {
                return m_baseSetpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseSetpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseSetpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            if (m_baseSetpointNode != null)
            {
                children.Add(m_baseSetpointNode);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseSetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (BaseSetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                BaseSetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                BaseSetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BaseSetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        private PropertyState<NodeId> m_baseSetpointNode;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveRateOfChangeAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveRateOfChangeAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public NonExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (EngineeringUnits != null)
            {
                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string EngineeringUnits_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBANpBAC4ARNpBAAABAHcD/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAE5vbkV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3Rh" +
           "bmNlAQDmJwEA5ifmJwAA/////x0AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAA9Sw8AAC4ARD1LDwAA" +
           "D/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAA+Sw8AAC4ARD5LDwAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAP0sPAAAuAEQ/Sw8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAEBLDwAALgBEQEsPAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABAAAAFRpbWUCAABBSw8AAC4AREFLDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAFJlY2VpdmVUaW1lAgAAQksPAAAuAERCSw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABNZXNzYWdlAgAAREsPAAAuAERESw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJp" +
           "dHkCAABFSw8AAC4AREVLDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFz" +
           "c0lkAgAARksPAAAuAERGSw8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xh" +
           "c3NOYW1lAgAAR0sPAAAuAERHSw8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9u" +
           "U3ViQ2xhc3NJZAIAAEhLDwAALgBESEsPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAV" +
           "AAAAQ29uZGl0aW9uU3ViQ2xhc3NOYW1lAgAASUsPAAAuAERJSw8AABUBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAASksPAAAuAERKSw8AAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQCAABLSw8AAC4AREtLDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABSZXRhaW4CAABMSw8AAC4ARExLDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABF" +
           "bmFibGVkU3RhdGUCAABOSw8AAC8BACMjTksPAAAV/////wEBBQAAAAEALCMAAgAAZksPAAEALCMAAgAA" +
           "b0sPAAEALCMAAgAAfEsPAAEALCMAAgAAhksPAAEALCMAAgAAmEsPAAEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AgAAT0sPAAAuAERPSw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAFdLDwAA" +
           "LwEAKiNXSw8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAWEsP" +
           "AAAuAERYSw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAABZSw8A" +
           "AC8BACojWUsPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAFpL" +
           "DwAALgBEWksPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAFtLDwAALwEA" +
           "KiNbSw8AABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAXEsPAAAu" +
           "AERcSw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAABdSw8AAC4A" +
           "RF1LDwAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAAXksPAAAvAQBEI15LDwAB" +
           "AQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAABfSw8AAC8BAEMjX0sPAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAABgSw8AAC8BAEUjYEsPAAEBAQAA" +
           "AAEA+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAYUsPAAAuAERhSw8AlgIA" +
           "AAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3Ig" +
           "dGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAA" +
           "VGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUCAABmSw8AAC8BACMjZksPAAAV/////wEBAQAAAAEALCMB" +
           "AgAATksPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAZ0sPAAAuAERnSw8AAAH/////AQH/////AAAAAARh" +
           "ggoEAAAAAAALAAAAQWNrbm93bGVkZ2UCAAB4Sw8AAC8BAJcjeEsPAAEBAQAAAAEA+QsAAQDwIgEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAeUsPAAAuAER5Sw8AlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AEFjdGl2ZVN0YXRlAgAAfEsPAAAvAQAjI3xLDwAAFf////8BAQUAAAABACwjAQIAAE5LDwABACwjAAIA" +
           "APNLDwABACwjAAIAAPxLDwABACwjAAIAAAVMDwABACwjAAIAAA5MDwABAAAAFWCJCgIAAAAAAAIAAABJ" +
           "ZAIAAH1LDwAALgBEfUsPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQIAAIVL" +
           "DwAALgBEhUsPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQC" +
           "AACxSw8AAC4ARLFLDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABFbmdpbmVlcmluZ1VuaXRz" +
           "AQDaQQAuAETaQQAAAQB3A/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EUInformation> m_engineeringUnits;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveDeviationAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveDeviationAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public ExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (BaseSetpointNode != null)
            {
                BaseSetpointNode.Initialize(context, BaseSetpointNode_InitializationString);
            }
        }

        #region Initialization String
        private const string BaseSetpointNode_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEJhc2VTZXRwb2ludE5vZGUBALFBAC4ARLFBAAAAEf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNlAQAk" +
           "JgEAJCYkJgAA/////x8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAAXTA8AAC4ARBdMDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAAYTA8AAC4ARBhMDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAGUwPAAAuAEQZTA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAABpMDwAALgBEGkwPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAAAbTA8AAC4ARBtMDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAHEwPAAAuAEQcTA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAHkwPAAAuAEQeTA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAAAf" +
           "TA8AAC4ARB9MDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAgAA" +
           "IEwPAAAuAEQgTA8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1l" +
           "AgAAIUwPAAAuAEQhTA8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3ViQ2xh" +
           "c3NJZAIAACJMDwAALgBEIkwPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAAQ29u" +
           "ZGl0aW9uU3ViQ2xhc3NOYW1lAgAAI0wPAAAuAEQjTA8AABUBAAAAAQAAAAAAAAABAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAAJEwPAAAuAEQkTA8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAQnJhbmNoSWQCAAAlTA8AAC4ARCVMDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYA" +
           "AABSZXRhaW4CAAAmTA8AAC4ARCZMDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVk" +
           "U3RhdGUCAAAoTA8AAC8BACMjKEwPAAAV/////wEBBQAAAAEALCMAAgAAQEwPAAEALCMAAgAASUwPAAEA" +
           "LCMAAgAAVkwPAAEALCMAAgAAYEwPAAEALCMAAgAAckwPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAKUwP" +
           "AAAuAEQpTA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAADFMDwAALwEAKiMx" +
           "TA8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAMkwPAAAuAEQy" +
           "TA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAAAzTA8AAC8BACoj" +
           "M0wPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAADRMDwAALgBE" +
           "NEwPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAADVMDwAALwEAKiM1TA8A" +
           "ABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAANkwPAAAuAEQ2TA8A" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAA3TA8AAC4ARDdMDwAA" +
           "DP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAAOEwPAAAvAQBEIzhMDwABAQEAAAAB" +
           "APkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAAA5TA8AAC8BAEMjOUwPAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAAA6TA8AAC8BAEUjOkwPAAEBAQAAAAEA+QsA" +
           "AQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAO0wPAAAuAEQ7TA8AlgIAAAABACoB" +
           "AUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2" +
           "ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNv" +
           "bW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAEFja2VkU3RhdGUCAABATA8AAC8BACMjQEwPAAAV/////wEBAQAAAAEALCMBAgAAKEwP" +
           "AAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAQUwPAAAuAERBTA8AAAH/////AQH/////AAAAAARhggoEAAAA" +
           "AAALAAAAQWNrbm93bGVkZ2UCAABSTA8AAC8BAJcjUkwPAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAgAAU0wPAAAuAERTTA8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJ" +
           "ZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQu" +
           "AQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRv" +
           "IHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2" +
           "ZVN0YXRlAgAAVkwPAAAvAQAjI1ZMDwAAFf////8BAQIAAAABACwjAQIAAChMDwABACwjAAIAAM1MDwAB" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAIAAFdMDwAALgBEV0wPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAElucHV0Tm9kZQIAAF9MDwAALgBEX0wPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1" +
           "cHByZXNzZWRPclNoZWx2ZWQCAACLTA8AAC4ARItMDwAAAf////8BAf////8AAAAABGCACgEAAAAAAAoA" +
           "AABMaW1pdFN0YXRlAgAAzUwPAAAvAQBmJM1MDwABAAAAAQAsIwECAABWTA8AAQAAABVgiQoCAAAAAAAM" +
           "AAAAQ3VycmVudFN0YXRlAgAAzkwPAAAvAQDICs5MDwAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIA" +
           "AABJZAIAAM9MDwAALgBEz0wPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFNldHBvaW50Tm9k" +
           "ZQEAsSYALgBEsSYAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEJhc2VTZXRwb2ludE5vZGUB" +
           "ALFBAC4ARLFBAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> BaseSetpointNode
        {
            get
            {
                return m_baseSetpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_baseSetpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_baseSetpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            if (m_baseSetpointNode != null)
            {
                children.Add(m_baseSetpointNode);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }

                case Opc.Ua.BrowseNames.BaseSetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (BaseSetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                BaseSetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                BaseSetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BaseSetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        private PropertyState<NodeId> m_baseSetpointNode;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveRateOfChangeAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveRateOfChangeAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <remarks />
        public ExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (EngineeringUnits != null)
            {
                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string EngineeringUnits_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAANCAC4ARANCAAABAHcD/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3RhbmNl" +
           "AQCXJQEAlyWXJQAA/////x4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADbTA8AAC4ARNtMDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADcTA8AAC4ARNxMDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA3UwPAAAuAETdTA8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAN5MDwAALgBE3kwPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAADfTA8AAC4ARN9MDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAA4EwPAAAuAETgTA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAA4kwPAAAuAETiTA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AADjTA8AAC4ARONMDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lk" +
           "AgAA5EwPAAAuAETkTA8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NO" +
           "YW1lAgAA5UwPAAAuAETlTA8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3Vi" +
           "Q2xhc3NJZAIAAOZMDwAALgBE5kwPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAA" +
           "Q29uZGl0aW9uU3ViQ2xhc3NOYW1lAgAA50wPAAAuAETnTA8AABUBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAA6EwPAAAuAEToTA8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAQnJhbmNoSWQCAADpTA8AAC4AROlMDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABSZXRhaW4CAADqTA8AAC4AROpMDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFi" +
           "bGVkU3RhdGUCAADsTA8AAC8BACMj7EwPAAAV/////wEBBQAAAAEALCMAAgAABE0PAAEALCMAAgAADU0P" +
           "AAEALCMAAgAAGk0PAAEALCMAAgAAJE0PAAEALCMAAgAANk0PAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA" +
           "7UwPAAAuAETtTA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAPVMDwAALwEA" +
           "KiP1TA8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA9kwPAAAu" +
           "AET2TA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAAD3TA8AAC8B" +
           "ACoj90wPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAPhMDwAA" +
           "LgBE+EwPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAPlMDwAALwEAKiP5" +
           "TA8AABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA+kwPAAAuAET6" +
           "TA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAD7TA8AAC4ARPtM" +
           "DwAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAA/EwPAAAvAQBEI/xMDwABAQEA" +
           "AAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAAD9TA8AAC8BAEMj/UwPAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAAD+TA8AAC8BAEUj/kwPAAEBAQAAAAEA" +
           "+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAA/0wPAAAuAET/TA8AlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAEFja2VkU3RhdGUCAAAETQ8AAC8BACMjBE0PAAAV/////wEBAQAAAAEALCMBAgAA" +
           "7EwPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAABU0PAAAuAEQFTQ8AAAH/////AQH/////AAAAAARhggoE" +
           "AAAAAAALAAAAQWNrbm93bGVkZ2UCAAAWTQ8AAC8BAJcjFk0PAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAF00PAAAuAEQXTQ8AlgIAAAABACoBAUYAAAAHAAAARXZl" +
           "bnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1l" +
           "bnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRk" +
           "IHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFj" +
           "dGl2ZVN0YXRlAgAAGk0PAAAvAQAjIxpNDwAAFf////8BAQIAAAABACwjAQIAAOxMDwABACwjAAIAAJFN" +
           "DwABAAAAFWCJCgIAAAAAAAIAAABJZAIAABtNDwAALgBEG00PAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAElucHV0Tm9kZQIAACNNDwAALgBEI00PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAA" +
           "AFN1cHByZXNzZWRPclNoZWx2ZWQCAABPTQ8AAC4ARE9NDwAAAf////8BAf////8AAAAABGCACgEAAAAA" +
           "AAoAAABMaW1pdFN0YXRlAgAAkU0PAAAvAQBmJJFNDwABAAAAAQAsIwECAAAaTQ8AAQAAABVgiQoCAAAA" +
           "AAAMAAAAQ3VycmVudFN0YXRlAgAAkk0PAAAvAQDICpJNDwAAFf////8BAf////8BAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAIAAJNNDwAALgBEk00PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVy" +
           "aW5nVW5pdHMBAANCAC4ARANCAAABAHcD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EUInformation> m_engineeringUnits;
        #endregion
    }
    #endif
    #endregion

    #region DiscreteAlarmState Class
    #if (!OPCUA_EXCLUDE_DiscreteAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <remarks />
        public DiscreteAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DiscreteAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAERpc2NyZXRlQWxhcm1UeXBlSW5zdGFuY2UBABspAQAbKRspAAD/" +
           "////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAJ9NDwAALgBEn00PAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAKBNDwAALgBEoE0PAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUCAAChTQ8AAC4ARKFNDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAgAAok0PAAAuAESiTQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQIAAKNNDwAALgBEo00PAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUC" +
           "AACkTQ8AAC4ARKRNDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAACmTQ8A" +
           "AC4ARKZNDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAKdNDwAALgBEp00P" +
           "AAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAACoTQ8AAC4ARKhN" +
           "DwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUCAACpTQ8AAC4A" +
           "RKlNDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lkAgAAqk0P" +
           "AAAuAESqTQ8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRpb25TdWJD" +
           "bGFzc05hbWUCAACrTQ8AAC4ARKtNDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADQAA" +
           "AENvbmRpdGlvbk5hbWUCAACsTQ8AAC4ARKxNDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABC" +
           "cmFuY2hJZAIAAK1NDwAALgBErU0PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgIA" +
           "AK5NDwAALgBErk0PAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQIAALBN" +
           "DwAALwEAIyOwTQ8AABX/////AQEFAAAAAQAsIwACAADITQ8AAQAsIwACAADRTQ8AAQAsIwACAADeTQ8A" +
           "AQAsIwACAADoTQ8AAQAsIwACAAD6TQ8AAQAAABVgiQoCAAAAAAACAAAASWQCAACxTQ8AAC4ARLFNDwAA" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAAuU0PAAAvAQAqI7lNDwAAE/////8B" +
           "Af////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAC6TQ8AAC4ARLpNDwABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAALtNDwAALwEAKiO7TQ8AAAX/////" +
           "AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAvE0PAAAuAES8TQ8AAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAAvU0PAAAvAQAqI71NDwAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAC+TQ8AAC4ARL5NDwABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAL9NDwAALgBEv00PAAAM/////wEB////" +
           "/wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAADATQ8AAC8BAEQjwE0PAAEBAQAAAAEA+QsAAQDzCgAA" +
           "AAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAMFNDwAALwEAQyPBTQ8AAQEBAAAAAQD5CwABAPMKAAAAAARh" +
           "ggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAMJNDwAALwEARSPCTQ8AAQEBAAAAAQD5CwABAA0LAQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADDTQ8AAC4ARMNNDwCWAgAAAAEAKgEBRgAAAAcAAABF" +
           "dmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29t" +
           "bWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBh" +
           "ZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "QWNrZWRTdGF0ZQIAAMhNDwAALwEAIyPITQ8AABX/////AQEBAAAAAQAsIwECAACwTQ8AAQAAABVgiQoC" +
           "AAAAAAACAAAASWQCAADJTQ8AAC4ARMlNDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tu" +
           "b3dsZWRnZQIAANpNDwAALwEAlyPaTQ8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAASW5w" +
           "dXRBcmd1bWVudHMCAADbTQ8AAC4ARNtNDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAA" +
           "AAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAH" +
           "AAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRp" +
           "dGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUCAADe" +
           "TQ8AAC8BACMj3k0PAAAV/////wEBAQAAAAEALCMBAgAAsE0PAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA" +
           "300PAAAuAETfTQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAA500PAAAu" +
           "AETnTQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAIAABNO" +
           "DwAALgBEE04PAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region OffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_OffNormalAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OffNormalAlarmState : DiscreteAlarmState
    {
        #region Constructors
        /// <remarks />
        public OffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAE9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQCNKQEAjSmNKQAA" +
           "/////x0AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABFTg8AAC4AREVODwAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABGTg8AAC4AREZODwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAgAAR04PAAAuAERHTg8AABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQIAAEhODwAALgBESE4PAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUCAABJTg8AAC4ARElODwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AgAASk4PAAAuAERKTg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAATE4P" +
           "AAAuAERMTg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAABNTg8AAC4ARE1O" +
           "DwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAgAATk4PAAAuAERO" +
           "Tg8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1lAgAAT04PAAAu" +
           "AERPTg8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3ViQ2xhc3NJZAIAAFBO" +
           "DwAALgBEUE4PAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAAQ29uZGl0aW9uU3Vi" +
           "Q2xhc3NOYW1lAgAAUU4PAAAuAERRTg8AABUBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA0A" +
           "AABDb25kaXRpb25OYW1lAgAAUk4PAAAuAERSTg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "QnJhbmNoSWQCAABTTg8AAC4ARFNODwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4C" +
           "AABUTg8AAC4ARFRODwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUCAABW" +
           "Tg8AAC8BACMjVk4PAAAV/////wEBBQAAAAEALCMAAgAAbk4PAAEALCMAAgAAd04PAAEALCMAAgAAhE4P" +
           "AAEALCMAAgAAjk4PAAEALCMAAgAAoE4PAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAV04PAAAuAERXTg8A" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAF9ODwAALwEAKiNfTg8AABP/////" +
           "AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAYE4PAAAuAERgTg8AAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAABhTg8AAC8BACojYU4PAAAF////" +
           "/wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAGJODwAALgBEYk4PAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAGNODwAALwEAKiNjTg8AABX/////AQH/" +
           "////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAZE4PAAAuAERkTg8AAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAABlTg8AAC4ARGVODwAADP////8BAf//" +
           "//8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAAZk4PAAAvAQBEI2ZODwABAQEAAAABAPkLAAEA8woA" +
           "AAAABGGCCgQAAAAAAAYAAABFbmFibGUCAABnTg8AAC8BAEMjZ04PAAEBAQAAAAEA+QsAAQDzCgAAAAAE" +
           "YYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAABoTg8AAC8BAEUjaE4PAAEBAQAAAAEA+QsAAQANCwEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAaU4PAAAuAERpTg8AlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AEFja2VkU3RhdGUCAABuTg8AAC8BACMjbk4PAAAV/////wEBAQAAAAEALCMBAgAAVk4PAAEAAAAVYIkK" +
           "AgAAAAAAAgAAAElkAgAAb04PAAAuAERvTg8AAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNr" +
           "bm93bGVkZ2UCAACATg8AAC8BAJcjgE4PAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAgAAgU4PAAAuAESBTg8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAA" +
           "AAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25k" +
           "aXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAgAA" +
           "hE4PAAAvAQAjI4RODwAAFf////8BAQEAAAABACwjAQIAAFZODwABAAAAFWCJCgIAAAAAAAIAAABJZAIA" +
           "AIVODwAALgBEhU4PAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQIAAI1ODwAA" +
           "LgBEjU4PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQCAAC5" +
           "Tg8AAC4ARLlODwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEAlisALgBE" +
           "lisAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> NormalState
        {
            get
            {
                return m_normalState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_normalState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_normalState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_normalState != null)
            {
                children.Add(m_normalState);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NormalState:
                {
                    if (createOrReplace)
                    {
                        if (NormalState == null)
                        {
                            if (replacement == null)
                            {
                                NormalState = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                NormalState = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = NormalState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_normalState;
        #endregion
    }
    #endif
    #endregion

    #region SystemOffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_SystemOffNormalAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemOffNormalAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public SystemOffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemOffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFN5c3RlbU9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQDpLQEA" +
           "6S3pLQAA/////x0AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADrTg8AAC4AROtODwAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADsTg8AAC4AROxODwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA7U4PAAAuAETtTg8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQIAAO5ODwAALgBE7k4PAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BAAAAFRpbWUCAADvTg8AAC4ARO9ODwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2Vp" +
           "dmVUaW1lAgAA8E4PAAAuAETwTg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdl" +
           "AgAA8k4PAAAuAETyTg8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADzTg8A" +
           "AC4ARPNODwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAgAA9E4P" +
           "AAAuAET0Tg8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1lAgAA" +
           "9U4PAAAuAET1Tg8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3ViQ2xhc3NJ" +
           "ZAIAAPZODwAALgBE9k4PAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAAQ29uZGl0" +
           "aW9uU3ViQ2xhc3NOYW1lAgAA904PAAAuAET3Tg8AABUBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIA" +
           "AAAAAA0AAABDb25kaXRpb25OYW1lAgAA+E4PAAAuAET4Tg8AAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAQnJhbmNoSWQCAAD5Tg8AAC4ARPlODwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABS" +
           "ZXRhaW4CAAD6Tg8AAC4ARPpODwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3Rh" +
           "dGUCAAD8Tg8AAC8BACMj/E4PAAAV/////wEBBQAAAAEALCMAAgAAFE8PAAEALCMAAgAAHU8PAAEALCMA" +
           "AgAAKk8PAAEALCMAAgAANE8PAAEALCMAAgAARk8PAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA/U4PAAAu" +
           "AET9Tg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAAVPDwAALwEAKiMFTw8A" +
           "ABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAABk8PAAAuAEQGTw8A" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAAAHTw8AAC8BACojB08P" +
           "AAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAAhPDwAALgBECE8P" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAAlPDwAALwEAKiMJTw8AABX/" +
           "////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAACk8PAAAuAEQKTw8AAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAALTw8AAC4ARAtPDwAADP//" +
           "//8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAADE8PAAAvAQBEIwxPDwABAQEAAAABAPkL" +
           "AAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAAANTw8AAC8BAEMjDU8PAAEBAQAAAAEA+QsAAQDz" +
           "CgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAAAOTw8AAC8BAEUjDk8PAAEBAQAAAAEA+QsAAQAN" +
           "CwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAD08PAAAuAEQPTw8AlgIAAAABACoBAUYA" +
           "AAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50" +
           "IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1l" +
           "bnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAEFja2VkU3RhdGUCAAAUTw8AAC8BACMjFE8PAAAV/////wEBAQAAAAEALCMBAgAA/E4PAAEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAgAAFU8PAAAuAEQVTw8AAAH/////AQH/////AAAAAARhggoEAAAAAAAL" +
           "AAAAQWNrbm93bGVkZ2UCAAAmTw8AAC8BAJcjJk8PAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAA" +
           "DgAAAElucHV0QXJndW1lbnRzAgAAJ08PAAAuAEQnTw8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP" +
           "/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAq" +
           "AQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRo" +
           "ZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0" +
           "YXRlAgAAKk8PAAAvAQAjIypPDwAAFf////8BAQEAAAABACwjAQIAAPxODwABAAAAFWCJCgIAAAAAAAIA" +
           "AABJZAIAACtPDwAALgBEK08PAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQIA" +
           "ADNPDwAALgBEM08PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2" +
           "ZWQCAABfTw8AAC4ARF9PDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQIA" +
           "AJFPDwAALgBEkU8PAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TripAlarmState Class
    #if (!OPCUA_EXCLUDE_TripAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TripAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public TripAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TripAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAFRyaXBBbGFybVR5cGVJbnN0YW5jZQEA/ykBAP8p/ykAAP////8d" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAkk8PAAAuAESSTw8AAA//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAARXZlbnRUeXBlAgAAk08PAAAuAESTTw8AABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQIAAJRPDwAALgBElE8PAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUCAACVTw8AAC4ARJVPDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAgAA" +
           "lk8PAAAuAESWTw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQIAAJdP" +
           "DwAALgBEl08PAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIAAJlPDwAALgBE" +
           "mU8PAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAmk8PAAAuAESaTw8AAAX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAIAAJtPDwAALgBEm08PAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQIAAJxPDwAALgBEnE8P" +
           "AAAV/////wEB/////wAAAAAXYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNsYXNzSWQCAACdTw8AAC4A" +
           "RJ1PDwAAEQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAENvbmRpdGlvblN1YkNsYXNz" +
           "TmFtZQIAAJ5PDwAALgBEnk8PAAAVAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAANAAAAQ29u" +
           "ZGl0aW9uTmFtZQIAAJ9PDwAALgBEn08PAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5j" +
           "aElkAgAAoE8PAAAuAESgTw8AABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAgAAoU8P" +
           "AAAuAEShTw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAgAAo08PAAAv" +
           "AQAjI6NPDwAAFf////8BAQUAAAABACwjAAIAALtPDwABACwjAAIAAMRPDwABACwjAAIAANFPDwABACwj" +
           "AAIAANtPDwABACwjAAIAAO1PDwABAAAAFWCJCgIAAAAAAAIAAABJZAIAAKRPDwAALgBEpE8PAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkCAACsTw8AAC8BACojrE8PAAAT/////wEB////" +
           "/wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAK1PDwAALgBErU8PAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AgAArk8PAAAvAQAqI65PDwAABf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAACvTw8AAC4ARK9PDwABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQCAACwTw8AAC8BACojsE8PAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAALFPDwAALgBEsU8PAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAsk8PAAAuAESyTw8AAAz/////AQH/////AAAA" +
           "AARhggoEAAAAAAAHAAAARGlzYWJsZQIAALNPDwAALwEARCOzTw8AAQEBAAAAAQD5CwABAPMKAAAAAARh" +
           "ggoEAAAAAAAGAAAARW5hYmxlAgAAtE8PAAAvAQBDI7RPDwABAQEAAAABAPkLAAEA8woAAAAABGGCCgQA" +
           "AAAAAAoAAABBZGRDb21tZW50AgAAtU8PAAAvAQBFI7VPDwABAQEAAAABAPkLAAEADQsBAAAAF2CpCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAALZPDwAALgBEtk8PAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50" +
           "SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50" +
           "LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0" +
           "byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIAAAAAAAoAAABBY2tl" +
           "ZFN0YXRlAgAAu08PAAAvAQAjI7tPDwAAFf////8BAQEAAAABACwjAQIAAKNPDwABAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAIAALxPDwAALgBEvE8PAAAB/////wEB/////wAAAAAEYYIKBAAAAAAACwAAAEFja25vd2xl" +
           "ZGdlAgAAzU8PAAAvAQCXI81PDwABAQEAAAABAPkLAAEA8CIBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwIAAM5PDwAALgBEzk8PAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAA" +
           "AAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABD" +
           "b21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9u" +
           "LgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQIAANFPDwAA" +
           "LwEAIyPRTw8AABX/////AQEBAAAAAQAsIwECAACjTw8AAQAAABVgiQoCAAAAAAACAAAASWQCAADSTw8A" +
           "AC4ARNJPDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUCAADaTw8AAC4ARNpP" +
           "DwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2VkT3JTaGVsdmVkAgAABlAPAAAu" +
           "AEQGUA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAATm9ybWFsU3RhdGUCAAA4UA8AAC4ARDhQ" +
           "DwAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region InstrumentDiagnosticAlarmState Class
    #if (!OPCUA_EXCLUDE_InstrumentDiagnosticAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class InstrumentDiagnosticAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public InstrumentDiagnosticAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.InstrumentDiagnosticAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEluc3RydW1lbnREaWFnbm9zdGljQWxhcm1UeXBlSW5zdGFuY2UB" +
           "AKtHAQCrR6tHAAD/////HQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAADlQDwAALgBEOVAPAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAADpQDwAALgBEOlAPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAA7UA8AAC4ARDtQDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAPFAPAAAuAEQ8UA8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAEAAAAVGltZQIAAD1QDwAALgBEPVAPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "UmVjZWl2ZVRpbWUCAAA+UA8AAC4ARD5QDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1l" +
           "c3NhZ2UCAABAUA8AAC4AREBQDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIA" +
           "AEFQDwAALgBEQVAPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQC" +
           "AABCUA8AAC4AREJQDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05h" +
           "bWUCAABDUA8AAC4ARENQDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJD" +
           "bGFzc0lkAgAARFAPAAAuAEREUA8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABD" +
           "b25kaXRpb25TdWJDbGFzc05hbWUCAABFUA8AAC4AREVQDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAADQAAAENvbmRpdGlvbk5hbWUCAABGUA8AAC4AREZQDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABCcmFuY2hJZAIAAEdQDwAALgBER1APAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAFJldGFpbgIAAEhQDwAALgBESFAPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJs" +
           "ZWRTdGF0ZQIAAEpQDwAALwEAIyNKUA8AABX/////AQEFAAAAAQAsIwACAABiUA8AAQAsIwACAABrUA8A" +
           "AQAsIwACAAB4UA8AAQAsIwACAACCUA8AAQAsIwACAACUUA8AAQAAABVgiQoCAAAAAAACAAAASWQCAABL" +
           "UA8AAC4AREtQDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAAU1APAAAvAQAq" +
           "I1NQDwAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAABUUA8AAC4A" +
           "RFRQDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAAFVQDwAALwEA" +
           "KiNVUA8AAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAVlAPAAAu" +
           "AERWUA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAAV1APAAAvAQAqI1dQ" +
           "DwAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAABYUA8AAC4ARFhQ" +
           "DwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAFlQDwAALgBEWVAP" +
           "AAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAABaUA8AAC8BAEQjWlAPAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAFtQDwAALwEAQyNbUA8AAQEBAAAAAQD5" +
           "CwABAPMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAFxQDwAALwEARSNcUA8AAQEBAAAAAQD5" +
           "CwABAA0LAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABdUA8AAC4ARF1QDwCWAgAAAAEA" +
           "KgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUg" +
           "ZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUg" +
           "Y29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQIAAGJQDwAALwEAIyNiUA8AABX/////AQEBAAAAAQAsIwECAABK" +
           "UA8AAQAAABVgiQoCAAAAAAACAAAASWQCAABjUA8AAC4ARGNQDwAAAf////8BAf////8AAAAABGGCCgQA" +
           "AAAAAAsAAABBY2tub3dsZWRnZQIAAHRQDwAALwEAlyN0UA8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAB1UA8AAC4ARHVQDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVu" +
           "dElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVu" +
           "dC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQg" +
           "dG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0" +
           "aXZlU3RhdGUCAAB4UA8AAC8BACMjeFAPAAAV/////wEBAQAAAAEALCMBAgAASlAPAAEAAAAVYIkKAgAA" +
           "AAAAAgAAAElkAgAAeVAPAAAuAER5UA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXRO" +
           "b2RlAgAAgVAPAAAuAESBUA8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9y" +
           "U2hlbHZlZAIAAK1QDwAALgBErVAPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAE5vcm1hbFN0" +
           "YXRlAgAA31APAAAuAETfUA8AABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemDiagnosticAlarmState Class
    #if (!OPCUA_EXCLUDE_SystemDiagnosticAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemDiagnosticAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public SystemDiagnosticAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemDiagnosticAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFN5c3RlbURpYWdub3N0aWNBbGFybVR5cGVJbnN0YW5jZQEAQEgB" +
           "AEBIQEgAAP////8dAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAA4FAPAAAuAETgUA8AAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAA4VAPAAAuAEThUA8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAOJQDwAALgBE4lAPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5hbWUCAADjUA8AAC4ARONQDwAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAQAAABUaW1lAgAA5FAPAAAuAETkUA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNl" +
           "aXZlVGltZQIAAOVQDwAALgBE5VAPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2Fn" +
           "ZQIAAOdQDwAALgBE51APAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA6FAP" +
           "AAAuAEToUA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAIAAOlQ" +
           "DwAALgBE6VAPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQIA" +
           "AOpQDwAALgBE6lAPAAAV/////wEB/////wAAAAAXYIkKAgAAAAAAEwAAAENvbmRpdGlvblN1YkNsYXNz" +
           "SWQCAADrUA8AAC4AROtQDwAAEQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAENvbmRp" +
           "dGlvblN1YkNsYXNzTmFtZQIAAOxQDwAALgBE7FAPAAAVAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoC" +
           "AAAAAAANAAAAQ29uZGl0aW9uTmFtZQIAAO1QDwAALgBE7VAPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAEJyYW5jaElkAgAA7lAPAAAuAETuUA8AABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAA" +
           "UmV0YWluAgAA71APAAAuAETvUA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0" +
           "YXRlAgAA8VAPAAAvAQAjI/FQDwAAFf////8BAQUAAAABACwjAAIAAAlRDwABACwjAAIAABJRDwABACwj" +
           "AAIAAB9RDwABACwjAAIAAClRDwABACwjAAIAADtRDwABAAAAFWCJCgIAAAAAAAIAAABJZAIAAPJQDwAA" +
           "LgBE8lAPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkCAAD6UA8AAC8BACoj+lAP" +
           "AAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAPtQDwAALgBE+1AP" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AgAA/FAPAAAvAQAqI/xQ" +
           "DwAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAAD9UA8AAC4ARP1Q" +
           "DwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQCAAD+UA8AAC8BACoj/lAPAAAV" +
           "/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAP9QDwAALgBE/1APAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAAFEPAAAuAEQAUQ8AAAz/" +
           "////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQIAAAFRDwAALwEARCMBUQ8AAQEBAAAAAQD5" +
           "CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAgAAAlEPAAAvAQBDIwJRDwABAQEAAAABAPkLAAEA" +
           "8woAAAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AgAAA1EPAAAvAQBFIwNRDwABAQEAAAABAPkLAAEA" +
           "DQsBAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAARRDwAALgBEBFEPAJYCAAAAAQAqAQFG" +
           "AAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVu" +
           "dCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21t" +
           "ZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABBY2tlZFN0YXRlAgAACVEPAAAvAQAjIwlRDwAAFf////8BAQEAAAABACwjAQIAAPFQDwAB" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAIAAApRDwAALgBEClEPAAAB/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "CwAAAEFja25vd2xlZGdlAgAAG1EPAAAvAQCXIxtRDwABAQEAAAABAPkLAAEA8CIBAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwIAABxRDwAALgBEHFEPAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQA" +
           "D/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEA" +
           "KgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0" +
           "aGUgY29uZGl0aW9uLgEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIAAAAAAAsAAABBY3RpdmVT" +
           "dGF0ZQIAAB9RDwAALwEAIyMfUQ8AABX/////AQEBAAAAAQAsIwECAADxUA8AAQAAABVgiQoCAAAAAAAC" +
           "AAAASWQCAAAgUQ8AAC4ARCBRDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUC" +
           "AAAoUQ8AAC4ARChRDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2VkT3JTaGVs" +
           "dmVkAgAAVFEPAAAuAERUUQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAATm9ybWFsU3RhdGUC" +
           "AACGUQ8AAC4ARIZRDwAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region CertificateExpirationAlarmState Class
    #if (!OPCUA_EXCLUDE_CertificateExpirationAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateExpirationAlarmState : SystemOffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public CertificateExpirationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateExpirationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExpirationLimit != null)
            {
                ExpirationLimit.Initialize(context, ExpirationLimit_InitializationString);
            }
        }

        #region Initialization String
        private const string ExpirationLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEV4cGlyYXRpb25MaW1pdAEANDoALgBENDoAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAENlcnRpZmljYXRlRXhwaXJhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCpMwEAqTOpMwAA/////yEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACHUQ8AAC4ARIdRDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACIUQ8AAC4ARIhRDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAiVEPAAAuAESJUQ8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAIpRDwAALgBEilEPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAACLUQ8AAC4ARItRDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAjFEPAAAuAESMUQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAjlEPAAAuAESOUQ8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AACPUQ8AAC4ARI9RDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lk" +
           "AgAAkFEPAAAuAESQUQ8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NO" +
           "YW1lAgAAkVEPAAAuAESRUQ8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3Vi" +
           "Q2xhc3NJZAIAAJJRDwAALgBEklEPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAA" +
           "Q29uZGl0aW9uU3ViQ2xhc3NOYW1lAgAAk1EPAAAuAESTUQ8AABUBAAAAAQAAAAAAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAAlFEPAAAuAESUUQ8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAQnJhbmNoSWQCAACVUQ8AAC4ARJVRDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABSZXRhaW4CAACWUQ8AAC4ARJZRDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFi" +
           "bGVkU3RhdGUCAACYUQ8AAC8BACMjmFEPAAAV/////wEBBQAAAAEALCMAAgAAsFEPAAEALCMAAgAAuVEP" +
           "AAEALCMAAgAAxlEPAAEALCMAAgAA0FEPAAEALCMAAgAA4lEPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA" +
           "mVEPAAAuAESZUQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAKFRDwAALwEA" +
           "KiOhUQ8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAolEPAAAu" +
           "AESiUQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAACjUQ8AAC8B" +
           "ACojo1EPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAKRRDwAA" +
           "LgBEpFEPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAKVRDwAALwEAKiOl" +
           "UQ8AABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAplEPAAAuAESm" +
           "UQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACnUQ8AAC4ARKdR" +
           "DwAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAAqFEPAAAvAQBEI6hRDwABAQEA" +
           "AAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAACpUQ8AAC8BAEMjqVEPAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAACqUQ8AAC8BAEUjqlEPAAEBAQAAAAEA" +
           "+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAq1EPAAAuAESrUQ8AlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAEFja2VkU3RhdGUCAACwUQ8AAC8BACMjsFEPAAAV/////wEBAQAAAAEALCMBAgAA" +
           "mFEPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAAsVEPAAAuAESxUQ8AAAH/////AQH/////AAAAAARhggoE" +
           "AAAAAAALAAAAQWNrbm93bGVkZ2UCAADCUQ8AAC8BAJcjwlEPAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAw1EPAAAuAETDUQ8AlgIAAAABACoBAUYAAAAHAAAARXZl" +
           "bnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1l" +
           "bnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRk" +
           "IHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFj" +
           "dGl2ZVN0YXRlAgAAxlEPAAAvAQAjI8ZRDwAAFf////8BAQEAAAABACwjAQIAAJhRDwABAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAIAAMdRDwAALgBEx1EPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0" +
           "Tm9kZQIAAM9RDwAALgBEz1EPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRP" +
           "clNoZWx2ZWQCAAD7UQ8AAC4ARPtRDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxT" +
           "dGF0ZQIAAC1SDwAALgBELVIPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAEV4cGlyYXRpb25E" +
           "YXRlAQANNAAuAEQNNAAAAA3/////AQH/////AAAAABVgiQoCAAAAAAAPAAAARXhwaXJhdGlvbkxpbWl0" +
           "AQA0OgAuAEQ0OgAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABDZXJ0aWZpY2F0ZVR5cGUB" +
           "AA40AC4ARA40AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEADzQALgBE" +
           "DzQAAAAP/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ExpirationDate
        {
            get
            {
                return m_expirationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExpirationLimit
        {
            get
            {
                return m_expirationLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_expirationDate != null)
            {
                children.Add(m_expirationDate);
            }

            if (m_expirationLimit != null)
            {
                children.Add(m_expirationLimit);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExpirationDate:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationDate == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ExpirationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ExpirationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.ExpirationLimit:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationLimit == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExpirationLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExpirationLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }

                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_expirationDate;
        private PropertyState<double> m_expirationLimit;
        private PropertyState<NodeId> m_certificateType;
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region DiscrepancyAlarmState Class
    #if (!OPCUA_EXCLUDE_DiscrepancyAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscrepancyAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <remarks />
        public DiscrepancyAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DiscrepancyAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Tolerance != null)
            {
                Tolerance.Initialize(context, Tolerance_InitializationString);
            }
        }

        #region Initialization String
        private const string Tolerance_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFRvbGVyYW5jZQEAQUMALgBEQUMAAAAL/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAERpc2NyZXBhbmN5QWxhcm1UeXBlSW5zdGFuY2UBALhCAQC4QrhC" +
           "AAD/////HwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAC5SDwAALgBELlIPAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAC9SDwAALgBEL1IPAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUCAAAwUg8AAC4ARDBSDwAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAgAAMVIPAAAuAEQxUg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQIAADJSDwAALgBEMlIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRp" +
           "bWUCAAAzUg8AAC4ARDNSDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UCAAA1" +
           "Ug8AAC4ARDVSDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAADZSDwAALgBE" +
           "NlIPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQCAAA3Ug8AAC4A" +
           "RDdSDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUCAAA4Ug8A" +
           "AC4ARDhSDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lkAgAA" +
           "OVIPAAAuAEQ5Ug8AABEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRpb25T" +
           "dWJDbGFzc05hbWUCAAA6Ug8AAC4ARDpSDwAAFQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "DQAAAENvbmRpdGlvbk5hbWUCAAA7Ug8AAC4ARDtSDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAIAADxSDwAALgBEPFIPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFp" +
           "bgIAAD1SDwAALgBEPVIPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQIA" +
           "AD9SDwAALwEAIyM/Ug8AABX/////AQEFAAAAAQAsIwACAABXUg8AAQAsIwACAABgUg8AAQAsIwACAABt" +
           "Ug8AAQAsIwACAAB3Ug8AAQAsIwACAACJUg8AAQAAABVgiQoCAAAAAAACAAAASWQCAABAUg8AAC4AREBS" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AgAASFIPAAAvAQAqI0hSDwAAE///" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAABJUg8AAC4ARElSDwABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQIAAEpSDwAALwEAKiNKUg8AAAX/" +
           "////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAS1IPAAAuAERLUg8AAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AgAATFIPAAAvAQAqI0xSDwAAFf////8B" +
           "Af////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXACAABNUg8AAC4ARE1SDwABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAE5SDwAALgBETlIPAAAM/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUCAABPUg8AAC8BAEQjT1IPAAEBAQAAAAEA+QsAAQDz" +
           "CgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQIAAFBSDwAALwEAQyNQUg8AAQEBAAAAAQD5CwABAPMKAAAA" +
           "AARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAIAAFFSDwAALwEARSNRUg8AAQEBAAAAAQD5CwABAA0LAQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABSUg8AAC4ARFJSDwCWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAQWNrZWRTdGF0ZQIAAFdSDwAALwEAIyNXUg8AABX/////AQEBAAAAAQAsIwECAAA/Ug8AAQAAABVg" +
           "iQoCAAAAAAACAAAASWQCAABYUg8AAC4ARFhSDwAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABB" +
           "Y2tub3dsZWRnZQIAAGlSDwAALwEAlyNpUg8AAQEBAAAAAQD5CwABAPAiAQAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMCAABqUg8AAC4ARGpSDwCWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////" +
           "AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIA" +
           "AAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNv" +
           "bmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAQWN0aXZlU3RhdGUC" +
           "AABtUg8AAC8BACMjbVIPAAAV/////wEBAQAAAAEALCMBAgAAP1IPAAEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AgAAblIPAAAuAERuUg8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAgAAdlIP" +
           "AAAuAER2Ug8AABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAIA" +
           "AKJSDwAALgBEolIPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFRhcmdldFZhbHVlTm9kZQEA" +
           "P0MALgBEP0MAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEV4cGVjdGVkVGltZQEAQEMALgBE" +
           "QEMAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAVG9sZXJhbmNlAQBBQwAuAERBQwAAAAv/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> TargetValueNode
        {
            get
            {
                return m_targetValueNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_targetValueNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_targetValueNode = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExpectedTime
        {
            get
            {
                return m_expectedTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expectedTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expectedTime = value;
            }
        }

        /// <remarks />
        public PropertyState<double> Tolerance
        {
            get
            {
                return m_tolerance;
            }

            set
            {
                if (!Object.ReferenceEquals(m_tolerance, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_tolerance = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_targetValueNode != null)
            {
                children.Add(m_targetValueNode);
            }

            if (m_expectedTime != null)
            {
                children.Add(m_expectedTime);
            }

            if (m_tolerance != null)
            {
                children.Add(m_tolerance);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TargetValueNode:
                {
                    if (createOrReplace)
                    {
                        if (TargetValueNode == null)
                        {
                            if (replacement == null)
                            {
                                TargetValueNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                TargetValueNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = TargetValueNode;
                    break;
                }

                case Opc.Ua.BrowseNames.ExpectedTime:
                {
                    if (createOrReplace)
                    {
                        if (ExpectedTime == null)
                        {
                            if (replacement == null)
                            {
                                ExpectedTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExpectedTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExpectedTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Tolerance:
                {
                    if (createOrReplace)
                    {
                        if (Tolerance == null)
                        {
                            if (replacement == null)
                            {
                                Tolerance = new PropertyState<double>(this);
                            }
                            else
                            {
                                Tolerance = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = Tolerance;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_targetValueNode;
        private PropertyState<double> m_expectedTime;
        private PropertyState<double> m_tolerance;
        #endregion
    }
    #endif
    #endregion

    #region BaseConditionClassState Class
    #if (!OPCUA_EXCLUDE_BaseConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseConditionClassState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public BaseConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAEJhc2VDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAmysBAJsr" +
           "mysAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProcessConditionClassState Class
    #if (!OPCUA_EXCLUDE_ProcessConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProcessConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public ProcessConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProcessConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFByb2Nlc3NDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAnCsB" +
           "AJwrnCsAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region MaintenanceConditionClassState Class
    #if (!OPCUA_EXCLUDE_MaintenanceConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MaintenanceConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public MaintenanceConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.MaintenanceConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAE1haW50ZW5hbmNlQ29uZGl0aW9uQ2xhc3NUeXBlSW5zdGFuY2UB" +
           "AJ0rAQCdK50rAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemConditionClassState Class
    #if (!OPCUA_EXCLUDE_SystemConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public SystemConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFN5c3RlbUNvbmRpdGlvbkNsYXNzVHlwZUluc3RhbmNlAQCeKwEA" +
           "niueKwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SafetyConditionClassState Class
    #if (!OPCUA_EXCLUDE_SafetyConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SafetyConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public SafetyConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SafetyConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFNhZmV0eUNvbmRpdGlvbkNsYXNzVHlwZUluc3RhbmNlAQBCQwEA" +
           "QkNCQwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region HighlyManagedAlarmConditionClassState Class
    #if (!OPCUA_EXCLUDE_HighlyManagedAlarmConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HighlyManagedAlarmConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public HighlyManagedAlarmConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HighlyManagedAlarmConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAEhpZ2hseU1hbmFnZWRBbGFybUNvbmRpdGlvbkNsYXNzVHlwZUlu" +
           "c3RhbmNlAQBDQwEAQ0NDQwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TrainingConditionClassState Class
    #if (!OPCUA_EXCLUDE_TrainingConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrainingConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public TrainingConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrainingConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAFRyYWluaW5nQ29uZGl0aW9uQ2xhc3NUeXBlSW5zdGFuY2UBAERD" +
           "AQBEQ0RDAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StatisticalConditionClassState Class
    #if (!OPCUA_EXCLUDE_StatisticalConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StatisticalConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public StatisticalConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StatisticalConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAFN0YXRpc3RpY2FsQ29uZGl0aW9uQ2xhc3NUeXBlSW5zdGFuY2UB" +
           "AOlIAQDpSOlIAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TestingConditionClassState Class
    #if (!OPCUA_EXCLUDE_TestingConditionClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TestingConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <remarks />
        public TestingConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TestingConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFRlc3RpbmdDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEARUMB" +
           "AEVDRUMAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAEF1ZGl0Q29uZGl0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAOYKAQDm" +
           "CuYKAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAANRSDwAALgBE1FIPAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAANVSDwAALgBE1VIPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADWUg8AAC4ARNZSDwAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAgAA11IPAAAuAETXUg8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAE" +
           "AAAAVGltZQIAANhSDwAALgBE2FIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2" +
           "ZVRpbWUCAADZUg8AAC4ARNlSDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UC" +
           "AADbUg8AAC4ARNtSDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAANxSDwAA" +
           "LgBE3FIPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIAAOFSDwAA" +
           "LgBE4VIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA4lIPAAAuAETiUg8A" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAADjUg8AAC4ARONSDwAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAADkUg8AAC4ARORSDwAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAADlUg8AAC4AROVSDwAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAIAAOZSDwAALgBE5lIPAAAR/////wEB/////wAA" +
           "AAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAA51IPAAAuAETnUg8AABgBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEnableEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEnableEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEnableEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionEnableEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEnableEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEF1ZGl0Q29uZGl0aW9uRW5hYmxlRXZlbnRUeXBlSW5zdGFuY2UB" +
           "APMKAQDzCvMKAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAOhSDwAALgBE6FIPAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAOlSDwAALgBE6VIPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADqUg8AAC4AROpSDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAA61IPAAAuAETrUg8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAEAAAAVGltZQIAAOxSDwAALgBE7FIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "UmVjZWl2ZVRpbWUCAADtUg8AAC4ARO1SDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1l" +
           "c3NhZ2UCAADvUg8AAC4ARO9SDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIA" +
           "APBSDwAALgBE8FIPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAIA" +
           "APVSDwAALgBE9VIPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA9lIPAAAu" +
           "AET2Ug8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAD3Ug8AAC4ARPdSDwAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAD4Ug8AAC4ARPhS" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAD5Ug8AAC4ARPlSDwAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAIAAPpSDwAALgBE+lIPAAAR/////wEB" +
           "/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAA+1IPAAAuAET7Ug8AABgBAAAAAQAA" +
           "AAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionCommentEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionCommentEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionCommentEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionCommentEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionCommentEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29tbWVudEV2ZW50VHlwZUluc3RhbmNl" +
           "AQANCwEADQsNCwAA/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAD8Ug8AAC4ARPxSDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAD9Ug8AAC4ARP1SDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA/lIPAAAuAET+Ug8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAP9SDwAALgBE/1IPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAAAAUw8AAC4ARABTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAAVMPAAAuAEQBUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAA1MPAAAuAEQDUw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AAAEUw8AAC4ARARTDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AAAJUw8AAC4ARAlTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAApTDwAA" +
           "LgBEClMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAC1MPAAAuAEQLUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAADFMPAAAuAEQM" +
           "Uw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAADVMPAAAuAEQNUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAAAOUw8AAC4ARA5TDwAAEf////8B" +
           "Af////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAA9TDwAALgBED1MPAAAYAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uRXZlbnRJZAEARkMALgBERkMAAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAEsuAC4AREsuAAAAFf////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionRespondEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionRespondEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionRespondEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionRespondEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionRespondEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uUmVzcG9uZEV2ZW50VHlwZUluc3RhbmNl" +
           "AQDfIgEA3yLfIgAA/////xAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAAQUw8AAC4ARBBTDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAARUw8AAC4ARBFTDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAElMPAAAuAEQSUw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAABNTDwAALgBEE1MPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAAAUUw8AAC4ARBRTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAFVMPAAAuAEQVUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAF1MPAAAuAEQXUw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AAAYUw8AAC4ARBhTDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AAAdUw8AAC4ARB1TDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAB5TDwAA" +
           "LgBEHlMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAH1MPAAAuAEQfUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAIFMPAAAuAEQg" +
           "Uw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAIVMPAAAuAEQhUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAAAiUw8AAC4ARCJTDwAAEf////8B" +
           "Af////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAACNTDwAALgBEI1MPAAAYAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAAU2VsZWN0ZWRSZXNwb25zZQEATC4ALgBETC4AAAAH" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> SelectedResponse
        {
            get
            {
                return m_selectedResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selectedResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selectedResponse = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_selectedResponse != null)
            {
                children.Add(m_selectedResponse);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SelectedResponse:
                {
                    if (createOrReplace)
                    {
                        if (SelectedResponse == null)
                        {
                            if (replacement == null)
                            {
                                SelectedResponse = new PropertyState<uint>(this);
                            }
                            else
                            {
                                SelectedResponse = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = SelectedResponse;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_selectedResponse;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionAcknowledgeEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionAcknowledgeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionAcknowledgeEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionAcknowledgeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionAcknowledgeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEF1ZGl0Q29uZGl0aW9uQWNrbm93bGVkZ2VFdmVudFR5cGVJbnN0" +
           "YW5jZQEA8CIBAPAi8CIAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAJFMPAAAuAEQkUw8A" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAJVMPAAAuAEQlUw8AABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAACZTDwAALgBEJlMPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAAnUw8AAC4ARCdTDwAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABUaW1lAgAAKFMPAAAuAEQoUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABSZWNlaXZlVGltZQIAAClTDwAALgBEKVMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAATWVzc2FnZQIAACtTDwAALgBEK1MPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVy" +
           "aXR5AgAALFMPAAAuAEQsUw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0" +
           "YW1wAgAAMVMPAAAuAEQxUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAy" +
           "Uw8AAC4ARDJTDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAADNTDwAALgBE" +
           "M1MPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAADRTDwAA" +
           "LgBENFMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAADVTDwAALgBE" +
           "NVMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAANlMPAAAuAEQ2Uw8AABH/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAA3Uw8AAC4ARDdTDwAAGAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkV2ZW50SWQBAEdDAC4AREdD" +
           "AAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQBNLgAuAERNLgAAABX/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionConfirmEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionConfirmEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionConfirmEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionConfirmEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionConfirmEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29uZmlybUV2ZW50VHlwZUluc3RhbmNl" +
           "AQABIwEAASMBIwAA/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAA4Uw8AAC4ARDhTDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAA5Uw8AAC4ARDlTDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAOlMPAAAuAEQ6Uw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAADtTDwAALgBEO1MPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAAA8Uw8AAC4ARDxTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAPVMPAAAuAEQ9Uw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAP1MPAAAuAEQ/Uw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AABAUw8AAC4AREBTDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AABFUw8AAC4AREVTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAEZTDwAA" +
           "LgBERlMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAR1MPAAAuAERHUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAASFMPAAAuAERI" +
           "Uw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAASVMPAAAuAERJUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAABKUw8AAC4AREpTDwAAEf////8B" +
           "Af////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAEtTDwAALgBES1MPAAAYAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29uZGl0aW9uRXZlbnRJZAEASEMALgBESEMAAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAE4uAC4ARE4uAAAAFf////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ConditionEventId
        {
            get
            {
                return m_conditionEventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionEventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionEventId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionEventId != null)
            {
                children.Add(m_conditionEventId);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionEventId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionEventId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionEventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ConditionEventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ConditionEventId;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_conditionEventId;
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionShelvingEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionShelvingEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionShelvingEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionShelvingEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionShelvingEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ShelvingTime != null)
            {
                ShelvingTime.Initialize(context, ShelvingTime_InitializationString);
            }
        }

        #region Initialization String
        private const string ShelvingTime_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFNoZWx2aW5nVGltZQEATy4ALgBETy4AAAEAIgH/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0Q29uZGl0aW9uU2hlbHZpbmdFdmVudFR5cGVJbnN0YW5j" +
           "ZQEAVSsBAFUrVSsAAP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAATFMPAAAuAERMUw8AAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAATVMPAAAuAERNUw8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAE5TDwAALgBETlMPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAABPUw8AAC4ARE9TDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAQAAABUaW1lAgAAUFMPAAAuAERQUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABSZWNlaXZlVGltZQIAAFFTDwAALgBEUVMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "TWVzc2FnZQIAAFNTDwAALgBEU1MPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5" +
           "AgAAVFMPAAAuAERUUw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1w" +
           "AgAAWVMPAAAuAERZUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAABaUw8A" +
           "AC4ARFpTDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAFtTDwAALgBEW1MP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAFxTDwAALgBE" +
           "XFMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAF1TDwAALgBEXVMP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAXlMPAAAuAEReUw8AABH/////" +
           "AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABfUw8AAC4ARF9TDwAAGAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADAAAAFNoZWx2aW5nVGltZQEATy4ALgBETy4AAAEAIgH/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> ShelvingTime
        {
            get
            {
                return m_shelvingTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_shelvingTime != null)
            {
                children.Add(m_shelvingTime);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ShelvingTime:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingTime == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                ShelvingTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ShelvingTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_shelvingTime;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionSuppressionEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionSuppressionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionSuppressionEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionSuppressionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionSuppressionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEF1ZGl0Q29uZGl0aW9uU3VwcHJlc3Npb25FdmVudFR5cGVJbnN0" +
           "YW5jZQEASUMBAElDSUMAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAYFMPAAAuAERgUw8A" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAYVMPAAAuAERhUw8AABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAGJTDwAALgBEYlMPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAABjUw8AAC4ARGNTDwAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABUaW1lAgAAZFMPAAAuAERkUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABSZWNlaXZlVGltZQIAAGVTDwAALgBEZVMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAATWVzc2FnZQIAAGdTDwAALgBEZ1MPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVy" +
           "aXR5AgAAaFMPAAAuAERoUw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0" +
           "YW1wAgAAbVMPAAAuAERtUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAABu" +
           "Uw8AAC4ARG5TDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAG9TDwAALgBE" +
           "b1MPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAHBTDwAA" +
           "LgBEcFMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAHFTDwAALgBE" +
           "cVMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAclMPAAAuAERyUw8AABH/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABzUw8AAC4ARHNTDwAAGAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionSilenceEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionSilenceEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionSilenceEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionSilenceEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionSilenceEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uU2lsZW5jZUV2ZW50VHlwZUluc3RhbmNl" +
           "AQBaQwEAWkNaQwAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAAB0Uw8AAC4ARHRTDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAAB1Uw8AAC4ARHVTDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAdlMPAAAuAER2Uw8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAHdTDwAALgBEd1MPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAAB4Uw8AAC4ARHhTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAAeVMPAAAuAER5Uw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAe1MPAAAuAER7Uw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AAB8Uw8AAC4ARHxTDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AACBUw8AAC4ARIFTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAIJTDwAA" +
           "LgBEglMPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAg1MPAAAuAESDUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAhFMPAAAuAESE" +
           "Uw8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAhVMPAAAuAESFUw8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAACGUw8AAC4ARIZTDwAAEf////8B" +
           "Af////8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAIdTDwAALgBEh1MPAAAYAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionResetEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionResetEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionResetEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionResetEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionResetEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEF1ZGl0Q29uZGl0aW9uUmVzZXRFdmVudFR5cGVJbnN0YW5jZQEA" +
           "pToBAKU6pToAAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAiFMPAAAuAESIUw8AAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAiVMPAAAuAESJUw8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAIpTDwAALgBEilMPAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAACLUw8AAC4ARItTDwAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAQAAABUaW1lAgAAjFMPAAAuAESMUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABS" +
           "ZWNlaXZlVGltZQIAAI1TDwAALgBEjVMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVz" +
           "c2FnZQIAAI9TDwAALgBEj1MPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAA" +
           "kFMPAAAuAESQUw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAgAA" +
           "lVMPAAAuAESVUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAACWUw8AAC4A" +
           "RJZTDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAJdTDwAALgBEl1MPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAJhTDwAALgBEmFMP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAJlTDwAALgBEmVMPAAAM" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAmlMPAAAuAESaUw8AABH/////AQH/" +
           "////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAACbUw8AAC4ARJtTDwAAGAEAAAABAAAA" +
           "AAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionOutOfServiceEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionOutOfServiceEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionOutOfServiceEventState : AuditConditionEventState
    {
        #region Constructors
        /// <remarks />
        public AuditConditionOutOfServiceEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionOutOfServiceEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAEF1ZGl0Q29uZGl0aW9uT3V0T2ZTZXJ2aWNlRXZlbnRUeXBlSW5z" +
           "dGFuY2UBAGtDAQBrQ2tDAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAJxTDwAALgBEnFMP" +
           "AAAP/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAJ1TDwAALgBEnVMPAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAACeUw8AAC4ARJ5TDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAn1MPAAAuAESfUw8AAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAEAAAAVGltZQIAAKBTDwAALgBEoFMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAALAAAAUmVjZWl2ZVRpbWUCAAChUw8AAC4ARKFTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BwAAAE1lc3NhZ2UCAACjUw8AAC4ARKNTDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZl" +
           "cml0eQIAAKRTDwAALgBEpFMPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVT" +
           "dGFtcAIAAKlTDwAALgBEqVMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA" +
           "qlMPAAAuAESqUw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAACrUw8AAC4A" +
           "RKtTDwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAACsUw8A" +
           "AC4ARKxTDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACtUw8AAC4A" +
           "RK1TDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAIAAK5TDwAALgBErlMPAAAR" +
           "/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAr1MPAAAuAESvUw8AABgB" +
           "AAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshStartEventState Class
    #if (!OPCUA_EXCLUDE_RefreshStartEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshStartEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public RefreshStartEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshStartEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFJlZnJlc2hTdGFydEV2ZW50VHlwZUluc3RhbmNlAQDjCgEA4wrj" +
           "CgAA/////wgAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACwUw8AAC4ARLBTDwAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACxUw8AAC4ARLFTDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAslMPAAAuAESyUw8AABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQIAALNTDwAALgBEs1MPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUCAAC0Uw8AAC4ARLRTDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVU" +
           "aW1lAgAAtVMPAAAuAES1Uw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAA" +
           "t1MPAAAuAES3Uw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAAC4Uw8AAC4A" +
           "RLhTDwAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshEndEventState Class
    #if (!OPCUA_EXCLUDE_RefreshEndEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshEndEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public RefreshEndEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshEndEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFJlZnJlc2hFbmRFdmVudFR5cGVJbnN0YW5jZQEA5AoBAOQK5AoA" +
           "AP////8IAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAvVMPAAAuAES9Uw8AAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAvlMPAAAuAES+Uw8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQIAAL9TDwAALgBEv1MPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUCAADAUw8AAC4ARMBTDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABU" +
           "aW1lAgAAwVMPAAAuAETBUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGlt" +
           "ZQIAAMJTDwAALgBEwlMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQIAAMRT" +
           "DwAALgBExFMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AgAAxVMPAAAuAETF" +
           "Uw8AAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshRequiredEventState Class
    #if (!OPCUA_EXCLUDE_RefreshRequiredEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshRequiredEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public RefreshRequiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshRequiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFJlZnJlc2hSZXF1aXJlZEV2ZW50VHlwZUluc3RhbmNlAQDlCgEA" +
           "5QrlCgAA/////wgAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADKUw8AAC4ARMpTDwAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADLUw8AAC4ARMtTDwAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAzFMPAAAuAETMUw8AABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQIAAM1TDwAALgBEzVMPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BAAAAFRpbWUCAADOUw8AAC4ARM5TDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2Vp" +
           "dmVUaW1lAgAAz1MPAAAuAETPUw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdl" +
           "AgAA0VMPAAAuAETRUw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADSUw8A" +
           "AC4ARNJTDwAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AlarmMetricsState Class
    #if (!OPCUA_EXCLUDE_AlarmMetricsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmMetricsState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public AlarmMetricsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmMetricsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAEFsYXJtTWV0cmljc1R5cGVJbnN0YW5jZQEAf0MBAH9Df0MAAP//" +
           "//8JAAAAFWCJCgIAAAAAAAoAAABBbGFybUNvdW50AQCAQwAvAD+AQwAAAAf/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAAU3RhcnRUaW1lAQBHRgAvAD9HRgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABIAAABNYXhpbXVtQWN0aXZlU3RhdGUBAIFDAC8AP4FDAAABACIB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADAAAAE1heGltdW1VbkFjawEAgkMALwA/gkMAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAQ" +
           "AAAAQ3VycmVudEFsYXJtUmF0ZQEAhEMALwEAfUOEQwAAAAv/////AQH/////AQAAABVgiQoCAAAAAAAE" +
           "AAAAUmF0ZQEAhUMALgBEhUMAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAE1heGltdW1BbGFy" +
           "bVJhdGUBAIZDAC8BAH1DhkMAAAAL/////wEB/////wEAAAAVYIkKAgAAAAAABAAAAFJhdGUBAIdDAC4A" +
           "RIdDAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABNYXhpbXVtUmVBbGFybUNvdW50AQCDQwAv" +
           "AD+DQwAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQXZlcmFnZUFsYXJtUmF0ZQEAiEMALwEA" +
           "fUOIQwAAAAv/////AQH/////AQAAABVgiQoCAAAAAAAEAAAAUmF0ZQEAiUMALgBEiUMAAAAF/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AQDqSAAvAQDqSOpIAAABAQEAAAABAPkLAAEATwgAAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> AlarmCount
        {
            get
            {
                return m_alarmCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_alarmCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_alarmCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> MaximumActiveState
        {
            get
            {
                return m_maximumActiveState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maximumActiveState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maximumActiveState = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> MaximumUnAck
        {
            get
            {
                return m_maximumUnAck;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maximumUnAck, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maximumUnAck = value;
            }
        }

        /// <remarks />
        public AlarmRateVariableState CurrentAlarmRate
        {
            get
            {
                return m_currentAlarmRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentAlarmRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentAlarmRate = value;
            }
        }

        /// <remarks />
        public AlarmRateVariableState MaximumAlarmRate
        {
            get
            {
                return m_maximumAlarmRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maximumAlarmRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maximumAlarmRate = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaximumReAlarmCount
        {
            get
            {
                return m_maximumReAlarmCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maximumReAlarmCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maximumReAlarmCount = value;
            }
        }

        /// <remarks />
        public AlarmRateVariableState AverageAlarmRate
        {
            get
            {
                return m_averageAlarmRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_averageAlarmRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_averageAlarmRate = value;
            }
        }

        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_alarmCount != null)
            {
                children.Add(m_alarmCount);
            }

            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_maximumActiveState != null)
            {
                children.Add(m_maximumActiveState);
            }

            if (m_maximumUnAck != null)
            {
                children.Add(m_maximumUnAck);
            }

            if (m_currentAlarmRate != null)
            {
                children.Add(m_currentAlarmRate);
            }

            if (m_maximumAlarmRate != null)
            {
                children.Add(m_maximumAlarmRate);
            }

            if (m_maximumReAlarmCount != null)
            {
                children.Add(m_maximumReAlarmCount);
            }

            if (m_averageAlarmRate != null)
            {
                children.Add(m_averageAlarmRate);
            }

            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AlarmCount:
                {
                    if (createOrReplace)
                    {
                        if (AlarmCount == null)
                        {
                            if (replacement == null)
                            {
                                AlarmCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                AlarmCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = AlarmCount;
                    break;
                }

                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.MaximumActiveState:
                {
                    if (createOrReplace)
                    {
                        if (MaximumActiveState == null)
                        {
                            if (replacement == null)
                            {
                                MaximumActiveState = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                MaximumActiveState = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = MaximumActiveState;
                    break;
                }

                case Opc.Ua.BrowseNames.MaximumUnAck:
                {
                    if (createOrReplace)
                    {
                        if (MaximumUnAck == null)
                        {
                            if (replacement == null)
                            {
                                MaximumUnAck = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                MaximumUnAck = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = MaximumUnAck;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentAlarmRate:
                {
                    if (createOrReplace)
                    {
                        if (CurrentAlarmRate == null)
                        {
                            if (replacement == null)
                            {
                                CurrentAlarmRate = new AlarmRateVariableState(this);
                            }
                            else
                            {
                                CurrentAlarmRate = (AlarmRateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentAlarmRate;
                    break;
                }

                case Opc.Ua.BrowseNames.MaximumAlarmRate:
                {
                    if (createOrReplace)
                    {
                        if (MaximumAlarmRate == null)
                        {
                            if (replacement == null)
                            {
                                MaximumAlarmRate = new AlarmRateVariableState(this);
                            }
                            else
                            {
                                MaximumAlarmRate = (AlarmRateVariableState)replacement;
                            }
                        }
                    }

                    instance = MaximumAlarmRate;
                    break;
                }

                case Opc.Ua.BrowseNames.MaximumReAlarmCount:
                {
                    if (createOrReplace)
                    {
                        if (MaximumReAlarmCount == null)
                        {
                            if (replacement == null)
                            {
                                MaximumReAlarmCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaximumReAlarmCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaximumReAlarmCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AverageAlarmRate:
                {
                    if (createOrReplace)
                    {
                        if (AverageAlarmRate == null)
                        {
                            if (replacement == null)
                            {
                                AverageAlarmRate = new AlarmRateVariableState(this);
                            }
                            else
                            {
                                AverageAlarmRate = (AlarmRateVariableState)replacement;
                            }
                        }
                    }

                    instance = AverageAlarmRate;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_alarmCount;
        private BaseDataVariableState<DateTime> m_startTime;
        private BaseDataVariableState<double> m_maximumActiveState;
        private BaseDataVariableState<double> m_maximumUnAck;
        private AlarmRateVariableState m_currentAlarmRate;
        private AlarmRateVariableState m_maximumAlarmRate;
        private BaseDataVariableState<uint> m_maximumReAlarmCount;
        private AlarmRateVariableState m_averageAlarmRate;
        private MethodState m_resetMethod;
        #endregion
    }
    #endif
    #endregion

    #region AlarmRateVariableState Class
    #if (!OPCUA_EXCLUDE_AlarmRateVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmRateVariableState : BaseDataVariableState<double>
    {
        #region Constructors
        /// <remarks />
        public AlarmRateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AlarmRateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Double, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHQAAAEFsYXJtUmF0ZVZhcmlhYmxlVHlwZUluc3RhbmNlAQB9QwEAfUN9" +
           "QwAAAAv/////AQH/////AQAAABVgiQoCAAAAAAAEAAAAUmF0ZQEAfkMALgBEfkMAAAAF/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ushort> Rate
        {
            get
            {
                return m_rate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_rate != null)
            {
                children.Add(m_rate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Rate:
                {
                    if (createOrReplace)
                    {
                        if (Rate == null)
                        {
                            if (replacement == null)
                            {
                                Rate = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Rate = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Rate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ushort> m_rate;
        #endregion
    }
    #endif
    #endregion

    #region AlarmStateVariableState Class
    #if (!OPCUA_EXCLUDE_AlarmStateVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmStateVariableState : BaseDataVariableState<ushort>
    {
        #region Constructors
        /// <remarks />
        public AlarmStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AlarmStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.AlarmMask, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHgAAAEFsYXJtU3RhdGVWYXJpYWJsZVR5cGVJbnN0YW5jZQEA9H0BAPR9" +
           "9H0AAAEA+33/////AQH/////BgAAABVgiQoCAAAAAAAVAAAASGlnaGVzdEFjdGl2ZVNldmVyaXR5AQD1" +
           "fQAuAET1fQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAUAAAASGlnaGVzdFVuYWNrU2V2ZXJpdHkB" +
           "APZ9AC4ARPZ9AAAABf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABBY3RpdmVDb3VudAEA930ALgBE" +
           "930AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFVuYWNrbm93bGVkZ2VkQ291bnQBAPh9AC4A" +
           "RPh9AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABVbmNvbmZpcm1lZENvdW50AQD5fQAuAET5" +
           "fQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAGAAAARmlsdGVyAQD6fQAuAET6fQAAAQBKAv////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ushort> HighestActiveSeverity
        {
            get
            {
                return m_highestActiveSeverity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highestActiveSeverity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highestActiveSeverity = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> HighestUnackSeverity
        {
            get
            {
                return m_highestUnackSeverity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highestUnackSeverity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highestUnackSeverity = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> ActiveCount
        {
            get
            {
                return m_activeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_activeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_activeCount = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> UnacknowledgedCount
        {
            get
            {
                return m_unacknowledgedCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unacknowledgedCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unacknowledgedCount = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> UnconfirmedCount
        {
            get
            {
                return m_unconfirmedCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unconfirmedCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unconfirmedCount = value;
            }
        }

        /// <remarks />
        public PropertyState<ContentFilter> Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_filter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_filter = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highestActiveSeverity != null)
            {
                children.Add(m_highestActiveSeverity);
            }

            if (m_highestUnackSeverity != null)
            {
                children.Add(m_highestUnackSeverity);
            }

            if (m_activeCount != null)
            {
                children.Add(m_activeCount);
            }

            if (m_unacknowledgedCount != null)
            {
                children.Add(m_unacknowledgedCount);
            }

            if (m_unconfirmedCount != null)
            {
                children.Add(m_unconfirmedCount);
            }

            if (m_filter != null)
            {
                children.Add(m_filter);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighestActiveSeverity:
                {
                    if (createOrReplace)
                    {
                        if (HighestActiveSeverity == null)
                        {
                            if (replacement == null)
                            {
                                HighestActiveSeverity = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                HighestActiveSeverity = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = HighestActiveSeverity;
                    break;
                }

                case Opc.Ua.BrowseNames.HighestUnackSeverity:
                {
                    if (createOrReplace)
                    {
                        if (HighestUnackSeverity == null)
                        {
                            if (replacement == null)
                            {
                                HighestUnackSeverity = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                HighestUnackSeverity = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = HighestUnackSeverity;
                    break;
                }

                case Opc.Ua.BrowseNames.ActiveCount:
                {
                    if (createOrReplace)
                    {
                        if (ActiveCount == null)
                        {
                            if (replacement == null)
                            {
                                ActiveCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                ActiveCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = ActiveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnacknowledgedCount:
                {
                    if (createOrReplace)
                    {
                        if (UnacknowledgedCount == null)
                        {
                            if (replacement == null)
                            {
                                UnacknowledgedCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                UnacknowledgedCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnacknowledgedCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnconfirmedCount:
                {
                    if (createOrReplace)
                    {
                        if (UnconfirmedCount == null)
                        {
                            if (replacement == null)
                            {
                                UnconfirmedCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                UnconfirmedCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnconfirmedCount;
                    break;
                }

                case Opc.Ua.BrowseNames.Filter:
                {
                    if (createOrReplace)
                    {
                        if (Filter == null)
                        {
                            if (replacement == null)
                            {
                                Filter = new PropertyState<ContentFilter>(this);
                            }
                            else
                            {
                                Filter = (PropertyState<ContentFilter>)replacement;
                            }
                        }
                    }

                    instance = Filter;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ushort> m_highestActiveSeverity;
        private PropertyState<ushort> m_highestUnackSeverity;
        private PropertyState<uint> m_activeCount;
        private PropertyState<uint> m_unacknowledgedCount;
        private PropertyState<uint> m_unconfirmedCount;
        private PropertyState<ContentFilter> m_filter;
        #endregion
    }
    #endif
    #endregion

    #region ProgramStateMachineState Class
    #if (!OPCUA_EXCLUDE_ProgramStateMachineState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <remarks />
        public ProgramStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ProgramDiagnostic != null)
            {
                ProgramDiagnostic.Initialize(context, ProgramDiagnostic_InitializationString);
            }

            if (FinalResultData != null)
            {
                FinalResultData.Initialize(context, FinalResultData_InitializationString);
            }
        }

        #region Initialization String
        private const string ProgramDiagnostic_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAFByb2dyYW1EaWFnbm9zdGljAQBfCQAvAQAXPF8JAAABAOFd////" +
           "/wEB/////wwAAAAVYIkKAgAAAAAADwAAAENyZWF0ZVNlc3Npb25JZAEAAA8ALwA/AA8AAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEAAAAENyZWF0ZUNsaWVudE5hbWUBAAEPAC8APwEPAAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABYAAABJbnZvY2F0aW9uQ3JlYXRpb25UaW1lAQACDwAvAD8CDwAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABIAAABMYXN0VHJhbnNpdGlvblRpbWUBAAMPAC4ARAMPAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RNZXRob2RDYWxsAQAEDwAvAD8EDwAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAATAAAATGFzdE1ldGhvZFNlc3Npb25JZAEABQ8ALwA/BQ8AAAAR////" +
           "/wEB/////wAAAAAXYIkKAgAAAAAAGAAAAExhc3RNZXRob2RJbnB1dEFyZ3VtZW50cwEABg8ALwA/Bg8A" +
           "AAEAKAEBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABkAAABMYXN0TWV0aG9kT3V0cHV0QXJn" +
           "dW1lbnRzAQAHDwAvAD8HDwAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFQAAAExh" +
           "c3RNZXRob2RJbnB1dFZhbHVlcwEAvjoALwA/vjoAAAAYAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoC" +
           "AAAAAAAWAAAATGFzdE1ldGhvZE91dHB1dFZhbHVlcwEAwDoALwA/wDoAAAAYAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAASAAAATGFzdE1ldGhvZENhbGxUaW1lAQAIDwAvAD8IDwAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABYAAABMYXN0TWV0aG9kUmV0dXJuU3RhdHVzAQAJDwAvAD8JDwAAABP/" +
           "////AQH/////AAAAAA==";

        private const string FinalResultData_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAEZpbmFsUmVzdWx0RGF0YQEACg8ALwA6Cg8AAP////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFByb2dyYW1TdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAFcJAQBX" +
           "CVcJAAD/////BwAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQD2DgAvAQDICvYOAAAAFf////8B" +
           "Af////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA9w4ALgBE9w4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAE51bWJlcgEA+Q4ALgBE+Q4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RU" +
           "cmFuc2l0aW9uAQD7DgAvAQDPCvsOAAAAFf////8BAf////8DAAAAFWCJCgIAAAAAAAIAAABJZAEA/A4A" +
           "LgBE/A4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAE51bWJlcgEA/g4ALgBE/g4AAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQD/DgAuAET/DgAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABEZWxldGFibGUBAFkJAC4ARFkJAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABBdXRvRGVsZXRlAQBaCQAuAERaCQAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAMAAAAUmVjeWNsZUNvdW50AQBbCQAuAERbCQAAAAb/////AQH/////AAAAABVgiQoCAAAAAAARAAAA" +
           "UHJvZ3JhbURpYWdub3N0aWMBAF8JAC8BABc8XwkAAAEA4V3/////AQH/////DAAAABVgiQoCAAAAAAAP" +
           "AAAAQ3JlYXRlU2Vzc2lvbklkAQAADwAvAD8ADwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAQAAAA" +
           "Q3JlYXRlQ2xpZW50TmFtZQEAAQ8ALwA/AQ8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAElu" +
           "dm9jYXRpb25DcmVhdGlvblRpbWUBAAIPAC8APwIPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAExhc3RUcmFuc2l0aW9uVGltZQEAAw8ALgBEAw8AAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAATGFzdE1ldGhvZENhbGwBAAQPAC8APwQPAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMA" +
           "AABMYXN0TWV0aG9kU2Vzc2lvbklkAQAFDwAvAD8FDwAAABH/////AQH/////AAAAABdgiQoCAAAAAAAY" +
           "AAAATGFzdE1ldGhvZElucHV0QXJndW1lbnRzAQAGDwAvAD8GDwAAAQAoAQEAAAABAAAAAAAAAAEB////" +
           "/wAAAAAXYIkKAgAAAAAAGQAAAExhc3RNZXRob2RPdXRwdXRBcmd1bWVudHMBAAcPAC8APwcPAAABACgB" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAATGFzdE1ldGhvZElucHV0VmFsdWVzAQC+" +
           "OgAvAD++OgAAABgBAAAAAQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAABYAAABMYXN0TWV0aG9kT3V0" +
           "cHV0VmFsdWVzAQDAOgAvAD/AOgAAABgBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABIAAABM" +
           "YXN0TWV0aG9kQ2FsbFRpbWUBAAgPAC8APwgPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAFgAA" +
           "AExhc3RNZXRob2RSZXR1cm5TdGF0dXMBAAkPAC8APwkPAAAAE/////8BAf////8AAAAABGCACgEAAAAA" +
           "AA8AAABGaW5hbFJlc3VsdERhdGEBAAoPAC8AOgoPAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> Deletable
        {
            get
            {
                return m_deletable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deletable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deletable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AutoDelete
        {
            get
            {
                return m_autoDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_autoDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_autoDelete = value;
            }
        }

        /// <remarks />
        public PropertyState<int> RecycleCount
        {
            get
            {
                return m_recycleCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_recycleCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_recycleCount = value;
            }
        }

        /// <remarks />
        public ProgramDiagnostic2State ProgramDiagnostic
        {
            get
            {
                return m_programDiagnostic;
            }

            set
            {
                if (!Object.ReferenceEquals(m_programDiagnostic, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_programDiagnostic = value;
            }
        }

        /// <remarks />
        public BaseObjectState FinalResultData
        {
            get
            {
                return m_finalResultData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_finalResultData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_finalResultData = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_deletable != null)
            {
                children.Add(m_deletable);
            }

            if (m_autoDelete != null)
            {
                children.Add(m_autoDelete);
            }

            if (m_recycleCount != null)
            {
                children.Add(m_recycleCount);
            }

            if (m_programDiagnostic != null)
            {
                children.Add(m_programDiagnostic);
            }

            if (m_finalResultData != null)
            {
                children.Add(m_finalResultData);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Deletable:
                {
                    if (createOrReplace)
                    {
                        if (Deletable == null)
                        {
                            if (replacement == null)
                            {
                                Deletable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Deletable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Deletable;
                    break;
                }

                case Opc.Ua.BrowseNames.AutoDelete:
                {
                    if (createOrReplace)
                    {
                        if (AutoDelete == null)
                        {
                            if (replacement == null)
                            {
                                AutoDelete = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AutoDelete = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AutoDelete;
                    break;
                }

                case Opc.Ua.BrowseNames.RecycleCount:
                {
                    if (createOrReplace)
                    {
                        if (RecycleCount == null)
                        {
                            if (replacement == null)
                            {
                                RecycleCount = new PropertyState<int>(this);
                            }
                            else
                            {
                                RecycleCount = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = RecycleCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ProgramDiagnostic:
                {
                    if (createOrReplace)
                    {
                        if (ProgramDiagnostic == null)
                        {
                            if (replacement == null)
                            {
                                ProgramDiagnostic = new ProgramDiagnostic2State(this);
                            }
                            else
                            {
                                ProgramDiagnostic = (ProgramDiagnostic2State)replacement;
                            }
                        }
                    }

                    instance = ProgramDiagnostic;
                    break;
                }

                case Opc.Ua.BrowseNames.FinalResultData:
                {
                    if (createOrReplace)
                    {
                        if (FinalResultData == null)
                        {
                            if (replacement == null)
                            {
                                FinalResultData = new BaseObjectState(this);
                            }
                            else
                            {
                                FinalResultData = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = FinalResultData;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_deletable;
        private PropertyState<bool> m_autoDelete;
        private PropertyState<int> m_recycleCount;
        private ProgramDiagnostic2State m_programDiagnostic;
        private BaseObjectState m_finalResultData;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionEventState : TransitionEventState
    {
        #region Constructors
        /// <remarks />
        public ProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAFByb2dyYW1UcmFuc2l0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAEoJ" +
           "AQBKCUoJAAD/////DAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAANlTDwAALgBE2VMPAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAANpTDwAALgBE2lMPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADbUw8AAC4ARNtTDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOYW1lAgAA3FMPAAAuAETcUw8AAAz/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAEAAAAVGltZQIAAN1TDwAALgBE3VMPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVj" +
           "ZWl2ZVRpbWUCAADeUw8AAC4ARN5TDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3Nh" +
           "Z2UCAADgUw8AAC4AROBTDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQIAAOFT" +
           "DwAALgBE4VMPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRyYW5zaXRpb24CAADmUw8AAC8B" +
           "AMoK5lMPAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAgAA51MPAAAuAETnUw8AABj/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAARnJvbVN0YXRlAgAA7FMPAAAvAQDDCuxTDwAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAIAAO1TDwAALgBE7VMPAAAY/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABwAAAFRvU3RhdGUCAADxUw8AAC8BAMMK8VMPAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAA" +
           "AElkAgAA8lMPAAAuAETyUw8AABj/////AQH/////AAAAABVgiQoCAAAAAAASAAAASW50ZXJtZWRpYXRl" +
           "UmVzdWx0AQBLCQAvAD9LCQAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState IntermediateResult
        {
            get
            {
                return m_intermediateResult;
            }

            set
            {
                if (!Object.ReferenceEquals(m_intermediateResult, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_intermediateResult = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_intermediateResult != null)
            {
                children.Add(m_intermediateResult);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IntermediateResult:
                {
                    if (createOrReplace)
                    {
                        if (IntermediateResult == null)
                        {
                            if (replacement == null)
                            {
                                IntermediateResult = new BaseDataVariableState(this);
                            }
                            else
                            {
                                IntermediateResult = (BaseDataVariableState)replacement;
                            }
                        }
                    }

                    instance = IntermediateResult;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState m_intermediateResult;
        #endregion
    }
    #endif
    #endregion

    #region AuditProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_AuditProgramTransitionEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditProgramTransitionEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0UHJvZ3JhbVRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5j" +
           "ZQEAUC4BAFAuUC4AAP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAA9lMPAAAuAET2Uw8AAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAA91MPAAAuAET3Uw8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAPhTDwAALgBE+FMPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAD5Uw8AAC4ARPlTDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAQAAABUaW1lAgAA+lMPAAAuAET6Uw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABSZWNlaXZlVGltZQIAAPtTDwAALgBE+1MPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "TWVzc2FnZQIAAP1TDwAALgBE/VMPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5" +
           "AgAA/lMPAAAuAET+Uw8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1w" +
           "AgAAA1QPAAAuAEQDVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAEVA8A" +
           "AC4ARARUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAAVUDwAALgBEBVQP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAAZUDwAALgBE" +
           "BlQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAAdUDwAALgBEB1QP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAACFQPAAAuAEQIVA8AABH/////" +
           "AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAAJVA8AAC4ARAlUDwAAGAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAE9sZFN0YXRlSWQCAAAKVA8AAC4ARApUDwAAGP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAoAAABOZXdTdGF0ZUlkAgAAC1QPAAAuAEQLVA8AABj/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAQAAAAVHJhbnNpdGlvbk51bWJlcgEAYy4ALgBEYy4AAAAH/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionAuditEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionAuditEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <remarks />
        public ProgramTransitionAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAFByb2dyYW1UcmFuc2l0aW9uQXVkaXRFdmVudFR5cGVJbnN0YW5j" +
           "ZQEA3g4BAN4O3g4AAP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAADFQPAAAuAEQMVA8AAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAADVQPAAAuAEQNVA8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAA5UDwAALgBEDlQPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAAPVA8AAC4ARA9UDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAQAAABUaW1lAgAAEFQPAAAuAEQQVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABSZWNlaXZlVGltZQIAABFUDwAALgBEEVQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "TWVzc2FnZQIAABNUDwAALgBEE1QPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5" +
           "AgAAFFQPAAAuAEQUVA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1w" +
           "AgAAGVQPAAAuAEQZVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAaVA8A" +
           "AC4ARBpUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAABtUDwAALgBEG1QP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAABxUDwAALgBE" +
           "HFQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAB1UDwAALgBEHVQP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAHlQPAAAuAEQeVA8AABH/////" +
           "AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAAfVA8AAC4ARB9UDwAAGAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAE9sZFN0YXRlSWQCAAAgVA8AAC4ARCBUDwAAGP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAoAAABOZXdTdGF0ZUlkAgAAIVQPAAAuAEQhVA8AABj/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAVHJhbnNpdGlvbgEA8Q4ALwEAzwrxDgAAABX/////AQH/////AQAA" +
           "ABVgiQoCAAAAAAACAAAASWQBAPIOAC4ARPIOAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public FiniteTransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private FiniteTransitionVariableState m_transition;
        #endregion
    }
    #endif
    #endregion

    #region ProgramDiagnosticState Class
    #if (!OPCUA_EXCLUDE_ProgramDiagnosticState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramDiagnosticState : BaseDataVariableState<Opc.Ua.ProgramDiagnosticDataType>
    {
        #region Constructors
        /// <remarks />
        public ProgramDiagnosticState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ProgramDiagnosticType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ProgramDiagnosticDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHQAAAFByb2dyYW1EaWFnbm9zdGljVHlwZUluc3RhbmNlAQBMCQEATAlM" +
           "CQAAAQB+A/////8BAf////8KAAAAFWCJCgIAAAAAAA8AAABDcmVhdGVTZXNzaW9uSWQBAE0JAC4ARE0J" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDcmVhdGVDbGllbnROYW1lAQBOCQAuAEROCQAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAWAAAASW52b2NhdGlvbkNyZWF0aW9uVGltZQEATwkALgBE" +
           "TwkAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdFRyYW5zaXRpb25UaW1lAQBQCQAu" +
           "AERQCQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0TWV0aG9kQ2FsbAEAUQkALgBE" +
           "UQkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAExhc3RNZXRob2RTZXNzaW9uSWQBAFIJAC4A" +
           "RFIJAAAAEf////8BAf////8AAAAAF2CJCgIAAAAAABgAAABMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMB" +
           "AFMJAC4ARFMJAAAAGAEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAGQAAAExhc3RNZXRob2RP" +
           "dXRwdXRBcmd1bWVudHMBAFQJAC4ARFQJAAAAGAEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAExhc3RNZXRob2RDYWxsVGltZQEAVQkALgBEVQkAAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAWAAAATGFzdE1ldGhvZFJldHVyblN0YXR1cwEAVgkALgBEVgkAAAEAKwH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CreateSessionId
        {
            get
            {
                return m_createSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> CreateClientName
        {
            get
            {
                return m_createClientName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createClientName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createClientName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> InvocationCreationTime
        {
            get
            {
                return m_invocationCreationTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invocationCreationTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invocationCreationTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastTransitionTime
        {
            get
            {
                return m_lastTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<string> LastMethodCall
        {
            get
            {
                return m_lastMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> LastMethodSessionId
        {
            get
            {
                return m_lastMethodSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> LastMethodInputArguments
        {
            get
            {
                return m_lastMethodInputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodInputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodInputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> LastMethodOutputArguments
        {
            get
            {
                return m_lastMethodOutputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodOutputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodOutputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastMethodCallTime
        {
            get
            {
                return m_lastMethodCallTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCallTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCallTime = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusResult> LastMethodReturnStatus
        {
            get
            {
                return m_lastMethodReturnStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodReturnStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodReturnStatus = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createSessionId != null)
            {
                children.Add(m_createSessionId);
            }

            if (m_createClientName != null)
            {
                children.Add(m_createClientName);
            }

            if (m_invocationCreationTime != null)
            {
                children.Add(m_invocationCreationTime);
            }

            if (m_lastTransitionTime != null)
            {
                children.Add(m_lastTransitionTime);
            }

            if (m_lastMethodCall != null)
            {
                children.Add(m_lastMethodCall);
            }

            if (m_lastMethodSessionId != null)
            {
                children.Add(m_lastMethodSessionId);
            }

            if (m_lastMethodInputArguments != null)
            {
                children.Add(m_lastMethodInputArguments);
            }

            if (m_lastMethodOutputArguments != null)
            {
                children.Add(m_lastMethodOutputArguments);
            }

            if (m_lastMethodCallTime != null)
            {
                children.Add(m_lastMethodCallTime);
            }

            if (m_lastMethodReturnStatus != null)
            {
                children.Add(m_lastMethodReturnStatus);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateSessionId:
                {
                    if (createOrReplace)
                    {
                        if (CreateSessionId == null)
                        {
                            if (replacement == null)
                            {
                                CreateSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CreateSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CreateSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateClientName:
                {
                    if (createOrReplace)
                    {
                        if (CreateClientName == null)
                        {
                            if (replacement == null)
                            {
                                CreateClientName = new PropertyState<string>(this);
                            }
                            else
                            {
                                CreateClientName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CreateClientName;
                    break;
                }

                case Opc.Ua.BrowseNames.InvocationCreationTime:
                {
                    if (createOrReplace)
                    {
                        if (InvocationCreationTime == null)
                        {
                            if (replacement == null)
                            {
                                InvocationCreationTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                InvocationCreationTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = InvocationCreationTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (LastTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                LastTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCall = new PropertyState<string>(this);
                            }
                            else
                            {
                                LastMethodCall = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodSessionId:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodSessionId == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                LastMethodSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = LastMethodSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodInputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodInputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodInputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                LastMethodInputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodInputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodOutputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodOutputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodOutputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                LastMethodOutputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodOutputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCallTime:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCallTime == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCallTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastMethodCallTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCallTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodReturnStatus:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodReturnStatus == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodReturnStatus = new PropertyState<StatusResult>(this);
                            }
                            else
                            {
                                LastMethodReturnStatus = (PropertyState<StatusResult>)replacement;
                            }
                        }
                    }

                    instance = LastMethodReturnStatus;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_createSessionId;
        private PropertyState<string> m_createClientName;
        private PropertyState<DateTime> m_invocationCreationTime;
        private PropertyState<DateTime> m_lastTransitionTime;
        private PropertyState<string> m_lastMethodCall;
        private PropertyState<NodeId> m_lastMethodSessionId;
        private PropertyState<object[]> m_lastMethodInputArguments;
        private PropertyState<object[]> m_lastMethodOutputArguments;
        private PropertyState<DateTime> m_lastMethodCallTime;
        private PropertyState<StatusResult> m_lastMethodReturnStatus;
        #endregion
    }

    #region ProgramDiagnosticValue Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ProgramDiagnosticValue : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ProgramDiagnosticValue(ProgramDiagnosticState variable, ProgramDiagnosticDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ProgramDiagnosticDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ProgramDiagnosticState Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ProgramDiagnosticDataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ProgramDiagnosticState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.CreateSessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateSessionId;
                    instance.OnWriteValue = OnWrite_CreateSessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.CreateClientName;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateClientName;
                    instance.OnWriteValue = OnWrite_CreateClientName;
                    updateList.Add(instance);
                }
                instance = m_variable.InvocationCreationTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_InvocationCreationTime;
                    instance.OnWriteValue = OnWrite_InvocationCreationTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastTransitionTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastTransitionTime;
                    instance.OnWriteValue = OnWrite_LastTransitionTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodCall;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodCall;
                    instance.OnWriteValue = OnWrite_LastMethodCall;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodSessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodSessionId;
                    instance.OnWriteValue = OnWrite_LastMethodSessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodInputArguments;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodInputArguments;
                    instance.OnWriteValue = OnWrite_LastMethodInputArguments;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodOutputArguments;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodOutputArguments;
                    instance.OnWriteValue = OnWrite_LastMethodOutputArguments;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodCallTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodCallTime;
                    instance.OnWriteValue = OnWrite_LastMethodCallTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodReturnStatus;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodReturnStatus;
                    instance.OnWriteValue = OnWrite_LastMethodReturnStatus;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ProgramDiagnosticDataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ProgramDiagnosticDataType)extensionObject.Body;
                }
                else
                {
                    newValue = (ProgramDiagnosticDataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ProgramDiagnosticDataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ProgramDiagnosticDataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.CreateSessionId, newValue.CreateSessionId)) UpdateChildVariableStatus(m_variable.CreateSessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CreateClientName, newValue.CreateClientName)) UpdateChildVariableStatus(m_variable.CreateClientName, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.InvocationCreationTime, newValue.InvocationCreationTime)) UpdateChildVariableStatus(m_variable.InvocationCreationTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastTransitionTime, newValue.LastTransitionTime)) UpdateChildVariableStatus(m_variable.LastTransitionTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodCall, newValue.LastMethodCall)) UpdateChildVariableStatus(m_variable.LastMethodCall, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodSessionId, newValue.LastMethodSessionId)) UpdateChildVariableStatus(m_variable.LastMethodSessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodInputArguments, newValue.LastMethodInputArguments)) UpdateChildVariableStatus(m_variable.LastMethodInputArguments, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodOutputArguments, newValue.LastMethodOutputArguments)) UpdateChildVariableStatus(m_variable.LastMethodOutputArguments, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodCallTime, newValue.LastMethodCallTime)) UpdateChildVariableStatus(m_variable.LastMethodCallTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodReturnStatus, newValue.LastMethodReturnStatus)) UpdateChildVariableStatus(m_variable.LastMethodReturnStatus, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region CreateSessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateSessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateSessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateSessionId, ref statusCode, ref timestamp);
                m_value.CreateSessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateClientName Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateClientName;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateClientName;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateClientName, ref statusCode, ref timestamp);
                m_value.CreateClientName = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region InvocationCreationTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.InvocationCreationTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.InvocationCreationTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.InvocationCreationTime, ref statusCode, ref timestamp);
                m_value.InvocationCreationTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastTransitionTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastTransitionTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastTransitionTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastTransitionTime, ref statusCode, ref timestamp);
                m_value.LastTransitionTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCall Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodCall;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodCall;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodCall, ref statusCode, ref timestamp);
                m_value.LastMethodCall = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodSessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodSessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodSessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodSessionId, ref statusCode, ref timestamp);
                m_value.LastMethodSessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodInputArguments Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodInputArguments;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodInputArguments;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodInputArguments, ref statusCode, ref timestamp);
                m_value.LastMethodInputArguments = (ArgumentCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodOutputArguments Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodOutputArguments;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodOutputArguments;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodOutputArguments, ref statusCode, ref timestamp);
                m_value.LastMethodOutputArguments = (ArgumentCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCallTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodCallTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodCallTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodCallTime, ref statusCode, ref timestamp);
                m_value.LastMethodCallTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodReturnStatus Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodReturnStatus;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodReturnStatus;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodReturnStatus, ref statusCode, ref timestamp);
                m_value.LastMethodReturnStatus = (StatusResult)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ProgramDiagnosticDataType m_value;
        private ProgramDiagnosticState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ProgramDiagnostic2State Class
    #if (!OPCUA_EXCLUDE_ProgramDiagnostic2State)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramDiagnostic2State : BaseDataVariableState<Opc.Ua.ProgramDiagnostic2DataType>
    {
        #region Constructors
        /// <remarks />
        public ProgramDiagnostic2State(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ProgramDiagnostic2Type, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ProgramDiagnostic2DataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAHgAAAFByb2dyYW1EaWFnbm9zdGljMlR5cGVJbnN0YW5jZQEAFzwBABc8" +
           "FzwAAAEA4V3/////AQH/////DAAAABVgiQoCAAAAAAAPAAAAQ3JlYXRlU2Vzc2lvbklkAQAYPAAvAD8Y" +
           "PAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ3JlYXRlQ2xpZW50TmFtZQEAGTwALwA/GTwA" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAEludm9jYXRpb25DcmVhdGlvblRpbWUBABo8AC8A" +
           "Pxo8AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAExhc3RUcmFuc2l0aW9uVGltZQEAGzwA" +
           "LgBEGzwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdE1ldGhvZENhbGwBABw8AC8A" +
           "Pxw8AAAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABMYXN0TWV0aG9kU2Vzc2lvbklkAQAdPAAv" +
           "AD8dPAAAABH/////AQH/////AAAAABdgiQoCAAAAAAAYAAAATGFzdE1ldGhvZElucHV0QXJndW1lbnRz" +
           "AQAePAAvAD8ePAAAAQAoAQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAGQAAAExhc3RNZXRo" +
           "b2RPdXRwdXRBcmd1bWVudHMBAB88AC8APx88AAABACgBAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoC" +
           "AAAAAAAVAAAATGFzdE1ldGhvZElucHV0VmFsdWVzAQAgPAAvAD8gPAAAABgBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAF2CJCgIAAAAAABYAAABMYXN0TWV0aG9kT3V0cHV0VmFsdWVzAQAhPAAvAD8hPAAAABgBAAAA" +
           "AQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAABIAAABMYXN0TWV0aG9kQ2FsbFRpbWUBACI8AC8APyI8" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAExhc3RNZXRob2RSZXR1cm5TdGF0dXMBACM8" +
           "AC8APyM8AAAAE/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> CreateSessionId
        {
            get
            {
                return m_createSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> CreateClientName
        {
            get
            {
                return m_createClientName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createClientName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createClientName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> InvocationCreationTime
        {
            get
            {
                return m_invocationCreationTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invocationCreationTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invocationCreationTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastTransitionTime
        {
            get
            {
                return m_lastTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransitionTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> LastMethodCall
        {
            get
            {
                return m_lastMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCall = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<NodeId> LastMethodSessionId
        {
            get
            {
                return m_lastMethodSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodSessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<Argument[]> LastMethodInputArguments
        {
            get
            {
                return m_lastMethodInputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodInputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodInputArguments = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<Argument[]> LastMethodOutputArguments
        {
            get
            {
                return m_lastMethodOutputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodOutputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodOutputArguments = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<object[]> LastMethodInputValues
        {
            get
            {
                return m_lastMethodInputValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodInputValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodInputValues = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<object[]> LastMethodOutputValues
        {
            get
            {
                return m_lastMethodOutputValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodOutputValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodOutputValues = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> LastMethodCallTime
        {
            get
            {
                return m_lastMethodCallTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCallTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCallTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<StatusCode> LastMethodReturnStatus
        {
            get
            {
                return m_lastMethodReturnStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodReturnStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodReturnStatus = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createSessionId != null)
            {
                children.Add(m_createSessionId);
            }

            if (m_createClientName != null)
            {
                children.Add(m_createClientName);
            }

            if (m_invocationCreationTime != null)
            {
                children.Add(m_invocationCreationTime);
            }

            if (m_lastTransitionTime != null)
            {
                children.Add(m_lastTransitionTime);
            }

            if (m_lastMethodCall != null)
            {
                children.Add(m_lastMethodCall);
            }

            if (m_lastMethodSessionId != null)
            {
                children.Add(m_lastMethodSessionId);
            }

            if (m_lastMethodInputArguments != null)
            {
                children.Add(m_lastMethodInputArguments);
            }

            if (m_lastMethodOutputArguments != null)
            {
                children.Add(m_lastMethodOutputArguments);
            }

            if (m_lastMethodInputValues != null)
            {
                children.Add(m_lastMethodInputValues);
            }

            if (m_lastMethodOutputValues != null)
            {
                children.Add(m_lastMethodOutputValues);
            }

            if (m_lastMethodCallTime != null)
            {
                children.Add(m_lastMethodCallTime);
            }

            if (m_lastMethodReturnStatus != null)
            {
                children.Add(m_lastMethodReturnStatus);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateSessionId:
                {
                    if (createOrReplace)
                    {
                        if (CreateSessionId == null)
                        {
                            if (replacement == null)
                            {
                                CreateSessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                CreateSessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CreateSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateClientName:
                {
                    if (createOrReplace)
                    {
                        if (CreateClientName == null)
                        {
                            if (replacement == null)
                            {
                                CreateClientName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                CreateClientName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = CreateClientName;
                    break;
                }

                case Opc.Ua.BrowseNames.InvocationCreationTime:
                {
                    if (createOrReplace)
                    {
                        if (InvocationCreationTime == null)
                        {
                            if (replacement == null)
                            {
                                InvocationCreationTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                InvocationCreationTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = InvocationCreationTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (LastTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                LastTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCall = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                LastMethodCall = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodSessionId:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodSessionId == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodSessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                LastMethodSessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = LastMethodSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodInputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodInputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodInputArguments = new BaseDataVariableState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodInputArguments = (BaseDataVariableState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodInputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodOutputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodOutputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodOutputArguments = new BaseDataVariableState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodOutputArguments = (BaseDataVariableState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodOutputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodInputValues:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodInputValues == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodInputValues = new BaseDataVariableState<object[]>(this);
                            }
                            else
                            {
                                LastMethodInputValues = (BaseDataVariableState<object[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodInputValues;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodOutputValues:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodOutputValues == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodOutputValues = new BaseDataVariableState<object[]>(this);
                            }
                            else
                            {
                                LastMethodOutputValues = (BaseDataVariableState<object[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodOutputValues;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCallTime:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCallTime == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCallTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                LastMethodCallTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCallTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodReturnStatus:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodReturnStatus == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodReturnStatus = new BaseDataVariableState<StatusCode>(this);
                            }
                            else
                            {
                                LastMethodReturnStatus = (BaseDataVariableState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = LastMethodReturnStatus;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_createSessionId;
        private BaseDataVariableState<string> m_createClientName;
        private BaseDataVariableState<DateTime> m_invocationCreationTime;
        private PropertyState<DateTime> m_lastTransitionTime;
        private BaseDataVariableState<string> m_lastMethodCall;
        private BaseDataVariableState<NodeId> m_lastMethodSessionId;
        private BaseDataVariableState<Argument[]> m_lastMethodInputArguments;
        private BaseDataVariableState<Argument[]> m_lastMethodOutputArguments;
        private BaseDataVariableState<object[]> m_lastMethodInputValues;
        private BaseDataVariableState<object[]> m_lastMethodOutputValues;
        private BaseDataVariableState<DateTime> m_lastMethodCallTime;
        private BaseDataVariableState<StatusCode> m_lastMethodReturnStatus;
        #endregion
    }

    #region ProgramDiagnostic2Value Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ProgramDiagnostic2Value : BaseVariableValue
    {
        #region Constructors
        /// <remarks />
        public ProgramDiagnostic2Value(ProgramDiagnostic2State variable, ProgramDiagnostic2DataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ProgramDiagnostic2DataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public ProgramDiagnostic2State Variable
        {
            get { return m_variable; }
        }

        /// <remarks />
        public ProgramDiagnostic2DataType Value
        {
            get { return m_value; }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        private void Initialize(ProgramDiagnostic2State variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.CreateSessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateSessionId;
                    instance.OnWriteValue = OnWrite_CreateSessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.CreateClientName;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_CreateClientName;
                    instance.OnWriteValue = OnWrite_CreateClientName;
                    updateList.Add(instance);
                }
                instance = m_variable.InvocationCreationTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_InvocationCreationTime;
                    instance.OnWriteValue = OnWrite_InvocationCreationTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastTransitionTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastTransitionTime;
                    instance.OnWriteValue = OnWrite_LastTransitionTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodCall;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodCall;
                    instance.OnWriteValue = OnWrite_LastMethodCall;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodSessionId;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodSessionId;
                    instance.OnWriteValue = OnWrite_LastMethodSessionId;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodInputArguments;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodInputArguments;
                    instance.OnWriteValue = OnWrite_LastMethodInputArguments;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodOutputArguments;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodOutputArguments;
                    instance.OnWriteValue = OnWrite_LastMethodOutputArguments;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodInputValues;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodInputValues;
                    instance.OnWriteValue = OnWrite_LastMethodInputValues;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodOutputValues;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodOutputValues;
                    instance.OnWriteValue = OnWrite_LastMethodOutputValues;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodCallTime;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodCallTime;
                    instance.OnWriteValue = OnWrite_LastMethodCallTime;
                    updateList.Add(instance);
                }
                instance = m_variable.LastMethodReturnStatus;
                if (instance != null)
                {
                    instance.OnReadValue = OnRead_LastMethodReturnStatus;
                    instance.OnWriteValue = OnWrite_LastMethodReturnStatus;
                    updateList.Add(instance);
                }

                SetUpdateList(updateList);
            }
        }

        /// <remarks />
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        private ServiceResult OnWriteValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                ProgramDiagnostic2DataType newValue;
                if (value is ExtensionObject extensionObject)
                {
                    newValue = (ProgramDiagnostic2DataType)extensionObject.Body;
                }
                else
                {
                    newValue = (ProgramDiagnostic2DataType)value;
                }

                if (!Utils.IsEqual(m_value, newValue))
                {
                    UpdateChildrenChangeMasks(context, ref newValue, ref statusCode, ref timestamp);
                    Timestamp = timestamp;
                    m_value = (ProgramDiagnostic2DataType)Write(newValue);
                    m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
                }
            }

            return ServiceResult.Good;
        }

        private void UpdateChildrenChangeMasks(ISystemContext context, ref ProgramDiagnostic2DataType newValue, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (!Utils.IsEqual(m_value.CreateSessionId, newValue.CreateSessionId)) UpdateChildVariableStatus(m_variable.CreateSessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.CreateClientName, newValue.CreateClientName)) UpdateChildVariableStatus(m_variable.CreateClientName, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.InvocationCreationTime, newValue.InvocationCreationTime)) UpdateChildVariableStatus(m_variable.InvocationCreationTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastTransitionTime, newValue.LastTransitionTime)) UpdateChildVariableStatus(m_variable.LastTransitionTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodCall, newValue.LastMethodCall)) UpdateChildVariableStatus(m_variable.LastMethodCall, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodSessionId, newValue.LastMethodSessionId)) UpdateChildVariableStatus(m_variable.LastMethodSessionId, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodInputArguments, newValue.LastMethodInputArguments)) UpdateChildVariableStatus(m_variable.LastMethodInputArguments, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodOutputArguments, newValue.LastMethodOutputArguments)) UpdateChildVariableStatus(m_variable.LastMethodOutputArguments, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodInputValues, newValue.LastMethodInputValues)) UpdateChildVariableStatus(m_variable.LastMethodInputValues, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodOutputValues, newValue.LastMethodOutputValues)) UpdateChildVariableStatus(m_variable.LastMethodOutputValues, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodCallTime, newValue.LastMethodCallTime)) UpdateChildVariableStatus(m_variable.LastMethodCallTime, ref statusCode, ref timestamp);
            if (!Utils.IsEqual(m_value.LastMethodReturnStatus, newValue.LastMethodReturnStatus)) UpdateChildVariableStatus(m_variable.LastMethodReturnStatus, ref statusCode, ref timestamp);
        }

        private void UpdateParent(ISystemContext context, ref StatusCode statusCode, ref DateTime timestamp)
        {
            Timestamp = timestamp;
            m_variable.UpdateChangeMasks(NodeStateChangeMasks.Value);
            m_variable.ClearChangeMasks(context, false);
        }

        private void UpdateChildVariableStatus(BaseVariableState child, ref StatusCode statusCode, ref DateTime timestamp)
        {
            if (child == null) return;
            child.StatusCode = statusCode;
            if (timestamp == DateTime.MinValue)
            {
                timestamp = DateTime.UtcNow;
            }
            child.Timestamp = timestamp;
        }

        #region CreateSessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateSessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateSessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateSessionId, ref statusCode, ref timestamp);
                m_value.CreateSessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateClientName Access Methods
        /// <remarks />
        private ServiceResult OnRead_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.CreateClientName;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.CreateClientName;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.CreateClientName, ref statusCode, ref timestamp);
                m_value.CreateClientName = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region InvocationCreationTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.InvocationCreationTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.InvocationCreationTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.InvocationCreationTime, ref statusCode, ref timestamp);
                m_value.InvocationCreationTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastTransitionTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastTransitionTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastTransitionTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastTransitionTime, ref statusCode, ref timestamp);
                m_value.LastTransitionTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCall Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodCall;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodCall;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodCall, ref statusCode, ref timestamp);
                m_value.LastMethodCall = (string)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodSessionId Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodSessionId;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodSessionId;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodSessionId, ref statusCode, ref timestamp);
                m_value.LastMethodSessionId = (NodeId)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodInputArguments Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodInputArguments;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodInputArguments;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodInputArguments, ref statusCode, ref timestamp);
                m_value.LastMethodInputArguments = (ArgumentCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodOutputArguments Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodOutputArguments;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodOutputArguments;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodOutputArguments, ref statusCode, ref timestamp);
                m_value.LastMethodOutputArguments = (ArgumentCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodInputValues Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodInputValues(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodInputValues;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodInputValues;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodInputValues(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodInputValues, ref statusCode, ref timestamp);
                m_value.LastMethodInputValues = (VariantCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodOutputValues Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodOutputValues(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodOutputValues;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodOutputValues;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodOutputValues(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodOutputValues, ref statusCode, ref timestamp);
                m_value.LastMethodOutputValues = (VariantCollection)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCallTime Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodCallTime;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodCallTime;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodCallTime, ref statusCode, ref timestamp);
                m_value.LastMethodCallTime = (DateTime)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodReturnStatus Access Methods
        /// <remarks />
        private ServiceResult OnRead_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                var childVariable = m_variable?.LastMethodReturnStatus;
                if (childVariable != null && StatusCode.IsBad(childVariable.StatusCode))
                {
                    value = null;
                    statusCode = childVariable.StatusCode;
                    return new ServiceResult(statusCode);
                }

                if (m_value != null)
                {
                    value = m_value.LastMethodReturnStatus;
                }

                var result = Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);

                if (childVariable != null && ServiceResult.IsNotBad(result))
                {
                    timestamp = childVariable.Timestamp;
                    if (statusCode != childVariable.StatusCode)
                    {
                        statusCode = childVariable.StatusCode;
                        result = new ServiceResult(statusCode);
                    }
                }

                return result;
            }
        }

        /// <remarks />
        private ServiceResult OnWrite_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                UpdateChildVariableStatus(m_variable.LastMethodReturnStatus, ref statusCode, ref timestamp);
                m_value.LastMethodReturnStatus = (StatusCode)Write(value);
                UpdateParent(context, ref statusCode, ref timestamp);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ProgramDiagnostic2DataType m_value;
        private ProgramDiagnostic2State m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region HistoricalDataConfigurationState Class
    #if (!OPCUA_EXCLUDE_HistoricalDataConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoricalDataConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public HistoricalDataConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoricalDataConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AggregateFunctions != null)
            {
                AggregateFunctions.Initialize(context, AggregateFunctions_InitializationString);
            }

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (MaxTimeInterval != null)
            {
                MaxTimeInterval.Initialize(context, MaxTimeInterval_InitializationString);
            }

            if (MinTimeInterval != null)
            {
                MinTimeInterval.Initialize(context, MinTimeInterval_InitializationString);
            }

            if (ExceptionDeviation != null)
            {
                ExceptionDeviation.Initialize(context, ExceptionDeviation_InitializationString);
            }

            if (ExceptionDeviationFormat != null)
            {
                ExceptionDeviationFormat.Initialize(context, ExceptionDeviationFormat_InitializationString);
            }

            if (StartOfArchive != null)
            {
                StartOfArchive.Initialize(context, StartOfArchive_InitializationString);
            }

            if (StartOfOnlineArchive != null)
            {
                StartOfOnlineArchive.Initialize(context, StartOfOnlineArchive_InitializationString);
            }

            if (ServerTimestampSupported != null)
            {
                ServerTimestampSupported.Initialize(context, ServerTimestampSupported_InitializationString);
            }

            if (MaxTimeStoredValues != null)
            {
                MaxTimeStoredValues.Initialize(context, MaxTimeStoredValues_InitializationString);
            }

            if (MaxCountStoredValues != null)
            {
                MaxCountStoredValues.Initialize(context, MaxCountStoredValues_InitializationString);
            }
        }

        #region Initialization String
        private const string AggregateFunctions_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAZC4ALwA9ZC4AAP////8AAAAA";

        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BABQJAC4ARBQJAAAADP////8BAf////8AAAAA";

        private const string MaxTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFRpbWVJbnRlcnZhbAEAFQkALgBEFQkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string MinTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1pblRpbWVJbnRlcnZhbAEAFgkALgBEFgkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string ExceptionDeviation_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAEV4Y2VwdGlvbkRldmlhdGlvbgEAFwkALgBEFwkAAAAL/////wEB" +
           "/////wAAAAA=";

        private const string ExceptionDeviationFormat_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAEV4Y2VwdGlvbkRldmlhdGlvbkZvcm1hdAEAGAkALgBEGAkAAAEA" +
           "egP/////AQH/////AAAAAA==";

        private const string StartOfArchive_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQDrLAAuAETrLAAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string StartOfOnlineArchive_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAFN0YXJ0T2ZPbmxpbmVBcmNoaXZlAQDsLAAuAETsLAAAAQAmAf//" +
           "//8BAf////8AAAAA";

        private const string ServerTimestampSupported_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAFNlcnZlclRpbWVzdGFtcFN1cHBvcnRlZAEAlEoALgBElEoAAAAB" +
           "/////wEB/////wAAAAA=";

        private const string MaxTimeStoredValues_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAE1heFRpbWVTdG9yZWRWYWx1ZXMBAGt/AC4ARGt/AAABACIB////" +
           "/wEB/////wAAAAA=";

        private const string MaxCountStoredValues_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAE1heENvdW50U3RvcmVkVmFsdWVzAQBsfwAuAERsfwAAAAf/////" +
           "AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEhpc3RvcmljYWxEYXRhQ29uZmlndXJhdGlvblR5cGVJbnN0YW5j" +
           "ZQEADgkBAA4JDgkAAP////8NAAAABGCACgEAAAAAABYAAABBZ2dyZWdhdGVDb25maWd1cmF0aW9uAQDz" +
           "CwAvAQCzK/MLAAD/////BAAAABVgiQoCAAAAAAATAAAAVHJlYXRVbmNlcnRhaW5Bc0JhZAEAoCsALgBE" +
           "oCsAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFBlcmNlbnREYXRhQmFkAQChKwAuAEShKwAA" +
           "AAP/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAUGVyY2VudERhdGFHb29kAQCiKwAuAESiKwAAAAP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAWAAAAVXNlU2xvcGVkRXh0cmFwb2xhdGlvbgEAoysALgBEoysA" +
           "AAAB/////wEB/////wAAAAAEYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAZC4ALwA9ZC4A" +
           "AP////8AAAAAFWCJCgIAAAAAAAcAAABTdGVwcGVkAQATCQAuAEQTCQAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAARGVmaW5pdGlvbgEAFAkALgBEFAkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAE1heFRpbWVJbnRlcnZhbAEAFQkALgBEFQkAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAP" +
           "AAAATWluVGltZUludGVydmFsAQAWCQAuAEQWCQAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAABIA" +
           "AABFeGNlcHRpb25EZXZpYXRpb24BABcJAC4ARBcJAAAAC/////8BAf////8AAAAAFWCJCgIAAAAAABgA" +
           "AABFeGNlcHRpb25EZXZpYXRpb25Gb3JtYXQBABgJAC4ARBgJAAABAHoD/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQDrLAAuAETrLAAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABQAAABTdGFydE9mT25saW5lQXJjaGl2ZQEA7CwALgBE7CwAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAYAAAAU2VydmVyVGltZXN0YW1wU3VwcG9ydGVkAQCUSgAuAESUSgAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAATAAAATWF4VGltZVN0b3JlZFZhbHVlcwEAa38ALgBEa38AAAEAIgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAUAAAATWF4Q291bnRTdG9yZWRWYWx1ZXMBAGx/AC4ARGx/AAAAB/////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AggregateConfigurationState AggregateConfiguration
        {
            get
            {
                return m_aggregateConfiguration;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateConfiguration, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateConfiguration = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Stepped
        {
            get
            {
                return m_stepped;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stepped, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stepped = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeInterval
        {
            get
            {
                return m_maxTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinTimeInterval
        {
            get
            {
                return m_minTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExceptionDeviation
        {
            get
            {
                return m_exceptionDeviation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviation = value;
            }
        }

        /// <remarks />
        public PropertyState<ExceptionDeviationFormat> ExceptionDeviationFormat
        {
            get
            {
                return m_exceptionDeviationFormat;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviationFormat, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviationFormat = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfArchive
        {
            get
            {
                return m_startOfArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfArchive = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfOnlineArchive
        {
            get
            {
                return m_startOfOnlineArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfOnlineArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfOnlineArchive = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ServerTimestampSupported
        {
            get
            {
                return m_serverTimestampSupported;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverTimestampSupported, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverTimestampSupported = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeStoredValues
        {
            get
            {
                return m_maxTimeStoredValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeStoredValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeStoredValues = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxCountStoredValues
        {
            get
            {
                return m_maxCountStoredValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxCountStoredValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxCountStoredValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_aggregateConfiguration != null)
            {
                children.Add(m_aggregateConfiguration);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            if (m_stepped != null)
            {
                children.Add(m_stepped);
            }

            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_maxTimeInterval != null)
            {
                children.Add(m_maxTimeInterval);
            }

            if (m_minTimeInterval != null)
            {
                children.Add(m_minTimeInterval);
            }

            if (m_exceptionDeviation != null)
            {
                children.Add(m_exceptionDeviation);
            }

            if (m_exceptionDeviationFormat != null)
            {
                children.Add(m_exceptionDeviationFormat);
            }

            if (m_startOfArchive != null)
            {
                children.Add(m_startOfArchive);
            }

            if (m_startOfOnlineArchive != null)
            {
                children.Add(m_startOfOnlineArchive);
            }

            if (m_serverTimestampSupported != null)
            {
                children.Add(m_serverTimestampSupported);
            }

            if (m_maxTimeStoredValues != null)
            {
                children.Add(m_maxTimeStoredValues);
            }

            if (m_maxCountStoredValues != null)
            {
                children.Add(m_maxCountStoredValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AggregateConfiguration:
                {
                    if (createOrReplace)
                    {
                        if (AggregateConfiguration == null)
                        {
                            if (replacement == null)
                            {
                                AggregateConfiguration = new AggregateConfigurationState(this);
                            }
                            else
                            {
                                AggregateConfiguration = (AggregateConfigurationState)replacement;
                            }
                        }
                    }

                    instance = AggregateConfiguration;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }

                case Opc.Ua.BrowseNames.Stepped:
                {
                    if (createOrReplace)
                    {
                        if (Stepped == null)
                        {
                            if (replacement == null)
                            {
                                Stepped = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Stepped = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Stepped;
                    break;
                }

                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MinTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MinTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MinTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviation:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviation == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviation = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExceptionDeviation = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviation;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviationFormat:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviationFormat == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviationFormat = new PropertyState<ExceptionDeviationFormat>(this);
                            }
                            else
                            {
                                ExceptionDeviationFormat = (PropertyState<ExceptionDeviationFormat>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviationFormat;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfArchive;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfOnlineArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfOnlineArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfOnlineArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfOnlineArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfOnlineArchive;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerTimestampSupported:
                {
                    if (createOrReplace)
                    {
                        if (ServerTimestampSupported == null)
                        {
                            if (replacement == null)
                            {
                                ServerTimestampSupported = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ServerTimestampSupported = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ServerTimestampSupported;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeStoredValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeStoredValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeStoredValues = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeStoredValues = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeStoredValues;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxCountStoredValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxCountStoredValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxCountStoredValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxCountStoredValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxCountStoredValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AggregateConfigurationState m_aggregateConfiguration;
        private FolderState m_aggregateFunctions;
        private PropertyState<bool> m_stepped;
        private PropertyState<string> m_definition;
        private PropertyState<double> m_maxTimeInterval;
        private PropertyState<double> m_minTimeInterval;
        private PropertyState<double> m_exceptionDeviation;
        private PropertyState<ExceptionDeviationFormat> m_exceptionDeviationFormat;
        private PropertyState<DateTime> m_startOfArchive;
        private PropertyState<DateTime> m_startOfOnlineArchive;
        private PropertyState<bool> m_serverTimestampSupported;
        private PropertyState<double> m_maxTimeStoredValues;
        private PropertyState<uint> m_maxCountStoredValues;
        #endregion
    }
    #endif
    #endregion

    #region HistoricalEventConfigurationState Class
    #if (!OPCUA_EXCLUDE_HistoricalEventConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoricalEventConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public HistoricalEventConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoricalEventConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (StartOfArchive != null)
            {
                StartOfArchive.Initialize(context, StartOfArchive_InitializationString);
            }

            if (StartOfOnlineArchive != null)
            {
                StartOfOnlineArchive.Initialize(context, StartOfOnlineArchive_InitializationString);
            }
        }

        #region Initialization String
        private const string StartOfArchive_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQBvfwAuAERvfwAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string StartOfOnlineArchive_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAFN0YXJ0T2ZPbmxpbmVBcmNoaXZlAQBwfwAuAERwfwAAAQAmAf//" +
           "//8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEhpc3RvcmljYWxFdmVudENvbmZpZ3VyYXRpb25UeXBlSW5zdGFu" +
           "Y2UBAG1/AQBtf21/AAD/////AwAAAARggAoBAAAAAAAKAAAARXZlbnRUeXBlcwEAbn8ALwA9bn8AAP//" +
           "//8AAAAAFWCJCgIAAAAAAA4AAABTdGFydE9mQXJjaGl2ZQEAb38ALgBEb38AAAEAJgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAUAAAAU3RhcnRPZk9ubGluZUFyY2hpdmUBAHB/AC4ARHB/AAABACYB/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public FolderState EventTypes
        {
            get
            {
                return m_eventTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventTypes = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfArchive
        {
            get
            {
                return m_startOfArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfArchive = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfOnlineArchive
        {
            get
            {
                return m_startOfOnlineArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfOnlineArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfOnlineArchive = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventTypes != null)
            {
                children.Add(m_eventTypes);
            }

            if (m_startOfArchive != null)
            {
                children.Add(m_startOfArchive);
            }

            if (m_startOfOnlineArchive != null)
            {
                children.Add(m_startOfOnlineArchive);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventTypes:
                {
                    if (createOrReplace)
                    {
                        if (EventTypes == null)
                        {
                            if (replacement == null)
                            {
                                EventTypes = new FolderState(this);
                            }
                            else
                            {
                                EventTypes = (FolderState)replacement;
                            }
                        }
                    }

                    instance = EventTypes;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfArchive;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfOnlineArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfOnlineArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfOnlineArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfOnlineArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfOnlineArchive;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private FolderState m_eventTypes;
        private PropertyState<DateTime> m_startOfArchive;
        private PropertyState<DateTime> m_startOfOnlineArchive;
        #endregion
    }
    #endif
    #endregion

    #region HistoricalExternalEventSourceState Class
    #if (!OPCUA_EXCLUDE_HistoricalExternalEventSourceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoricalExternalEventSourceState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public HistoricalExternalEventSourceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoricalExternalEventSourceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Server != null)
            {
                Server.Initialize(context, Server_InitializationString);
            }

            if (EndpointUrl != null)
            {
                EndpointUrl.Initialize(context, EndpointUrl_InitializationString);
            }

            if (SecurityMode != null)
            {
                SecurityMode.Initialize(context, SecurityMode_InitializationString);
            }

            if (SecurityPolicyUri != null)
            {
                SecurityPolicyUri.Initialize(context, SecurityPolicyUri_InitializationString);
            }

            if (IdentityTokenPolicy != null)
            {
                IdentityTokenPolicy.Initialize(context, IdentityTokenPolicy_InitializationString);
            }

            if (TransportProfileUri != null)
            {
                TransportProfileUri.Initialize(context, TransportProfileUri_InitializationString);
            }
        }

        #region Initialization String
        private const string Server_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAFNlcnZlcgEAcn8ALgBEcn8AAAAM/////wEB/////wAAAAA=";

        private const string EndpointUrl_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAEVuZHBvaW50VXJsAQBzfwAuAERzfwAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string SecurityMode_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEAdH8ALgBEdH8AAAEALgH/////AQH/////" +
           "AAAAAA==";

        private const string SecurityPolicyUri_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQB1fwAuAER1fwAAAAz/////AQH/" +
           "////AAAAAA==";

        private const string IdentityTokenPolicy_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAElkZW50aXR5VG9rZW5Qb2xpY3kBAHZ/AC4ARHZ/AAABADAB////" +
           "/wEB/////wAAAAA=";

        private const string TransportProfileUri_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAFRyYW5zcG9ydFByb2ZpbGVVcmkBAHd/AC4ARHd/AAAADP////8B" +
           "Af////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAEhpc3RvcmljYWxFeHRlcm5hbEV2ZW50U291cmNlVHlwZUluc3Rh" +
           "bmNlAQBxfwEAcX9xfwAA/////wcAAAAVYIkKAgAAAAAABgAAAFNlcnZlcgEAcn8ALgBEcn8AAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAEVuZHBvaW50VXJsAQBzfwAuAERzfwAAAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAMAAAAU2VjdXJpdHlNb2RlAQB0fwAuAER0fwAAAQAuAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABEAAABTZWN1cml0eVBvbGljeVVyaQEAdX8ALgBEdX8AAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEwAAAElkZW50aXR5VG9rZW5Qb2xpY3kBAHZ/AC4ARHZ/AAABADAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEwAAAFRyYW5zcG9ydFByb2ZpbGVVcmkBAHd/AC4ARHd/AAAADP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABUAAABIaXN0b3JpY2FsRXZlbnRGaWx0ZXIBAHh/AC4ARHh/AAABANUC/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> Server
        {
            get
            {
                return m_server;
            }

            set
            {
                if (!Object.ReferenceEquals(m_server, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_server = value;
            }
        }

        /// <remarks />
        public PropertyState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }

        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<UserTokenPolicy> IdentityTokenPolicy
        {
            get
            {
                return m_identityTokenPolicy;
            }

            set
            {
                if (!Object.ReferenceEquals(m_identityTokenPolicy, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_identityTokenPolicy = value;
            }
        }

        /// <remarks />
        public PropertyState<string> TransportProfileUri
        {
            get
            {
                return m_transportProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportProfileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<EventFilter> HistoricalEventFilter
        {
            get
            {
                return m_historicalEventFilter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historicalEventFilter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historicalEventFilter = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_server != null)
            {
                children.Add(m_server);
            }

            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_identityTokenPolicy != null)
            {
                children.Add(m_identityTokenPolicy);
            }

            if (m_transportProfileUri != null)
            {
                children.Add(m_transportProfileUri);
            }

            if (m_historicalEventFilter != null)
            {
                children.Add(m_historicalEventFilter);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Server:
                {
                    if (createOrReplace)
                    {
                        if (Server == null)
                        {
                            if (replacement == null)
                            {
                                Server = new PropertyState<string>(this);
                            }
                            else
                            {
                                Server = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Server;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.IdentityTokenPolicy:
                {
                    if (createOrReplace)
                    {
                        if (IdentityTokenPolicy == null)
                        {
                            if (replacement == null)
                            {
                                IdentityTokenPolicy = new PropertyState<UserTokenPolicy>(this);
                            }
                            else
                            {
                                IdentityTokenPolicy = (PropertyState<UserTokenPolicy>)replacement;
                            }
                        }
                    }

                    instance = IdentityTokenPolicy;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (TransportProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                TransportProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                TransportProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = TransportProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoricalEventFilter:
                {
                    if (createOrReplace)
                    {
                        if (HistoricalEventFilter == null)
                        {
                            if (replacement == null)
                            {
                                HistoricalEventFilter = new PropertyState<EventFilter>(this);
                            }
                            else
                            {
                                HistoricalEventFilter = (PropertyState<EventFilter>)replacement;
                            }
                        }
                    }

                    instance = HistoricalEventFilter;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_server;
        private PropertyState<string> m_endpointUrl;
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<UserTokenPolicy> m_identityTokenPolicy;
        private PropertyState<string> m_transportProfileUri;
        private PropertyState<EventFilter> m_historicalEventFilter;
        #endregion
    }
    #endif
    #endregion

    #region HistoryServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_HistoryServerCapabilitiesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoryServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public HistoryServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoryServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ServerTimestampSupported != null)
            {
                ServerTimestampSupported.Initialize(context, ServerTimestampSupported_InitializationString);
            }
        }

        #region Initialization String
        private const string ServerTimestampSupported_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAFNlcnZlclRpbWVzdGFtcFN1cHBvcnRlZAEAlkoALgBElkoAAAAB" +
           "/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEhpc3RvcnlTZXJ2ZXJDYXBhYmlsaXRpZXNUeXBlSW5zdGFuY2UB" +
           "ABoJAQAaCRoJAAD/////EAAAABVgiQoCAAAAAAAbAAAAQWNjZXNzSGlzdG9yeURhdGFDYXBhYmlsaXR5" +
           "AQAbCQAuAEQbCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAdAAAAQWNjZXNzSGlzdG9yeUV2ZW50" +
           "c0NhcGFiaWxpdHkBABwJAC4ARBwJAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABNYXhSZXR1" +
           "cm5EYXRhVmFsdWVzAQAELAAuAEQELAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAUAAAATWF4UmV0" +
           "dXJuRXZlbnRWYWx1ZXMBAAUsAC4ARAUsAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABJbnNl" +
           "cnREYXRhQ2FwYWJpbGl0eQEAHgkALgBEHgkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJl" +
           "cGxhY2VEYXRhQ2FwYWJpbGl0eQEAHwkALgBEHwkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAFAAA" +
           "AFVwZGF0ZURhdGFDYXBhYmlsaXR5AQAgCQAuAEQgCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAT" +
           "AAAARGVsZXRlUmF3Q2FwYWJpbGl0eQEAIQkALgBEIQkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FgAAAERlbGV0ZUF0VGltZUNhcGFiaWxpdHkBACIJAC4ARCIJAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABUAAABJbnNlcnRFdmVudENhcGFiaWxpdHkBAA4sAC4ARA4sAAAAAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABYAAABSZXBsYWNlRXZlbnRDYXBhYmlsaXR5AQAPLAAuAEQPLAAAAAH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAVAAAAVXBkYXRlRXZlbnRDYXBhYmlsaXR5AQAQLAAuAEQQLAAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAARGVsZXRlRXZlbnRDYXBhYmlsaXR5AQDtLAAuAETtLAAAAAH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAaAAAASW5zZXJ0QW5ub3RhdGlvbkNhcGFiaWxpdHkBAAYsAC4ARAYsAAAA" +
           "Af////8BAf////8AAAAABGCACgEAAAAAABIAAABBZ2dyZWdhdGVGdW5jdGlvbnMBAKQrAC8APaQrAAD/" +
           "////AAAAABVgiQoCAAAAAAAYAAAAU2VydmVyVGltZXN0YW1wU3VwcG9ydGVkAQCWSgAuAESWSgAAAAH/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> AccessHistoryDataCapability
        {
            get
            {
                return m_accessHistoryDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AccessHistoryEventsCapability
        {
            get
            {
                return m_accessHistoryEventsCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryEventsCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryEventsCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnDataValues
        {
            get
            {
                return m_maxReturnDataValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnDataValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnDataValues = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnEventValues
        {
            get
            {
                return m_maxReturnEventValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnEventValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnEventValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertDataCapability
        {
            get
            {
                return m_insertDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceDataCapability
        {
            get
            {
                return m_replaceDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateDataCapability
        {
            get
            {
                return m_updateDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteRawCapability
        {
            get
            {
                return m_deleteRawCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteRawCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteRawCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteAtTimeCapability
        {
            get
            {
                return m_deleteAtTimeCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteAtTimeCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteAtTimeCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertEventCapability
        {
            get
            {
                return m_insertEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceEventCapability
        {
            get
            {
                return m_replaceEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateEventCapability
        {
            get
            {
                return m_updateEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteEventCapability
        {
            get
            {
                return m_deleteEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertAnnotationCapability
        {
            get
            {
                return m_insertAnnotationCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertAnnotationCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertAnnotationCapability = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ServerTimestampSupported
        {
            get
            {
                return m_serverTimestampSupported;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverTimestampSupported, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverTimestampSupported = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_accessHistoryDataCapability != null)
            {
                children.Add(m_accessHistoryDataCapability);
            }

            if (m_accessHistoryEventsCapability != null)
            {
                children.Add(m_accessHistoryEventsCapability);
            }

            if (m_maxReturnDataValues != null)
            {
                children.Add(m_maxReturnDataValues);
            }

            if (m_maxReturnEventValues != null)
            {
                children.Add(m_maxReturnEventValues);
            }

            if (m_insertDataCapability != null)
            {
                children.Add(m_insertDataCapability);
            }

            if (m_replaceDataCapability != null)
            {
                children.Add(m_replaceDataCapability);
            }

            if (m_updateDataCapability != null)
            {
                children.Add(m_updateDataCapability);
            }

            if (m_deleteRawCapability != null)
            {
                children.Add(m_deleteRawCapability);
            }

            if (m_deleteAtTimeCapability != null)
            {
                children.Add(m_deleteAtTimeCapability);
            }

            if (m_insertEventCapability != null)
            {
                children.Add(m_insertEventCapability);
            }

            if (m_replaceEventCapability != null)
            {
                children.Add(m_replaceEventCapability);
            }

            if (m_updateEventCapability != null)
            {
                children.Add(m_updateEventCapability);
            }

            if (m_deleteEventCapability != null)
            {
                children.Add(m_deleteEventCapability);
            }

            if (m_insertAnnotationCapability != null)
            {
                children.Add(m_insertAnnotationCapability);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            if (m_serverTimestampSupported != null)
            {
                children.Add(m_serverTimestampSupported);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AccessHistoryDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AccessHistoryEventsCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryEventsCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryEventsCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryEventsCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryEventsCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnDataValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnDataValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnDataValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnDataValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnDataValues;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnEventValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnEventValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnEventValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnEventValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnEventValues;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteRawCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteRawCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteRawCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteRawCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteRawCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteAtTimeCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteAtTimeCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteAtTimeCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteAtTimeCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteAtTimeCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertAnnotationCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertAnnotationCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertAnnotationCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertAnnotationCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertAnnotationCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerTimestampSupported:
                {
                    if (createOrReplace)
                    {
                        if (ServerTimestampSupported == null)
                        {
                            if (replacement == null)
                            {
                                ServerTimestampSupported = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ServerTimestampSupported = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ServerTimestampSupported;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_accessHistoryDataCapability;
        private PropertyState<bool> m_accessHistoryEventsCapability;
        private PropertyState<uint> m_maxReturnDataValues;
        private PropertyState<uint> m_maxReturnEventValues;
        private PropertyState<bool> m_insertDataCapability;
        private PropertyState<bool> m_replaceDataCapability;
        private PropertyState<bool> m_updateDataCapability;
        private PropertyState<bool> m_deleteRawCapability;
        private PropertyState<bool> m_deleteAtTimeCapability;
        private PropertyState<bool> m_insertEventCapability;
        private PropertyState<bool> m_replaceEventCapability;
        private PropertyState<bool> m_updateEventCapability;
        private PropertyState<bool> m_deleteEventCapability;
        private PropertyState<bool> m_insertAnnotationCapability;
        private FolderState m_aggregateFunctions;
        private PropertyState<bool> m_serverTimestampSupported;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryEventUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50VXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBALcLAQC3C7cLAAD/////EwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAACJUDwAALgBEIlQPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAACNUDwAALgBEI1QPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAAkVA8AAC4ARCRUDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAJVQPAAAuAEQlVA8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAACZUDwAALgBEJlQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAAAnVA8AAC4ARCdUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAAApVA8AAC4ARClUDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAACpUDwAALgBEKlQPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAC9UDwAALgBEL1QPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAMFQP" +
           "AAAuAEQwVA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAAxVA8AAC4ARDFU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAAAyVA8AAC4A" +
           "RDJUDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAAzVA8AAC4ARDNU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRhVHlwZUlkAgAANFQPAAAu" +
           "AEQ0VA8AABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5vZGUBANELAC4ARNELAAAA" +
           "Ef////8BAf////8AAAAAFWCJCgIAAAAAABQAAABQZXJmb3JtSW5zZXJ0UmVwbGFjZQEA1AsALgBE1AsA" +
           "AAEAHSz/////AQH/////AAAAABVgiQoCAAAAAAAGAAAARmlsdGVyAQC7CwAuAES7CwAAAQDVAv////8B" +
           "Af////8AAAAAF2CJCgIAAAAAAAkAAABOZXdWYWx1ZXMBANULAC4ARNULAAABAJgDAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABdgiQoCAAAAAAAJAAAAT2xkVmFsdWVzAQDWCwAuAETWCwAAAQCYAwEAAAABAAAAAAAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<EventFilter> Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_filter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_filter = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_filter != null)
            {
                children.Add(m_filter);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.Filter:
                {
                    if (createOrReplace)
                    {
                        if (Filter == null)
                        {
                            if (replacement == null)
                            {
                                Filter = new PropertyState<EventFilter>(this);
                            }
                            else
                            {
                                Filter = (PropertyState<EventFilter>)replacement;
                            }
                        }
                    }

                    instance = Filter;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<EventFilter> m_filter;
        private PropertyState<HistoryEventFieldList[]> m_newValues;
        private PropertyState<HistoryEventFieldList[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryValueUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryValueUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryValueUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryValueUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryValueUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeVZhbHVlVXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAL4LAQC+C74LAAD/////EgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAADVUDwAALgBENVQPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAADZUDwAALgBENlQPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAA3VA8AAC4ARDdUDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAOFQPAAAuAEQ4VA8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAADlUDwAALgBEOVQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAAA6VA8AAC4ARDpUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAAA8VA8AAC4ARDxUDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAAD1UDwAALgBEPVQPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAEJUDwAALgBEQlQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAAQ1QP" +
           "AAAuAERDVA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAABEVA8AAC4ARERU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAABFVA8AAC4A" +
           "REVUDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAABGVA8AAC4AREZU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRhVHlwZUlkAgAAR1QPAAAu" +
           "AERHVA8AABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5vZGUBANILAC4ARNILAAAA" +
           "Ef////8BAf////8AAAAAFWCJCgIAAAAAABQAAABQZXJmb3JtSW5zZXJ0UmVwbGFjZQEA1wsALgBE1wsA" +
           "AAEAHSz/////AQH/////AAAAABdgiQoCAAAAAAAJAAAATmV3VmFsdWVzAQDYCwAuAETYCwAAABcBAAAA" +
           "AQAAAAAAAAABAf////8AAAAAF2CJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANkLAC4ARNkLAAAAFwEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<DataValue[]> m_newValues;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryAnnotationUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryAnnotationUpdateEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryAnnotationUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryAnnotationUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryAnnotationUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEF1ZGl0SGlzdG9yeUFubm90YXRpb25VcGRhdGVFdmVudFR5cGVJ" +
           "bnN0YW5jZQEAl0oBAJdKl0oAAP////8RAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAASFQPAAAuAERI" +
           "VA8AAA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAASVQPAAAuAERJVA8AABH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAEpUDwAALgBESlQPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAABLVA8AAC4AREtUDwAADP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAQAAABUaW1lAgAATFQPAAAuAERMVA8AAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAsAAABSZWNlaXZlVGltZQIAAE1UDwAALgBETVQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAHAAAATWVzc2FnZQIAAE9UDwAALgBET1QPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "dmVyaXR5AgAAUFQPAAAuAERQVA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGlt" +
           "ZVN0YW1wAgAAVVQPAAAuAERVVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMC" +
           "AABWVA8AAC4ARFZUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAFdUDwAA" +
           "LgBEV1QPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAFhU" +
           "DwAALgBEWFQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAFlUDwAA" +
           "LgBEWVQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFUeXBlSWQCAABa" +
           "VA8AAC4ARFpUDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAABQAAABQZXJmb3JtSW5zZXJ0UmVwbGFj" +
           "ZQEAXUsALgBEXUsAAAEAHSz/////AQH/////AAAAABdgiQoCAAAAAAAJAAAATmV3VmFsdWVzAQBeSwAu" +
           "AEReSwAAAQB7AwEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAACQAAAE9sZFZhbHVlcwEAX0sA" +
           "LgBEX0sAAAEAewMBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<Annotation[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<Annotation[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<Annotation[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<Annotation[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<Annotation[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<Annotation[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<Annotation[]> m_newValues;
        private PropertyState<Annotation[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryDeleteEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryDeleteEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeURlbGV0ZUV2ZW50VHlwZUluc3RhbmNlAQDE" +
           "CwEAxAvECwAA/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABbVA8AAC4ARFtUDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABcVA8AAC4ARFxUDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAXVQPAAAuAERdVA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAF5UDwAALgBEXlQPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAABfVA8AAC4ARF9UDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAAYFQPAAAuAERgVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAAYlQPAAAuAERiVA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAABj" +
           "VA8AAC4ARGNUDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAABo" +
           "VA8AAC4ARGhUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAGlUDwAALgBE" +
           "aVQPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAalQPAAAuAERqVA8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAa1QPAAAuAERrVA8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAbFQPAAAuAERsVA8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJZAIAAG1UDwAALgBEbVQP" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAQDTCwAuAETTCwAAABH/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryRawModifyDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryRawModifyDeleteEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryRawModifyDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryRawModifyDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryRawModifyDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAEF1ZGl0SGlzdG9yeVJhd01vZGlmeURlbGV0ZUV2ZW50VHlwZUlu" +
           "c3RhbmNlAQDGCwEAxgvGCwAA/////xMAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAABuVA8AAC4ARG5U" +
           "DwAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAABvVA8AAC4ARG9UDwAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAcFQPAAAuAERwVA8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAHFUDwAALgBEcVQPAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABAAAAFRpbWUCAAByVA8AAC4ARHJUDwABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACwAAAFJlY2VpdmVUaW1lAgAAc1QPAAAuAERzVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABNZXNzYWdlAgAAdVQPAAAuAER1VA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2" +
           "ZXJpdHkCAAB2VA8AAC4ARHZUDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1l" +
           "U3RhbXACAAB7VA8AAC4ARHtUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIA" +
           "AHxUDwAALgBEfFQPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAfVQPAAAu" +
           "AER9VA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAflQP" +
           "AAAuAER+VA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAf1QPAAAu" +
           "AER/VA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJZAIAAIBU" +
           "DwAALgBEgFQPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAgAAgVQPAAAu" +
           "AESBVA8AABH/////AQH/////AAAAABVgiQoCAAAAAAAQAAAASXNEZWxldGVNb2RpZmllZAEAxwsALgBE" +
           "xwsAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFN0YXJ0VGltZQEAyAsALgBEyAsAAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAARW5kVGltZQEAyQsALgBEyQsAAAEAJgH/////AQH/////" +
           "AAAAABdgiQoCAAAAAAAJAAAAT2xkVmFsdWVzAQDaCwAuAETaCwAAABcBAAAAAQAAAAAAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> IsDeleteModified
        {
            get
            {
                return m_isDeleteModified;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isDeleteModified, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isDeleteModified = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EndTime
        {
            get
            {
                return m_endTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_isDeleteModified != null)
            {
                children.Add(m_isDeleteModified);
            }

            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_endTime != null)
            {
                children.Add(m_endTime);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IsDeleteModified:
                {
                    if (createOrReplace)
                    {
                        if (IsDeleteModified == null)
                        {
                            if (replacement == null)
                            {
                                IsDeleteModified = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsDeleteModified = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsDeleteModified;
                    break;
                }

                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EndTime:
                {
                    if (createOrReplace)
                    {
                        if (EndTime == null)
                        {
                            if (replacement == null)
                            {
                                EndTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EndTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EndTime;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_isDeleteModified;
        private PropertyState<DateTime> m_startTime;
        private PropertyState<DateTime> m_endTime;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryAtTimeDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryAtTimeDeleteEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryAtTimeDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryAtTimeDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryAtTimeDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKQAAAEF1ZGl0SGlzdG9yeUF0VGltZURlbGV0ZUV2ZW50VHlwZUluc3Rh" +
           "bmNlAQDLCwEAywvLCwAA/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACCVA8AAC4ARIJUDwAA" +
           "D/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACDVA8AAC4ARINUDwAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAhFQPAAAuAESEVA8AABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAIVUDwAALgBEhVQPAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABAAAAFRpbWUCAACGVA8AAC4ARIZUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAFJlY2VpdmVUaW1lAgAAh1QPAAAuAESHVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABNZXNzYWdlAgAAiVQPAAAuAESJVA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJp" +
           "dHkCAACKVA8AAC4ARIpUDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3Rh" +
           "bXACAACPVA8AAC4ARI9UDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAJBU" +
           "DwAALgBEkFQPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAAkVQPAAAuAESR" +
           "VA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAklQPAAAu" +
           "AESSVA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAk1QPAAAuAEST" +
           "VA8AAAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJZAIAAJRUDwAA" +
           "LgBElFQPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAgAAlVQPAAAuAESV" +
           "VA8AABH/////AQH/////AAAAABdgiQoCAAAAAAAIAAAAUmVxVGltZXMBAMwLAC4ARMwLAAABACYBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAJAAAAT2xkVmFsdWVzAQDNCwAuAETNCwAAABcBAAAA" +
           "AQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime[]> ReqTimes
        {
            get
            {
                return m_reqTimes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reqTimes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reqTimes = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_reqTimes != null)
            {
                children.Add(m_reqTimes);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReqTimes:
                {
                    if (createOrReplace)
                    {
                        if (ReqTimes == null)
                        {
                            if (replacement == null)
                            {
                                ReqTimes = new PropertyState<DateTime[]>(this);
                            }
                            else
                            {
                                ReqTimes = (PropertyState<DateTime[]>)replacement;
                            }
                        }
                    }

                    instance = ReqTimes;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime[]> m_reqTimes;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventDeleteEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryEventDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50RGVsZXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAM4LAQDOC84LAAD/////EQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAJZUDwAALgBEllQPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAJdUDwAALgBEl1QPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAACYVA8AAC4ARJhUDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAmVQPAAAuAESZVA8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAAJpUDwAALgBEmlQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAACbVA8AAC4ARJtUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAACdVA8AAC4ARJ1UDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAAJ5UDwAALgBEnlQPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAAKNUDwAALgBEo1QPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAApFQP" +
           "AAAuAESkVA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAAClVA8AAC4ARKVU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAACmVA8AAC4A" +
           "RKZUDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACnVA8AAC4ARKdU" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQYXJhbWV0ZXJEYXRhVHlwZUlkAgAAqFQPAAAu" +
           "AESoVA8AABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVXBkYXRlZE5vZGUCAACpVA8AAC4ARKlU" +
           "DwAAEf////8BAf////8AAAAAF2CJCgIAAAAAAAgAAABFdmVudElkcwEAzwsALgBEzwsAAAAPAQAAAAEA" +
           "AAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAJAAAAT2xkVmFsdWVzAQDQCwAuAETQCwAAAQCYA/////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[][]> EventIds
        {
            get
            {
                return m_eventIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventIds = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventIds != null)
            {
                children.Add(m_eventIds);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventIds:
                {
                    if (createOrReplace)
                    {
                        if (EventIds == null)
                        {
                            if (replacement == null)
                            {
                                EventIds = new PropertyState<byte[][]>(this);
                            }
                            else
                            {
                                EventIds = (PropertyState<byte[][]>)replacement;
                            }
                        }
                    }

                    instance = EventIds;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[][]> m_eventIds;
        private PropertyState<HistoryEventFieldList> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryConfigurationChangeEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryConfigurationChangeEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryConfigurationChangeEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryConfigurationChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryConfigurationChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAMAAAAEF1ZGl0SGlzdG9yeUNvbmZpZ3VyYXRpb25DaGFuZ2VFdmVudFR5" +
           "cGVJbnN0YW5jZQEA9n8BAPZ/9n8AAP////8NAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAqlQPAAAu" +
           "AESqVA8AAA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAq1QPAAAuAESrVA8A" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAKxUDwAALgBErFQPAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAACtVA8AAC4ARK1UDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAgAArlQPAAAuAESuVA8AAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAsAAABSZWNlaXZlVGltZQIAAK9UDwAALgBEr1QPAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAHAAAATWVzc2FnZQIAALFUDwAALgBEsVQPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNldmVyaXR5AgAAslQPAAAuAESyVA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9u" +
           "VGltZVN0YW1wAgAAt1QPAAAuAES3VA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0" +
           "dXMCAAC4VA8AAC4ARLhUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAALlU" +
           "DwAALgBEuVQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIA" +
           "ALpUDwAALgBEulQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAALtU" +
           "DwAALgBEu1QPAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryBulkInsertEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryBulkInsertEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryBulkInsertEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public AuditHistoryBulkInsertEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryBulkInsertEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAEF1ZGl0SGlzdG9yeUJ1bGtJbnNlcnRFdmVudFR5cGVJbnN0YW5j" +
           "ZQEAI4ABACOAI4AAAP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAvFQPAAAuAES8VA8AAA//" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAvVQPAAAuAES9VA8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAL5UDwAALgBEvlQPAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAC/VA8AAC4ARL9UDwAADP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAQAAABUaW1lAgAAwFQPAAAuAETAVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsA" +
           "AABSZWNlaXZlVGltZQIAAMFUDwAALgBEwVQPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "TWVzc2FnZQIAAMNUDwAALgBEw1QPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5" +
           "AgAAxFQPAAAuAETEVA8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1w" +
           "AgAAyVQPAAAuAETJVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAADKVA8A" +
           "AC4ARMpUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAMtUDwAALgBEy1QP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAMxUDwAALgBE" +
           "zFQPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAM1UDwAALgBEzVQP" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAQA1gAAuAEQ1gAAAABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQA2gAAuAEQ2gAAAAQAmAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABFbmRUaW1lAQA3gAAuAEQ3gAAAAQAmAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EndTime
        {
            get
            {
                return m_endTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_endTime != null)
            {
                children.Add(m_endTime);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EndTime:
                {
                    if (createOrReplace)
                    {
                        if (EndTime == null)
                        {
                            if (replacement == null)
                            {
                                EndTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EndTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EndTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<DateTime> m_startTime;
        private PropertyState<DateTime> m_endTime;
        #endregion
    }
    #endif
    #endregion

    #region OpenWithMasksMethodState Class
    #if (!OPCUA_EXCLUDE_OpenWithMasksMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenWithMasksMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public OpenWithMasksMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenWithMasksMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAE9wZW5XaXRoTWFza3NNZXRob2RUeXBlAQDhMAAvAQDhMOEwAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4jAALgBE4jAAAJYBAAAAAQAqAQEU" +
           "AAAABQAAAE1hc2tzAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQDjMAAuAETjMAAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public OpenWithMasksMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint masks = (uint)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    masks,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult OpenWithMasksMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint masks,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseAndUpdateMethodState Class
    #if (!OPCUA_EXCLUDE_CloseAndUpdateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseAndUpdateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CloseAndUpdateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseAndUpdateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAENsb3NlQW5kVXBkYXRlTWV0aG9kVHlwZQEA5DAALwEA5DDkMAAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKAxAC4ARKAxAACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDlMAAuAETlMAAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlD" +
           "aGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CloseAndUpdateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CloseAndUpdateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region AddCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_AddCertificateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCertificateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEFkZENlcnRpZmljYXRlTWV0aG9kVHlwZQEA5jAALwEA5jDmMAAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOcwAC4AROcwAACWAgAAAAEAKgEB" +
           "GgAAAAsAAABDZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmlj" +
           "YXRlAAH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            byte[] certificate = (byte[])_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificate,
                    isTrustedCertificate);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        byte[] certificate,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region RemoveCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveCertificateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveCertificateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFJlbW92ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEA6DAALwEA6DDo" +
           "MAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOkwAC4AROkwAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABUaHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlm" +
           "aWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string thumbprint = (string)_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    thumbprint,
                    isTrustedCertificate);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string thumbprint,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region TrustListState Class
    #if (!OPCUA_EXCLUDE_TrustListState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListState : FileState
    {
        #region Constructors
        /// <remarks />
        public TrustListState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (UpdateFrequency != null)
            {
                UpdateFrequency.Initialize(context, UpdateFrequency_InitializationString);
            }

            if (ActivityTimeout != null)
            {
                ActivityTimeout.Initialize(context, ActivityTimeout_InitializationString);
            }

            if (DefaultValidationOptions != null)
            {
                DefaultValidationOptions.Initialize(context, DefaultValidationOptions_InitializationString);
            }
        }

        #region Initialization String
        private const string UpdateFrequency_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFVwZGF0ZUZyZXF1ZW5jeQEAYEsALgBEYEsAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string ActivityTimeout_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEFjdGl2aXR5VGltZW91dAEA/n0ALgBE/n0AAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string DefaultValidationOptions_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAERlZmF1bHRWYWxpZGF0aW9uT3B0aW9ucwEAC1wALgBEC1wAAAEA" +
           "DFz/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAFRydXN0TGlzdFR5cGVJbnN0YW5jZQEA6jABAOow6jAAAP////8S" +
           "AAAAFWCJCgIAAAAAAAQAAABTaXplAgAAzlQPAAAuAETOVA8AAAn/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAV3JpdGFibGUCAADPVA8AAC4ARM9UDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABV" +
           "c2VyV3JpdGFibGUCAADQVA8AAC4ARNBUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVu" +
           "Q291bnQCAADRVA8AAC4ARNFUDwAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAgAA1VQP" +
           "AAAvAQA8LdVUDwABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAANZUDwAALgBE" +
           "1lQPAJYBAAAAAQAqAQETAAAABAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMCAADXVA8AAC4ARNdUDwCWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAA" +
           "AAAFAAAAQ2xvc2UCAADYVA8AAC8BAD8t2FQPAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAgAA2VQPAAAuAETZVA8AlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQCAADaVA8AAC8BAEEt2lQP" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAA21QPAAAuAETbVA8AlgIAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwIA" +
           "ANxUDwAALgBE3FQPAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQAAAAEA" +
           "AAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQIAAN1UDwAALwEARC3dVA8AAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADeVA8AAC4ARN5UDwCWAgAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AgAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAgAA31QPAAAvAQBGLd9UDwABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAOBUDwAALgBE4FQPAJYBAAAAAQAqAQEZ" +
           "AAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMCAADhVA8AAC4AROFUDwCWAQAAAAEAKgEBFwAAAAgAAABQb3Np" +
           "dGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBv" +
           "c2l0aW9uAgAA4lQPAAAvAQBJLeJUDwABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwIAAONUDwAALgBE41QPAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEB" +
           "FwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAExhc3RVcGRhdGVUaW1lAQD+MAAuAET+MAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABVcGRhdGVGcmVxdWVuY3kBAGBLAC4ARGBLAAABACIB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGl2aXR5VGltZW91dAEA/n0ALgBE/n0AAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAY" +
           "AAAARGVmYXVsdFZhbGlkYXRpb25PcHRpb25zAQALXAAuAEQLXAAAAQAMXP////8BAf////8AAAAABGGC" +
           "CgQAAAAAAA0AAABPcGVuV2l0aE1hc2tzAQD/MAAvAQD/MP8wAAABAf////8CAAAAF2CpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEAADEALgBEADEAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAA" +
           "AAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAB" +
           "MQAuAEQBMQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQACMQAvAQACMQIxAAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoTEALgBEoTEAAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAAMxAC4ARAMxAACWAQAAAAEAKgEBIwAAABQAAABBcHBseUNoYW5n" +
           "ZXNSZXF1aXJlZAAB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAADgAA" +
           "AEFkZENlcnRpZmljYXRlAQAEMQAvAQAEMQQxAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEABTEALgBEBTEAAJYCAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAAAAAB" +
           "ACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAABEAAABSZW1vdmVDZXJ0aWZpY2F0ZQEABjEALwEABjEGMQAAAQH/////" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAcxAC4ARAcxAACWAgAAAAEAKgEBGQAAAAoA" +
           "AABUaHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> LastUpdateTime
        {
            get
            {
                return m_lastUpdateTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastUpdateTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastUpdateTime = value;
            }
        }

        /// <remarks />
        public PropertyState<double> UpdateFrequency
        {
            get
            {
                return m_updateFrequency;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateFrequency, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateFrequency = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ActivityTimeout
        {
            get
            {
                return m_activityTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_activityTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_activityTimeout = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DefaultValidationOptions
        {
            get
            {
                return m_defaultValidationOptions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultValidationOptions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultValidationOptions = value;
            }
        }

        /// <remarks />
        public OpenWithMasksMethodState OpenWithMasks
        {
            get
            {
                return m_openWithMasksMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openWithMasksMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openWithMasksMethod = value;
            }
        }

        /// <remarks />
        public CloseAndUpdateMethodState CloseAndUpdate
        {
            get
            {
                return m_closeAndUpdateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeAndUpdateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeAndUpdateMethod = value;
            }
        }

        /// <remarks />
        public AddCertificateMethodState AddCertificate
        {
            get
            {
                return m_addCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCertificateMethod = value;
            }
        }

        /// <remarks />
        public RemoveCertificateMethodState RemoveCertificate
        {
            get
            {
                return m_removeCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeCertificateMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_lastUpdateTime != null)
            {
                children.Add(m_lastUpdateTime);
            }

            if (m_updateFrequency != null)
            {
                children.Add(m_updateFrequency);
            }

            if (m_activityTimeout != null)
            {
                children.Add(m_activityTimeout);
            }

            if (m_defaultValidationOptions != null)
            {
                children.Add(m_defaultValidationOptions);
            }

            if (m_openWithMasksMethod != null)
            {
                children.Add(m_openWithMasksMethod);
            }

            if (m_closeAndUpdateMethod != null)
            {
                children.Add(m_closeAndUpdateMethod);
            }

            if (m_addCertificateMethod != null)
            {
                children.Add(m_addCertificateMethod);
            }

            if (m_removeCertificateMethod != null)
            {
                children.Add(m_removeCertificateMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LastUpdateTime:
                {
                    if (createOrReplace)
                    {
                        if (LastUpdateTime == null)
                        {
                            if (replacement == null)
                            {
                                LastUpdateTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastUpdateTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastUpdateTime;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateFrequency:
                {
                    if (createOrReplace)
                    {
                        if (UpdateFrequency == null)
                        {
                            if (replacement == null)
                            {
                                UpdateFrequency = new PropertyState<double>(this);
                            }
                            else
                            {
                                UpdateFrequency = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = UpdateFrequency;
                    break;
                }

                case Opc.Ua.BrowseNames.ActivityTimeout:
                {
                    if (createOrReplace)
                    {
                        if (ActivityTimeout == null)
                        {
                            if (replacement == null)
                            {
                                ActivityTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                ActivityTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ActivityTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultValidationOptions:
                {
                    if (createOrReplace)
                    {
                        if (DefaultValidationOptions == null)
                        {
                            if (replacement == null)
                            {
                                DefaultValidationOptions = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DefaultValidationOptions = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DefaultValidationOptions;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenWithMasks:
                {
                    if (createOrReplace)
                    {
                        if (OpenWithMasks == null)
                        {
                            if (replacement == null)
                            {
                                OpenWithMasks = new OpenWithMasksMethodState(this);
                            }
                            else
                            {
                                OpenWithMasks = (OpenWithMasksMethodState)replacement;
                            }
                        }
                    }

                    instance = OpenWithMasks;
                    break;
                }

                case Opc.Ua.BrowseNames.CloseAndUpdate:
                {
                    if (createOrReplace)
                    {
                        if (CloseAndUpdate == null)
                        {
                            if (replacement == null)
                            {
                                CloseAndUpdate = new CloseAndUpdateMethodState(this);
                            }
                            else
                            {
                                CloseAndUpdate = (CloseAndUpdateMethodState)replacement;
                            }
                        }
                    }

                    instance = CloseAndUpdate;
                    break;
                }

                case Opc.Ua.BrowseNames.AddCertificate:
                {
                    if (createOrReplace)
                    {
                        if (AddCertificate == null)
                        {
                            if (replacement == null)
                            {
                                AddCertificate = new AddCertificateMethodState(this);
                            }
                            else
                            {
                                AddCertificate = (AddCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = AddCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveCertificate:
                {
                    if (createOrReplace)
                    {
                        if (RemoveCertificate == null)
                        {
                            if (replacement == null)
                            {
                                RemoveCertificate = new RemoveCertificateMethodState(this);
                            }
                            else
                            {
                                RemoveCertificate = (RemoveCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_lastUpdateTime;
        private PropertyState<double> m_updateFrequency;
        private PropertyState<double> m_activityTimeout;
        private PropertyState<uint> m_defaultValidationOptions;
        private OpenWithMasksMethodState m_openWithMasksMethod;
        private CloseAndUpdateMethodState m_closeAndUpdateMethod;
        private AddCertificateMethodState m_addCertificateMethod;
        private RemoveCertificateMethodState m_removeCertificateMethod;
        #endregion
    }
    #endif
    #endregion

    #region TrustListOutOfDateAlarmState Class
    #if (!OPCUA_EXCLUDE_TrustListOutOfDateAlarmState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListOutOfDateAlarmState : SystemOffNormalAlarmState
    {
        #region Constructors
        /// <remarks />
        public TrustListOutOfDateAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListOutOfDateAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAFRydXN0TGlzdE91dE9mRGF0ZUFsYXJtVHlwZUluc3RhbmNlAQBh" +
           "SwEAYUthSwAA/////yAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADkVA8AAC4ARORUDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADlVA8AAC4AROVUDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA5lQPAAAuAETmVA8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAOdUDwAALgBE51QPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAADoVA8AAC4AROhUDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAA6VQPAAAuAETpVA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAA61QPAAAuAETrVA8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADs" +
           "VA8AAC4AROxUDwAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRpb25DbGFzc0lkAgAA" +
           "7VQPAAAuAETtVA8AABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9uQ2xhc3NOYW1l" +
           "AgAA7lQPAAAuAETuVA8AABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29uZGl0aW9uU3ViQ2xh" +
           "c3NJZAIAAO9UDwAALgBE71QPAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAVAAAAQ29u" +
           "ZGl0aW9uU3ViQ2xhc3NOYW1lAgAA8FQPAAAuAETwVA8AABUBAAAAAQAAAAAAAAABAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABDb25kaXRpb25OYW1lAgAA8VQPAAAuAETxVA8AAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAQnJhbmNoSWQCAADyVA8AAC4ARPJUDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYA" +
           "AABSZXRhaW4CAADzVA8AAC4ARPNUDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVk" +
           "U3RhdGUCAAD1VA8AAC8BACMj9VQPAAAV/////wEBBQAAAAEALCMAAgAADVUPAAEALCMAAgAAFlUPAAEA" +
           "LCMAAgAAI1UPAAEALCMAAgAALVUPAAEALCMAAgAAP1UPAAEAAAAVYIkKAgAAAAAAAgAAAElkAgAA9lQP" +
           "AAAuAET2VA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQIAAP5UDwAALwEAKiP+" +
           "VA8AABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAA/1QPAAAuAET/" +
           "VA8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkCAAAAVQ8AAC8BACoj" +
           "AFUPAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAIAAAFVDwAALgBE" +
           "AVUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAIAAAJVDwAALwEAKiMCVQ8A" +
           "ABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAgAAA1UPAAAuAEQDVQ8A" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAAAEVQ8AAC4ARARVDwAA" +
           "DP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAgAABVUPAAAvAQBEIwVVDwABAQEAAAAB" +
           "APkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUCAAAGVQ8AAC8BAEMjBlUPAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQCAAAHVQ8AAC8BAEUjB1UPAAEBAQAAAAEA+QsA" +
           "AQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAACFUPAAAuAEQIVQ8AlgIAAAABACoB" +
           "AUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2" +
           "ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNv" +
           "bW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAEFja2VkU3RhdGUCAAANVQ8AAC8BACMjDVUPAAAV/////wEBAQAAAAEALCMBAgAA9VQP" +
           "AAEAAAAVYIkKAgAAAAAAAgAAAElkAgAADlUPAAAuAEQOVQ8AAAH/////AQH/////AAAAAARhggoEAAAA" +
           "AAALAAAAQWNrbm93bGVkZ2UCAAAfVQ8AAC8BAJcjH1UPAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAgAAIFUPAAAuAEQgVQ8AlgIAAAABACoBAUYAAAAHAAAARXZlbnRJ" +
           "ZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQu" +
           "AQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRv" +
           "IHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2" +
           "ZVN0YXRlAgAAI1UPAAAvAQAjIyNVDwAAFf////8BAQEAAAABACwjAQIAAPVUDwABAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAIAACRVDwAALgBEJFUPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9k" +
           "ZQIAACxVDwAALgBELFUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNo" +
           "ZWx2ZWQCAABYVQ8AAC4ARFhVDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0" +
           "ZQIAAIpVDwAALgBEilUPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFRydXN0TGlzdElkAQD2" +
           "SwAuAET2SwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUBAPdLAC4A" +
           "RPdLAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFVwZGF0ZUZyZXF1ZW5jeQEA+EsALgBE" +
           "+EsAAAEAIgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> TrustListId
        {
            get
            {
                return m_trustListId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustListId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustListId = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastUpdateTime
        {
            get
            {
                return m_lastUpdateTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastUpdateTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastUpdateTime = value;
            }
        }

        /// <remarks />
        public PropertyState<double> UpdateFrequency
        {
            get
            {
                return m_updateFrequency;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateFrequency, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateFrequency = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_trustListId != null)
            {
                children.Add(m_trustListId);
            }

            if (m_lastUpdateTime != null)
            {
                children.Add(m_lastUpdateTime);
            }

            if (m_updateFrequency != null)
            {
                children.Add(m_updateFrequency);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TrustListId:
                {
                    if (createOrReplace)
                    {
                        if (TrustListId == null)
                        {
                            if (replacement == null)
                            {
                                TrustListId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                TrustListId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = TrustListId;
                    break;
                }

                case Opc.Ua.BrowseNames.LastUpdateTime:
                {
                    if (createOrReplace)
                    {
                        if (LastUpdateTime == null)
                        {
                            if (replacement == null)
                            {
                                LastUpdateTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastUpdateTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastUpdateTime;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateFrequency:
                {
                    if (createOrReplace)
                    {
                        if (UpdateFrequency == null)
                        {
                            if (replacement == null)
                            {
                                UpdateFrequency = new PropertyState<double>(this);
                            }
                            else
                            {
                                UpdateFrequency = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = UpdateFrequency;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_trustListId;
        private PropertyState<DateTime> m_lastUpdateTime;
        private PropertyState<double> m_updateFrequency;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public CertificateGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (GetRejectedList != null)
            {
                GetRejectedList.Initialize(context, GetRejectedList_InitializationString);
            }

            if (CertificateExpired != null)
            {
                CertificateExpired.Initialize(context, CertificateExpired_InitializationString);
            }

            if (TrustListOutOfDate != null)
            {
                TrustListOutOfDate.Initialize(context, TrustListOutOfDate_InitializationString);
            }
        }

        #region Initialization String
        private const string GetRejectedList_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEdldFJlamVjdGVkTGlzdAEA5lsALwEA5lvmWwAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDnWwAuAETnWwAAlgEAAAABACoBAR8AAAAMAAAA" +
           "Q2VydGlmaWNhdGVzAA8BAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string CertificateExpired_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAENlcnRpZmljYXRlRXhwaXJlZAEA+ksALwEAqTP6SwAA/////yAA" +
           "AAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAPtLAC4ARPtLAAAAD/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAkAAABFdmVudFR5cGUBAPxLAC4ARPxLAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOb2RlAQD9SwAuAET9SwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEA" +
           "/ksALgBE/ksAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAP9LAC4ARP9LAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAATAAuAEQATAAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQACTAAuAEQCTAAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAANMAC4ARANMAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAA" +
           "AABDb25kaXRpb25DbGFzc0lkAQAETAAuAEQETAAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAA" +
           "Q29uZGl0aW9uQ2xhc3NOYW1lAQAFTAAuAEQFTAAAABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAA" +
           "Q29uZGl0aW9uU3ViQ2xhc3NJZAEABkwALgBEBkwAAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoC" +
           "AAAAAAAVAAAAQ29uZGl0aW9uU3ViQ2xhc3NOYW1lAQAHTAAuAEQHTAAAABUBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQAITAAuAEQITAAAAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQBAAlMAC4ARAlMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABSZXRhaW4BAApMAC4ARApMAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVk" +
           "U3RhdGUBAAtMAC8BACMjC0wAAAAV/////wEBBQAAAAEALCMAAQAfTAEALCMAAQAoTAEALCMAAQA1TAEA" +
           "LCMAAQA/TAEALCMAAQBRTAEAAAAVYIkKAgAAAAAAAgAAAElkAQAMTAAuAEQMTAAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAFEwALwEAKiMUTAAAABP/////AQH/////AQAAABVgiQoC" +
           "AAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAVTAAuAEQVTAAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAwAAABMYXN0U2V2ZXJpdHkBABZMAC8BACojFkwAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "DwAAAFNvdXJjZVRpbWVzdGFtcAEAF0wALgBEF0wAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAAQ29tbWVudAEAGEwALwEAKiMYTAAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNl" +
           "VGltZXN0YW1wAQAZTAAuAEQZTAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBABpMAC4ARBpMAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQAbTAAv" +
           "AQBEIxtMAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBABxMAC8BAEMjHEwA" +
           "AAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAB1MAC8BAEUjHUwAAAEB" +
           "AQAAAAEA+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAeTAAuAEQeTAAAlgIA" +
           "AAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3Ig" +
           "dGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAA" +
           "VGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUBAB9MAC8BACMjH0wAAAAV/////wEBAQAAAAEALCMBAQAL" +
           "TAEAAAAVYIkKAgAAAAAAAgAAAElkAQAgTAAuAEQgTAAAAAH/////AQH/////AAAAAARhggoEAAAAAAAL" +
           "AAAAQWNrbm93bGVkZ2UBADFMAC8BAJcjMUwAAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQAyTAAuAEQyTAAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAA" +
           "AAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25k" +
           "aXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQA1" +
           "TAAvAQAjIzVMAAAAFf////8BAQEAAAABACwjAQEAC0wBAAAAFWCJCgIAAAAAAAIAAABJZAEANkwALgBE" +
           "NkwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEAPkwALgBEPkwAAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBAIVOAC4ARIVOAAAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEAqk4ALgBEqk4AAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADgAAAEV4cGlyYXRpb25EYXRlAQCrTgAuAESrTgAAAA3/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQ2VydGlmaWNhdGVUeXBlAQCtTgAuAEStTgAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBAK5OAC4ARK5OAAAAD/////8BAf////8AAAAA";

        private const string TrustListOutOfDate_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAFRydXN0TGlzdE91dE9mRGF0ZQEAr04ALwEAYUuvTgAA/////yAA" +
           "AAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBALBOAC4ARLBOAAAAD/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAkAAABFdmVudFR5cGUBALFOAC4ARLFOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOb2RlAQCyTgAuAESyTgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEA" +
           "s04ALgBEs04AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBALROAC4ARLROAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQC1TgAuAES1TgAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC3TgAuAES3TgAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBALhOAC4ARLhOAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAA" +
           "AABDb25kaXRpb25DbGFzc0lkAQC5TgAuAES5TgAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAA" +
           "Q29uZGl0aW9uQ2xhc3NOYW1lAQC6TgAuAES6TgAAABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAA" +
           "Q29uZGl0aW9uU3ViQ2xhc3NJZAEAu04ALgBEu04AAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoC" +
           "AAAAAAAVAAAAQ29uZGl0aW9uU3ViQ2xhc3NOYW1lAQC8TgAuAES8TgAAABUBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQC9TgAuAES9TgAAAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQBAL5OAC4ARL5OAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABSZXRhaW4BAL9OAC4ARL9OAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVk" +
           "U3RhdGUBAMBOAC8BACMjwE4AAAAV/////wEBBQAAAAEALCMAAQDUTgEALCMAAQDdTgEALCMAAQDqTgEA" +
           "LCMAAQD0TgEALCMAAQAGTwEAAAAVYIkKAgAAAAAAAgAAAElkAQDBTgAuAETBTgAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAyU4ALwEAKiPJTgAAABP/////AQH/////AQAAABVgiQoC" +
           "AAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQDKTgAuAETKTgAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAwAAABMYXN0U2V2ZXJpdHkBAMtOAC8BACojy04AAAAF/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "DwAAAFNvdXJjZVRpbWVzdGFtcAEAzE4ALgBEzE4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAAQ29tbWVudAEAzU4ALwEAKiPNTgAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNl" +
           "VGltZXN0YW1wAQDOTgAuAETOTgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBAM9OAC4ARM9OAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQDQTgAv" +
           "AQBEI9BOAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBANFOAC8BAEMj0U4A" +
           "AAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBANJOAC8BAEUj0k4AAAEB" +
           "AQAAAAEA+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDTTgAuAETTTgAAlgIA" +
           "AAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3Ig" +
           "dGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAA" +
           "VGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUBANROAC8BACMj1E4AAAAV/////wEBAQAAAAEALCMBAQDA" +
           "TgEAAAAVYIkKAgAAAAAAAgAAAElkAQDVTgAuAETVTgAAAAH/////AQH/////AAAAAARhggoEAAAAAAAL" +
           "AAAAQWNrbm93bGVkZ2UBAOZOAC8BAJcj5k4AAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQDnTgAuAETnTgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAA" +
           "AAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25k" +
           "aXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDq" +
           "TgAvAQAjI+pOAAAAFf////8BAQEAAAABACwjAQEAwE4BAAAAFWCJCgIAAAAAAAIAAABJZAEA604ALgBE" +
           "604AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEA804ALgBE804AAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBABlPAC4ARBlPAAAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEAPk8ALgBEPk8AAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACwAAAFRydXN0TGlzdElkAQA/TwAuAEQ/TwAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUBAEBPAC4AREBPAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAFVwZGF0ZUZyZXF1ZW5jeQEAQU8ALgBEQU8AAAEAIgH/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAENlcnRpZmljYXRlR3JvdXBUeXBlSW5zdGFuY2UBAAsxAQALMQsx" +
           "AAABAAAAAQAuIwABAKkzBQAAAARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAfNQAvAQDqMB81AAD/////" +
           "DwAAABVgiQoCAAAAAAAEAAAAU2l6ZQEAIDUALgBEIDUAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAFdyaXRhYmxlAQAhNQAuAEQhNQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldy" +
           "aXRhYmxlAQAiNQAuAEQiNQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAj" +
           "NQAuAEQjNQAAAAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAJTUALwEAPC0lNQAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACY1AC4ARCY1AACWAQAAAAEAKgEBEwAA" +
           "AAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAQAnNQAuAEQnNQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAoNQAvAQA/" +
           "LSg1AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAKTUALgBEKTUAAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "BGGCCgQAAAAAAAQAAABSZWFkAQAqNQAvAQBBLSo1AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAKzUALgBEKzUAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2Cp" +
           "CgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACw1AC4ARCw1AACWAQAAAAEAKgEBEwAAAAQAAABEYXRh" +
           "AA//////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBAC01" +
           "AC8BAEQtLTUAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAuNQAuAEQuNQAA" +
           "lgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD///" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEA" +
           "LzUALwEARi0vNQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADA1AC4ARDA1" +
           "AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAxNQAuAEQxNQAAlgEAAAABACoBARcA" +
           "AAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAA" +
           "AAsAAABTZXRQb3NpdGlvbgEAMjUALwEASS0yNQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBADM1AC4ARDM1AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJ" +
           "CgIAAAAAAA4AAABMYXN0VXBkYXRlVGltZQEANDUALgBENDUAAAEAJgH/////AQH/////AAAAAARhggoE" +
           "AAAAAAANAAAAT3BlbldpdGhNYXNrcwEANTUALwEA/zA1NQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBADY1AC4ARDY1AACWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEANzUA" +
           "LgBENzUAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEA" +
           "AAABAf////8AAAAABGGCCgQAAAAAAA4AAABDbG9zZUFuZFVwZGF0ZQEAODUALwEAAjE4NQAAAQH/////" +
           "AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADk1AC4ARDk1AACWAQAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQA6NQAuAEQ6NQAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2Vz" +
           "UmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAA4AAABB" +
           "ZGRDZXJ0aWZpY2F0ZQEAOzUALwEABDE7NQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBADw1AC4ARDw1AACWAgAAAAEAKgEBGgAAAAsAAABDZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAq" +
           "AQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAARAAAAUmVtb3ZlQ2VydGlmaWNhdGUBAD01AC8BAAYxPTUAAAEB/////wEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQA+NQAuAEQ+NQAAlgIAAAABACoBARkAAAAKAAAA" +
           "VGh1bWJwcmludAAM/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////" +
           "AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgiQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBl" +
           "cwEAPzUALgBEPzUAAAARAQAAAAEAAAAAAAAAAQH/////AAAAAARhggoEAAAAAAAPAAAAR2V0UmVqZWN0" +
           "ZWRMaXN0AQDmWwAvAQDmW+ZbAAABAf////8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AOdbAC4AROdbAACWAQAAAAEAKgEBHwAAAAwAAABDZXJ0aWZpY2F0ZXMADwEAAAABAAAAAAAAAAABACgB" +
           "AQAAAAEAAAABAAAAAQH/////AAAAAARggAoBAAAAAAASAAAAQ2VydGlmaWNhdGVFeHBpcmVkAQD6SwAv" +
           "AQCpM/pLAAD/////IAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA+0sALgBE+0sAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA/EsALgBE/EsAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAP1LAC4ARP1LAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQD+SwAuAET+SwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "/0sALgBE/0sAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAABMAC4A" +
           "RABMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAAJMAC4ARAJMAAAAFf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAA0wALgBEA0wAAAAF/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAARMAC4ARARMAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABIAAABDb25kaXRpb25DbGFzc05hbWUBAAVMAC4ARAVMAAAAFf////8BAf////8AAAAA" +
           "F2CJCgIAAAAAABMAAABDb25kaXRpb25TdWJDbGFzc0lkAQAGTAAuAEQGTAAAABEBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAAF2CJCgIAAAAAABUAAABDb25kaXRpb25TdWJDbGFzc05hbWUBAAdMAC4ARAdMAAAAFQEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADQAAAENvbmRpdGlvbk5hbWUBAAhMAC4ARAhMAAAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFuY2hJZAEACUwALgBECUwAAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEACkwALgBECkwAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADAAAAEVuYWJsZWRTdGF0ZQEAC0wALwEAIyMLTAAAABX/////AQEFAAAAAQAsIwABAB9MAQAsIwAB" +
           "AChMAQAsIwABADVMAQAsIwABAD9MAQAsIwABAFFMAQAAABVgiQoCAAAAAAACAAAASWQBAAxMAC4ARAxM" +
           "AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5AQAUTAAvAQAqIxRMAAAAE/////8B" +
           "Af////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABABVMAC4ARBVMAAABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQEAFkwALwEAKiMWTAAAAAX/////AQH/////" +
           "AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAXTAAuAEQXTAAAAQAmAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQAYTAAvAQAqIxhMAAAAFf////8BAf////8BAAAAFWCJCgIA" +
           "AAAAAA8AAABTb3VyY2VUaW1lc3RhbXABABlMAC4ARBlMAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADAAAAENsaWVudFVzZXJJZAEAGkwALgBEGkwAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAA" +
           "AERpc2FibGUBABtMAC8BAEQjG0wAAAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJs" +
           "ZQEAHEwALwEAQyMcTAAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEA" +
           "HUwALwEARSMdTAAAAQEBAAAAAQD5CwABAA0LAQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AB5MAC4ARB5MAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBp" +
           "ZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV////" +
           "/wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEA" +
           "AAACAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQEAH0wALwEAIyMfTAAAABX/////" +
           "AQEBAAAAAQAsIwEBAAtMAQAAABVgiQoCAAAAAAACAAAASWQBACBMAC4ARCBMAAAAAf////8BAf////8A" +
           "AAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAMUwALwEAlyMxTAAAAQEBAAAAAQD5CwABAPAiAQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADJMAC4ARDJMAACWAgAAAAEAKgEBRgAAAAcAAABF" +
           "dmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29t" +
           "bWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBh" +
           "ZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "QWN0aXZlU3RhdGUBADVMAC8BACMjNUwAAAAV/////wEBAQAAAAEALCMBAQALTAEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQA2TAAuAEQ2TAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAQA+" +
           "TAAuAEQ+TAAAABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEA" +
           "hU4ALgBEhU4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAE5vcm1hbFN0YXRlAQCqTgAuAESq" +
           "TgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAARXhwaXJhdGlvbkRhdGUBAKtOAC4ARKtOAAAA" +
           "Df////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABDZXJ0aWZpY2F0ZVR5cGUBAK1OAC4ARK1OAAAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEArk4ALgBErk4AAAAP/////wEB////" +
           "/wAAAAAEYIAKAQAAAAAAEgAAAFRydXN0TGlzdE91dE9mRGF0ZQEAr04ALwEAYUuvTgAA/////yAAAAAV" +
           "YIkKAgAAAAAABwAAAEV2ZW50SWQBALBOAC4ARLBOAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkA" +
           "AABFdmVudFR5cGUBALFOAC4ARLFOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "b2RlAQCyTgAuAESyTgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEAs04A" +
           "LgBEs04AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBALROAC4ARLROAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQC1TgAuAES1TgAAAQAmAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC3TgAuAES3TgAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAU2V2ZXJpdHkBALhOAC4ARLhOAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABD" +
           "b25kaXRpb25DbGFzc0lkAQC5TgAuAES5TgAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29u" +
           "ZGl0aW9uQ2xhc3NOYW1lAQC6TgAuAES6TgAAABX/////AQH/////AAAAABdgiQoCAAAAAAATAAAAQ29u" +
           "ZGl0aW9uU3ViQ2xhc3NJZAEAu04ALgBEu04AAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAA" +
           "AAAVAAAAQ29uZGl0aW9uU3ViQ2xhc3NOYW1lAQC8TgAuAES8TgAAABUBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25OYW1lAQC9TgAuAES9TgAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAQnJhbmNoSWQBAL5OAC4ARL5OAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYA" +
           "AABSZXRhaW4BAL9OAC4ARL9OAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3Rh" +
           "dGUBAMBOAC8BACMjwE4AAAAV/////wEBBQAAAAEALCMAAQDUTgEALCMAAQDdTgEALCMAAQDqTgEALCMA" +
           "AQD0TgEALCMAAQAGTwEAAAAVYIkKAgAAAAAAAgAAAElkAQDBTgAuAETBTgAAAAH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAyU4ALwEAKiPJTgAAABP/////AQH/////AQAAABVgiQoCAAAA" +
           "AAAPAAAAU291cmNlVGltZXN0YW1wAQDKTgAuAETKTgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAwAAABMYXN0U2V2ZXJpdHkBAMtOAC8BACojy04AAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAA" +
           "AFNvdXJjZVRpbWVzdGFtcAEAzE4ALgBEzE4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAA" +
           "Q29tbWVudAEAzU4ALwEAKiPNTgAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQDOTgAuAETOTgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAM9OAC4ARM9OAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQDQTgAvAQBE" +
           "I9BOAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBANFOAC8BAEMj0U4AAAEB" +
           "AQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBANJOAC8BAEUj0k4AAAEBAQAA" +
           "AAEA+QsAAQANCwEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDTTgAuAETTTgAAlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAEFja2VkU3RhdGUBANROAC8BACMj1E4AAAAV/////wEBAQAAAAEALCMBAQDATgEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQDVTgAuAETVTgAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAA" +
           "QWNrbm93bGVkZ2UBAOZOAC8BAJcj5k4AAAEBAQAAAAEA+QsAAQDwIgEAAAAXYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAQDnTgAuAETnTgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAAD" +
           "AAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAA" +
           "AENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRp" +
           "b24uAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDqTgAv" +
           "AQAjI+pOAAAAFf////8BAQEAAAABACwjAQEAwE4BAAAAFWCJCgIAAAAAAAIAAABJZAEA604ALgBE604A" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEA804ALgBE804AAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBABlPAC4ARBlPAAAAAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABOb3JtYWxTdGF0ZQEAPk8ALgBEPk8AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACwAAAFRydXN0TGlzdElkAQA/TwAuAEQ/TwAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUBAEBPAC4AREBPAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADwAAAFVwZGF0ZUZyZXF1ZW5jeQEAQU8ALgBEQU8AAAEAIgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TrustListState TrustList
        {
            get
            {
                return m_trustList;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustList, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustList = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> CertificateTypes
        {
            get
            {
                return m_certificateTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateTypes = value;
            }
        }

        /// <remarks />
        public GetRejectedListMethodState GetRejectedList
        {
            get
            {
                return m_getRejectedListMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getRejectedListMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getRejectedListMethod = value;
            }
        }

        /// <remarks />
        public CertificateExpirationAlarmState CertificateExpired
        {
            get
            {
                return m_certificateExpired;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateExpired, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateExpired = value;
            }
        }

        /// <remarks />
        public TrustListOutOfDateAlarmState TrustListOutOfDate
        {
            get
            {
                return m_trustListOutOfDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustListOutOfDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustListOutOfDate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_trustList != null)
            {
                children.Add(m_trustList);
            }

            if (m_certificateTypes != null)
            {
                children.Add(m_certificateTypes);
            }

            if (m_getRejectedListMethod != null)
            {
                children.Add(m_getRejectedListMethod);
            }

            if (m_certificateExpired != null)
            {
                children.Add(m_certificateExpired);
            }

            if (m_trustListOutOfDate != null)
            {
                children.Add(m_trustListOutOfDate);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TrustList:
                {
                    if (createOrReplace)
                    {
                        if (TrustList == null)
                        {
                            if (replacement == null)
                            {
                                TrustList = new TrustListState(this);
                            }
                            else
                            {
                                TrustList = (TrustListState)replacement;
                            }
                        }
                    }

                    instance = TrustList;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateTypes:
                {
                    if (createOrReplace)
                    {
                        if (CertificateTypes == null)
                        {
                            if (replacement == null)
                            {
                                CertificateTypes = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                CertificateTypes = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = CertificateTypes;
                    break;
                }

                case Opc.Ua.BrowseNames.GetRejectedList:
                {
                    if (createOrReplace)
                    {
                        if (GetRejectedList == null)
                        {
                            if (replacement == null)
                            {
                                GetRejectedList = new GetRejectedListMethodState(this);
                            }
                            else
                            {
                                GetRejectedList = (GetRejectedListMethodState)replacement;
                            }
                        }
                    }

                    instance = GetRejectedList;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateExpired:
                {
                    if (createOrReplace)
                    {
                        if (CertificateExpired == null)
                        {
                            if (replacement == null)
                            {
                                CertificateExpired = new CertificateExpirationAlarmState(this);
                            }
                            else
                            {
                                CertificateExpired = (CertificateExpirationAlarmState)replacement;
                            }
                        }
                    }

                    instance = CertificateExpired;
                    break;
                }

                case Opc.Ua.BrowseNames.TrustListOutOfDate:
                {
                    if (createOrReplace)
                    {
                        if (TrustListOutOfDate == null)
                        {
                            if (replacement == null)
                            {
                                TrustListOutOfDate = new TrustListOutOfDateAlarmState(this);
                            }
                            else
                            {
                                TrustListOutOfDate = (TrustListOutOfDateAlarmState)replacement;
                            }
                        }
                    }

                    instance = TrustListOutOfDate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TrustListState m_trustList;
        private PropertyState<NodeId[]> m_certificateTypes;
        private GetRejectedListMethodState m_getRejectedListMethod;
        private CertificateExpirationAlarmState m_certificateExpired;
        private TrustListOutOfDateAlarmState m_trustListOutOfDate;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupFolderState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public CertificateGroupFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (DefaultHttpsGroup != null)
            {
                DefaultHttpsGroup.Initialize(context, DefaultHttpsGroup_InitializationString);
            }

            if (DefaultUserTokenGroup != null)
            {
                DefaultUserTokenGroup.Initialize(context, DefaultUserTokenGroup_InitializationString);
            }
        }

        #region Initialization String
        private const string DefaultHttpsGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAERlZmF1bHRIdHRwc0dyb3VwAQAYNgAvAQALMRg2AAABAAAAAQAu" +
           "IwABAKkzAgAAAARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAZNgAvAQDqMBk2AAD/////DwAAABVgiQoC" +
           "AAAAAAAEAAAAU2l6ZQEAGjYALgBEGjYAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRh" +
           "YmxlAQAbNgAuAEQbNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQAc" +
           "NgAuAEQcNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAdNgAuAEQdNgAA" +
           "AAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAHzYALwEAPC0fNgAAAQH/////AgAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACA2AC4ARCA2AACWAQAAAAEAKgEBEwAAAAQAAABNb2Rl" +
           "AAP/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQAhNgAuAEQhNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAiNgAvAQA/LSI2AAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIzYALgBEIzYAAJYBAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAA" +
           "AAQAAABSZWFkAQAkNgAvAQBBLSQ2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAJTYALgBEJTYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAA" +
           "AAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBACY2AC4ARCY2AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAA" +
           "AAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBACc2AC8BAEQtJzYA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAoNgAuAEQoNgAAlgIAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEAKTYALwEARi0p" +
           "NgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACo2AC4ARCo2AACWAQAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQArNgAuAEQrNgAAlgEAAAABACoBARcAAAAIAAAAUG9z" +
           "aXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQ" +
           "b3NpdGlvbgEALDYALwEASS0sNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AC02AC4ARC02AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAI" +
           "AAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABMYXN0VXBkYXRlVGltZQEALjYALgBELjYAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAA" +
           "T3BlbldpdGhNYXNrcwEALzYALwEA/zAvNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBADA2AC4ARDA2AACWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAMTYALgBEMTYAAJYB" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAA4AAABDbG9zZUFuZFVwZGF0ZQEAMjYALwEAAjEyNgAAAQH/////AgAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADM2AC4ARDM2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFu" +
           "ZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0" +
           "QXJndW1lbnRzAQA0NgAuAEQ0NgAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQA" +
           "Af////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAA4AAABBZGRDZXJ0aWZp" +
           "Y2F0ZQEANTYALwEABDE1NgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADY2" +
           "AC4ARDY2AACWAgAAAAEAKgEBGgAAAAsAAABDZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAqAQEjAAAAFAAA" +
           "AElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAARAAAAUmVtb3ZlQ2VydGlmaWNhdGUBADc2AC8BAAYxNzYAAAEB/////wEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQA4NgAuAEQ4NgAAlgIAAAABACoBARkAAAAKAAAAVGh1bWJwcmlu" +
           "dAAM/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgiQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBlcwEAOTYALgBE" +
           "OTYAAAARAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string DefaultUserTokenGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAFQAAAERlZmF1bHRVc2VyVG9rZW5Hcm91cAEAOjYALwEACzE6NgAAAQAA" +
           "AAEALiMAAQCpMwIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAOzYALwEA6jA7NgAA/////w8AAAAV" +
           "YIkKAgAAAAAABAAAAFNpemUBADw2AC4ARDw2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABX" +
           "cml0YWJsZQEAPTYALgBEPTYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJs" +
           "ZQEAPjYALgBEPjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAPzYALgBE" +
           "PzYAAAAF/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAEE2AC8BADwtQTYAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBCNgAuAERCNgAAlgEAAAABACoBARMAAAAEAAAA" +
           "TW9kZQAD/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEAQzYALgBEQzYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEARDYALwEAPy1ENgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEU2AC4AREU2AACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoE" +
           "AAAAAAAEAAAAUmVhZAEARjYALwEAQS1GNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAEc2AC4AREc2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoB" +
           "ARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQBINgAuAERINgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQBJNgAvAQBE" +
           "LUk2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEASjYALgBESjYAAJYCAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAA" +
           "AAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEs2AC8B" +
           "AEYtSzYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNgAuAERMNgAAlgEA" +
           "AAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEATTYALgBETTYAAJYBAAAAAQAqAQEXAAAACAAA" +
           "AFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAA" +
           "U2V0UG9zaXRpb24BAE42AC8BAEktTjYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBPNgAuAERPNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEX" +
           "AAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAATGFzdFVwZGF0ZVRpbWUBAFA2AC4ARFA2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "DQAAAE9wZW5XaXRoTWFza3MBAFE2AC8BAP8wUTYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQBSNgAuAERSNgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFM2AC4ARFM2" +
           "AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAAOAAAAQ2xvc2VBbmRVcGRhdGUBAFQ2AC8BAAIxVDYAAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBVNgAuAERVNgAAlgEAAAABACoBARkAAAAKAAAARmls" +
           "ZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEAVjYALgBEVjYAAJYBAAAAAQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVp" +
           "cmVkAAH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAOAAAAQWRkQ2Vy" +
           "dGlmaWNhdGUBAFc2AC8BAAQxVzYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQBYNgAuAERYNgAAlgIAAAABACoBARoAAAALAAAAQ2VydGlmaWNhdGUAD/////8AAAAAAAEAKgEBIwAA" +
           "ABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAAEQAAAFJlbW92ZUNlcnRpZmljYXRlAQBZNgAvAQAGMVk2AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAWjYALgBEWjYAAJYCAAAAAQAqAQEZAAAACgAAAFRodW1i" +
           "cHJpbnQADP////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBAFs2" +
           "AC4ARFs2AAAAEQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAENlcnRpZmljYXRlR3JvdXBGb2xkZXJUeXBlSW5zdGFuY2UBAPU1" +
           "AQD1NfU1AAD/////AwAAAARggAoBAAAAAAAXAAAARGVmYXVsdEFwcGxpY2F0aW9uR3JvdXABAPY1AC8B" +
           "AAsx9jUAAAEAAAABAC4jAAEAqTMCAAAABGCACgEAAAAAAAkAAABUcnVzdExpc3QBAPc1AC8BAOow9zUA" +
           "AP////8PAAAAFWCJCgIAAAAAAAQAAABTaXplAQD4NQAuAET4NQAAAAn/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAV3JpdGFibGUBAPk1AC4ARPk1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABV" +
           "c2VyV3JpdGFibGUBAPo1AC4ARPo1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291" +
           "bnQBAPs1AC4ARPs1AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQD9NQAvAQA8Lf01" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/jUALgBE/jUAAJYBAAAAAQAq" +
           "AQETAAAABAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAP81AC4ARP81AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxl" +
           "AAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAAA2" +
           "AC8BAD8tADYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQABNgAuAEQBNgAA" +
           "lgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAABAAAAFJlYWQBAAI2AC8BAEEtAjYAAAEB/////wIAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQADNgAuAEQDNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEABDYALgBEBDYAAJYBAAAAAQAqAQETAAAABAAA" +
           "AERhdGEAD/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0" +
           "ZQEABTYALwEARC0FNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAY2AC4A" +
           "RAY2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0" +
           "YQAP/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0" +
           "aW9uAQAHNgAvAQBGLQc2AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEACDYA" +
           "LgBECDYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEA" +
           "AAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAAk2AC4ARAk2AACWAQAAAAEA" +
           "KgEBFwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAACwAAAFNldFBvc2l0aW9uAQAKNgAvAQBJLQo2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEACzYALgBECzYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAADgAAAExhc3RVcGRhdGVUaW1lAQAMNgAuAEQMNgAAAQAmAf////8BAf////8AAAAA" +
           "BGGCCgQAAAAAAA0AAABPcGVuV2l0aE1hc2tzAQANNgAvAQD/MA02AAABAf////8CAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEADjYALgBEDjYAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////" +
           "AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRz" +
           "AQAPNgAuAEQPNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQAQNgAvAQACMRA2AAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAETYALgBEETYAAJYBAAAAAQAqAQEZ" +
           "AAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBABI2AC4ARBI2AACWAQAAAAEAKgEBIwAAABQAAABBcHBseUNo" +
           "YW5nZXNSZXF1aXJlZAAB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAA" +
           "DgAAAEFkZENlcnRpZmljYXRlAQATNgAvAQAEMRM2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAFDYALgBEFDYAAJYCAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAA" +
           "AAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQAAAAIA" +
           "AAABAf////8AAAAABGGCCgQAAAAAABEAAABSZW1vdmVDZXJ0aWZpY2F0ZQEAFTYALwEABjEVNgAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABY2AC4ARBY2AACWAgAAAAEAKgEBGQAA" +
           "AAoAAABUaHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUA" +
           "Af////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CJCgIAAAAAABAAAABDZXJ0aWZpY2F0" +
           "ZVR5cGVzAQAXNgAuAEQXNgAAABEBAAAAAQAAAAAAAAABAf////8AAAAABGCACgEAAAAAABEAAABEZWZh" +
           "dWx0SHR0cHNHcm91cAEAGDYALwEACzEYNgAAAQAAAAEALiMAAQCpMwIAAAAEYIAKAQAAAAAACQAAAFRy" +
           "dXN0TGlzdAEAGTYALwEA6jAZNgAA/////w8AAAAVYIkKAgAAAAAABAAAAFNpemUBABo2AC4ARBo2AAAA" +
           "Cf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEAGzYALgBEGzYAAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAHDYALgBEHDYAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAE9wZW5Db3VudAEAHTYALgBEHTYAAAAF/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "BAAAAE9wZW4BAB82AC8BADwtHzYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQAgNgAuAEQgNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAAAAAAAQAoAQEAAAABAAAAAQAA" +
           "AAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAITYALgBEITYAAJYBAAAAAQAq" +
           "AQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGC" +
           "CgQAAAAAAAUAAABDbG9zZQEAIjYALwEAPy0iNgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBACM2AC4ARCM2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEAJDYALwEAQS0kNgAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACU2AC4ARCU2AACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAmNgAuAEQm" +
           "NgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAFdyaXRlAQAnNgAvAQBELSc2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAKDYALgBEKDYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAALAAAAR2V0UG9zaXRpb24BACk2AC8BAEYtKTYAAAEB/////wIAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQAqNgAuAEQqNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwEAKzYALgBEKzYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEA" +
           "AAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRpb24BACw2AC8BAEktLDYAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAtNgAuAEQtNgAAlgIAAAABACoBARkAAAAK" +
           "AAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUBAC42AC4ARC42" +
           "AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5XaXRoTWFza3MBAC82AC8BAP8wLzYA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAwNgAuAEQwNgAAlgEAAAABACoB" +
           "ARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBADE2AC4ARDE2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxl" +
           "AAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAOAAAAQ2xvc2VBbmRV" +
           "cGRhdGUBADI2AC8BAAIxMjYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAz" +
           "NgAuAEQzNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEANDYALgBENDYAAJYBAAAA" +
           "AQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVpcmVkAAH/////AAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAAARhggoEAAAAAAAOAAAAQWRkQ2VydGlmaWNhdGUBADU2AC8BAAQxNTYAAAEB/////wEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQA2NgAuAEQ2NgAAlgIAAAABACoBARoAAAALAAAA" +
           "Q2VydGlmaWNhdGUAD/////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAAEQAAAFJlbW92ZUNlcnRpZmlj" +
           "YXRlAQA3NgAvAQAGMTc2AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAODYA" +
           "LgBEODYAAJYCAAAAAQAqAQEZAAAACgAAAFRodW1icHJpbnQADP////8AAAAAAAEAKgEBIwAAABQAAABJ" +
           "c1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYIkK" +
           "AgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBADk2AC4ARDk2AAAAEQEAAAABAAAAAAAAAAEB/////wAA" +
           "AAAEYIAKAQAAAAAAFQAAAERlZmF1bHRVc2VyVG9rZW5Hcm91cAEAOjYALwEACzE6NgAAAQAAAAEALiMA" +
           "AQCpMwIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAOzYALwEA6jA7NgAA/////w8AAAAVYIkKAgAA" +
           "AAAABAAAAFNpemUBADw2AC4ARDw2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJs" +
           "ZQEAPTYALgBEPTYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAPjYA" +
           "LgBEPjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAPzYALgBEPzYAAAAF" +
           "/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAEE2AC8BADwtQTYAAAEB/////wIAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBCNgAuAERCNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3Vt" +
           "ZW50cwEAQzYALgBEQzYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEARDYALwEAPy1ENgAAAQH/////" +
           "AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEU2AC4AREU2AACWAQAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAE" +
           "AAAAUmVhZAEARjYALwEAQS1GNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AEc2AC4AREc2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAG" +
           "AAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAQBINgAuAERINgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQBJNgAvAQBELUk2AAAB" +
           "Af////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEASjYALgBESjYAAJYCAAAAAQAqAQEZ" +
           "AAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEs2AC8BAEYtSzYA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNgAuAERMNgAAlgEAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkK" +
           "AgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEATTYALgBETTYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0" +
           "aW9uAAn/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9z" +
           "aXRpb24BAE42AC8BAEktTjYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBP" +
           "NgAuAERPNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAA" +
           "AFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFVwZGF0ZVRpbWUBAFA2AC4ARFA2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9w" +
           "ZW5XaXRoTWFza3MBAFE2AC8BAP8wUTYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBSNgAuAERSNgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFM2AC4ARFM2AACWAQAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AARhggoEAAAAAAAOAAAAQ2xvc2VBbmRVcGRhdGUBAFQ2AC8BAAIxVDYAAAEB/////wIAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQBVNgAuAERVNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRs" +
           "ZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAVjYALgBEVjYAAJYBAAAAAQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVpcmVkAAH/" +
           "////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAOAAAAQWRkQ2VydGlmaWNh" +
           "dGUBAFc2AC8BAAQxVzYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBYNgAu" +
           "AERYNgAAlgIAAAABACoBARoAAAALAAAAQ2VydGlmaWNhdGUAD/////8AAAAAAAEAKgEBIwAAABQAAABJ" +
           "c1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAAEQAAAFJlbW92ZUNlcnRpZmljYXRlAQBZNgAvAQAGMVk2AAABAf////8BAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAWjYALgBEWjYAAJYCAAAAAQAqAQEZAAAACgAAAFRodW1icHJpbnQA" +
           "DP////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAAAQAoAQEA" +
           "AAABAAAAAgAAAAEB/////wAAAAAXYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBAFs2AC4ARFs2" +
           "AAAAEQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupState DefaultApplicationGroup
        {
            get
            {
                return m_defaultApplicationGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultApplicationGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultApplicationGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultHttpsGroup
        {
            get
            {
                return m_defaultHttpsGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultHttpsGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultHttpsGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultUserTokenGroup
        {
            get
            {
                return m_defaultUserTokenGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultUserTokenGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultUserTokenGroup = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_defaultApplicationGroup != null)
            {
                children.Add(m_defaultApplicationGroup);
            }

            if (m_defaultHttpsGroup != null)
            {
                children.Add(m_defaultHttpsGroup);
            }

            if (m_defaultUserTokenGroup != null)
            {
                children.Add(m_defaultUserTokenGroup);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DefaultApplicationGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultApplicationGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultApplicationGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultApplicationGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultApplicationGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultHttpsGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultHttpsGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultHttpsGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultHttpsGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultHttpsGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultUserTokenGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultUserTokenGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultUserTokenGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultUserTokenGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultUserTokenGroup;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupState m_defaultApplicationGroup;
        private CertificateGroupState m_defaultHttpsGroup;
        private CertificateGroupState m_defaultUserTokenGroup;
        #endregion
    }
    #endif
    #endregion

    #region CertificateState Class
    #if (!OPCUA_EXCLUDE_CertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public CertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAENlcnRpZmljYXRlVHlwZUluc3RhbmNlAQAMMQEADDEMMQAA////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ApplicationCertificateState : CertificateState
    {
        #region Constructors
        /// <remarks />
        public ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA0x" +
           "AQANMQ0xAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region HttpsCertificateState Class
    #if (!OPCUA_EXCLUDE_HttpsCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HttpsCertificateState : CertificateState
    {
        #region Constructors
        /// <remarks />
        public HttpsCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HttpsCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAEh0dHBzQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA4xAQAOMQ4x" +
           "AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region UserCredentialCertificateState Class
    #if (!OPCUA_EXCLUDE_UserCredentialCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UserCredentialCertificateState : CertificateState
    {
        #region Constructors
        /// <remarks />
        public UserCredentialCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UserCredentialCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAFVzZXJDcmVkZW50aWFsQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UB" +
           "AE07AQBNO007AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaMinApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaMinApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaMinApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public RsaMinApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaMinApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAFJzYU1pbkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFu" +
           "Y2UBAA8xAQAPMQ8xAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaSha256ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaSha256ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaSha256ApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public RsaSha256ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaSha256ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAFJzYVNoYTI1NkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5z" +
           "dGFuY2UBABAxAQAQMRAxAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEVjY0FwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UB" +
           "APFbAQDxW/FbAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccNistP256ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccNistP256ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccNistP256ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccNistP256ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccNistP256ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEVjY05pc3RQMjU2QXBwbGljYXRpb25DZXJ0aWZpY2F0ZVR5cGVJ" +
           "bnN0YW5jZQEA8lsBAPJb8lsAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccNistP384ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccNistP384ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccNistP384ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccNistP384ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccNistP384ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEVjY05pc3RQMzg0QXBwbGljYXRpb25DZXJ0aWZpY2F0ZVR5cGVJ" +
           "bnN0YW5jZQEA81sBAPNb81sAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccBrainpoolP256r1ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccBrainpoolP256r1ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccBrainpoolP256r1ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccBrainpoolP256r1ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccBrainpoolP256r1ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAANAAAAEVjY0JyYWlucG9vbFAyNTZyMUFwcGxpY2F0aW9uQ2VydGlmaWNh" +
           "dGVUeXBlSW5zdGFuY2UBAPRbAQD0W/RbAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccBrainpoolP384r1ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccBrainpoolP384r1ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccBrainpoolP384r1ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccBrainpoolP384r1ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccBrainpoolP384r1ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAANAAAAEVjY0JyYWlucG9vbFAzODRyMUFwcGxpY2F0aW9uQ2VydGlmaWNh" +
           "dGVUeXBlSW5zdGFuY2UBAPVbAQD1W/VbAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccCurve25519ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccCurve25519ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccCurve25519ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccCurve25519ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccCurve25519ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALwAAAEVjY0N1cnZlMjU1MTlBcHBsaWNhdGlvbkNlcnRpZmljYXRlVHlw" +
           "ZUluc3RhbmNlAQD2WwEA9lv2WwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EccCurve448ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_EccCurve448ApplicationCertificateState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EccCurve448ApplicationCertificateState : EccApplicationCertificateState
    {
        #region Constructors
        /// <remarks />
        public EccCurve448ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EccCurve448ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEVjY0N1cnZlNDQ4QXBwbGljYXRpb25DZXJ0aWZpY2F0ZVR5cGVJ" +
           "bnN0YW5jZQEA91sBAPdb91sAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TrustListUpdateRequestedAuditEventState Class
    #if (!OPCUA_EXCLUDE_TrustListUpdateRequestedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListUpdateRequestedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public TrustListUpdateRequestedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListUpdateRequestedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALgAAAFRydXN0TGlzdFVwZGF0ZVJlcXVlc3RlZEF1ZGl0RXZlbnRUeXBl" +
           "SW5zdGFuY2UBAAR+AQAEfgR+AAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAItVDwAALgBE" +
           "i1UPAAAP/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAIxVDwAALgBEjFUPAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAACNVQ8AAC4ARI1VDwAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAjlUPAAAuAESOVQ8AAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAEAAAAVGltZQIAAI9VDwAALgBEj1UPAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAALAAAAUmVjZWl2ZVRpbWUCAACQVQ8AAC4ARJBVDwABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABwAAAE1lc3NhZ2UCAACSVQ8AAC4ARJJVDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXZlcml0eQIAAJNVDwAALgBEk1UPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRp" +
           "bWVTdGFtcAIAAJhVDwAALgBEmFUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVz" +
           "AgAAmVUPAAAuAESZVQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAACaVQ8A" +
           "AC4ARJpVDwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAACb" +
           "VQ8AAC4ARJtVDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAACcVQ8A" +
           "AC4ARJxVDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAIAAJ1VDwAALgBEnVUP" +
           "AAAR/////wEB/////wAAAAAXYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAnlUPAAAuAESeVQ8A" +
           "ABgBAAAAAQAAAAAAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TrustListUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_TrustListUpdatedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListUpdatedAuditEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public TrustListUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAFRydXN0TGlzdFVwZGF0ZWRBdWRpdEV2ZW50VHlwZUluc3RhbmNl" +
           "AQARMQEAETERMQAA/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAACfVQ8AAC4ARJ9VDwAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAACgVQ8AAC4ARKBVDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAAoVUPAAAuAEShVQ8AABH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAKJVDwAALgBEolUPAAAM/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABAAAAFRpbWUCAACjVQ8AAC4ARKNVDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AFJlY2VpdmVUaW1lAgAApFUPAAAuAESkVQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABN" +
           "ZXNzYWdlAgAAplUPAAAuAESmVQ8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkC" +
           "AACnVQ8AAC4ARKdVDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXAC" +
           "AACsVQ8AAC4ARKxVDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAK1VDwAA" +
           "LgBErVUPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAArlUPAAAuAESuVQ8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAAr1UPAAAuAESv" +
           "VQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAAsFUPAAAuAESwVQ8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAVHJ1c3RMaXN0SWQBABl+AC4ARBl+AAAAEf////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> TrustListId
        {
            get
            {
                return m_trustListId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustListId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustListId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_trustListId != null)
            {
                children.Add(m_trustListId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TrustListId:
                {
                    if (createOrReplace)
                    {
                        if (TrustListId == null)
                        {
                            if (replacement == null)
                            {
                                TrustListId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                TrustListId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = TrustListId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_trustListId;
        #endregion
    }
    #endif
    #endregion

    #region UpdateCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_UpdateCertificateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UpdateCertificateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public UpdateCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new UpdateCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFVwZGF0ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEAIjEALwEAIjEi" +
           "MQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACMxAC4ARCMxAACWBgAAAAEA" +
           "KgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0aWZp" +
           "Y2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAAAAABACoB" +
           "ASUAAAASAAAASXNzdWVyQ2VydGlmaWNhdGVzAA8BAAAAAQAAAAAAAAAAAQAqAQEfAAAAEAAAAFByaXZh" +
           "dGVLZXlGb3JtYXQADP////8AAAAAAAEAKgEBGQAAAAoAAABQcml2YXRlS2V5AA//////AAAAAAABACgB" +
           "AQAAAAEAAAAGAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAkMQAuAEQk" +
           "MQAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public UpdateCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            byte[] certificate = (byte[])_inputArguments[2];
            byte[][] issuerCertificates = (byte[][])_inputArguments[3];
            string privateKeyFormat = (string)_inputArguments[4];
            byte[] privateKey = (byte[])_inputArguments[5];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    certificate,
                    issuerCertificates,
                    privateKeyFormat,
                    privateKey,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult UpdateCertificateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        byte[] certificate,
        byte[][] issuerCertificates,
        string privateKeyFormat,
        byte[] privateKey,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region CreateSigningRequestMethodState Class
    #if (!OPCUA_EXCLUDE_CreateSigningRequestMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateSigningRequestMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CreateSigningRequestMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateSigningRequestMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAENyZWF0ZVNpZ25pbmdSZXF1ZXN0TWV0aG9kVHlwZQEAxTEALwEA" +
           "xTHFMQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMYxAC4ARMYxAACWBQAA" +
           "AAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0" +
           "aWZpY2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAFN1YmplY3ROYW1lAAz/////AAAAAAAB" +
           "ACoBASMAAAAUAAAAUmVnZW5lcmF0ZVByaXZhdGVLZXkAAf////8AAAAAAAEAKgEBFAAAAAUAAABOb25j" +
           "ZQAP/////wAAAAAAAQAoAQEAAAABAAAABQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAxzEALgBExzEAAJYBAAAAAQAqAQEhAAAAEgAAAENlcnRpZmljYXRlUmVxdWVzdAAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CreateSigningRequestMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            string subjectName = (string)_inputArguments[2];
            bool regeneratePrivateKey = (bool)_inputArguments[3];
            byte[] nonce = (byte[])_inputArguments[4];

            byte[] certificateRequest = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    subjectName,
                    regeneratePrivateKey,
                    nonce,
                    ref certificateRequest);
            }

            _outputArguments[0] = certificateRequest;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CreateSigningRequestMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        string subjectName,
        bool regeneratePrivateKey,
        byte[] nonce,
        ref byte[] certificateRequest);
    #endif
    #endregion

    #region GetRejectedListMethodState Class
    #if (!OPCUA_EXCLUDE_GetRejectedListMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetRejectedListMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetRejectedListMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetRejectedListMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAEdldFJlamVjdGVkTGlzdE1ldGhvZFR5cGUBAOUxAC8BAOUx5TEA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA5jEALgBE5jEAAJYBAAAAAQAq" +
           "AQEfAAAADAAAAENlcnRpZmljYXRlcwAPAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetRejectedListMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            byte[][] certificates = (byte[][])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref certificates);
            }

            _outputArguments[0] = certificates;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetRejectedListMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref byte[][] certificates);
    #endif
    #endregion

    #region GetCertificatesMethodState Class
    #if (!OPCUA_EXCLUDE_GetCertificatesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetCertificatesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetCertificatesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetCertificatesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAEdldENlcnRpZmljYXRlc01ldGhvZFR5cGUBABp+AC8BABp+Gn4A" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAbfgAuAEQbfgAAlgEAAAABACoB" +
           "ASEAAAASAAAAQ2VydGlmaWNhdGVHcm91cElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAcfgAuAEQcfgAAlgIAAAABACoBASUAAAAS" +
           "AAAAQ2VydGlmaWNhdGVUeXBlSWRzABEBAAAAAQAAAAAAAAAAAQAqAQEfAAAADAAAAENlcnRpZmljYXRl" +
           "cwAPAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetCertificatesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];

            NodeId[] certificateTypeIds = (NodeId[])_outputArguments[0];
            byte[][] certificates = (byte[][])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    ref certificateTypeIds,
                    ref certificates);
            }

            _outputArguments[0] = certificateTypeIds;
            _outputArguments[1] = certificates;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetCertificatesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId certificateGroupId,
        ref NodeId[] certificateTypeIds,
        ref byte[][] certificates);
    #endif
    #endregion

    #region TransactionDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_TransactionDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransactionDiagnosticsState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public TransactionDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransactionDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAFRyYW5zYWN0aW9uRGlhZ25vc3RpY3NUeXBlSW5zdGFuY2UBAB5+" +
           "AQAefh5+AAD/////BgAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQAffgAuAEQffgAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABFbmRUaW1lAQAgfgAuAEQgfgAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABSZXN1bHQBACF+AC4ARCF+AAAAE/////8BAf////8AAAAAF2CJCgIAAAAAABIA" +
           "AABBZmZlY3RlZFRydXN0TGlzdHMBACJ+AC4ARCJ+AAAAEQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkK" +
           "AgAAAAAAGQAAAEFmZmVjdGVkQ2VydGlmaWNhdGVHcm91cHMBACN+AC4ARCN+AAAAEQEAAAABAAAAAAAA" +
           "AAEB/////wAAAAAXYIkKAgAAAAAABgAAAEVycm9ycwEAJH4ALgBEJH4AAAEAHX4BAAAAAQAAAAAAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EndTime
        {
            get
            {
                return m_endTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endTime = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusCode> Result
        {
            get
            {
                return m_result;
            }

            set
            {
                if (!Object.ReferenceEquals(m_result, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_result = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> AffectedTrustLists
        {
            get
            {
                return m_affectedTrustLists;
            }

            set
            {
                if (!Object.ReferenceEquals(m_affectedTrustLists, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_affectedTrustLists = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> AffectedCertificateGroups
        {
            get
            {
                return m_affectedCertificateGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_affectedCertificateGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_affectedCertificateGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<TransactionErrorType[]> Errors
        {
            get
            {
                return m_errors;
            }

            set
            {
                if (!Object.ReferenceEquals(m_errors, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_errors = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_endTime != null)
            {
                children.Add(m_endTime);
            }

            if (m_result != null)
            {
                children.Add(m_result);
            }

            if (m_affectedTrustLists != null)
            {
                children.Add(m_affectedTrustLists);
            }

            if (m_affectedCertificateGroups != null)
            {
                children.Add(m_affectedCertificateGroups);
            }

            if (m_errors != null)
            {
                children.Add(m_errors);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EndTime:
                {
                    if (createOrReplace)
                    {
                        if (EndTime == null)
                        {
                            if (replacement == null)
                            {
                                EndTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EndTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EndTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Result:
                {
                    if (createOrReplace)
                    {
                        if (Result == null)
                        {
                            if (replacement == null)
                            {
                                Result = new PropertyState<StatusCode>(this);
                            }
                            else
                            {
                                Result = (PropertyState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = Result;
                    break;
                }

                case Opc.Ua.BrowseNames.AffectedTrustLists:
                {
                    if (createOrReplace)
                    {
                        if (AffectedTrustLists == null)
                        {
                            if (replacement == null)
                            {
                                AffectedTrustLists = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                AffectedTrustLists = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = AffectedTrustLists;
                    break;
                }

                case Opc.Ua.BrowseNames.AffectedCertificateGroups:
                {
                    if (createOrReplace)
                    {
                        if (AffectedCertificateGroups == null)
                        {
                            if (replacement == null)
                            {
                                AffectedCertificateGroups = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                AffectedCertificateGroups = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = AffectedCertificateGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.Errors:
                {
                    if (createOrReplace)
                    {
                        if (Errors == null)
                        {
                            if (replacement == null)
                            {
                                Errors = new PropertyState<TransactionErrorType[]>(this);
                            }
                            else
                            {
                                Errors = (PropertyState<TransactionErrorType[]>)replacement;
                            }
                        }
                    }

                    instance = Errors;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_startTime;
        private PropertyState<DateTime> m_endTime;
        private PropertyState<StatusCode> m_result;
        private PropertyState<NodeId[]> m_affectedTrustLists;
        private PropertyState<NodeId[]> m_affectedCertificateGroups;
        private PropertyState<TransactionErrorType[]> m_errors;
        #endregion
    }
    #endif
    #endregion

    #region ServerConfigurationState Class
    #if (!OPCUA_EXCLUDE_ServerConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ServerConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ApplicationUri != null)
            {
                ApplicationUri.Initialize(context, ApplicationUri_InitializationString);
            }

            if (ProductUri != null)
            {
                ProductUri.Initialize(context, ProductUri_InitializationString);
            }

            if (ApplicationType != null)
            {
                ApplicationType.Initialize(context, ApplicationType_InitializationString);
            }

            if (HasSecureElement != null)
            {
                HasSecureElement.Initialize(context, HasSecureElement_InitializationString);
            }

            if (GetCertificates != null)
            {
                GetCertificates.Initialize(context, GetCertificates_InitializationString);
            }

            if (CancelChanges != null)
            {
                CancelChanges.Initialize(context, CancelChanges_InitializationString);
            }

            if (ResetToServerDefaults != null)
            {
                ResetToServerDefaults.Initialize(context, ResetToServerDefaults_InitializationString);
            }

            if (TransactionDiagnostics != null)
            {
                TransactionDiagnostics.Initialize(context, TransactionDiagnostics_InitializationString);
            }
        }

        #region Initialization String
        private const string ApplicationUri_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAEFwcGxpY2F0aW9uVXJpAQBgZAAuAERgZAAAAQDHXP////8BAf//" +
           "//8AAAAA";

        private const string ProductUri_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAFByb2R1Y3RVcmkBAHxkAC4ARHxkAAABAMdc/////wEB/////wAA" +
           "AAA=";

        private const string ApplicationType_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEFwcGxpY2F0aW9uVHlwZQEAYWQALgBEYWQAAAEAMwH/////AQH/" +
           "////AAAAAA==";

        private const string HasSecureElement_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEhhc1NlY3VyZUVsZW1lbnQBAClcAC4ARClcAAAAAf////8BAf//" +
           "//8AAAAA";

        private const string GetCertificates_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEdldENlcnRpZmljYXRlcwEAKH4ALwEAKH4ofgAAAQH/////AgAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACl+AC4ARCl+AACWAQAAAAEAKgEBIQAAABIAAABD" +
           "ZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACp+AC4ARCp+AACWAgAAAAEAKgEBJQAAABIAAABDZXJ0aWZp" +
           "Y2F0ZVR5cGVJZHMAEQEAAAABAAAAAAAAAAABACoBAR8AAAAMAAAAQ2VydGlmaWNhdGVzAA8BAAAAAQAA" +
           "AAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string CancelChanges_InitializationString =
           "//////////8EYYIKBAAAAAAADQAAAENhbmNlbENoYW5nZXMBAGJkAC8BAGJkYmQAAAEB/////wAAAAA=";

        private const string ResetToServerDefaults_InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFJlc2V0VG9TZXJ2ZXJEZWZhdWx0cwEAY2QALwEAY2RjZAAAAQH/" +
           "////AAAAAA==";

        private const string TransactionDiagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAAFgAAAFRyYW5zYWN0aW9uRGlhZ25vc3RpY3MBACt+AC8BAB5+K34AAP//" +
           "//8GAAAAFWCJCgIAAAAAAAkAAABTdGFydFRpbWUBACx+AC4ARCx+AAABACYB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABwAAAEVuZFRpbWUBAC1+AC4ARC1+AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAFJlc3VsdAEALn4ALgBELn4AAAAT/////wEB/////wAAAAAXYIkKAgAAAAAAEgAAAEFmZmVjdGVk" +
           "VHJ1c3RMaXN0cwEAL34ALgBEL34AAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAZAAAA" +
           "QWZmZWN0ZWRDZXJ0aWZpY2F0ZUdyb3VwcwEAMH4ALgBEMH4AAAARAQAAAAEAAAAAAAAAAQH/////AAAA" +
           "ABdgiQoCAAAAAAAGAAAARXJyb3JzAQAxfgAuAEQxfgAAAQAdfgEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNlcnZlckNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBACUxAQAl" +
           "MSUxAAD/////EQAAAARggAoBAAAAAAARAAAAQ2VydGlmaWNhdGVHcm91cHMBAH42AC8BAPU1fjYAAP//" +
           "//8BAAAABGCACgEAAAAAABcAAABEZWZhdWx0QXBwbGljYXRpb25Hcm91cAEAfzYALwEACzF/NgAAAQAA" +
           "AAEALiMAAQCpMwIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAgDYALwEA6jCANgAA/////w8AAAAV" +
           "YIkKAgAAAAAABAAAAFNpemUBAIE2AC4ARIE2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABX" +
           "cml0YWJsZQEAgjYALgBEgjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJs" +
           "ZQEAgzYALgBEgzYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAhDYALgBE" +
           "hDYAAAAF/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAIY2AC8BADwthjYAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCHNgAuAESHNgAAlgEAAAABACoBARMAAAAEAAAA" +
           "TW9kZQAD/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEAiDYALgBEiDYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAiTYALwEAPy2JNgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIo2AC4ARIo2AACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoE" +
           "AAAAAAAEAAAAUmVhZAEAizYALwEAQS2LNgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAIw2AC4ARIw2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoB" +
           "ARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQCNNgAuAESNNgAAlgEAAAABACoBARMAAAAEAAAARGF0YQAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQCONgAvAQBE" +
           "LY42AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAjzYALgBEjzYAAJYCAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAA" +
           "AAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAJA2AC8B" +
           "AEYtkDYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCRNgAuAESRNgAAlgEA" +
           "AAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAkjYALgBEkjYAAJYBAAAAAQAqAQEXAAAACAAA" +
           "AFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAALAAAA" +
           "U2V0UG9zaXRpb24BAJM2AC8BAEktkzYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQCUNgAuAESUNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEX" +
           "AAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAATGFzdFVwZGF0ZVRpbWUBAJU2AC4ARJU2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAA" +
           "DQAAAE9wZW5XaXRoTWFza3MBAJY2AC8BAP8wljYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQCXNgAuAESXNgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAJg2AC4ARJg2" +
           "AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAAOAAAAQ2xvc2VBbmRVcGRhdGUBAJk2AC8BAAIxmTYAAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCaNgAuAESaNgAAlgEAAAABACoBARkAAAAKAAAARmls" +
           "ZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEAmzYALgBEmzYAAJYBAAAAAQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVp" +
           "cmVkAAH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAOAAAAQWRkQ2Vy" +
           "dGlmaWNhdGUBAJw2AC8BAAQxnDYAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQCdNgAuAESdNgAAlgIAAAABACoBARoAAAALAAAAQ2VydGlmaWNhdGUAD/////8AAAAAAAEAKgEBIwAA" +
           "ABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAAEQAAAFJlbW92ZUNlcnRpZmljYXRlAQCeNgAvAQAGMZ42AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAnzYALgBEnzYAAJYCAAAAAQAqAQEZAAAACgAAAFRodW1i" +
           "cHJpbnQADP////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBAKA2" +
           "AC4ARKA2AAAAEQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAADgAAAEFwcGxpY2F0aW9uVXJp" +
           "AQBgZAAuAERgZAAAAQDHXP////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABQcm9kdWN0VXJpAQB8ZAAu" +
           "AER8ZAAAAQDHXP////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBcHBsaWNhdGlvblR5cGUBAGFkAC4A" +
           "RGFkAAABADMB/////wEB/////wAAAAAXYIkKAgAAAAAAEgAAAFNlcnZlckNhcGFiaWxpdGllcwEApDEA" +
           "LgBEpDEAAAAMAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAaAAAAU3VwcG9ydGVkUHJpdmF0" +
           "ZUtleUZvcm1hdHMBACcxAC4ARCcxAAAADAEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAA" +
           "AE1heFRydXN0TGlzdFNpemUBACgxAC4ARCgxAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABN" +
           "dWx0aWNhc3REbnNFbmFibGVkAQApMQAuAEQpMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAQAAAA" +
           "SGFzU2VjdXJlRWxlbWVudAEAKVwALgBEKVwAAAAB/////wEB/////wAAAAAEYYIKBAAAAAAAEQAAAFVw" +
           "ZGF0ZUNlcnRpZmljYXRlAQBIMQAvAQBIMUgxAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEASTEALgBESTEAAJYGAAAAAQAqAQEhAAAAEgAAAENlcnRpZmljYXRlR3JvdXBJZAAR////" +
           "/wAAAAAAAQAqAQEgAAAAEQAAAENlcnRpZmljYXRlVHlwZUlkABH/////AAAAAAABACoBARoAAAALAAAA" +
           "Q2VydGlmaWNhdGUAD/////8AAAAAAAEAKgEBJQAAABIAAABJc3N1ZXJDZXJ0aWZpY2F0ZXMADwEAAAAB" +
           "AAAAAAAAAAABACoBAR8AAAAQAAAAUHJpdmF0ZUtleUZvcm1hdAAM/////wAAAAAAAQAqAQEZAAAACgAA" +
           "AFByaXZhdGVLZXkAD/////8AAAAAAAEAKAEBAAAAAQAAAAYAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAEoxAC4AREoxAACWAQAAAAEAKgEBIwAAABQAAABBcHBseUNoYW5nZXNS" +
           "ZXF1aXJlZAAB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAADwAAAEdl" +
           "dENlcnRpZmljYXRlcwEAKH4ALwEAKH4ofgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBACl+AC4ARCl+AACWAQAAAAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "ACp+AC4ARCp+AACWAgAAAAEAKgEBJQAAABIAAABDZXJ0aWZpY2F0ZVR5cGVJZHMAEQEAAAABAAAAAAAA" +
           "AAABACoBAR8AAAAMAAAAQ2VydGlmaWNhdGVzAA8BAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB" +
           "/////wAAAAAEYYIKBAAAAAAADAAAAEFwcGx5Q2hhbmdlcwEAvjEALwEAvjG+MQAAAQH/////AAAAAARh" +
           "ggoEAAAAAAANAAAAQ2FuY2VsQ2hhbmdlcwEAYmQALwEAYmRiZAAAAQH/////AAAAAARhggoEAAAAAAAU" +
           "AAAAQ3JlYXRlU2lnbmluZ1JlcXVlc3QBALsxAC8BALsxuzEAAAEB/////wIAAAAXYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQC8MQAuAES8MQAAlgUAAAABACoBASEAAAASAAAAQ2VydGlmaWNhdGVHcm91" +
           "cElkABH/////AAAAAAABACoBASAAAAARAAAAQ2VydGlmaWNhdGVUeXBlSWQAEf////8AAAAAAAEAKgEB" +
           "GgAAAAsAAABTdWJqZWN0TmFtZQAM/////wAAAAAAAQAqAQEjAAAAFAAAAFJlZ2VuZXJhdGVQcml2YXRl" +
           "S2V5AAH/////AAAAAAABACoBARQAAAAFAAAATm9uY2UAD/////8AAAAAAAEAKAEBAAAAAQAAAAUAAAAB" +
           "Af////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAL0xAC4ARL0xAACWAQAAAAEAKgEB" +
           "IQAAABIAAABDZXJ0aWZpY2F0ZVJlcXVlc3QAD/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAA8AAABHZXRSZWplY3RlZExpc3QBAOcxAC8BAOcx5zEAAAEB/////wEAAAAXYKkK" +
           "AgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA6DEALgBE6DEAAJYBAAAAAQAqAQEfAAAADAAAAENlcnRp" +
           "ZmljYXRlcwAPAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAABUA" +
           "AABSZXNldFRvU2VydmVyRGVmYXVsdHMBAGNkAC8BAGNkY2QAAAEB/////wAAAAAEYIAKAQAAAAAAFgAA" +
           "AFRyYW5zYWN0aW9uRGlhZ25vc3RpY3MBACt+AC8BAB5+K34AAP////8GAAAAFWCJCgIAAAAAAAkAAABT" +
           "dGFydFRpbWUBACx+AC4ARCx+AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAEVuZFRpbWUB" +
           "AC1+AC4ARC1+AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJlc3VsdAEALn4ALgBELn4A" +
           "AAAT/////wEB/////wAAAAAXYIkKAgAAAAAAEgAAAEFmZmVjdGVkVHJ1c3RMaXN0cwEAL34ALgBEL34A" +
           "AAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAZAAAAQWZmZWN0ZWRDZXJ0aWZpY2F0ZUdy" +
           "b3VwcwEAMH4ALgBEMH4AAAARAQAAAAEAAAAAAAAAAQH/////AAAAABdgiQoCAAAAAAAGAAAARXJyb3Jz" +
           "AQAxfgAuAEQxfgAAAQAdfgEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupFolderState CertificateGroups
        {
            get
            {
                return m_certificateGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ApplicationUri
        {
            get
            {
                return m_applicationUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applicationUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applicationUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ProductUri
        {
            get
            {
                return m_productUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productUri = value;
            }
        }

        /// <remarks />
        public PropertyState<ApplicationType> ApplicationType
        {
            get
            {
                return m_applicationType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applicationType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applicationType = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> SupportedPrivateKeyFormats
        {
            get
            {
                return m_supportedPrivateKeyFormats;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportedPrivateKeyFormats, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportedPrivateKeyFormats = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxTrustListSize
        {
            get
            {
                return m_maxTrustListSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTrustListSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTrustListSize = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> MulticastDnsEnabled
        {
            get
            {
                return m_multicastDnsEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_multicastDnsEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_multicastDnsEnabled = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> HasSecureElement
        {
            get
            {
                return m_hasSecureElement;
            }

            set
            {
                if (!Object.ReferenceEquals(m_hasSecureElement, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_hasSecureElement = value;
            }
        }

        /// <remarks />
        public UpdateCertificateMethodState UpdateCertificate
        {
            get
            {
                return m_updateCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateCertificateMethod = value;
            }
        }

        /// <remarks />
        public GetCertificatesMethodState GetCertificates
        {
            get
            {
                return m_getCertificatesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getCertificatesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getCertificatesMethod = value;
            }
        }

        /// <remarks />
        public MethodState ApplyChanges
        {
            get
            {
                return m_applyChangesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applyChangesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applyChangesMethod = value;
            }
        }

        /// <remarks />
        public MethodState CancelChanges
        {
            get
            {
                return m_cancelChangesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cancelChangesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cancelChangesMethod = value;
            }
        }

        /// <remarks />
        public CreateSigningRequestMethodState CreateSigningRequest
        {
            get
            {
                return m_createSigningRequestMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSigningRequestMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSigningRequestMethod = value;
            }
        }

        /// <remarks />
        public GetRejectedListMethodState GetRejectedList
        {
            get
            {
                return m_getRejectedListMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getRejectedListMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getRejectedListMethod = value;
            }
        }

        /// <remarks />
        public MethodState ResetToServerDefaults
        {
            get
            {
                return m_resetToServerDefaultsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetToServerDefaultsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetToServerDefaultsMethod = value;
            }
        }

        /// <remarks />
        public TransactionDiagnosticsState TransactionDiagnostics
        {
            get
            {
                return m_transactionDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transactionDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transactionDiagnostics = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroups != null)
            {
                children.Add(m_certificateGroups);
            }

            if (m_applicationUri != null)
            {
                children.Add(m_applicationUri);
            }

            if (m_productUri != null)
            {
                children.Add(m_productUri);
            }

            if (m_applicationType != null)
            {
                children.Add(m_applicationType);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_supportedPrivateKeyFormats != null)
            {
                children.Add(m_supportedPrivateKeyFormats);
            }

            if (m_maxTrustListSize != null)
            {
                children.Add(m_maxTrustListSize);
            }

            if (m_multicastDnsEnabled != null)
            {
                children.Add(m_multicastDnsEnabled);
            }

            if (m_hasSecureElement != null)
            {
                children.Add(m_hasSecureElement);
            }

            if (m_updateCertificateMethod != null)
            {
                children.Add(m_updateCertificateMethod);
            }

            if (m_getCertificatesMethod != null)
            {
                children.Add(m_getCertificatesMethod);
            }

            if (m_applyChangesMethod != null)
            {
                children.Add(m_applyChangesMethod);
            }

            if (m_cancelChangesMethod != null)
            {
                children.Add(m_cancelChangesMethod);
            }

            if (m_createSigningRequestMethod != null)
            {
                children.Add(m_createSigningRequestMethod);
            }

            if (m_getRejectedListMethod != null)
            {
                children.Add(m_getRejectedListMethod);
            }

            if (m_resetToServerDefaultsMethod != null)
            {
                children.Add(m_resetToServerDefaultsMethod);
            }

            if (m_transactionDiagnostics != null)
            {
                children.Add(m_transactionDiagnostics);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroups:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroups == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroups = new CertificateGroupFolderState(this);
                            }
                            else
                            {
                                CertificateGroups = (CertificateGroupFolderState)replacement;
                            }
                        }
                    }

                    instance = CertificateGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplicationUri:
                {
                    if (createOrReplace)
                    {
                        if (ApplicationUri == null)
                        {
                            if (replacement == null)
                            {
                                ApplicationUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ApplicationUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ApplicationUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ProductUri:
                {
                    if (createOrReplace)
                    {
                        if (ProductUri == null)
                        {
                            if (replacement == null)
                            {
                                ProductUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ProductUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplicationType:
                {
                    if (createOrReplace)
                    {
                        if (ApplicationType == null)
                        {
                            if (replacement == null)
                            {
                                ApplicationType = new PropertyState<ApplicationType>(this);
                            }
                            else
                            {
                                ApplicationType = (PropertyState<ApplicationType>)replacement;
                            }
                        }
                    }

                    instance = ApplicationType;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerCapabilities = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportedPrivateKeyFormats:
                {
                    if (createOrReplace)
                    {
                        if (SupportedPrivateKeyFormats == null)
                        {
                            if (replacement == null)
                            {
                                SupportedPrivateKeyFormats = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                SupportedPrivateKeyFormats = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = SupportedPrivateKeyFormats;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTrustListSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxTrustListSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxTrustListSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxTrustListSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxTrustListSize;
                    break;
                }

                case Opc.Ua.BrowseNames.MulticastDnsEnabled:
                {
                    if (createOrReplace)
                    {
                        if (MulticastDnsEnabled == null)
                        {
                            if (replacement == null)
                            {
                                MulticastDnsEnabled = new PropertyState<bool>(this);
                            }
                            else
                            {
                                MulticastDnsEnabled = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = MulticastDnsEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.HasSecureElement:
                {
                    if (createOrReplace)
                    {
                        if (HasSecureElement == null)
                        {
                            if (replacement == null)
                            {
                                HasSecureElement = new PropertyState<bool>(this);
                            }
                            else
                            {
                                HasSecureElement = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = HasSecureElement;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateCertificate:
                {
                    if (createOrReplace)
                    {
                        if (UpdateCertificate == null)
                        {
                            if (replacement == null)
                            {
                                UpdateCertificate = new UpdateCertificateMethodState(this);
                            }
                            else
                            {
                                UpdateCertificate = (UpdateCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = UpdateCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.GetCertificates:
                {
                    if (createOrReplace)
                    {
                        if (GetCertificates == null)
                        {
                            if (replacement == null)
                            {
                                GetCertificates = new GetCertificatesMethodState(this);
                            }
                            else
                            {
                                GetCertificates = (GetCertificatesMethodState)replacement;
                            }
                        }
                    }

                    instance = GetCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplyChanges:
                {
                    if (createOrReplace)
                    {
                        if (ApplyChanges == null)
                        {
                            if (replacement == null)
                            {
                                ApplyChanges = new MethodState(this);
                            }
                            else
                            {
                                ApplyChanges = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ApplyChanges;
                    break;
                }

                case Opc.Ua.BrowseNames.CancelChanges:
                {
                    if (createOrReplace)
                    {
                        if (CancelChanges == null)
                        {
                            if (replacement == null)
                            {
                                CancelChanges = new MethodState(this);
                            }
                            else
                            {
                                CancelChanges = (MethodState)replacement;
                            }
                        }
                    }

                    instance = CancelChanges;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSigningRequest:
                {
                    if (createOrReplace)
                    {
                        if (CreateSigningRequest == null)
                        {
                            if (replacement == null)
                            {
                                CreateSigningRequest = new CreateSigningRequestMethodState(this);
                            }
                            else
                            {
                                CreateSigningRequest = (CreateSigningRequestMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateSigningRequest;
                    break;
                }

                case Opc.Ua.BrowseNames.GetRejectedList:
                {
                    if (createOrReplace)
                    {
                        if (GetRejectedList == null)
                        {
                            if (replacement == null)
                            {
                                GetRejectedList = new GetRejectedListMethodState(this);
                            }
                            else
                            {
                                GetRejectedList = (GetRejectedListMethodState)replacement;
                            }
                        }
                    }

                    instance = GetRejectedList;
                    break;
                }

                case Opc.Ua.BrowseNames.ResetToServerDefaults:
                {
                    if (createOrReplace)
                    {
                        if (ResetToServerDefaults == null)
                        {
                            if (replacement == null)
                            {
                                ResetToServerDefaults = new MethodState(this);
                            }
                            else
                            {
                                ResetToServerDefaults = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ResetToServerDefaults;
                    break;
                }

                case Opc.Ua.BrowseNames.TransactionDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (TransactionDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                TransactionDiagnostics = new TransactionDiagnosticsState(this);
                            }
                            else
                            {
                                TransactionDiagnostics = (TransactionDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = TransactionDiagnostics;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupFolderState m_certificateGroups;
        private PropertyState<string> m_applicationUri;
        private PropertyState<string> m_productUri;
        private PropertyState<ApplicationType> m_applicationType;
        private PropertyState<string[]> m_serverCapabilities;
        private PropertyState<string[]> m_supportedPrivateKeyFormats;
        private PropertyState<uint> m_maxTrustListSize;
        private PropertyState<bool> m_multicastDnsEnabled;
        private PropertyState<bool> m_hasSecureElement;
        private UpdateCertificateMethodState m_updateCertificateMethod;
        private GetCertificatesMethodState m_getCertificatesMethod;
        private MethodState m_applyChangesMethod;
        private MethodState m_cancelChangesMethod;
        private CreateSigningRequestMethodState m_createSigningRequestMethod;
        private GetRejectedListMethodState m_getRejectedListMethod;
        private MethodState m_resetToServerDefaultsMethod;
        private TransactionDiagnosticsState m_transactionDiagnostics;
        #endregion
    }
    #endif
    #endregion

    #region CertificateUpdateRequestedAuditEventState Class
    #if (!OPCUA_EXCLUDE_CertificateUpdateRequestedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateUpdateRequestedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public CertificateUpdateRequestedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateUpdateRequestedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAMAAAAENlcnRpZmljYXRlVXBkYXRlUmVxdWVzdGVkQXVkaXRFdmVudFR5" +
           "cGVJbnN0YW5jZQEAMn4BADJ+Mn4AAP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAsVUPAAAu" +
           "AESxVQ8AAA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAAslUPAAAuAESyVQ8A" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAALNVDwAALgBEs1UPAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAC0VQ8AAC4ARLRVDwAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAgAAtVUPAAAuAES1VQ8AAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAsAAABSZWNlaXZlVGltZQIAALZVDwAALgBEtlUPAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAHAAAATWVzc2FnZQIAALhVDwAALgBEuFUPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AFNldmVyaXR5AgAAuVUPAAAuAES5VQ8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9u" +
           "VGltZVN0YW1wAgAAvlUPAAAuAES+VQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0" +
           "dXMCAAC/VQ8AAC4ARL9VDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAMBV" +
           "DwAALgBEwFUPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIA" +
           "AMFVDwAALgBEwVUPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAMJV" +
           "DwAALgBEwlUPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAw1UPAAAuAETD" +
           "VQ8AABH/////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAADEVQ8AAC4ARMRV" +
           "DwAAGAEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region CertificateUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_CertificateUpdatedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateUpdatedAuditEventState : AuditEventState
    {
        #region Constructors
        /// <remarks />
        public CertificateUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAENlcnRpZmljYXRlVXBkYXRlZEF1ZGl0RXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAEwxAQBMMUwxAAD/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAMVVDwAALgBExVUPAAAP" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAMZVDwAALgBExlUPAAAR/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAADHVQ8AAC4ARMdVDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAAyFUPAAAuAETIVQ8AAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAEAAAAVGltZQIAAMlVDwAALgBEyVUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAL" +
           "AAAAUmVjZWl2ZVRpbWUCAADKVQ8AAC4ARMpVDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AE1lc3NhZ2UCAADMVQ8AAC4ARMxVDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0" +
           "eQIAAM1VDwAALgBEzVUPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFt" +
           "cAIAANJVDwAALgBE0lUPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAU3RhdHVzAgAA01UP" +
           "AAAuAETTVQ8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQCAADUVQ8AAC4ARNRV" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQCAADVVQ8AAC4A" +
           "RNVVDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQCAADWVQ8AAC4ARNZV" +
           "DwAADP////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDZXJ0aWZpY2F0ZUdyb3VwAQCnNQAuAESnNQAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQ2VydGlmaWNhdGVUeXBlAQCoNQAuAESoNQAAABH/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CertificateGroup
        {
            get
            {
                return m_certificateGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroup = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroup != null)
            {
                children.Add(m_certificateGroup);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroup:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroup == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroup = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateGroup = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_certificateGroup;
        private PropertyState<NodeId> m_certificateType;
        #endregion
    }
    #endif
    #endregion

    #region CreateCredentialMethodState Class
    #if (!OPCUA_EXCLUDE_CreateCredentialMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateCredentialMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public CreateCredentialMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateCredentialMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAENyZWF0ZUNyZWRlbnRpYWxNZXRob2RUeXBlAQCQOwAvAQCQO5A7" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAlTsALgBElTsAAJYEAAAAAQAq" +
           "AQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKgEBGgAAAAsAAABSZXNvdXJjZVVyaQAM/////wAAAAAA" +
           "AQAqAQEZAAAACgAAAFByb2ZpbGVVcmkADP////8AAAAAAAEAKgEBHwAAAAwAAABFbmRwb2ludFVybHMA" +
           "DAEAAAABAAAAAAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0" +
           "QXJndW1lbnRzAQBXRAAuAERXRAAAlgEAAAABACoBAR8AAAAQAAAAQ3JlZGVudGlhbE5vZGVJZAAR////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public CreateCredentialMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];
            string resourceUri = (string)_inputArguments[1];
            string profileUri = (string)_inputArguments[2];
            string[] endpointUrls = (string[])_inputArguments[3];

            NodeId credentialNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    resourceUri,
                    profileUri,
                    endpointUrls,
                    ref credentialNodeId);
            }

            _outputArguments[0] = credentialNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult CreateCredentialMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        string resourceUri,
        string profileUri,
        string[] endpointUrls,
        ref NodeId credentialNodeId);
    #endif
    #endregion

    #region KeyCredentialConfigurationFolderState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialConfigurationFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialConfigurationFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialConfigurationFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.KeyCredentialConfigurationFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (CreateCredential != null)
            {
                CreateCredential.Initialize(context, CreateCredential_InitializationString);
            }
        }

        #region Initialization String
        private const string CreateCredential_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAENyZWF0ZUNyZWRlbnRpYWwBAHJEAC8BAHJEckQAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBzRAAuAERzRAAAlgQAAAABACoBARMAAAAEAAAA" +
           "TmFtZQAM/////wAAAAAAAQAqAQEaAAAACwAAAFJlc291cmNlVXJpAAz/////AAAAAAABACoBARkAAAAK" +
           "AAAAUHJvZmlsZVVyaQAM/////wAAAAAAAQAqAQEfAAAADAAAAEVuZHBvaW50VXJscwAMAQAAAAEAAAAA" +
           "AAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AHREAC4ARHREAACWAQAAAAEAKgEBHwAAABAAAABDcmVkZW50aWFsTm9kZUlkABH/////AAAAAAABACgB" +
           "AQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAEtleUNyZWRlbnRpYWxDb25maWd1cmF0aW9uRm9sZGVyVHlwZUlu" +
           "c3RhbmNlAQBYRAEAWERYRAAA/////wEAAAAEYYIKBAAAAAAAEAAAAENyZWF0ZUNyZWRlbnRpYWwBAHJE" +
           "AC8BAHJEckQAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBzRAAuAERzRAAA" +
           "lgQAAAABACoBARMAAAAEAAAATmFtZQAM/////wAAAAAAAQAqAQEaAAAACwAAAFJlc291cmNlVXJpAAz/" +
           "////AAAAAAABACoBARkAAAAKAAAAUHJvZmlsZVVyaQAM/////wAAAAAAAQAqAQEfAAAADAAAAEVuZHBv" +
           "aW50VXJscwAMAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAHREAC4ARHREAACWAQAAAAEAKgEBHwAAABAAAABDcmVkZW50aWFsTm9k" +
           "ZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CreateCredentialMethodState CreateCredential
        {
            get
            {
                return m_createCredentialMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createCredentialMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createCredentialMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createCredentialMethod != null)
            {
                children.Add(m_createCredentialMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateCredential:
                {
                    if (createOrReplace)
                    {
                        if (CreateCredential == null)
                        {
                            if (replacement == null)
                            {
                                CreateCredential = new CreateCredentialMethodState(this);
                            }
                            else
                            {
                                CreateCredential = (CreateCredentialMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateCredential;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CreateCredentialMethodState m_createCredentialMethod;
        #endregion
    }
    #endif
    #endregion

    #region GetEncryptingKeyMethodState Class
    #if (!OPCUA_EXCLUDE_GetEncryptingKeyMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetEncryptingKeyMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetEncryptingKeyMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetEncryptingKeyMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEdldEVuY3J5cHRpbmdLZXlNZXRob2RUeXBlAQB7RAAvAQB7RHtE" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAfEQALgBEfEQAAJYCAAAAAQAq" +
           "AQEbAAAADAAAAENyZWRlbnRpYWxJZAAM/////wAAAAAAAQAqAQEpAAAAGgAAAFJlcXVlc3RlZFNlY3Vy" +
           "aXR5UG9saWN5VXJpAAz/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQB9RAAuAER9RAAAlgIAAAABACoBARgAAAAJAAAAUHVibGljS2V5AA//" +
           "////AAAAAAABACoBAScAAAAYAAAAUmV2aXNlZFNlY3VyaXR5UG9saWN5VXJpAAz/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetEncryptingKeyMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string credentialId = (string)_inputArguments[0];
            string requestedSecurityPolicyUri = (string)_inputArguments[1];

            byte[] publicKey = (byte[])_outputArguments[0];
            string revisedSecurityPolicyUri = (string)_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    credentialId,
                    requestedSecurityPolicyUri,
                    ref publicKey,
                    ref revisedSecurityPolicyUri);
            }

            _outputArguments[0] = publicKey;
            _outputArguments[1] = revisedSecurityPolicyUri;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetEncryptingKeyMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string credentialId,
        string requestedSecurityPolicyUri,
        ref byte[] publicKey,
        ref string revisedSecurityPolicyUri);
    #endif
    #endregion

    #region KeyCredentialConfigurationState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.KeyCredentialConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (EndpointUrls != null)
            {
                EndpointUrls.Initialize(context, EndpointUrls_InitializationString);
            }

            if (ServiceStatus != null)
            {
                ServiceStatus.Initialize(context, ServiceStatus_InitializationString);
            }

            if (GetEncryptingKey != null)
            {
                GetEncryptingKey.Initialize(context, GetEncryptingKey_InitializationString);
            }

            if (UpdateCredential != null)
            {
                UpdateCredential.Initialize(context, UpdateCredential_InitializationString);
            }

            if (DeleteCredential != null)
            {
                DeleteCredential.Initialize(context, DeleteCredential_InitializationString);
            }
        }

        #region Initialization String
        private const string EndpointUrls_InitializationString =
           "//////////8XYIkKAgAAAAAADAAAAEVuZHBvaW50VXJscwEAVEYALgBEVEYAAAAMAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAAA==";

        private const string ServiceStatus_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAFNlcnZpY2VTdGF0dXMBAFVGAC4ARFVGAAAAE/////8BAf////8A" +
           "AAAA";

        private const string GetEncryptingKey_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEdldEVuY3J5cHRpbmdLZXkBAH5EAC8BAH5EfkQAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQB/RAAuAER/RAAAlgIAAAABACoBARsAAAAMAAAA" +
           "Q3JlZGVudGlhbElkAAz/////AAAAAAABACoBASkAAAAaAAAAUmVxdWVzdGVkU2VjdXJpdHlQb2xpY3lV" +
           "cmkADP////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAIBEAC4ARIBEAACWAgAAAAEAKgEBGAAAAAkAAABQdWJsaWNLZXkAD/////8AAAAAAAEA" +
           "KgEBJwAAABgAAABSZXZpc2VkU2VjdXJpdHlQb2xpY3lVcmkADP////8AAAAAAAEAKAEBAAAAAQAAAAIA" +
           "AAABAf////8AAAAA";

        private const string UpdateCredential_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAFVwZGF0ZUNyZWRlbnRpYWwBAFZGAC8BAFZGVkYAAAEB/////wEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBXRgAuAERXRgAAlgQAAAABACoBARsAAAAMAAAA" +
           "Q3JlZGVudGlhbElkAAz/////AAAAAAABACoBAR8AAAAQAAAAQ3JlZGVudGlhbFNlY3JldAAP/////wAA" +
           "AAAAAQAqAQEkAAAAFQAAAENlcnRpZmljYXRlVGh1bWJwcmludAAM/////wAAAAAAAQAqAQEgAAAAEQAA" +
           "AFNlY3VyaXR5UG9saWN5VXJpAAz/////AAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////AAAAAA==";

        private const string DeleteCredential_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAERlbGV0ZUNyZWRlbnRpYWwBAFhGAC8BAFhGWEYAAAEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEtleUNyZWRlbnRpYWxDb25maWd1cmF0aW9uVHlwZUluc3RhbmNl" +
           "AQBRRgEAUUZRRgAA/////wcAAAAVYIkKAgAAAAAACwAAAFJlc291cmNlVXJpAQCVRgAuAESVRgAAAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAKAAAAUHJvZmlsZVVyaQEA9UYALgBE9UYAAAAM/////wEB////" +
           "/wAAAAAXYIkKAgAAAAAADAAAAEVuZHBvaW50VXJscwEAVEYALgBEVEYAAAAMAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAANAAAAU2VydmljZVN0YXR1cwEAVUYALgBEVUYAAAAT/////wEB/////wAA" +
           "AAAEYYIKBAAAAAAAEAAAAEdldEVuY3J5cHRpbmdLZXkBAH5EAC8BAH5EfkQAAAEB/////wIAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQB/RAAuAER/RAAAlgIAAAABACoBARsAAAAMAAAAQ3JlZGVu" +
           "dGlhbElkAAz/////AAAAAAABACoBASkAAAAaAAAAUmVxdWVzdGVkU2VjdXJpdHlQb2xpY3lVcmkADP//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBAIBEAC4ARIBEAACWAgAAAAEAKgEBGAAAAAkAAABQdWJsaWNLZXkAD/////8AAAAAAAEAKgEBJwAA" +
           "ABgAAABSZXZpc2VkU2VjdXJpdHlQb2xpY3lVcmkADP////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAABAAAABVcGRhdGVDcmVkZW50aWFsAQBWRgAvAQBWRlZGAAABAf////8BAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAV0YALgBEV0YAAJYEAAAAAQAqAQEbAAAADAAAAENy" +
           "ZWRlbnRpYWxJZAAM/////wAAAAAAAQAqAQEfAAAAEAAAAENyZWRlbnRpYWxTZWNyZXQAD/////8AAAAA" +
           "AAEAKgEBJAAAABUAAABDZXJ0aWZpY2F0ZVRodW1icHJpbnQADP////8AAAAAAAEAKgEBIAAAABEAAABT" +
           "ZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAoAQEAAAABAAAABAAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAAEAAAAERlbGV0ZUNyZWRlbnRpYWwBAFhGAC8BAFhGWEYAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ProfileUri
        {
            get
            {
                return m_profileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_profileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_profileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> EndpointUrls
        {
            get
            {
                return m_endpointUrls;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrls, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrls = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusCode> ServiceStatus
        {
            get
            {
                return m_serviceStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceStatus = value;
            }
        }

        /// <remarks />
        public GetEncryptingKeyMethodState GetEncryptingKey
        {
            get
            {
                return m_getEncryptingKeyMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getEncryptingKeyMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getEncryptingKeyMethod = value;
            }
        }

        /// <remarks />
        public KeyCredentialUpdateMethodState UpdateCredential
        {
            get
            {
                return m_updateCredentialMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateCredentialMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateCredentialMethod = value;
            }
        }

        /// <remarks />
        public MethodState DeleteCredential
        {
            get
            {
                return m_deleteCredentialMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteCredentialMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteCredentialMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            if (m_profileUri != null)
            {
                children.Add(m_profileUri);
            }

            if (m_endpointUrls != null)
            {
                children.Add(m_endpointUrls);
            }

            if (m_serviceStatus != null)
            {
                children.Add(m_serviceStatus);
            }

            if (m_getEncryptingKeyMethod != null)
            {
                children.Add(m_getEncryptingKeyMethod);
            }

            if (m_updateCredentialMethod != null)
            {
                children.Add(m_updateCredentialMethod);
            }

            if (m_deleteCredentialMethod != null)
            {
                children.Add(m_deleteCredentialMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (ProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                ProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrls:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrls == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrls = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                EndpointUrls = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrls;
                    break;
                }

                case Opc.Ua.BrowseNames.ServiceStatus:
                {
                    if (createOrReplace)
                    {
                        if (ServiceStatus == null)
                        {
                            if (replacement == null)
                            {
                                ServiceStatus = new PropertyState<StatusCode>(this);
                            }
                            else
                            {
                                ServiceStatus = (PropertyState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = ServiceStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.GetEncryptingKey:
                {
                    if (createOrReplace)
                    {
                        if (GetEncryptingKey == null)
                        {
                            if (replacement == null)
                            {
                                GetEncryptingKey = new GetEncryptingKeyMethodState(this);
                            }
                            else
                            {
                                GetEncryptingKey = (GetEncryptingKeyMethodState)replacement;
                            }
                        }
                    }

                    instance = GetEncryptingKey;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateCredential:
                {
                    if (createOrReplace)
                    {
                        if (UpdateCredential == null)
                        {
                            if (replacement == null)
                            {
                                UpdateCredential = new KeyCredentialUpdateMethodState(this);
                            }
                            else
                            {
                                UpdateCredential = (KeyCredentialUpdateMethodState)replacement;
                            }
                        }
                    }

                    instance = UpdateCredential;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteCredential:
                {
                    if (createOrReplace)
                    {
                        if (DeleteCredential == null)
                        {
                            if (replacement == null)
                            {
                                DeleteCredential = new MethodState(this);
                            }
                            else
                            {
                                DeleteCredential = (MethodState)replacement;
                            }
                        }
                    }

                    instance = DeleteCredential;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_resourceUri;
        private PropertyState<string> m_profileUri;
        private PropertyState<string[]> m_endpointUrls;
        private PropertyState<StatusCode> m_serviceStatus;
        private GetEncryptingKeyMethodState m_getEncryptingKeyMethod;
        private KeyCredentialUpdateMethodState m_updateCredentialMethod;
        private MethodState m_deleteCredentialMethod;
        #endregion
    }
    #endif
    #endregion

    #region KeyCredentialUpdateMethodState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialUpdateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialUpdateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialUpdateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new KeyCredentialUpdateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAEtleUNyZWRlbnRpYWxVcGRhdGVNZXRob2RUeXBlAQBZRgAvAQBZ" +
           "RllGAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAWkYALgBEWkYAAJYEAAAA" +
           "AQAqAQEbAAAADAAAAENyZWRlbnRpYWxJZAAM/////wAAAAAAAQAqAQEfAAAAEAAAAENyZWRlbnRpYWxT" +
           "ZWNyZXQAD/////8AAAAAAAEAKgEBJAAAABUAAABDZXJ0aWZpY2F0ZVRodW1icHJpbnQADP////8AAAAA" +
           "AAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAoAQEAAAABAAAABAAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public KeyCredentialUpdateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string credentialId = (string)_inputArguments[0];
            byte[] credentialSecret = (byte[])_inputArguments[1];
            string certificateThumbprint = (string)_inputArguments[2];
            string securityPolicyUri = (string)_inputArguments[3];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    credentialId,
                    credentialSecret,
                    certificateThumbprint,
                    securityPolicyUri);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult KeyCredentialUpdateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string credentialId,
        byte[] credentialSecret,
        string certificateThumbprint,
        string securityPolicyUri);
    #endif
    #endregion

    #region KeyCredentialAuditEventState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.KeyCredentialAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAEtleUNyZWRlbnRpYWxBdWRpdEV2ZW50VHlwZUluc3RhbmNlAQBb" +
           "RgEAW0ZbRgAA/////xAAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADiVQ8AAC4AROJVDwAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADjVQ8AAC4ARONVDwAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA5FUPAAAuAETkVQ8AABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAOVVDwAALgBE5VUPAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABAAAAFRpbWUCAADmVQ8AAC4AROZVDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJl" +
           "Y2VpdmVUaW1lAgAA51UPAAAuAETnVQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNz" +
           "YWdlAgAA6VUPAAAuAETpVQ8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADq" +
           "VQ8AAC4AROpVDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXACAADv" +
           "VQ8AAC4ARO9VDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwIAAPBVDwAALgBE" +
           "8FUPAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAgAA8VUPAAAuAETxVQ8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAgAA8lUPAAAuAETyVQ8A" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAgAA81UPAAAuAETzVQ8AAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQCAAD0VQ8AAC4ARPRVDwAAEf////8BAf//" +
           "//8AAAAAF2CJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAPVVDwAALgBE9VUPAAAYAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAUmVzb3VyY2VVcmkBAGxGAC4ARGxGAAAADP////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_resourceUri;
        #endregion
    }
    #endif
    #endregion

    #region KeyCredentialUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialUpdatedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialUpdatedAuditEventState : KeyCredentialAuditEventState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.KeyCredentialUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEtleUNyZWRlbnRpYWxVcGRhdGVkQXVkaXRFdmVudFR5cGVJbnN0" +
           "YW5jZQEAbUYBAG1GbUYAAP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAA9lUPAAAuAET2VQ8A" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAA91UPAAAuAET3VQ8AABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAPhVDwAALgBE+FUPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAD5VQ8AAC4ARPlVDwAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABUaW1lAgAA+lUPAAAuAET6VQ8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABSZWNlaXZlVGltZQIAAPtVDwAALgBE+1UPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAATWVzc2FnZQIAAP1VDwAALgBE/VUPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVy" +
           "aXR5AgAA/lUPAAAuAET+VQ8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0" +
           "YW1wAgAAA1YPAAAuAEQDVg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAE" +
           "Vg8AAC4ARARWDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAAAVWDwAALgBE" +
           "BVYPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAAAZWDwAA" +
           "LgBEBlYPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAAAdWDwAALgBE" +
           "B1YPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAACFYPAAAuAEQIVg8AABH/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAAJVg8AAC4ARAlWDwAAGAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlc291cmNlVXJpAgAAClYPAAAuAEQKVg8A" +
           "AAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region KeyCredentialDeletedAuditEventState Class
    #if (!OPCUA_EXCLUDE_KeyCredentialDeletedAuditEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class KeyCredentialDeletedAuditEventState : KeyCredentialAuditEventState
    {
        #region Constructors
        /// <remarks />
        public KeyCredentialDeletedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.KeyCredentialDeletedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAEtleUNyZWRlbnRpYWxEZWxldGVkQXVkaXRFdmVudFR5cGVJbnN0" +
           "YW5jZQEAf0YBAH9Gf0YAAP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAgAAC1YPAAAuAEQLVg8A" +
           "AA//////AQH/////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAgAADFYPAAAuAEQMVg8AABH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTm9kZQIAAA1WDwAALgBEDVYPAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUCAAAOVg8AAC4ARA5WDwAADP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABUaW1lAgAAD1YPAAAuAEQPVg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABSZWNlaXZlVGltZQIAABBWDwAALgBEEFYPAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAATWVzc2FnZQIAABJWDwAALgBEElYPAAAV/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVy" +
           "aXR5AgAAE1YPAAAuAEQTVg8AAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0" +
           "YW1wAgAAGFYPAAAuAEQYVg8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABTdGF0dXMCAAAZ" +
           "Vg8AAC4ARBlWDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAIAABpWDwAALgBE" +
           "GlYPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAIAABtWDwAA" +
           "LgBEG1YPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAIAABxWDwAALgBE" +
           "HFYPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAgAAHVYPAAAuAEQdVg8AABH/" +
           "////AQH/////AAAAABdgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAAeVg8AAC4ARB5WDwAAGAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlc291cmNlVXJpAQCQRgAuAESQRgAAAAz/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuthorizationServicesConfigurationFolderState Class
    #if (!OPCUA_EXCLUDE_AuthorizationServicesConfigurationFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuthorizationServicesConfigurationFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public AuthorizationServicesConfigurationFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuthorizationServicesConfigurationFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAANAAAAEF1dGhvcml6YXRpb25TZXJ2aWNlc0NvbmZpZ3VyYXRpb25Gb2xk" +
           "ZXJUeXBlSW5zdGFuY2UBAARcAQAEXARcAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuthorizationServiceConfigurationState Class
    #if (!OPCUA_EXCLUDE_AuthorizationServiceConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuthorizationServiceConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public AuthorizationServiceConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuthorizationServiceConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALQAAAEF1dGhvcml6YXRpb25TZXJ2aWNlQ29uZmlndXJhdGlvblR5cGVJ" +
           "bnN0YW5jZQEAvEUBALxFvEUAAP////8DAAAAFWCJCgIAAAAAAAoAAABTZXJ2aWNlVXJpAQCYRgAuAESY" +
           "RgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAU2VydmljZUNlcnRpZmljYXRlAQDERQAuAETE" +
           "RQAAAA//////AQH/////AAAAABVgiQoCAAAAAAARAAAASXNzdWVyRW5kcG9pbnRVcmwBAJlGAC4ARJlG" +
           "AAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ServiceUri
        {
            get
            {
                return m_serviceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> ServiceCertificate
        {
            get
            {
                return m_serviceCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> IssuerEndpointUrl
        {
            get
            {
                return m_issuerEndpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_issuerEndpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_issuerEndpointUrl = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serviceUri != null)
            {
                children.Add(m_serviceUri);
            }

            if (m_serviceCertificate != null)
            {
                children.Add(m_serviceCertificate);
            }

            if (m_issuerEndpointUrl != null)
            {
                children.Add(m_issuerEndpointUrl);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServiceUri:
                {
                    if (createOrReplace)
                    {
                        if (ServiceUri == null)
                        {
                            if (replacement == null)
                            {
                                ServiceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ServiceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ServiceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ServiceCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ServiceCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ServiceCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ServiceCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ServiceCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.IssuerEndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (IssuerEndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                IssuerEndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                IssuerEndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = IssuerEndpointUrl;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_serviceUri;
        private PropertyState<byte[]> m_serviceCertificate;
        private PropertyState<string> m_issuerEndpointUrl;
        #endregion
    }
    #endif
    #endregion

    #region AggregateConfigurationState Class
    #if (!OPCUA_EXCLUDE_AggregateConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public AggregateConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBALMr" +
           "AQCzK7MrAAD/////BAAAABVgiQoCAAAAAAATAAAAVHJlYXRVbmNlcnRhaW5Bc0JhZAEAtCsALgBEtCsA" +
           "AAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFBlcmNlbnREYXRhQmFkAQC1KwAuAES1KwAAAAP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAPAAAAUGVyY2VudERhdGFHb29kAQC2KwAuAES2KwAAAAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAWAAAAVXNlU2xvcGVkRXh0cmFwb2xhdGlvbgEAtysALgBEtysAAAAB" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> TreatUncertainAsBad
        {
            get
            {
                return m_treatUncertainAsBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_treatUncertainAsBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_treatUncertainAsBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataBad
        {
            get
            {
                return m_percentDataBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataGood
        {
            get
            {
                return m_percentDataGood;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataGood, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataGood = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UseSlopedExtrapolation
        {
            get
            {
                return m_useSlopedExtrapolation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_useSlopedExtrapolation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_useSlopedExtrapolation = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_treatUncertainAsBad != null)
            {
                children.Add(m_treatUncertainAsBad);
            }

            if (m_percentDataBad != null)
            {
                children.Add(m_percentDataBad);
            }

            if (m_percentDataGood != null)
            {
                children.Add(m_percentDataGood);
            }

            if (m_useSlopedExtrapolation != null)
            {
                children.Add(m_useSlopedExtrapolation);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TreatUncertainAsBad:
                {
                    if (createOrReplace)
                    {
                        if (TreatUncertainAsBad == null)
                        {
                            if (replacement == null)
                            {
                                TreatUncertainAsBad = new PropertyState<bool>(this);
                            }
                            else
                            {
                                TreatUncertainAsBad = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = TreatUncertainAsBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataBad:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataBad == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataBad = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataBad = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataGood:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataGood == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataGood = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataGood = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataGood;
                    break;
                }

                case Opc.Ua.BrowseNames.UseSlopedExtrapolation:
                {
                    if (createOrReplace)
                    {
                        if (UseSlopedExtrapolation == null)
                        {
                            if (replacement == null)
                            {
                                UseSlopedExtrapolation = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UseSlopedExtrapolation = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UseSlopedExtrapolation;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_treatUncertainAsBad;
        private PropertyState<byte> m_percentDataBad;
        private PropertyState<byte> m_percentDataGood;
        private PropertyState<bool> m_useSlopedExtrapolation;
        #endregion
    }
    #endif
    #endregion

    #region PubSubKeyServiceState Class
    #if (!OPCUA_EXCLUDE_PubSubKeyServiceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubKeyServiceState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubKeyServiceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubKeyServiceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (GetSecurityKeys != null)
            {
                GetSecurityKeys.Initialize(context, GetSecurityKeys_InitializationString);
            }

            if (GetSecurityGroup != null)
            {
                GetSecurityGroup.Initialize(context, GetSecurityGroup_InitializationString);
            }

            if (SecurityGroups != null)
            {
                SecurityGroups.Initialize(context, SecurityGroups_InitializationString);
            }

            if (KeyPushTargets != null)
            {
                KeyPushTargets.Initialize(context, KeyPushTargets_InitializationString);
            }
        }

        #region Initialization String
        private const string GetSecurityKeys_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEdldFNlY3VyaXR5S2V5cwEAIz4ALwEAIz4jPgAAAQH/////AgAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACQ+AC4ARCQ+AACWAwAAAAEAKgEBHgAAAA8AAABT" +
           "ZWN1cml0eUdyb3VwSWQADP////8AAAAAAAEAKgEBIAAAAA8AAABTdGFydGluZ1Rva2VuSWQBACAB////" +
           "/wAAAAAAAQAqAQEgAAAAEQAAAFJlcXVlc3RlZEtleUNvdW50AAf/////AAAAAAABACgBAQAAAAEAAAAD" +
           "AAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAlPgAuAEQlPgAAlgUAAAAB" +
           "ACoBASAAAAARAAAAU2VjdXJpdHlQb2xpY3lVcmkADP////8AAAAAAAEAKgEBHQAAAAwAAABGaXJzdFRv" +
           "a2VuSWQBACAB/////wAAAAAAAQAqAQEXAAAABAAAAEtleXMADwEAAAABAAAAAAAAAAABACoBAR4AAAAN" +
           "AAAAVGltZVRvTmV4dEtleQEAIgH/////AAAAAAABACoBARwAAAALAAAAS2V5TGlmZXRpbWUBACIB////" +
           "/wAAAAAAAQAoAQEAAAABAAAABQAAAAEB/////wAAAAA=";

        private const string GetSecurityGroup_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEdldFNlY3VyaXR5R3JvdXABACY+AC8BACY+Jj4AAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAnPgAuAEQnPgAAlgEAAAABACoBAR4AAAAPAAAA" +
           "U2VjdXJpdHlHcm91cElkAAz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQAoPgAuAEQoPgAAlgEAAAABACoBASIAAAATAAAAU2VjdXJpdHlH" +
           "cm91cE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string SecurityGroups_InitializationString =
           "//////////8EYIAKAQAAAAAADgAAAFNlY3VyaXR5R3JvdXBzAQApPgAvAQBcPCk+AAD/////AgAAAARh" +
           "ggoEAAAAAAAQAAAAQWRkU2VjdXJpdHlHcm91cAEAKj4ALwEAZTwqPgAAAQH/////AgAAABdgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBACs+AC4ARCs+AACWBQAAAAEAKgEBIAAAABEAAABTZWN1cml0eUdy" +
           "b3VwTmFtZQAM/////wAAAAAAAQAqAQEcAAAACwAAAEtleUxpZmV0aW1lAQAiAf////8AAAAAAAEAKgEB" +
           "IAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAqAQEgAAAAEQAAAE1heEZ1dHVyZUtl" +
           "eUNvdW50AAf/////AAAAAAABACoBAR4AAAAPAAAATWF4UGFzdEtleUNvdW50AAf/////AAAAAAABACgB" +
           "AQAAAAEAAAAFAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAsPgAuAEQs" +
           "PgAAlgIAAAABACoBAR4AAAAPAAAAU2VjdXJpdHlHcm91cElkAAz/////AAAAAAABACoBASIAAAATAAAA" +
           "U2VjdXJpdHlHcm91cE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAAEwAAAFJlbW92ZVNlY3VyaXR5R3JvdXABAC0+AC8BAGg8LT4AAAEB/////wEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQAuPgAuAEQuPgAAlgEAAAABACoBASIAAAATAAAAU2VjdXJpdHlH" +
           "cm91cE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string KeyPushTargets_InitializationString =
           "//////////8EYIAKAQAAAAAADgAAAEtleVB1c2hUYXJnZXRzAQC9YgAvAQACY71iAAD/////AgAAAARh" +
           "ggoEAAAAAAANAAAAQWRkUHVzaFRhcmdldAEAvmIALwEAFmO+YgAAAQH/////AgAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBAL9iAC4ARL9iAACWBgAAAAEAKgEBHQAAAA4AAABBcHBsaWNhdGlvblVy" +
           "aQAM/////wAAAAAAAQAqAQEaAAAACwAAAEVuZHBvaW50VXJsAAz/////AAAAAAABACoBASAAAAARAAAA" +
           "U2VjdXJpdHlQb2xpY3lVcmkADP////8AAAAAAAEAKgEBHgAAAA0AAABVc2VyVG9rZW5UeXBlAQAwAf//" +
           "//8AAAAAAAEAKgEBIAAAABEAAABSZXF1ZXN0ZWRLZXlDb3VudAAF/////wAAAAAAAQAqAQEeAAAADQAA" +
           "AFJldHJ5SW50ZXJ2YWwBACIB/////wAAAAAAAQAoAQEAAAABAAAABgAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAwGIALgBEwGIAAJYBAAAAAQAqAQEbAAAADAAAAFB1c2hUYXJn" +
           "ZXRJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAEAAAAFJlbW92" +
           "ZVB1c2hUYXJnZXQBAMFiAC8BABljwWIAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQDCYgAuAETCYgAAlgEAAAABACoBARsAAAAMAAAAUHVzaFRhcmdldElkABH/////AAAAAAABACgB" +
           "AQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFB1YlN1YktleVNlcnZpY2VUeXBlSW5zdGFuY2UBACI+AQAiPiI+" +
           "AAD/////BAAAAARhggoEAAAAAAAPAAAAR2V0U2VjdXJpdHlLZXlzAQAjPgAvAQAjPiM+AAABAf////8C" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJD4ALgBEJD4AAJYDAAAAAQAqAQEeAAAADwAA" +
           "AFNlY3VyaXR5R3JvdXBJZAAM/////wAAAAAAAQAqAQEgAAAADwAAAFN0YXJ0aW5nVG9rZW5JZAEAIAH/" +
           "////AAAAAAABACoBASAAAAARAAAAUmVxdWVzdGVkS2V5Q291bnQAB/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAMAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACU+AC4ARCU+AACWBQAA" +
           "AAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAqAQEdAAAADAAAAEZpcnN0" +
           "VG9rZW5JZAEAIAH/////AAAAAAABACoBARcAAAAEAAAAS2V5cwAPAQAAAAEAAAAAAAAAAAEAKgEBHgAA" +
           "AA0AAABUaW1lVG9OZXh0S2V5AQAiAf////8AAAAAAAEAKgEBHAAAAAsAAABLZXlMaWZldGltZQEAIgH/" +
           "////AAAAAAABACgBAQAAAAEAAAAFAAAAAQH/////AAAAAARhggoEAAAAAAAQAAAAR2V0U2VjdXJpdHlH" +
           "cm91cAEAJj4ALwEAJj4mPgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACc+" +
           "AC4ARCc+AACWAQAAAAEAKgEBHgAAAA8AAABTZWN1cml0eUdyb3VwSWQADP////8AAAAAAAEAKAEBAAAA" +
           "AQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACg+AC4ARCg+AACW" +
           "AQAAAAEAKgEBIgAAABMAAABTZWN1cml0eUdyb3VwTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAAB" +
           "AAAAAQH/////AAAAAARggAoBAAAAAAAOAAAAU2VjdXJpdHlHcm91cHMBACk+AC8BAFw8KT4AAP////8C" +
           "AAAABGGCCgQAAAAAABAAAABBZGRTZWN1cml0eUdyb3VwAQAqPgAvAQBlPCo+AAABAf////8CAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAKz4ALgBEKz4AAJYFAAAAAQAqAQEgAAAAEQAAAFNlY3Vy" +
           "aXR5R3JvdXBOYW1lAAz/////AAAAAAABACoBARwAAAALAAAAS2V5TGlmZXRpbWUBACIB/////wAAAAAA" +
           "AQAqAQEgAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAAz/////AAAAAAABACoBASAAAAARAAAATWF4RnV0" +
           "dXJlS2V5Q291bnQAB/////8AAAAAAAEAKgEBHgAAAA8AAABNYXhQYXN0S2V5Q291bnQAB/////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAUAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACw+" +
           "AC4ARCw+AACWAgAAAAEAKgEBHgAAAA8AAABTZWN1cml0eUdyb3VwSWQADP////8AAAAAAAEAKgEBIgAA" +
           "ABMAAABTZWN1cml0eUdyb3VwTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAA" +
           "AARhggoEAAAAAAATAAAAUmVtb3ZlU2VjdXJpdHlHcm91cAEALT4ALwEAaDwtPgAAAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAC4+AC4ARC4+AACWAQAAAAEAKgEBIgAAABMAAABTZWN1" +
           "cml0eUdyb3VwTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARggAoBAAAA" +
           "AAAOAAAAS2V5UHVzaFRhcmdldHMBAL1iAC8BAAJjvWIAAP////8CAAAABGGCCgQAAAAAAA0AAABBZGRQ" +
           "dXNoVGFyZ2V0AQC+YgAvAQAWY75iAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAv2IALgBEv2IAAJYGAAAAAQAqAQEdAAAADgAAAEFwcGxpY2F0aW9uVXJpAAz/////AAAAAAABACoB" +
           "ARoAAAALAAAARW5kcG9pbnRVcmwADP////8AAAAAAAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVy" +
           "aQAM/////wAAAAAAAQAqAQEeAAAADQAAAFVzZXJUb2tlblR5cGUBADAB/////wAAAAAAAQAqAQEgAAAA" +
           "EQAAAFJlcXVlc3RlZEtleUNvdW50AAX/////AAAAAAABACoBAR4AAAANAAAAUmV0cnlJbnRlcnZhbAEA" +
           "IgH/////AAAAAAABACgBAQAAAAEAAAAGAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQDAYgAuAETAYgAAlgEAAAABACoBARsAAAAMAAAAUHVzaFRhcmdldElkABH/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAQAAAAUmVtb3ZlUHVzaFRhcmdldAEAwWIA" +
           "LwEAGWPBYgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMJiAC4ARMJiAACW" +
           "AQAAAAEAKgEBGwAAAAwAAABQdXNoVGFyZ2V0SWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public GetSecurityKeysMethodState GetSecurityKeys
        {
            get
            {
                return m_getSecurityKeysMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getSecurityKeysMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getSecurityKeysMethod = value;
            }
        }

        /// <remarks />
        public GetSecurityGroupMethodState GetSecurityGroup
        {
            get
            {
                return m_getSecurityGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getSecurityGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getSecurityGroupMethod = value;
            }
        }

        /// <remarks />
        public SecurityGroupFolderState SecurityGroups
        {
            get
            {
                return m_securityGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityGroups = value;
            }
        }

        /// <remarks />
        public PubSubKeyPushTargetFolderState KeyPushTargets
        {
            get
            {
                return m_keyPushTargets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_keyPushTargets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_keyPushTargets = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_getSecurityKeysMethod != null)
            {
                children.Add(m_getSecurityKeysMethod);
            }

            if (m_getSecurityGroupMethod != null)
            {
                children.Add(m_getSecurityGroupMethod);
            }

            if (m_securityGroups != null)
            {
                children.Add(m_securityGroups);
            }

            if (m_keyPushTargets != null)
            {
                children.Add(m_keyPushTargets);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.GetSecurityKeys:
                {
                    if (createOrReplace)
                    {
                        if (GetSecurityKeys == null)
                        {
                            if (replacement == null)
                            {
                                GetSecurityKeys = new GetSecurityKeysMethodState(this);
                            }
                            else
                            {
                                GetSecurityKeys = (GetSecurityKeysMethodState)replacement;
                            }
                        }
                    }

                    instance = GetSecurityKeys;
                    break;
                }

                case Opc.Ua.BrowseNames.GetSecurityGroup:
                {
                    if (createOrReplace)
                    {
                        if (GetSecurityGroup == null)
                        {
                            if (replacement == null)
                            {
                                GetSecurityGroup = new GetSecurityGroupMethodState(this);
                            }
                            else
                            {
                                GetSecurityGroup = (GetSecurityGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = GetSecurityGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityGroups:
                {
                    if (createOrReplace)
                    {
                        if (SecurityGroups == null)
                        {
                            if (replacement == null)
                            {
                                SecurityGroups = new SecurityGroupFolderState(this);
                            }
                            else
                            {
                                SecurityGroups = (SecurityGroupFolderState)replacement;
                            }
                        }
                    }

                    instance = SecurityGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.KeyPushTargets:
                {
                    if (createOrReplace)
                    {
                        if (KeyPushTargets == null)
                        {
                            if (replacement == null)
                            {
                                KeyPushTargets = new PubSubKeyPushTargetFolderState(this);
                            }
                            else
                            {
                                KeyPushTargets = (PubSubKeyPushTargetFolderState)replacement;
                            }
                        }
                    }

                    instance = KeyPushTargets;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private GetSecurityKeysMethodState m_getSecurityKeysMethod;
        private GetSecurityGroupMethodState m_getSecurityGroupMethod;
        private SecurityGroupFolderState m_securityGroups;
        private PubSubKeyPushTargetFolderState m_keyPushTargets;
        #endregion
    }
    #endif
    #endregion

    #region GetSecurityKeysMethodState Class
    #if (!OPCUA_EXCLUDE_GetSecurityKeysMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetSecurityKeysMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetSecurityKeysMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetSecurityKeysMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAEdldFNlY3VyaXR5S2V5c01ldGhvZFR5cGUBAHI7AC8BAHI7cjsA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBzOwAuAERzOwAAlgMAAAABACoB" +
           "AR4AAAAPAAAAU2VjdXJpdHlHcm91cElkAAz/////AAAAAAABACoBASAAAAAPAAAAU3RhcnRpbmdUb2tl" +
           "bklkAQAgAf////8AAAAAAAEAKgEBIAAAABEAAABSZXF1ZXN0ZWRLZXlDb3VudAAH/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAdDsALgBE" +
           "dDsAAJYFAAAAAQAqAQEgAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAAz/////AAAAAAABACoBAR0AAAAM" +
           "AAAARmlyc3RUb2tlbklkAQAgAf////8AAAAAAAEAKgEBFwAAAAQAAABLZXlzAA8BAAAAAQAAAAAAAAAA" +
           "AQAqAQEeAAAADQAAAFRpbWVUb05leHRLZXkBACIB/////wAAAAAAAQAqAQEcAAAACwAAAEtleUxpZmV0" +
           "aW1lAQAiAf////8AAAAAAAEAKAEBAAAAAQAAAAUAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetSecurityKeysMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string securityGroupId = (string)_inputArguments[0];
            uint startingTokenId = (uint)_inputArguments[1];
            uint requestedKeyCount = (uint)_inputArguments[2];

            string securityPolicyUri = (string)_outputArguments[0];
            uint firstTokenId = (uint)_outputArguments[1];
            byte[][] keys = (byte[][])_outputArguments[2];
            double timeToNextKey = (double)_outputArguments[3];
            double keyLifetime = (double)_outputArguments[4];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupId,
                    startingTokenId,
                    requestedKeyCount,
                    ref securityPolicyUri,
                    ref firstTokenId,
                    ref keys,
                    ref timeToNextKey,
                    ref keyLifetime);
            }

            _outputArguments[0] = securityPolicyUri;
            _outputArguments[1] = firstTokenId;
            _outputArguments[2] = keys;
            _outputArguments[3] = timeToNextKey;
            _outputArguments[4] = keyLifetime;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetSecurityKeysMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string securityGroupId,
        uint startingTokenId,
        uint requestedKeyCount,
        ref string securityPolicyUri,
        ref uint firstTokenId,
        ref byte[][] keys,
        ref double timeToNextKey,
        ref double keyLifetime);
    #endif
    #endregion

    #region GetSecurityGroupMethodState Class
    #if (!OPCUA_EXCLUDE_GetSecurityGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetSecurityGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetSecurityGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetSecurityGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEdldFNlY3VyaXR5R3JvdXBNZXRob2RUeXBlAQBZPAAvAQBZPFk8" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAWjwALgBEWjwAAJYBAAAAAQAq" +
           "AQEeAAAADwAAAFNlY3VyaXR5R3JvdXBJZAAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAWzwALgBEWzwAAJYBAAAAAQAqAQEiAAAAEwAA" +
           "AFNlY3VyaXR5R3JvdXBOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetSecurityGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string securityGroupId = (string)_inputArguments[0];

            NodeId securityGroupNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupId,
                    ref securityGroupNodeId);
            }

            _outputArguments[0] = securityGroupNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetSecurityGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string securityGroupId,
        ref NodeId securityGroupNodeId);
    #endif
    #endregion

    #region AddSecurityGroupMethodState Class
    #if (!OPCUA_EXCLUDE_AddSecurityGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddSecurityGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddSecurityGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddSecurityGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEFkZFNlY3VyaXR5R3JvdXBNZXRob2RUeXBlAQBqPAAvAQBqPGo8" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAazwALgBEazwAAJYFAAAAAQAq" +
           "AQEgAAAAEQAAAFNlY3VyaXR5R3JvdXBOYW1lAAz/////AAAAAAABACoBARwAAAALAAAAS2V5TGlmZXRp" +
           "bWUBACIB/////wAAAAAAAQAqAQEgAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAAz/////AAAAAAABACoB" +
           "ASAAAAARAAAATWF4RnV0dXJlS2V5Q291bnQAB/////8AAAAAAAEAKgEBHgAAAA8AAABNYXhQYXN0S2V5" +
           "Q291bnQAB/////8AAAAAAAEAKAEBAAAAAQAAAAUAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBAGw8AC4ARGw8AACWAgAAAAEAKgEBHgAAAA8AAABTZWN1cml0eUdyb3VwSWQADP//" +
           "//8AAAAAAAEAKgEBIgAAABMAAABTZWN1cml0eUdyb3VwTm9kZUlkABH/////AAAAAAABACgBAQAAAAEA" +
           "AAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddSecurityGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string securityGroupName = (string)_inputArguments[0];
            double keyLifetime = (double)_inputArguments[1];
            string securityPolicyUri = (string)_inputArguments[2];
            uint maxFutureKeyCount = (uint)_inputArguments[3];
            uint maxPastKeyCount = (uint)_inputArguments[4];

            string securityGroupId = (string)_outputArguments[0];
            NodeId securityGroupNodeId = (NodeId)_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupName,
                    keyLifetime,
                    securityPolicyUri,
                    maxFutureKeyCount,
                    maxPastKeyCount,
                    ref securityGroupId,
                    ref securityGroupNodeId);
            }

            _outputArguments[0] = securityGroupId;
            _outputArguments[1] = securityGroupNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddSecurityGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string securityGroupName,
        double keyLifetime,
        string securityPolicyUri,
        uint maxFutureKeyCount,
        uint maxPastKeyCount,
        ref string securityGroupId,
        ref NodeId securityGroupNodeId);
    #endif
    #endregion

    #region RemoveSecurityGroupMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveSecurityGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveSecurityGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveSecurityGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveSecurityGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAFJlbW92ZVNlY3VyaXR5R3JvdXBNZXRob2RUeXBlAQBtPAAvAQBt" +
           "PG08AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbjwALgBEbjwAAJYBAAAA" +
           "AQAqAQEiAAAAEwAAAFNlY3VyaXR5R3JvdXBOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveSecurityGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId securityGroupNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveSecurityGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId securityGroupNodeId);
    #endif
    #endregion

    #region AddSecurityGroupFolderMethodState Class
    #if (!OPCUA_EXCLUDE_AddSecurityGroupFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddSecurityGroupFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddSecurityGroupFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddSecurityGroupFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAEFkZFNlY3VyaXR5R3JvdXBGb2xkZXJNZXRob2RUeXBlAQDIYgAv" +
           "AQDIYshiAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAyWIALgBEyWIAAJYB" +
           "AAAAAQAqAQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2Cp" +
           "CgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAMpiAC4ARMpiAACWAQAAAAEAKgEBKAAAABkAAABTZWN1" +
           "cml0eUdyb3VwRm9sZGVyTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddSecurityGroupFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];

            NodeId securityGroupFolderNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    ref securityGroupFolderNodeId);
            }

            _outputArguments[0] = securityGroupFolderNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddSecurityGroupFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        ref NodeId securityGroupFolderNodeId);
    #endif
    #endregion

    #region RemoveSecurityGroupFolderMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveSecurityGroupFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveSecurityGroupFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveSecurityGroupFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveSecurityGroupFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIwAAAFJlbW92ZVNlY3VyaXR5R3JvdXBGb2xkZXJNZXRob2RUeXBlAQDL" +
           "YgAvAQDLYstiAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAzGIALgBEzGIA" +
           "AJYBAAAAAQAqAQEoAAAAGQAAAFNlY3VyaXR5R3JvdXBGb2xkZXJOb2RlSWQAEf////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveSecurityGroupFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId securityGroupFolderNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupFolderNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveSecurityGroupFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId securityGroupFolderNodeId);
    #endif
    #endregion

    #region SecurityGroupFolderState Class
    #if (!OPCUA_EXCLUDE_SecurityGroupFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SecurityGroupFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public SecurityGroupFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SecurityGroupFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddSecurityGroupFolder != null)
            {
                AddSecurityGroupFolder.Initialize(context, AddSecurityGroupFolder_InitializationString);
            }

            if (RemoveSecurityGroupFolder != null)
            {
                RemoveSecurityGroupFolder.Initialize(context, RemoveSecurityGroupFolder_InitializationString);
            }

            if (SupportedSecurityPolicyUris != null)
            {
                SupportedSecurityPolicyUris.Initialize(context, SupportedSecurityPolicyUris_InitializationString);
            }
        }

        #region Initialization String
        private const string AddSecurityGroupFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAEFkZFNlY3VyaXR5R3JvdXBGb2xkZXIBAOBiAC8BAOBi4GIAAAEB" +
           "/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDhYgAuAEThYgAAlgEAAAABACoBARMA" +
           "AAAEAAAATmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAA" +
           "AE91dHB1dEFyZ3VtZW50cwEA4mIALgBE4mIAAJYBAAAAAQAqAQEoAAAAGQAAAFNlY3VyaXR5R3JvdXBG" +
           "b2xkZXJOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveSecurityGroupFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAFJlbW92ZVNlY3VyaXR5R3JvdXBGb2xkZXIBAONiAC8BAONi42IA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDkYgAuAETkYgAAlgEAAAABACoB" +
           "ASgAAAAZAAAAU2VjdXJpdHlHcm91cEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAA" +
           "AAEB/////wAAAAA=";

        private const string SupportedSecurityPolicyUris_InitializationString =
           "//////////8XYIkKAgAAAAAAGwAAAFN1cHBvcnRlZFNlY3VyaXR5UG9saWN5VXJpcwEA5WIALgBE5WIA" +
           "AAAMAQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFNlY3VyaXR5R3JvdXBGb2xkZXJUeXBlSW5zdGFuY2UBAFw8AQBc" +
           "PFw8AAD/////BQAAAARhggoEAAAAAAAQAAAAQWRkU2VjdXJpdHlHcm91cAEAZTwALwEAZTxlPAAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAGY8AC4ARGY8AACWBQAAAAEAKgEBIAAA" +
           "ABEAAABTZWN1cml0eUdyb3VwTmFtZQAM/////wAAAAAAAQAqAQEcAAAACwAAAEtleUxpZmV0aW1lAQAi" +
           "Af////8AAAAAAAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAqAQEgAAAA" +
           "EQAAAE1heEZ1dHVyZUtleUNvdW50AAf/////AAAAAAABACoBAR4AAAAPAAAATWF4UGFzdEtleUNvdW50" +
           "AAf/////AAAAAAABACgBAQAAAAEAAAAFAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQBnPAAuAERnPAAAlgIAAAABACoBAR4AAAAPAAAAU2VjdXJpdHlHcm91cElkAAz/////AAAA" +
           "AAABACoBASIAAAATAAAAU2VjdXJpdHlHcm91cE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAgAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAAEwAAAFJlbW92ZVNlY3VyaXR5R3JvdXABAGg8AC8BAGg8aDwAAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBpPAAuAERpPAAAlgEAAAABACoBASIA" +
           "AAATAAAAU2VjdXJpdHlHcm91cE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAAFgAAAEFkZFNlY3VyaXR5R3JvdXBGb2xkZXIBAOBiAC8BAOBi4GIAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDhYgAuAEThYgAAlgEAAAABACoBARMAAAAEAAAA" +
           "TmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEA4mIALgBE4mIAAJYBAAAAAQAqAQEoAAAAGQAAAFNlY3VyaXR5R3JvdXBGb2xkZXJO" +
           "b2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAABkAAABSZW1v" +
           "dmVTZWN1cml0eUdyb3VwRm9sZGVyAQDjYgAvAQDjYuNiAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEA5GIALgBE5GIAAJYBAAAAAQAqAQEoAAAAGQAAAFNlY3VyaXR5R3JvdXBGb2xk" +
           "ZXJOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CJCgIAAAAAABsAAABT" +
           "dXBwb3J0ZWRTZWN1cml0eVBvbGljeVVyaXMBAOViAC4AROViAAAADAEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddSecurityGroupMethodState AddSecurityGroup
        {
            get
            {
                return m_addSecurityGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addSecurityGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addSecurityGroupMethod = value;
            }
        }

        /// <remarks />
        public RemoveSecurityGroupMethodState RemoveSecurityGroup
        {
            get
            {
                return m_removeSecurityGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeSecurityGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeSecurityGroupMethod = value;
            }
        }

        /// <remarks />
        public AddSecurityGroupFolderMethodState AddSecurityGroupFolder
        {
            get
            {
                return m_addSecurityGroupFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addSecurityGroupFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addSecurityGroupFolderMethod = value;
            }
        }

        /// <remarks />
        public RemoveSecurityGroupFolderMethodState RemoveSecurityGroupFolder
        {
            get
            {
                return m_removeSecurityGroupFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeSecurityGroupFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeSecurityGroupFolderMethod = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> SupportedSecurityPolicyUris
        {
            get
            {
                return m_supportedSecurityPolicyUris;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportedSecurityPolicyUris, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportedSecurityPolicyUris = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addSecurityGroupMethod != null)
            {
                children.Add(m_addSecurityGroupMethod);
            }

            if (m_removeSecurityGroupMethod != null)
            {
                children.Add(m_removeSecurityGroupMethod);
            }

            if (m_addSecurityGroupFolderMethod != null)
            {
                children.Add(m_addSecurityGroupFolderMethod);
            }

            if (m_removeSecurityGroupFolderMethod != null)
            {
                children.Add(m_removeSecurityGroupFolderMethod);
            }

            if (m_supportedSecurityPolicyUris != null)
            {
                children.Add(m_supportedSecurityPolicyUris);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddSecurityGroup:
                {
                    if (createOrReplace)
                    {
                        if (AddSecurityGroup == null)
                        {
                            if (replacement == null)
                            {
                                AddSecurityGroup = new AddSecurityGroupMethodState(this);
                            }
                            else
                            {
                                AddSecurityGroup = (AddSecurityGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = AddSecurityGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveSecurityGroup:
                {
                    if (createOrReplace)
                    {
                        if (RemoveSecurityGroup == null)
                        {
                            if (replacement == null)
                            {
                                RemoveSecurityGroup = new RemoveSecurityGroupMethodState(this);
                            }
                            else
                            {
                                RemoveSecurityGroup = (RemoveSecurityGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveSecurityGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.AddSecurityGroupFolder:
                {
                    if (createOrReplace)
                    {
                        if (AddSecurityGroupFolder == null)
                        {
                            if (replacement == null)
                            {
                                AddSecurityGroupFolder = new AddSecurityGroupFolderMethodState(this);
                            }
                            else
                            {
                                AddSecurityGroupFolder = (AddSecurityGroupFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = AddSecurityGroupFolder;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveSecurityGroupFolder:
                {
                    if (createOrReplace)
                    {
                        if (RemoveSecurityGroupFolder == null)
                        {
                            if (replacement == null)
                            {
                                RemoveSecurityGroupFolder = new RemoveSecurityGroupFolderMethodState(this);
                            }
                            else
                            {
                                RemoveSecurityGroupFolder = (RemoveSecurityGroupFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveSecurityGroupFolder;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportedSecurityPolicyUris:
                {
                    if (createOrReplace)
                    {
                        if (SupportedSecurityPolicyUris == null)
                        {
                            if (replacement == null)
                            {
                                SupportedSecurityPolicyUris = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                SupportedSecurityPolicyUris = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = SupportedSecurityPolicyUris;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddSecurityGroupMethodState m_addSecurityGroupMethod;
        private RemoveSecurityGroupMethodState m_removeSecurityGroupMethod;
        private AddSecurityGroupFolderMethodState m_addSecurityGroupFolderMethod;
        private RemoveSecurityGroupFolderMethodState m_removeSecurityGroupFolderMethod;
        private PropertyState<string[]> m_supportedSecurityPolicyUris;
        #endregion
    }
    #endif
    #endregion

    #region SecurityGroupState Class
    #if (!OPCUA_EXCLUDE_SecurityGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SecurityGroupState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public SecurityGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SecurityGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InvalidateKeys != null)
            {
                InvalidateKeys.Initialize(context, InvalidateKeys_InitializationString);
            }

            if (ForceKeyRotation != null)
            {
                ForceKeyRotation.Initialize(context, ForceKeyRotation_InitializationString);
            }
        }

        #region Initialization String
        private const string InvalidateKeys_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEludmFsaWRhdGVLZXlzAQAYZAAvAQAYZBhkAAABAf////8AAAAA";

        private const string ForceKeyRotation_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEZvcmNlS2V5Um90YXRpb24BABlkAC8BABlkGWQAAAEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAFNlY3VyaXR5R3JvdXBUeXBlSW5zdGFuY2UBAG88AQBvPG88AAD/" +
           "////BwAAABVgiQoCAAAAAAAPAAAAU2VjdXJpdHlHcm91cElkAQBwPAAuAERwPAAAAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAALAAAAS2V5TGlmZXRpbWUBAMY6AC4ARMY6AAABACIB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQDHOgAuAETHOgAAAAz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAARAAAATWF4RnV0dXJlS2V5Q291bnQBAMg6AC4ARMg6AAAAB/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABNYXhQYXN0S2V5Q291bnQBANA6AC4ARNA6AAAAB/////8BAf////8AAAAABGGCCgQA" +
           "AAAAAA4AAABJbnZhbGlkYXRlS2V5cwEAGGQALwEAGGQYZAAAAQH/////AAAAAARhggoEAAAAAAAQAAAA" +
           "Rm9yY2VLZXlSb3RhdGlvbgEAGWQALwEAGWQZZAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecurityGroupId
        {
            get
            {
                return m_securityGroupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityGroupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityGroupId = value;
            }
        }

        /// <remarks />
        public PropertyState<double> KeyLifetime
        {
            get
            {
                return m_keyLifetime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_keyLifetime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_keyLifetime = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxFutureKeyCount
        {
            get
            {
                return m_maxFutureKeyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxFutureKeyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxFutureKeyCount = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxPastKeyCount
        {
            get
            {
                return m_maxPastKeyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxPastKeyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxPastKeyCount = value;
            }
        }

        /// <remarks />
        public MethodState InvalidateKeys
        {
            get
            {
                return m_invalidateKeysMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidateKeysMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidateKeysMethod = value;
            }
        }

        /// <remarks />
        public MethodState ForceKeyRotation
        {
            get
            {
                return m_forceKeyRotationMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_forceKeyRotationMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_forceKeyRotationMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_securityGroupId != null)
            {
                children.Add(m_securityGroupId);
            }

            if (m_keyLifetime != null)
            {
                children.Add(m_keyLifetime);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_maxFutureKeyCount != null)
            {
                children.Add(m_maxFutureKeyCount);
            }

            if (m_maxPastKeyCount != null)
            {
                children.Add(m_maxPastKeyCount);
            }

            if (m_invalidateKeysMethod != null)
            {
                children.Add(m_invalidateKeysMethod);
            }

            if (m_forceKeyRotationMethod != null)
            {
                children.Add(m_forceKeyRotationMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecurityGroupId:
                {
                    if (createOrReplace)
                    {
                        if (SecurityGroupId == null)
                        {
                            if (replacement == null)
                            {
                                SecurityGroupId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityGroupId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityGroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.KeyLifetime:
                {
                    if (createOrReplace)
                    {
                        if (KeyLifetime == null)
                        {
                            if (replacement == null)
                            {
                                KeyLifetime = new PropertyState<double>(this);
                            }
                            else
                            {
                                KeyLifetime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = KeyLifetime;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxFutureKeyCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxFutureKeyCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxFutureKeyCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxFutureKeyCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxFutureKeyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxPastKeyCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxPastKeyCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxPastKeyCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxPastKeyCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxPastKeyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.InvalidateKeys:
                {
                    if (createOrReplace)
                    {
                        if (InvalidateKeys == null)
                        {
                            if (replacement == null)
                            {
                                InvalidateKeys = new MethodState(this);
                            }
                            else
                            {
                                InvalidateKeys = (MethodState)replacement;
                            }
                        }
                    }

                    instance = InvalidateKeys;
                    break;
                }

                case Opc.Ua.BrowseNames.ForceKeyRotation:
                {
                    if (createOrReplace)
                    {
                        if (ForceKeyRotation == null)
                        {
                            if (replacement == null)
                            {
                                ForceKeyRotation = new MethodState(this);
                            }
                            else
                            {
                                ForceKeyRotation = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ForceKeyRotation;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_securityGroupId;
        private PropertyState<double> m_keyLifetime;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<uint> m_maxFutureKeyCount;
        private PropertyState<uint> m_maxPastKeyCount;
        private MethodState m_invalidateKeysMethod;
        private MethodState m_forceKeyRotationMethod;
        #endregion
    }
    #endif
    #endregion

    #region ConnectSecurityGroupsMethodState Class
    #if (!OPCUA_EXCLUDE_ConnectSecurityGroupsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConnectSecurityGroupsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ConnectSecurityGroupsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ConnectSecurityGroupsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHwAAAENvbm5lY3RTZWN1cml0eUdyb3Vwc01ldGhvZFR5cGUBAPNiAC8B" +
           "APNi82IAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD0YgAuAET0YgAAlgEA" +
           "AAABACoBASMAAAAQAAAAU2VjdXJpdHlHcm91cElkcwARAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEA" +
           "AAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPViAC4ARPViAACWAQAAAAEA" +
           "KgEBIQAAAA4AAABDb25uZWN0UmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ConnectSecurityGroupsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId[] securityGroupIds = (NodeId[])_inputArguments[0];

            StatusCode[] connectResults = (StatusCode[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupIds,
                    ref connectResults);
            }

            _outputArguments[0] = connectResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ConnectSecurityGroupsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId[] securityGroupIds,
        ref StatusCode[] connectResults);
    #endif
    #endregion

    #region DisconnectSecurityGroupsMethodState Class
    #if (!OPCUA_EXCLUDE_DisconnectSecurityGroupsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DisconnectSecurityGroupsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DisconnectSecurityGroupsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DisconnectSecurityGroupsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAERpc2Nvbm5lY3RTZWN1cml0eUdyb3Vwc01ldGhvZFR5cGUBAPZi" +
           "AC8BAPZi9mIAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD3YgAuAET3YgAA" +
           "lgEAAAABACoBASMAAAAQAAAAU2VjdXJpdHlHcm91cElkcwARAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAA" +
           "AAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPhiAC4ARPhiAACWAQAA" +
           "AAEAKgEBJAAAABEAAABEaXNjb25uZWN0UmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DisconnectSecurityGroupsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId[] securityGroupIds = (NodeId[])_inputArguments[0];

            StatusCode[] disconnectResults = (StatusCode[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupIds,
                    ref disconnectResults);
            }

            _outputArguments[0] = disconnectResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DisconnectSecurityGroupsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId[] securityGroupIds,
        ref StatusCode[] disconnectResults);
    #endif
    #endregion

    #region PubSubKeyPushTargetState Class
    #if (!OPCUA_EXCLUDE_PubSubKeyPushTargetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubKeyPushTargetState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubKeyPushTargetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubKeyPushTargetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFB1YlN1YktleVB1c2hUYXJnZXRUeXBlSW5zdGFuY2UBAPliAQD5" +
           "YvliAAD/////CwAAABVgiQoCAAAAAAAOAAAAQXBwbGljYXRpb25VcmkBACJkAC4ARCJkAAAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABFbmRwb2ludFVybAEAI2QALgBEI2QAAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQD8YgAuAET8YgAAAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAANAAAAVXNlclRva2VuVHlwZQEAJGQALgBEJGQAAAEAMAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAARAAAAUmVxdWVzdGVkS2V5Q291bnQBACVkAC4ARCVkAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABSZXRyeUludGVydmFsAQAmZAAuAEQmZAAAAQAiAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABUAAABMYXN0UHVzaEV4ZWN1dGlvblRpbWUBACdkAC4ARCdkAAAADf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABEAAABMYXN0UHVzaEVycm9yVGltZQEAKGQALgBEKGQAAAAN/////wEB/////wAAAAAEYYIK" +
           "BAAAAAAAFQAAAENvbm5lY3RTZWN1cml0eUdyb3VwcwEAKWQALwEAKWQpZAAAAQH/////AgAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACpkAC4ARCpkAACWAQAAAAEAKgEBIwAAABAAAABTZWN1cml0" +
           "eUdyb3VwSWRzABEBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEAK2QALgBEK2QAAJYBAAAAAQAqAQEhAAAADgAAAENvbm5lY3RSZXN1" +
           "bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAGAAAAERp" +
           "c2Nvbm5lY3RTZWN1cml0eUdyb3VwcwEALGQALwEALGQsZAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAC1kAC4ARC1kAACWAQAAAAEAKgEBIwAAABAAAABTZWN1cml0eUdyb3VwSWRz" +
           "ABEBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEALmQALgBELmQAAJYBAAAAAQAqAQEkAAAAEQAAAERpc2Nvbm5lY3RSZXN1bHRzABMB" +
           "AAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAEAAAAFRyaWdnZXJL" +
           "ZXlVcGRhdGUBAC9kAC8BAC9kL2QAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ApplicationUri
        {
            get
            {
                return m_applicationUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applicationUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applicationUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<UserTokenPolicy> UserTokenType
        {
            get
            {
                return m_userTokenType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userTokenType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userTokenType = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> RequestedKeyCount
        {
            get
            {
                return m_requestedKeyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedKeyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedKeyCount = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RetryInterval
        {
            get
            {
                return m_retryInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_retryInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_retryInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastPushExecutionTime
        {
            get
            {
                return m_lastPushExecutionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastPushExecutionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastPushExecutionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastPushErrorTime
        {
            get
            {
                return m_lastPushErrorTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastPushErrorTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastPushErrorTime = value;
            }
        }

        /// <remarks />
        public ConnectSecurityGroupsMethodState ConnectSecurityGroups
        {
            get
            {
                return m_connectSecurityGroupsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_connectSecurityGroupsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_connectSecurityGroupsMethod = value;
            }
        }

        /// <remarks />
        public DisconnectSecurityGroupsMethodState DisconnectSecurityGroups
        {
            get
            {
                return m_disconnectSecurityGroupsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disconnectSecurityGroupsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disconnectSecurityGroupsMethod = value;
            }
        }

        /// <remarks />
        public MethodState TriggerKeyUpdate
        {
            get
            {
                return m_triggerKeyUpdateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_triggerKeyUpdateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_triggerKeyUpdateMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_applicationUri != null)
            {
                children.Add(m_applicationUri);
            }

            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_userTokenType != null)
            {
                children.Add(m_userTokenType);
            }

            if (m_requestedKeyCount != null)
            {
                children.Add(m_requestedKeyCount);
            }

            if (m_retryInterval != null)
            {
                children.Add(m_retryInterval);
            }

            if (m_lastPushExecutionTime != null)
            {
                children.Add(m_lastPushExecutionTime);
            }

            if (m_lastPushErrorTime != null)
            {
                children.Add(m_lastPushErrorTime);
            }

            if (m_connectSecurityGroupsMethod != null)
            {
                children.Add(m_connectSecurityGroupsMethod);
            }

            if (m_disconnectSecurityGroupsMethod != null)
            {
                children.Add(m_disconnectSecurityGroupsMethod);
            }

            if (m_triggerKeyUpdateMethod != null)
            {
                children.Add(m_triggerKeyUpdateMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ApplicationUri:
                {
                    if (createOrReplace)
                    {
                        if (ApplicationUri == null)
                        {
                            if (replacement == null)
                            {
                                ApplicationUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ApplicationUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ApplicationUri;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.UserTokenType:
                {
                    if (createOrReplace)
                    {
                        if (UserTokenType == null)
                        {
                            if (replacement == null)
                            {
                                UserTokenType = new PropertyState<UserTokenPolicy>(this);
                            }
                            else
                            {
                                UserTokenType = (PropertyState<UserTokenPolicy>)replacement;
                            }
                        }
                    }

                    instance = UserTokenType;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedKeyCount:
                {
                    if (createOrReplace)
                    {
                        if (RequestedKeyCount == null)
                        {
                            if (replacement == null)
                            {
                                RequestedKeyCount = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                RequestedKeyCount = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = RequestedKeyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RetryInterval:
                {
                    if (createOrReplace)
                    {
                        if (RetryInterval == null)
                        {
                            if (replacement == null)
                            {
                                RetryInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                RetryInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RetryInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.LastPushExecutionTime:
                {
                    if (createOrReplace)
                    {
                        if (LastPushExecutionTime == null)
                        {
                            if (replacement == null)
                            {
                                LastPushExecutionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastPushExecutionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastPushExecutionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastPushErrorTime:
                {
                    if (createOrReplace)
                    {
                        if (LastPushErrorTime == null)
                        {
                            if (replacement == null)
                            {
                                LastPushErrorTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastPushErrorTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastPushErrorTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ConnectSecurityGroups:
                {
                    if (createOrReplace)
                    {
                        if (ConnectSecurityGroups == null)
                        {
                            if (replacement == null)
                            {
                                ConnectSecurityGroups = new ConnectSecurityGroupsMethodState(this);
                            }
                            else
                            {
                                ConnectSecurityGroups = (ConnectSecurityGroupsMethodState)replacement;
                            }
                        }
                    }

                    instance = ConnectSecurityGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.DisconnectSecurityGroups:
                {
                    if (createOrReplace)
                    {
                        if (DisconnectSecurityGroups == null)
                        {
                            if (replacement == null)
                            {
                                DisconnectSecurityGroups = new DisconnectSecurityGroupsMethodState(this);
                            }
                            else
                            {
                                DisconnectSecurityGroups = (DisconnectSecurityGroupsMethodState)replacement;
                            }
                        }
                    }

                    instance = DisconnectSecurityGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.TriggerKeyUpdate:
                {
                    if (createOrReplace)
                    {
                        if (TriggerKeyUpdate == null)
                        {
                            if (replacement == null)
                            {
                                TriggerKeyUpdate = new MethodState(this);
                            }
                            else
                            {
                                TriggerKeyUpdate = (MethodState)replacement;
                            }
                        }
                    }

                    instance = TriggerKeyUpdate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_applicationUri;
        private PropertyState<string> m_endpointUrl;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<UserTokenPolicy> m_userTokenType;
        private PropertyState<ushort> m_requestedKeyCount;
        private PropertyState<double> m_retryInterval;
        private PropertyState<DateTime> m_lastPushExecutionTime;
        private PropertyState<DateTime> m_lastPushErrorTime;
        private ConnectSecurityGroupsMethodState m_connectSecurityGroupsMethod;
        private DisconnectSecurityGroupsMethodState m_disconnectSecurityGroupsMethod;
        private MethodState m_triggerKeyUpdateMethod;
        #endregion
    }
    #endif
    #endregion

    #region PubSubKeyPushTargetFolderState Class
    #if (!OPCUA_EXCLUDE_PubSubKeyPushTargetFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubKeyPushTargetFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public PubSubKeyPushTargetFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubKeyPushTargetFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddPushTargetFolder != null)
            {
                AddPushTargetFolder.Initialize(context, AddPushTargetFolder_InitializationString);
            }

            if (RemovePushTargetFolder != null)
            {
                RemovePushTargetFolder.Initialize(context, RemovePushTargetFolder_InitializationString);
            }
        }

        #region Initialization String
        private const string AddPushTargetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAEFkZFB1c2hUYXJnZXRGb2xkZXIBABtjAC8BABtjG2MAAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAcYwAuAEQcYwAAlgEAAAABACoBARMAAAAE" +
           "AAAATmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEAHWMALgBEHWMAAJYBAAAAAQAqAQElAAAAFgAAAFB1c2hUYXJnZXRGb2xkZXJO" +
           "b2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemovePushTargetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFJlbW92ZVB1c2hUYXJnZXRGb2xkZXIBAB5jAC8BAB5jHmMAAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAfYwAuAEQfYwAAlgEAAAABACoBASUA" +
           "AAAWAAAAUHVzaFRhcmdldEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAFB1YlN1YktleVB1c2hUYXJnZXRGb2xkZXJUeXBlSW5zdGFuY2UB" +
           "AAJjAQACYwJjAAD/////BAAAAARhggoEAAAAAAANAAAAQWRkUHVzaFRhcmdldAEAFmMALwEAFmMWYwAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABdjAC4ARBdjAACWBgAAAAEAKgEB" +
           "HQAAAA4AAABBcHBsaWNhdGlvblVyaQAM/////wAAAAAAAQAqAQEaAAAACwAAAEVuZHBvaW50VXJsAAz/" +
           "////AAAAAAABACoBASAAAAARAAAAU2VjdXJpdHlQb2xpY3lVcmkADP////8AAAAAAAEAKgEBHgAAAA0A" +
           "AABVc2VyVG9rZW5UeXBlAQAwAf////8AAAAAAAEAKgEBIAAAABEAAABSZXF1ZXN0ZWRLZXlDb3VudAAF" +
           "/////wAAAAAAAQAqAQEeAAAADQAAAFJldHJ5SW50ZXJ2YWwBACIB/////wAAAAAAAQAoAQEAAAABAAAA" +
           "BgAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAGGMALgBEGGMAAJYBAAAA" +
           "AQAqAQEbAAAADAAAAFB1c2hUYXJnZXRJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAAEAAAAFJlbW92ZVB1c2hUYXJnZXQBABljAC8BABljGWMAAAEB/////wEAAAAXYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAaYwAuAEQaYwAAlgEAAAABACoBARsAAAAMAAAAUHVzaFRh" +
           "cmdldElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAATAAAAQWRk" +
           "UHVzaFRhcmdldEZvbGRlcgEAG2MALwEAG2MbYwAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBABxjAC4ARBxjAACWAQAAAAEAKgEBEwAAAAQAAABOYW1lAAz/////AAAAAAABACgBAQAA" +
           "AAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAdYwAuAEQdYwAA" +
           "lgEAAAABACoBASUAAAAWAAAAUHVzaFRhcmdldEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAFgAAAFJlbW92ZVB1c2hUYXJnZXRGb2xkZXIBAB5jAC8B" +
           "AB5jHmMAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAfYwAuAEQfYwAAlgEA" +
           "AAABACoBASUAAAAWAAAAUHVzaFRhcmdldEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddPushTargetMethodState AddPushTarget
        {
            get
            {
                return m_addPushTargetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPushTargetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPushTargetMethod = value;
            }
        }

        /// <remarks />
        public RemovePushTargetMethodState RemovePushTarget
        {
            get
            {
                return m_removePushTargetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removePushTargetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removePushTargetMethod = value;
            }
        }

        /// <remarks />
        public AddPushTargetFolderMethodState AddPushTargetFolder
        {
            get
            {
                return m_addPushTargetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPushTargetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPushTargetFolderMethod = value;
            }
        }

        /// <remarks />
        public RemovePushTargetFolderMethodState RemovePushTargetFolder
        {
            get
            {
                return m_removePushTargetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removePushTargetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removePushTargetFolderMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addPushTargetMethod != null)
            {
                children.Add(m_addPushTargetMethod);
            }

            if (m_removePushTargetMethod != null)
            {
                children.Add(m_removePushTargetMethod);
            }

            if (m_addPushTargetFolderMethod != null)
            {
                children.Add(m_addPushTargetFolderMethod);
            }

            if (m_removePushTargetFolderMethod != null)
            {
                children.Add(m_removePushTargetFolderMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddPushTarget:
                {
                    if (createOrReplace)
                    {
                        if (AddPushTarget == null)
                        {
                            if (replacement == null)
                            {
                                AddPushTarget = new AddPushTargetMethodState(this);
                            }
                            else
                            {
                                AddPushTarget = (AddPushTargetMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPushTarget;
                    break;
                }

                case Opc.Ua.BrowseNames.RemovePushTarget:
                {
                    if (createOrReplace)
                    {
                        if (RemovePushTarget == null)
                        {
                            if (replacement == null)
                            {
                                RemovePushTarget = new RemovePushTargetMethodState(this);
                            }
                            else
                            {
                                RemovePushTarget = (RemovePushTargetMethodState)replacement;
                            }
                        }
                    }

                    instance = RemovePushTarget;
                    break;
                }

                case Opc.Ua.BrowseNames.AddPushTargetFolder:
                {
                    if (createOrReplace)
                    {
                        if (AddPushTargetFolder == null)
                        {
                            if (replacement == null)
                            {
                                AddPushTargetFolder = new AddPushTargetFolderMethodState(this);
                            }
                            else
                            {
                                AddPushTargetFolder = (AddPushTargetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPushTargetFolder;
                    break;
                }

                case Opc.Ua.BrowseNames.RemovePushTargetFolder:
                {
                    if (createOrReplace)
                    {
                        if (RemovePushTargetFolder == null)
                        {
                            if (replacement == null)
                            {
                                RemovePushTargetFolder = new RemovePushTargetFolderMethodState(this);
                            }
                            else
                            {
                                RemovePushTargetFolder = (RemovePushTargetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = RemovePushTargetFolder;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddPushTargetMethodState m_addPushTargetMethod;
        private RemovePushTargetMethodState m_removePushTargetMethod;
        private AddPushTargetFolderMethodState m_addPushTargetFolderMethod;
        private RemovePushTargetFolderMethodState m_removePushTargetFolderMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddPushTargetMethodState Class
    #if (!OPCUA_EXCLUDE_AddPushTargetMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPushTargetMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPushTargetMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPushTargetMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAEFkZFB1c2hUYXJnZXRNZXRob2RUeXBlAQAgYwAvAQAgYyBjAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIWMALgBEIWMAAJYGAAAAAQAqAQEd" +
           "AAAADgAAAEFwcGxpY2F0aW9uVXJpAAz/////AAAAAAABACoBARoAAAALAAAARW5kcG9pbnRVcmwADP//" +
           "//8AAAAAAAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM/////wAAAAAAAQAqAQEeAAAADQAA" +
           "AFVzZXJUb2tlblR5cGUBADAB/////wAAAAAAAQAqAQEgAAAAEQAAAFJlcXVlc3RlZEtleUNvdW50AAX/" +
           "////AAAAAAABACoBAR4AAAANAAAAUmV0cnlJbnRlcnZhbAEAIgH/////AAAAAAABACgBAQAAAAEAAAAG" +
           "AAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAiYwAuAEQiYwAAlgEAAAAB" +
           "ACoBARsAAAAMAAAAUHVzaFRhcmdldElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPushTargetMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string applicationUri = (string)_inputArguments[0];
            string endpointUrl = (string)_inputArguments[1];
            string securityPolicyUri = (string)_inputArguments[2];
            UserTokenPolicy userTokenType = (UserTokenPolicy)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[3]);
            ushort requestedKeyCount = (ushort)_inputArguments[4];
            double retryInterval = (double)_inputArguments[5];

            NodeId pushTargetId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    applicationUri,
                    endpointUrl,
                    securityPolicyUri,
                    userTokenType,
                    requestedKeyCount,
                    retryInterval,
                    ref pushTargetId);
            }

            _outputArguments[0] = pushTargetId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPushTargetMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string applicationUri,
        string endpointUrl,
        string securityPolicyUri,
        UserTokenPolicy userTokenType,
        ushort requestedKeyCount,
        double retryInterval,
        ref NodeId pushTargetId);
    #endif
    #endregion

    #region RemovePushTargetMethodState Class
    #if (!OPCUA_EXCLUDE_RemovePushTargetMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemovePushTargetMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemovePushTargetMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemovePushTargetMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAFJlbW92ZVB1c2hUYXJnZXRNZXRob2RUeXBlAQAjYwAvAQAjYyNj" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJGMALgBEJGMAAJYBAAAAAQAq" +
           "AQEbAAAADAAAAFB1c2hUYXJnZXRJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemovePushTargetMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId pushTargetId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    pushTargetId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemovePushTargetMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId pushTargetId);
    #endif
    #endregion

    #region AddPushTargetFolderMethodState Class
    #if (!OPCUA_EXCLUDE_AddPushTargetFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPushTargetFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPushTargetFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPushTargetFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAEFkZFB1c2hUYXJnZXRGb2xkZXJNZXRob2RUeXBlAQAlYwAvAQAl" +
           "YyVjAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJmMALgBEJmMAAJYBAAAA" +
           "AQAqAQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACdjAC4ARCdjAACWAQAAAAEAKgEBJQAAABYAAABQdXNoVGFy" +
           "Z2V0Rm9sZGVyTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPushTargetFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];

            NodeId pushTargetFolderNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    ref pushTargetFolderNodeId);
            }

            _outputArguments[0] = pushTargetFolderNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPushTargetFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        ref NodeId pushTargetFolderNodeId);
    #endif
    #endregion

    #region RemovePushTargetFolderMethodState Class
    #if (!OPCUA_EXCLUDE_RemovePushTargetFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemovePushTargetFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemovePushTargetFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemovePushTargetFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAFJlbW92ZVB1c2hUYXJnZXRGb2xkZXJNZXRob2RUeXBlAQAoYwAv" +
           "AQAoYyhjAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAKWMALgBEKWMAAJYB" +
           "AAAAAQAqAQElAAAAFgAAAFB1c2hUYXJnZXRGb2xkZXJOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemovePushTargetFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId pushTargetFolderNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    pushTargetFolderNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemovePushTargetFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId pushTargetFolderNodeId);
    #endif
    #endregion

    #region PublishSubscribeState Class
    #if (!OPCUA_EXCLUDE_PublishSubscribeState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishSubscribeState : PubSubKeyServiceState
    {
        #region Constructors
        /// <remarks />
        public PublishSubscribeState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PublishSubscribeType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SetSecurityKeys != null)
            {
                SetSecurityKeys.Initialize(context, SetSecurityKeys_InitializationString);
            }

            if (AddConnection != null)
            {
                AddConnection.Initialize(context, AddConnection_InitializationString);
            }

            if (RemoveConnection != null)
            {
                RemoveConnection.Initialize(context, RemoveConnection_InitializationString);
            }

            if (SubscribedDataSets != null)
            {
                SubscribedDataSets.Initialize(context, SubscribedDataSets_InitializationString);
            }

            if (PubSubConfiguration != null)
            {
                PubSubConfiguration.Initialize(context, PubSubConfiguration_InitializationString);
            }

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }

            if (PubSubCapablities != null)
            {
                PubSubCapablities.Initialize(context, PubSubCapablities_InitializationString);
            }

            if (DataSetClasses != null)
            {
                DataSetClasses.Initialize(context, DataSetClasses_InitializationString);
            }

            if (DefaultDatagramPublisherId != null)
            {
                DefaultDatagramPublisherId.Initialize(context, DefaultDatagramPublisherId_InitializationString);
            }

            if (ConfigurationVersion != null)
            {
                ConfigurationVersion.Initialize(context, ConfigurationVersion_InitializationString);
            }

            if (DefaultSecurityKeyServices != null)
            {
                DefaultSecurityKeyServices.Initialize(context, DefaultSecurityKeyServices_InitializationString);
            }

            if (ConfigurationProperties != null)
            {
                ConfigurationProperties.Initialize(context, ConfigurationProperties_InitializationString);
            }
        }

        #region Initialization String
        private const string SetSecurityKeys_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFNldFNlY3VyaXR5S2V5cwEAkEMALwEAkEOQQwAAAQH/////AQAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJFDAC4ARJFDAACWBwAAAAEAKgEBHgAAAA8AAABT" +
           "ZWN1cml0eUdyb3VwSWQADP////8AAAAAAAEAKgEBIAAAABEAAABTZWN1cml0eVBvbGljeVVyaQAM////" +
           "/wAAAAAAAQAqAQEfAAAADgAAAEN1cnJlbnRUb2tlbklkAQAgAf////8AAAAAAAEAKgEBGQAAAAoAAABD" +
           "dXJyZW50S2V5AA//////AAAAAAABACoBAR0AAAAKAAAARnV0dXJlS2V5cwAPAQAAAAEAAAAAAAAAAAEA" +
           "KgEBHgAAAA0AAABUaW1lVG9OZXh0S2V5AQAiAf////8AAAAAAAEAKgEBHAAAAAsAAABLZXlMaWZldGlt" +
           "ZQEAIgH/////AAAAAAABACgBAQAAAAEAAAAHAAAAAQH/////AAAAAA==";

        private const string AddConnection_InitializationString =
           "//////////8EYYIKBAAAAAAADQAAAEFkZENvbm5lY3Rpb24BANZAAC8BANZA1kAAAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDXQAAuAETXQAAAlgEAAAABACoBAR4AAAANAAAAQ29u" +
           "ZmlndXJhdGlvbgEAAT3/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQDYQAAuAETYQAAAlgEAAAABACoBARsAAAAMAAAAQ29ubmVjdGlvbklk" +
           "ABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string RemoveConnection_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAFJlbW92ZUNvbm5lY3Rpb24BAGA4AC8BAGA4YDgAAAEB/////wEA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBhOAAuAERhOAAAlgEAAAABACoBARsAAAAMAAAA" +
           "Q29ubmVjdGlvbklkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string SubscribedDataSets_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAFN1YnNjcmliZWREYXRhU2V0cwEARlwALwEA81xGXAAA/////wAA" +
           "AAA=";

        private const string PubSubConfiguration_InitializationString =
           "//////////8EYIAKAQAAAAAAEwAAAFB1YlN1YkNvbmZpZ3VyYXRpb24BADtjAC8BAIpjO2MAAP////8M" +
           "AAAAFWCJCgIAAAAAAAQAAABTaXplAQA8YwAuAEQ8YwAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAV3JpdGFibGUBAD1jAC4ARD1jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3Jp" +
           "dGFibGUBAD5jAC4ARD5jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAD9j" +
           "AC4ARD9jAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBDYwAvAQA8LUNjAAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEARGMALgBERGMAAJYBAAAAAQAqAQETAAAA" +
           "BAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBAEVjAC4AREVjAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAEZjAC8BAD8t" +
           "RmMAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBHYwAuAERHYwAAlgEAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAABAAAAFJlYWQBAEhjAC8BAEEtSGMAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQBJYwAuAERJYwAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAqAQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYKkK" +
           "AgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEASmMALgBESmMAAJYBAAAAAQAqAQETAAAABAAAAERhdGEA" +
           "D/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEAS2MA" +
           "LwEARC1LYwAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAExjAC4ARExjAACW" +
           "AgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQBN" +
           "YwAvAQBGLU1jAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATmMALgBETmMA" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAE9jAC4ARE9jAACWAQAAAAEAKgEBFwAA" +
           "AAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAA" +
           "CwAAAFNldFBvc2l0aW9uAQBQYwAvAQBJLVBjAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEAUWMALgBEUWMAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEA" +
           "KgEBFwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAACgAAAFJlc2VydmVJZHMBAFJjAC8BAKFjUmMAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAQBTYwAuAERTYwAAlgMAAAABACoBASIAAAATAAAAVHJhbnNwb3J0UHJvZmlsZVVy" +
           "aQAM/////wAAAAAAAQAqAQEjAAAAFAAAAE51bVJlcVdyaXRlckdyb3VwSWRzAAX/////AAAAAAABACoB" +
           "ASUAAAAWAAAATnVtUmVxRGF0YVNldFdyaXRlcklkcwAF/////wAAAAAAAQAoAQEAAAABAAAAAwAAAAEB" +
           "/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAVGMALgBEVGMAAJYDAAAAAQAqAQEh" +
           "AAAAEgAAAERlZmF1bHRQdWJsaXNoZXJJZAAY/////wAAAAAAAQAqAQEhAAAADgAAAFdyaXRlckdyb3Vw" +
           "SWRzAAUBAAAAAQAAAAAAAAAAAQAqAQEjAAAAEAAAAERhdGFTZXRXcml0ZXJJZHMABQEAAAABAAAAAAAA" +
           "AAABACgBAQAAAAEAAAADAAAAAQH/////AAAAAARhggoEAAAAAAAOAAAAQ2xvc2VBbmRVcGRhdGUBAFVj" +
           "AC8BAKRjVWMAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBWYwAuAERWYwAA" +
           "lgMAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEkAAAAFQAAAFJlcXVpcmVD" +
           "b21wbGV0ZVVwZGF0ZQAB/////wAAAAAAAQAqAQEsAAAAFwAAAENvbmZpZ3VyYXRpb25SZWZlcmVuY2Vz" +
           "AQCvYwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAADAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQBXYwAuAERXYwAAlgQAAAABACoBAR0AAAAOAAAAQ2hhbmdlc0FwcGxpZWQAAf//" +
           "//8AAAAAAAEAKgEBJAAAABEAAABSZWZlcmVuY2VzUmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKgEBKAAA" +
           "ABMAAABDb25maWd1cmF0aW9uVmFsdWVzAQCwYwEAAAABAAAAAAAAAAABACoBAScAAAAUAAAAQ29uZmln" +
           "dXJhdGlvbk9iamVjdHMAEQEAAAABAAAAAAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////AAAAAA==";

        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQAbSQAvAQAUTRtJAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAHEkALwA/HEkAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAHUkALwEADU0dSQAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQAeSQAuAEQeSQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAB9JAC4ARB9JAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBACBJAC4ARCBJAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBACJJAC8BAA1NIkkAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAI0kA" +
           "LgBEI0kAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAkSQAuAEQk" +
           "SQAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAlSQAuAEQl" +
           "SQAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEAJ0kALwEA6UwnSQAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAChJAC8APyhJAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAKUkALwA6KUkAAP////8GAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQAqSQAvAQANTSpJAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBACtJAC4ARCtJ" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEALEkALgBELEkAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAtSQAuAEQt" +
           "SQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAL0kALwEADU0vSQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQAwSQAu" +
           "AEQwSQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BADFJAC4ARDFJ" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAMkkA" +
           "LgBEMkkAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBADRJAC8BAA1NNEkAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "NUkALgBENUkAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQA2SQAu" +
           "AEQ2SQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ADdJAC4ARDdJAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAOUkALwEADU05SQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQA6SQAuAEQ6SQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "ADtJAC4ARDtJAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAPEkALgBEPEkAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQA+SQAvAQANTT5JAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAD9JAC4ARD9JAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "QEkALgBEQEkAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQBBSQAuAERBSQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAQ0kALwEADU1DSQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQBESQAuAERESQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AEVJAC4AREVJAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEARkkALgBERkkAAAYAAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZlVmFs" +
           "dWVzAQBISQAvADpISQAA/////wQAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRhU2V0V3JpdGVy" +
           "cwEASUkALwA/SUkAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "AEpJAC4AREpJAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAQ29uZmlndXJlZERh" +
           "dGFTZXRSZWFkZXJzAQBLSQAvAD9LSQAAAAX/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25v" +
           "c3RpY3NMZXZlbAEATEkALgBETEkAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABkAAABP" +
           "cGVyYXRpb25hbERhdGFTZXRXcml0ZXJzAQBNSQAvAD9NSQAAAAX/////AQH/////AQAAABVgqQoCAAAA" +
           "AAAQAAAARGlhZ25vc3RpY3NMZXZlbAEATkkALgBETkkAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABkAAABPcGVyYXRpb25hbERhdGFTZXRSZWFkZXJzAQBPSQAvAD9PSQAAAAX/////AQH/////" +
           "AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAUEkALgBEUEkAAAYAAAAAAQALTf////8B" +
           "Af////8AAAAA";

        private const string PubSubCapablities_InitializationString =
           "//////////9EYIAKAQAAAAAAEQAAAFB1YlN1YkNhcGFibGl0aWVzAQBaXAMAAAAAEgAAAFB1YlN1YkNh" +
           "cGFiaWxpdGllcwAvAQAYXVpcAAD/////BgAAABVgiQoCAAAAAAAUAAAATWF4UHViU3ViQ29ubmVjdGlv" +
           "bnMBAFtcAC4ARFtcAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABNYXhXcml0ZXJHcm91cHMB" +
           "AFxcAC4ARFxcAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABNYXhSZWFkZXJHcm91cHMBAF1c" +
           "AC4ARF1cAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABEAAABNYXhEYXRhU2V0V3JpdGVycwEAXlwA" +
           "LgBEXlwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAE1heERhdGFTZXRSZWFkZXJzAQBfXAAu" +
           "AERfXAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAATWF4RmllbGRzUGVyRGF0YVNldAEAYFwA" +
           "LgBEYFwAAAAH/////wEB/////wAAAAA=";

        private const string DataSetClasses_InitializationString =
           "//////////8EYIAKAQAAAAAADgAAAERhdGFTZXRDbGFzc2VzAQBhXAAvAD1hXAAA/////wAAAAA=";

        private const string DefaultDatagramPublisherId_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAERlZmF1bHREYXRhZ3JhbVB1Ymxpc2hlcklkAQBYYwAuAERYYwAA" +
           "AAn/////AQH/////AAAAAA==";

        private const string ConfigurationVersion_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQBZYwAuAERZYwAAAQAGUv//" +
           "//8BAf////8AAAAA";

        private const string DefaultSecurityKeyServices_InitializationString =
           "//////////8XYIkKAgAAAAAAGgAAAERlZmF1bHRTZWN1cml0eUtleVNlcnZpY2VzAQCMfgAuAESMfgAA" +
           "AQA4AQEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string ConfigurationProperties_InitializationString =
           "//////////8XYIkKAgAAAAAAFwAAAENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzAQCNfgAuAESNfgAAAQDF" +
           "OAEAAAABAAAAAAAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFB1Ymxpc2hTdWJzY3JpYmVUeXBlSW5zdGFuY2UBAFA4AQBQOFA4" +
           "AAD/////DwAAAARhggoEAAAAAAAPAAAAU2V0U2VjdXJpdHlLZXlzAQCQQwAvAQCQQ5BDAAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAkUMALgBEkUMAAJYHAAAAAQAqAQEeAAAADwAA" +
           "AFNlY3VyaXR5R3JvdXBJZAAM/////wAAAAAAAQAqAQEgAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAAz/" +
           "////AAAAAAABACoBAR8AAAAOAAAAQ3VycmVudFRva2VuSWQBACAB/////wAAAAAAAQAqAQEZAAAACgAA" +
           "AEN1cnJlbnRLZXkAD/////8AAAAAAAEAKgEBHQAAAAoAAABGdXR1cmVLZXlzAA8BAAAAAQAAAAAAAAAA" +
           "AQAqAQEeAAAADQAAAFRpbWVUb05leHRLZXkBACIB/////wAAAAAAAQAqAQEcAAAACwAAAEtleUxpZmV0" +
           "aW1lAQAiAf////8AAAAAAAEAKAEBAAAAAQAAAAcAAAABAf////8AAAAABGGCCgQAAAAAAA0AAABBZGRD" +
           "b25uZWN0aW9uAQDWQAAvAQDWQNZAAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEA10AALgBE10AAAJYBAAAAAQAqAQEeAAAADQAAAENvbmZpZ3VyYXRpb24BAAE9/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA2EAALgBE" +
           "2EAAAJYBAAAAAQAqAQEbAAAADAAAAENvbm5lY3Rpb25JZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAAEAAAAFJlbW92ZUNvbm5lY3Rpb24BAGA4AC8BAGA4YDgAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBhOAAuAERhOAAAlgEAAAABACoBARsAAAAM" +
           "AAAAQ29ubmVjdGlvbklkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARggAoBAAAA" +
           "AAARAAAAUHVibGlzaGVkRGF0YVNldHMBAGI4AC8BAI04YjgAAP////8AAAAABGCACgEAAAAAABIAAABT" +
           "dWJzY3JpYmVkRGF0YVNldHMBAEZcAC8BAPNcRlwAAP////8AAAAABGCACgEAAAAAABMAAABQdWJTdWJD" +
           "b25maWd1cmF0aW9uAQA7YwAvAQCKYztjAAD/////DAAAABVgiQoCAAAAAAAEAAAAU2l6ZQEAPGMALgBE" +
           "PGMAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxlAQA9YwAuAEQ9YwAAAAH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQA+YwAuAEQ+YwAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQA/YwAuAEQ/YwAAAAX/////AQH/////AAAAAARhggoE" +
           "AAAAAAAEAAAAT3BlbgEAQ2MALwEAPC1DYwAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAERjAC4ARERjAACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEA" +
           "AAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBFYwAuAERFYwAAlgEA" +
           "AAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAENsb3NlAQBGYwAvAQA/LUZjAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAR2MALgBER2MAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAQBIYwAvAQBBLUhj" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEASWMALgBESWMAAJYCAAAAAQAq" +
           "AQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAEpj" +
           "AC4AREpjAACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBAEtjAC8BAEQtS2MAAAEB/////wEAAAAXYKkKAgAAAAAA" +
           "DgAAAElucHV0QXJndW1lbnRzAQBMYwAuAERMYwAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH" +
           "/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEATWMALwEARi1NYwAAAQH/////AgAAABdgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBAE5jAC4ARE5jAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxl" +
           "AAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQBPYwAuAERPYwAAlgEAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3NpdGlvbgEAUGMALwEASS1QYwAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFFjAC4ARFFjAACWAgAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAAoAAABSZXNlcnZlSWRzAQBSYwAvAQCh" +
           "Y1JjAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAU2MALgBEU2MAAJYDAAAA" +
           "AQAqAQEiAAAAEwAAAFRyYW5zcG9ydFByb2ZpbGVVcmkADP////8AAAAAAAEAKgEBIwAAABQAAABOdW1S" +
           "ZXFXcml0ZXJHcm91cElkcwAF/////wAAAAAAAQAqAQElAAAAFgAAAE51bVJlcURhdGFTZXRXcml0ZXJJ" +
           "ZHMABf////8AAAAAAAEAKAEBAAAAAQAAAAMAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAFRjAC4ARFRjAACWAwAAAAEAKgEBIQAAABIAAABEZWZhdWx0UHVibGlzaGVySWQAGP//" +
           "//8AAAAAAAEAKgEBIQAAAA4AAABXcml0ZXJHcm91cElkcwAFAQAAAAEAAAAAAAAAAAEAKgEBIwAAABAA" +
           "AABEYXRhU2V0V3JpdGVySWRzAAUBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQBVYwAvAQCkY1VjAAABAf////8CAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAVmMALgBEVmMAAJYDAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUA" +
           "B/////8AAAAAAAEAKgEBJAAAABUAAABSZXF1aXJlQ29tcGxldGVVcGRhdGUAAf////8AAAAAAAEAKgEB" +
           "LAAAABcAAABDb25maWd1cmF0aW9uUmVmZXJlbmNlcwEAr2MBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAA" +
           "AwAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAV2MALgBEV2MAAJYEAAAA" +
           "AQAqAQEdAAAADgAAAENoYW5nZXNBcHBsaWVkAAH/////AAAAAAABACoBASQAAAARAAAAUmVmZXJlbmNl" +
           "c1Jlc3VsdHMAEwEAAAABAAAAAAAAAAABACoBASgAAAATAAAAQ29uZmlndXJhdGlvblZhbHVlcwEAsGMB" +
           "AAAAAQAAAAAAAAAAAQAqAQEnAAAAFAAAAENvbmZpZ3VyYXRpb25PYmplY3RzABEBAAAAAQAAAAAAAAAA" +
           "AQAoAQEAAAABAAAABAAAAAEB/////wAAAAAEYIAKAQAAAAAABgAAAFN0YXR1cwEA5D0ALwEAMznkPQAA" +
           "/////wEAAAAVYIkKAgAAAAAABQAAAFN0YXRlAQDlPQAvAD/lPQAAAQA3Of////8BAf////8AAAAABGCA" +
           "CgEAAAAAAAsAAABEaWFnbm9zdGljcwEAG0kALwEAFE0bSQAA/////wcAAAAVYIkKAgAAAAAAEAAAAERp" +
           "YWdub3N0aWNzTGV2ZWwBABxJAC8APxxJAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAFRv" +
           "dGFsSW5mb3JtYXRpb24BAB1JAC8BAA1NHUkAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAHkkALgBEHkkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQAfSQAuAEQfSQAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVs" +
           "AQAgSQAuAEQgSQAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABUb3RhbEVycm9yAQAiSQAv" +
           "AQANTSJJAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBACNJAC4ARCNJAAAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAJEkALgBEJEkAAAEAEk3/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAJUkALgBEJUkAAAEAC03/////" +
           "AQH/////AAAAAARhggoEAAAAAAAFAAAAUmVzZXQBACdJAC8BAOlMJ0kAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFN1YkVycm9yAQAoSQAvAD8oSQAAAAH/////AQH/////AAAAAARggAoBAAAAAAAIAAAAQ291" +
           "bnRlcnMBAClJAC8AOilJAAD/////BgAAABVgiQoCAAAAAAAKAAAAU3RhdGVFcnJvcgEAKkkALwEADU0q" +
           "SQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQArSQAuAEQrSQAAAAH/////AQH/" +
           "////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BACxJAC4ARCxJAAAGAQAAAAEAEk3/////" +
           "AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEALUkALgBELUkAAAYAAAAAAQAL" +
           "Tf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFsQnlNZXRob2QBAC9JAC8B" +
           "AA1NL0kAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAMEkALgBEMEkAAAAB////" +
           "/wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAxSQAuAEQxSQAABgAAAAABABJN" +
           "/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBADJJAC4ARDJJAAAGAAAA" +
           "AAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRpb25hbEJ5UGFyZW50AQA0" +
           "SQAvAQANTTRJAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBADVJAC4ARDVJAAAA" +
           "Af////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEANkkALgBENkkAAAYAAAAA" +
           "AQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQA3SQAuAEQ3SQAA" +
           "BgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAFN0YXRlT3BlcmF0aW9uYWxGcm9tRXJy" +
           "b3IBADlJAC8BAA1NOUkAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAOkkALgBE" +
           "OkkAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQA7SQAuAEQ7SQAA" +
           "BgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBADxJAC4A" +
           "RDxJAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3RhdGVQYXVzZWRCeVBhcmVu" +
           "dAEAPkkALwEADU0+SQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQA/SQAuAEQ/" +
           "SQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAEBJAC4AREBJAAAG" +
           "AAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAQUkALgBE" +
           "QUkAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABTdGF0ZURpc2FibGVkQnlNZXRo" +
           "b2QBAENJAC8BAA1NQ0kAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAREkALgBE" +
           "REkAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBFSQAuAERFSQAA" +
           "BgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAEZJAC4A" +
           "REZJAAAGAAAAAAEAC03/////AQH/////AAAAAARggAoBAAAAAAAKAAAATGl2ZVZhbHVlcwEASEkALwA6" +
           "SEkAAP////8EAAAAFWCJCgIAAAAAABgAAABDb25maWd1cmVkRGF0YVNldFdyaXRlcnMBAElJAC8AP0lJ" +
           "AAAABf////8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBKSQAuAERKSQAA" +
           "BgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRhU2V0UmVhZGVy" +
           "cwEAS0kALwA/S0kAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "AExJAC4ARExJAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3BlcmF0aW9uYWxE" +
           "YXRhU2V0V3JpdGVycwEATUkALwA/TUkAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAE5JAC4ARE5JAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAA" +
           "T3BlcmF0aW9uYWxEYXRhU2V0UmVhZGVycwEAT0kALwA/T0kAAAAF/////wEB/////wEAAAAVYKkKAgAA" +
           "AAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAFBJAC4ARFBJAAAGAAAAAAEAC03/////AQH/////AAAAAERg" +
           "gAoBAAAAAAARAAAAUHViU3ViQ2FwYWJsaXRpZXMBAFpcAwAAAAASAAAAUHViU3ViQ2FwYWJpbGl0aWVz" +
           "AC8BABhdWlwAAP////8GAAAAFWCJCgIAAAAAABQAAABNYXhQdWJTdWJDb25uZWN0aW9ucwEAW1wALgBE" +
           "W1wAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAE1heFdyaXRlckdyb3VwcwEAXFwALgBEXFwA" +
           "AAAH/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAE1heFJlYWRlckdyb3VwcwEAXVwALgBEXVwAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAE1heERhdGFTZXRXcml0ZXJzAQBeXAAuAEReXAAAAAf/" +
           "////AQH/////AAAAABVgiQoCAAAAAAARAAAATWF4RGF0YVNldFJlYWRlcnMBAF9cAC4ARF9cAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABMAAABNYXhGaWVsZHNQZXJEYXRhU2V0AQBgXAAuAERgXAAAAAf/" +
           "////AQH/////AAAAAARggAoBAAAAAAAOAAAARGF0YVNldENsYXNzZXMBAGFcAC8APWFcAAD/////AAAA" +
           "ABdgiQoCAAAAAAAaAAAAU3VwcG9ydGVkVHJhbnNwb3J0UHJvZmlsZXMBAEdEAC4AREdEAAAADAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAGgAAAERlZmF1bHREYXRhZ3JhbVB1Ymxpc2hlcklkAQBY" +
           "YwAuAERYYwAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24B" +
           "AFljAC4ARFljAAABAAZS/////wEB/////wAAAAAXYIkKAgAAAAAAGgAAAERlZmF1bHRTZWN1cml0eUtl" +
           "eVNlcnZpY2VzAQCMfgAuAESMfgAAAQA4AQEAAAABAAAAAAAAAAEB/////wAAAAAXYIkKAgAAAAAAFwAA" +
           "AENvbmZpZ3VyYXRpb25Qcm9wZXJ0aWVzAQCNfgAuAESNfgAAAQDFOAEAAAABAAAAAAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SetSecurityKeysMethodState SetSecurityKeys
        {
            get
            {
                return m_setSecurityKeysMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setSecurityKeysMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setSecurityKeysMethod = value;
            }
        }

        /// <remarks />
        public AddConnectionMethodState AddConnection
        {
            get
            {
                return m_addConnectionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addConnectionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addConnectionMethod = value;
            }
        }

        /// <remarks />
        public RemoveConnectionMethodState RemoveConnection
        {
            get
            {
                return m_removeConnectionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeConnectionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeConnectionMethod = value;
            }
        }

        /// <remarks />
        public DataSetFolderState PublishedDataSets
        {
            get
            {
                return m_publishedDataSets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishedDataSets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishedDataSets = value;
            }
        }

        /// <remarks />
        public SubscribedDataSetFolderState SubscribedDataSets
        {
            get
            {
                return m_subscribedDataSets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscribedDataSets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscribedDataSets = value;
            }
        }

        /// <remarks />
        public PubSubConfigurationState PubSubConfiguration
        {
            get
            {
                return m_pubSubConfiguration;
            }

            set
            {
                if (!Object.ReferenceEquals(m_pubSubConfiguration, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_pubSubConfiguration = value;
            }
        }

        /// <remarks />
        public PubSubStatusState Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsRootState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }

        /// <remarks />
        public PubSubCapabilitiesState PubSubCapablities
        {
            get
            {
                return m_pubSubCapablities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_pubSubCapablities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_pubSubCapablities = value;
            }
        }

        /// <remarks />
        public FolderState DataSetClasses
        {
            get
            {
                return m_dataSetClasses;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetClasses, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetClasses = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> SupportedTransportProfiles
        {
            get
            {
                return m_supportedTransportProfiles;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportedTransportProfiles, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportedTransportProfiles = value;
            }
        }

        /// <remarks />
        public PropertyState<ulong> DefaultDatagramPublisherId
        {
            get
            {
                return m_defaultDatagramPublisherId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultDatagramPublisherId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultDatagramPublisherId = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> ConfigurationVersion
        {
            get
            {
                return m_configurationVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_configurationVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_configurationVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<EndpointDescription[]> DefaultSecurityKeyServices
        {
            get
            {
                return m_defaultSecurityKeyServices;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultSecurityKeyServices, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultSecurityKeyServices = value;
            }
        }

        /// <remarks />
        public PropertyState<KeyValuePair[]> ConfigurationProperties
        {
            get
            {
                return m_configurationProperties;
            }

            set
            {
                if (!Object.ReferenceEquals(m_configurationProperties, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_configurationProperties = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setSecurityKeysMethod != null)
            {
                children.Add(m_setSecurityKeysMethod);
            }

            if (m_addConnectionMethod != null)
            {
                children.Add(m_addConnectionMethod);
            }

            if (m_removeConnectionMethod != null)
            {
                children.Add(m_removeConnectionMethod);
            }

            if (m_publishedDataSets != null)
            {
                children.Add(m_publishedDataSets);
            }

            if (m_subscribedDataSets != null)
            {
                children.Add(m_subscribedDataSets);
            }

            if (m_pubSubConfiguration != null)
            {
                children.Add(m_pubSubConfiguration);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            if (m_pubSubCapablities != null)
            {
                children.Add(m_pubSubCapablities);
            }

            if (m_dataSetClasses != null)
            {
                children.Add(m_dataSetClasses);
            }

            if (m_supportedTransportProfiles != null)
            {
                children.Add(m_supportedTransportProfiles);
            }

            if (m_defaultDatagramPublisherId != null)
            {
                children.Add(m_defaultDatagramPublisherId);
            }

            if (m_configurationVersion != null)
            {
                children.Add(m_configurationVersion);
            }

            if (m_defaultSecurityKeyServices != null)
            {
                children.Add(m_defaultSecurityKeyServices);
            }

            if (m_configurationProperties != null)
            {
                children.Add(m_configurationProperties);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetSecurityKeys:
                {
                    if (createOrReplace)
                    {
                        if (SetSecurityKeys == null)
                        {
                            if (replacement == null)
                            {
                                SetSecurityKeys = new SetSecurityKeysMethodState(this);
                            }
                            else
                            {
                                SetSecurityKeys = (SetSecurityKeysMethodState)replacement;
                            }
                        }
                    }

                    instance = SetSecurityKeys;
                    break;
                }

                case Opc.Ua.BrowseNames.AddConnection:
                {
                    if (createOrReplace)
                    {
                        if (AddConnection == null)
                        {
                            if (replacement == null)
                            {
                                AddConnection = new AddConnectionMethodState(this);
                            }
                            else
                            {
                                AddConnection = (AddConnectionMethodState)replacement;
                            }
                        }
                    }

                    instance = AddConnection;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveConnection:
                {
                    if (createOrReplace)
                    {
                        if (RemoveConnection == null)
                        {
                            if (replacement == null)
                            {
                                RemoveConnection = new RemoveConnectionMethodState(this);
                            }
                            else
                            {
                                RemoveConnection = (RemoveConnectionMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveConnection;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishedDataSets:
                {
                    if (createOrReplace)
                    {
                        if (PublishedDataSets == null)
                        {
                            if (replacement == null)
                            {
                                PublishedDataSets = new DataSetFolderState(this);
                            }
                            else
                            {
                                PublishedDataSets = (DataSetFolderState)replacement;
                            }
                        }
                    }

                    instance = PublishedDataSets;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscribedDataSets:
                {
                    if (createOrReplace)
                    {
                        if (SubscribedDataSets == null)
                        {
                            if (replacement == null)
                            {
                                SubscribedDataSets = new SubscribedDataSetFolderState(this);
                            }
                            else
                            {
                                SubscribedDataSets = (SubscribedDataSetFolderState)replacement;
                            }
                        }
                    }

                    instance = SubscribedDataSets;
                    break;
                }

                case Opc.Ua.BrowseNames.PubSubConfiguration:
                {
                    if (createOrReplace)
                    {
                        if (PubSubConfiguration == null)
                        {
                            if (replacement == null)
                            {
                                PubSubConfiguration = new PubSubConfigurationState(this);
                            }
                            else
                            {
                                PubSubConfiguration = (PubSubConfigurationState)replacement;
                            }
                        }
                    }

                    instance = PubSubConfiguration;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PubSubStatusState(this);
                            }
                            else
                            {
                                Status = (PubSubStatusState)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsRootState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsRootState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.PubSubCapablities:
                {
                    if (createOrReplace)
                    {
                        if (PubSubCapablities == null)
                        {
                            if (replacement == null)
                            {
                                PubSubCapablities = new PubSubCapabilitiesState(this);
                            }
                            else
                            {
                                PubSubCapablities = (PubSubCapabilitiesState)replacement;
                            }
                        }
                    }

                    instance = PubSubCapablities;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetClasses:
                {
                    if (createOrReplace)
                    {
                        if (DataSetClasses == null)
                        {
                            if (replacement == null)
                            {
                                DataSetClasses = new FolderState(this);
                            }
                            else
                            {
                                DataSetClasses = (FolderState)replacement;
                            }
                        }
                    }

                    instance = DataSetClasses;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportedTransportProfiles:
                {
                    if (createOrReplace)
                    {
                        if (SupportedTransportProfiles == null)
                        {
                            if (replacement == null)
                            {
                                SupportedTransportProfiles = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                SupportedTransportProfiles = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = SupportedTransportProfiles;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultDatagramPublisherId:
                {
                    if (createOrReplace)
                    {
                        if (DefaultDatagramPublisherId == null)
                        {
                            if (replacement == null)
                            {
                                DefaultDatagramPublisherId = new PropertyState<ulong>(this);
                            }
                            else
                            {
                                DefaultDatagramPublisherId = (PropertyState<ulong>)replacement;
                            }
                        }
                    }

                    instance = DefaultDatagramPublisherId;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfigurationVersion:
                {
                    if (createOrReplace)
                    {
                        if (ConfigurationVersion == null)
                        {
                            if (replacement == null)
                            {
                                ConfigurationVersion = new PropertyState<uint>(this);
                            }
                            else
                            {
                                ConfigurationVersion = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = ConfigurationVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultSecurityKeyServices:
                {
                    if (createOrReplace)
                    {
                        if (DefaultSecurityKeyServices == null)
                        {
                            if (replacement == null)
                            {
                                DefaultSecurityKeyServices = new PropertyState<EndpointDescription[]>(this);
                            }
                            else
                            {
                                DefaultSecurityKeyServices = (PropertyState<EndpointDescription[]>)replacement;
                            }
                        }
                    }

                    instance = DefaultSecurityKeyServices;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfigurationProperties:
                {
                    if (createOrReplace)
                    {
                        if (ConfigurationProperties == null)
                        {
                            if (replacement == null)
                            {
                                ConfigurationProperties = new PropertyState<KeyValuePair[]>(this);
                            }
                            else
                            {
                                ConfigurationProperties = (PropertyState<KeyValuePair[]>)replacement;
                            }
                        }
                    }

                    instance = ConfigurationProperties;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SetSecurityKeysMethodState m_setSecurityKeysMethod;
        private AddConnectionMethodState m_addConnectionMethod;
        private RemoveConnectionMethodState m_removeConnectionMethod;
        private DataSetFolderState m_publishedDataSets;
        private SubscribedDataSetFolderState m_subscribedDataSets;
        private PubSubConfigurationState m_pubSubConfiguration;
        private PubSubStatusState m_status;
        private PubSubDiagnosticsRootState m_diagnostics;
        private PubSubCapabilitiesState m_pubSubCapablities;
        private FolderState m_dataSetClasses;
        private PropertyState<string[]> m_supportedTransportProfiles;
        private PropertyState<ulong> m_defaultDatagramPublisherId;
        private PropertyState<uint> m_configurationVersion;
        private PropertyState<EndpointDescription[]> m_defaultSecurityKeyServices;
        private PropertyState<KeyValuePair[]> m_configurationProperties;
        #endregion
    }
    #endif
    #endregion

    #region SetSecurityKeysMethodState Class
    #if (!OPCUA_EXCLUDE_SetSecurityKeysMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetSecurityKeysMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public SetSecurityKeysMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new SetSecurityKeysMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAFNldFNlY3VyaXR5S2V5c01ldGhvZFR5cGUBAJJDAC8BAJJDkkMA" +
           "AAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCTQwAuAESTQwAAlgcAAAABACoB" +
           "AR4AAAAPAAAAU2VjdXJpdHlHcm91cElkAAz/////AAAAAAABACoBASAAAAARAAAAU2VjdXJpdHlQb2xp" +
           "Y3lVcmkADP////8AAAAAAAEAKgEBHwAAAA4AAABDdXJyZW50VG9rZW5JZAEAIAH/////AAAAAAABACoB" +
           "ARkAAAAKAAAAQ3VycmVudEtleQAP/////wAAAAAAAQAqAQEdAAAACgAAAEZ1dHVyZUtleXMADwEAAAAB" +
           "AAAAAAAAAAABACoBAR4AAAANAAAAVGltZVRvTmV4dEtleQEAIgH/////AAAAAAABACoBARwAAAALAAAA" +
           "S2V5TGlmZXRpbWUBACIB/////wAAAAAAAQAoAQEAAAABAAAABwAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public SetSecurityKeysMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string securityGroupId = (string)_inputArguments[0];
            string securityPolicyUri = (string)_inputArguments[1];
            uint currentTokenId = (uint)_inputArguments[2];
            byte[] currentKey = (byte[])_inputArguments[3];
            byte[][] futureKeys = (byte[][])_inputArguments[4];
            double timeToNextKey = (double)_inputArguments[5];
            double keyLifetime = (double)_inputArguments[6];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    securityGroupId,
                    securityPolicyUri,
                    currentTokenId,
                    currentKey,
                    futureKeys,
                    timeToNextKey,
                    keyLifetime);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult SetSecurityKeysMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string securityGroupId,
        string securityPolicyUri,
        uint currentTokenId,
        byte[] currentKey,
        byte[][] futureKeys,
        double timeToNextKey,
        double keyLifetime);
    #endif
    #endregion

    #region AddConnectionMethodState Class
    #if (!OPCUA_EXCLUDE_AddConnectionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddConnectionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddConnectionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddConnectionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAEFkZENvbm5lY3Rpb25NZXRob2RUeXBlAQAzQQAvAQAzQTNBAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATkEALgBETkEAAJYBAAAAAQAqAQEe" +
           "AAAADQAAAENvbmZpZ3VyYXRpb24BAAE9/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAT0EALgBET0EAAJYBAAAAAQAqAQEbAAAADAAAAENv" +
           "bm5lY3Rpb25JZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddConnectionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            PubSubConnectionDataType configuration = (PubSubConnectionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId connectionId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    ref connectionId);
            }

            _outputArguments[0] = connectionId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddConnectionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        PubSubConnectionDataType configuration,
        ref NodeId connectionId);
    #endif
    #endregion

    #region RemoveConnectionMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveConnectionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveConnectionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveConnectionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveConnectionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAFJlbW92ZUNvbm5lY3Rpb25NZXRob2RUeXBlAQBnNwAvAQBnN2c3" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAaDcALgBEaDcAAJYBAAAAAQAq" +
           "AQEbAAAADAAAAENvbm5lY3Rpb25JZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveConnectionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId connectionId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    connectionId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveConnectionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId connectionId);
    #endif
    #endregion

    #region PubSubConfigurationState Class
    #if (!OPCUA_EXCLUDE_PubSubConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConfigurationState : FileState
    {
        #region Constructors
        /// <remarks />
        public PubSubConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFB1YlN1YkNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBAIpjAQCK" +
           "Y4pjAAD/////DAAAABVgiQoCAAAAAAAEAAAAU2l6ZQIAAIVWDwAALgBEhVYPAAAJ/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFdyaXRhYmxlAgAAhlYPAAAuAESGVg8AAAH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAMAAAAVXNlcldyaXRhYmxlAgAAh1YPAAAuAESHVg8AAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAAT3BlbkNvdW50AgAAiFYPAAAuAESIVg8AAAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAA" +
           "T3BlbgIAAIxWDwAALwEAPC2MVg8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMC" +
           "AACNVg8AAC4ARI1WDwCWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEAAAAB" +
           "AAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAjlYPAAAuAESOVg8AlgEA" +
           "AAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAENsb3NlAgAAj1YPAAAvAQA/LY9WDwABAf////8BAAAAF2CpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwIAAJBWDwAALgBEkFYPAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUA" +
           "B/////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAgAAkVYP" +
           "AAAvAQBBLZFWDwABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAAJJWDwAALgBE" +
           "klYPAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5n" +
           "dGgABv////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMCAACTVg8AAC4ARJNWDwCWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgB" +
           "AQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUCAACUVg8AAC8BAEQtlFYPAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAlVYPAAAuAESVVg8AlgIAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgIAAJZWDwAALwEA" +
           "Ri2WVg8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAACXVg8AAC4ARJdWDwCW" +
           "AQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAmFYPAAAuAESYVg8AlgEAAAABACoBARcA" +
           "AAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAA" +
           "AAsAAABTZXRQb3NpdGlvbgIAAJlWDwAALwEASS2ZVg8AAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5w" +
           "dXRBcmd1bWVudHMCAACaVg8AAC4ARJpWDwCWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAAoAAABSZXNlcnZlSWRzAQChYwAvAQChY6FjAAABAf////8CAAAAF2CpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAomMALgBEomMAAJYDAAAAAQAqAQEiAAAAEwAAAFRyYW5zcG9ydFBy" +
           "b2ZpbGVVcmkADP////8AAAAAAAEAKgEBIwAAABQAAABOdW1SZXFXcml0ZXJHcm91cElkcwAF/////wAA" +
           "AAAAAQAqAQElAAAAFgAAAE51bVJlcURhdGFTZXRXcml0ZXJJZHMABf////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAMAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAKNjAC4ARKNjAACWAwAA" +
           "AAEAKgEBIQAAABIAAABEZWZhdWx0UHVibGlzaGVySWQAGP////8AAAAAAAEAKgEBIQAAAA4AAABXcml0" +
           "ZXJHcm91cElkcwAFAQAAAAEAAAAAAAAAAAEAKgEBIwAAABAAAABEYXRhU2V0V3JpdGVySWRzAAUBAAAA" +
           "AQAAAAAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAENsb3NlQW5kVXBk" +
           "YXRlAQCkYwAvAQCkY6RjAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEApWMA" +
           "LgBEpWMAAJYDAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBJAAAABUAAABS" +
           "ZXF1aXJlQ29tcGxldGVVcGRhdGUAAf////8AAAAAAAEAKgEBLAAAABcAAABDb25maWd1cmF0aW9uUmVm" +
           "ZXJlbmNlcwEAr2MBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEApmMALgBEpmMAAJYEAAAAAQAqAQEdAAAADgAAAENoYW5nZXNBcHBs" +
           "aWVkAAH/////AAAAAAABACoBASQAAAARAAAAUmVmZXJlbmNlc1Jlc3VsdHMAEwEAAAABAAAAAAAAAAAB" +
           "ACoBASgAAAATAAAAQ29uZmlndXJhdGlvblZhbHVlcwEAsGMBAAAAAQAAAAAAAAAAAQAqAQEnAAAAFAAA" +
           "AENvbmZpZ3VyYXRpb25PYmplY3RzABEBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAABAAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PubSubConfigurationTypeReserveIdsMethodState ReserveIds
        {
            get
            {
                return m_reserveIdsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reserveIdsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reserveIdsMethod = value;
            }
        }

        /// <remarks />
        public PubSubConfigurationTypeCloseAndUpdateMethodState CloseAndUpdate
        {
            get
            {
                return m_closeAndUpdateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeAndUpdateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeAndUpdateMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_reserveIdsMethod != null)
            {
                children.Add(m_reserveIdsMethod);
            }

            if (m_closeAndUpdateMethod != null)
            {
                children.Add(m_closeAndUpdateMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReserveIds:
                {
                    if (createOrReplace)
                    {
                        if (ReserveIds == null)
                        {
                            if (replacement == null)
                            {
                                ReserveIds = new PubSubConfigurationTypeReserveIdsMethodState(this);
                            }
                            else
                            {
                                ReserveIds = (PubSubConfigurationTypeReserveIdsMethodState)replacement;
                            }
                        }
                    }

                    instance = ReserveIds;
                    break;
                }

                case Opc.Ua.BrowseNames.CloseAndUpdate:
                {
                    if (createOrReplace)
                    {
                        if (CloseAndUpdate == null)
                        {
                            if (replacement == null)
                            {
                                CloseAndUpdate = new PubSubConfigurationTypeCloseAndUpdateMethodState(this);
                            }
                            else
                            {
                                CloseAndUpdate = (PubSubConfigurationTypeCloseAndUpdateMethodState)replacement;
                            }
                        }
                    }

                    instance = CloseAndUpdate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PubSubConfigurationTypeReserveIdsMethodState m_reserveIdsMethod;
        private PubSubConfigurationTypeCloseAndUpdateMethodState m_closeAndUpdateMethod;
        #endregion
    }
    #endif
    #endregion

    #region PubSubConfigurationTypeReserveIdsMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubConfigurationTypeReserveIdsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConfigurationTypeReserveIdsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubConfigurationTypeReserveIdsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubConfigurationTypeReserveIdsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAKwAAAFB1YlN1YkNvbmZpZ3VyYXRpb25UeXBlUmVzZXJ2ZUlkc01ldGhv" +
           "ZFR5cGUBAKdjAC8BAKdjp2MAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCo" +
           "YwAuAESoYwAAlgMAAAABACoBASIAAAATAAAAVHJhbnNwb3J0UHJvZmlsZVVyaQAM/////wAAAAAAAQAq" +
           "AQEjAAAAFAAAAE51bVJlcVdyaXRlckdyb3VwSWRzAAX/////AAAAAAABACoBASUAAAAWAAAATnVtUmVx" +
           "RGF0YVNldFdyaXRlcklkcwAF/////wAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAqWMALgBEqWMAAJYDAAAAAQAqAQEhAAAAEgAAAERlZmF1bHRQ" +
           "dWJsaXNoZXJJZAAY/////wAAAAAAAQAqAQEhAAAADgAAAFdyaXRlckdyb3VwSWRzAAUBAAAAAQAAAAAA" +
           "AAAAAQAqAQEjAAAAEAAAAERhdGFTZXRXcml0ZXJJZHMABQEAAAABAAAAAAAAAAABACgBAQAAAAEAAAAD" +
           "AAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubConfigurationTypeReserveIdsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string transportProfileUri = (string)_inputArguments[0];
            ushort numReqWriterGroupIds = (ushort)_inputArguments[1];
            ushort numReqDataSetWriterIds = (ushort)_inputArguments[2];

            object defaultPublisherId = (object)_outputArguments[0];
            ushort[] writerGroupIds = (ushort[])_outputArguments[1];
            ushort[] dataSetWriterIds = (ushort[])_outputArguments[2];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    transportProfileUri,
                    numReqWriterGroupIds,
                    numReqDataSetWriterIds,
                    ref defaultPublisherId,
                    ref writerGroupIds,
                    ref dataSetWriterIds);
            }

            _outputArguments[0] = defaultPublisherId;
            _outputArguments[1] = writerGroupIds;
            _outputArguments[2] = dataSetWriterIds;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubConfigurationTypeReserveIdsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string transportProfileUri,
        ushort numReqWriterGroupIds,
        ushort numReqDataSetWriterIds,
        ref object defaultPublisherId,
        ref ushort[] writerGroupIds,
        ref ushort[] dataSetWriterIds);
    #endif
    #endregion

    #region PubSubConfigurationTypeCloseAndUpdateMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubConfigurationTypeCloseAndUpdateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConfigurationTypeCloseAndUpdateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubConfigurationTypeCloseAndUpdateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubConfigurationTypeCloseAndUpdateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAALwAAAFB1YlN1YkNvbmZpZ3VyYXRpb25UeXBlQ2xvc2VBbmRVcGRhdGVN" +
           "ZXRob2RUeXBlAQCqYwAvAQCqY6pjAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAq2MALgBEq2MAAJYDAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBJAAA" +
           "ABUAAABSZXF1aXJlQ29tcGxldGVVcGRhdGUAAf////8AAAAAAAEAKgEBLAAAABcAAABDb25maWd1cmF0" +
           "aW9uUmVmZXJlbmNlcwEAr2MBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkK" +
           "AgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEArGMALgBErGMAAJYEAAAAAQAqAQEdAAAADgAAAENoYW5n" +
           "ZXNBcHBsaWVkAAH/////AAAAAAABACoBASQAAAARAAAAUmVmZXJlbmNlc1Jlc3VsdHMAEwEAAAABAAAA" +
           "AAAAAAABACoBASgAAAATAAAAQ29uZmlndXJhdGlvblZhbHVlcwEAsGMBAAAAAQAAAAAAAAAAAQAqAQEn" +
           "AAAAFAAAAENvbmZpZ3VyYXRpb25PYmplY3RzABEBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAABAAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubConfigurationTypeCloseAndUpdateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            uint fileHandle = (uint)_inputArguments[0];
            bool requireCompleteUpdate = (bool)_inputArguments[1];
            PubSubConfigurationRefDataType[] configurationReferences = (PubSubConfigurationRefDataType[])ExtensionObject.ToArray(_inputArguments[2], typeof(PubSubConfigurationRefDataType));

            bool changesApplied = (bool)_outputArguments[0];
            StatusCode[] referencesResults = (StatusCode[])_outputArguments[1];
            PubSubConfigurationValueDataType[] configurationValues = (PubSubConfigurationValueDataType[])_outputArguments[2];
            NodeId[] configurationObjects = (NodeId[])_outputArguments[3];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    requireCompleteUpdate,
                    configurationReferences,
                    ref changesApplied,
                    ref referencesResults,
                    ref configurationValues,
                    ref configurationObjects);
            }

            _outputArguments[0] = changesApplied;
            _outputArguments[1] = referencesResults;
            _outputArguments[2] = configurationValues;
            _outputArguments[3] = configurationObjects;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubConfigurationTypeCloseAndUpdateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        uint fileHandle,
        bool requireCompleteUpdate,
        PubSubConfigurationRefDataType[] configurationReferences,
        ref bool changesApplied,
        ref StatusCode[] referencesResults,
        ref PubSubConfigurationValueDataType[] configurationValues,
        ref NodeId[] configurationObjects);
    #endif
    #endregion

    #region PublishedDataSetState Class
    #if (!OPCUA_EXCLUDE_PublishedDataSetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedDataSetState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PublishedDataSetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PublishedDataSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (DataSetClassId != null)
            {
                DataSetClassId.Initialize(context, DataSetClassId_InitializationString);
            }

            if (CyclicDataSet != null)
            {
                CyclicDataSet.Initialize(context, CyclicDataSet_InitializationString);
            }

            if (ExtensionFields != null)
            {
                ExtensionFields.Initialize(context, ExtensionFields_InitializationString);
            }
        }

        #region Initialization String
        private const string DataSetClassId_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAERhdGFTZXRDbGFzc0lkAQB3QQAuAER3QQAAAA7/////AQH/////" +
           "AAAAAA==";

        private const string CyclicDataSet_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEN5Y2xpY0RhdGFTZXQBALFjAC4ARLFjAAAAAf////8BAf////8A" +
           "AAAA";

        private const string ExtensionFields_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAEV4dGVuc2lvbkZpZWxkcwEAeTwALwEAgTx5PAAA/////wIAAAAE" +
           "YYIKBAAAAAAAEQAAAEFkZEV4dGVuc2lvbkZpZWxkAQB6PAAvAQCDPHo8AAABAf////8CAAAAF2CpCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAezwALgBEezwAAJYCAAAAAQAqAQEYAAAACQAAAEZpZWxkTmFt" +
           "ZQAU/////wAAAAAAAQAqAQEZAAAACgAAAEZpZWxkVmFsdWUAGP////8AAAAAAAEAKAEBAAAAAQAAAAIA" +
           "AAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAHw8AC4ARHw8AACWAQAAAAEA" +
           "KgEBFgAAAAcAAABGaWVsZElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoE" +
           "AAAAAAAUAAAAUmVtb3ZlRXh0ZW5zaW9uRmllbGQBAH08AC8BAIY8fTwAAAEB/////wEAAAAXYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQB+PAAuAER+PAAAlgEAAAABACoBARYAAAAHAAAARmllbGRJZAAR" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFB1Ymxpc2hlZERhdGFTZXRUeXBlSW5zdGFuY2UBAK04AQCtOK04" +
           "AAD/////BQAAABVgiQoCAAAAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BALc4AC4ARLc4AAABAAE5" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAERhdGFTZXRNZXRhRGF0YQEAfTsALgBEfTsAAAEAuzj/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAOAAAARGF0YVNldENsYXNzSWQBAHdBAC4ARHdBAAAADv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA0AAABDeWNsaWNEYXRhU2V0AQCxYwAuAESxYwAAAAH/////AQH/////" +
           "AAAAAARggAoBAAAAAAAPAAAARXh0ZW5zaW9uRmllbGRzAQB5PAAvAQCBPHk8AAD/////AgAAAARhggoE" +
           "AAAAAAARAAAAQWRkRXh0ZW5zaW9uRmllbGQBAHo8AC8BAIM8ejwAAAEB/////wIAAAAXYKkKAgAAAAAA" +
           "DgAAAElucHV0QXJndW1lbnRzAQB7PAAuAER7PAAAlgIAAAABACoBARgAAAAJAAAARmllbGROYW1lABT/" +
           "////AAAAAAABACoBARkAAAAKAAAARmllbGRWYWx1ZQAY/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB" +
           "/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAfDwALgBEfDwAAJYBAAAAAQAqAQEW" +
           "AAAABwAAAEZpZWxkSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAA" +
           "ABQAAABSZW1vdmVFeHRlbnNpb25GaWVsZAEAfTwALwEAhjx9PAAAAQH/////AQAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBAH48AC4ARH48AACWAQAAAAEAKgEBFgAAAAcAAABGaWVsZElkABH/////" +
           "AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ConfigurationVersionDataType> ConfigurationVersion
        {
            get
            {
                return m_configurationVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_configurationVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_configurationVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<DataSetMetaDataType> DataSetMetaData
        {
            get
            {
                return m_dataSetMetaData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMetaData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMetaData = value;
            }
        }

        /// <remarks />
        public PropertyState<Guid> DataSetClassId
        {
            get
            {
                return m_dataSetClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> CyclicDataSet
        {
            get
            {
                return m_cyclicDataSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cyclicDataSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cyclicDataSet = value;
            }
        }

        /// <remarks />
        public ExtensionFieldsState ExtensionFields
        {
            get
            {
                return m_extensionFields;
            }

            set
            {
                if (!Object.ReferenceEquals(m_extensionFields, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_extensionFields = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_configurationVersion != null)
            {
                children.Add(m_configurationVersion);
            }

            if (m_dataSetMetaData != null)
            {
                children.Add(m_dataSetMetaData);
            }

            if (m_dataSetClassId != null)
            {
                children.Add(m_dataSetClassId);
            }

            if (m_cyclicDataSet != null)
            {
                children.Add(m_cyclicDataSet);
            }

            if (m_extensionFields != null)
            {
                children.Add(m_extensionFields);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConfigurationVersion:
                {
                    if (createOrReplace)
                    {
                        if (ConfigurationVersion == null)
                        {
                            if (replacement == null)
                            {
                                ConfigurationVersion = new PropertyState<ConfigurationVersionDataType>(this);
                            }
                            else
                            {
                                ConfigurationVersion = (PropertyState<ConfigurationVersionDataType>)replacement;
                            }
                        }
                    }

                    instance = ConfigurationVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetMetaData:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMetaData == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMetaData = new PropertyState<DataSetMetaDataType>(this);
                            }
                            else
                            {
                                DataSetMetaData = (PropertyState<DataSetMetaDataType>)replacement;
                            }
                        }
                    }

                    instance = DataSetMetaData;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetClassId:
                {
                    if (createOrReplace)
                    {
                        if (DataSetClassId == null)
                        {
                            if (replacement == null)
                            {
                                DataSetClassId = new PropertyState<Guid>(this);
                            }
                            else
                            {
                                DataSetClassId = (PropertyState<Guid>)replacement;
                            }
                        }
                    }

                    instance = DataSetClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.CyclicDataSet:
                {
                    if (createOrReplace)
                    {
                        if (CyclicDataSet == null)
                        {
                            if (replacement == null)
                            {
                                CyclicDataSet = new PropertyState<bool>(this);
                            }
                            else
                            {
                                CyclicDataSet = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = CyclicDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.ExtensionFields:
                {
                    if (createOrReplace)
                    {
                        if (ExtensionFields == null)
                        {
                            if (replacement == null)
                            {
                                ExtensionFields = new ExtensionFieldsState(this);
                            }
                            else
                            {
                                ExtensionFields = (ExtensionFieldsState)replacement;
                            }
                        }
                    }

                    instance = ExtensionFields;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ConfigurationVersionDataType> m_configurationVersion;
        private PropertyState<DataSetMetaDataType> m_dataSetMetaData;
        private PropertyState<Guid> m_dataSetClassId;
        private PropertyState<bool> m_cyclicDataSet;
        private ExtensionFieldsState m_extensionFields;
        #endregion
    }
    #endif
    #endregion

    #region ExtensionFieldsState Class
    #if (!OPCUA_EXCLUDE_ExtensionFieldsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExtensionFieldsState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ExtensionFieldsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExtensionFieldsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAEV4dGVuc2lvbkZpZWxkc1R5cGVJbnN0YW5jZQEAgTwBAIE8gTwA" +
           "AP////8CAAAABGGCCgQAAAAAABEAAABBZGRFeHRlbnNpb25GaWVsZAEAgzwALwEAgzyDPAAAAQH/////" +
           "AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIQ8AC4ARIQ8AACWAgAAAAEAKgEBGAAAAAkA" +
           "AABGaWVsZE5hbWUAFP////8AAAAAAAEAKgEBGQAAAAoAAABGaWVsZFZhbHVlABj/////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCFPAAuAESF" +
           "PAAAlgEAAAABACoBARYAAAAHAAAARmllbGRJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAAFAAAAFJlbW92ZUV4dGVuc2lvbkZpZWxkAQCGPAAvAQCGPIY8AAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAhzwALgBEhzwAAJYBAAAAAQAqAQEWAAAABwAA" +
           "AEZpZWxkSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddExtensionFieldMethodState AddExtensionField
        {
            get
            {
                return m_addExtensionFieldMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addExtensionFieldMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addExtensionFieldMethod = value;
            }
        }

        /// <remarks />
        public RemoveExtensionFieldMethodState RemoveExtensionField
        {
            get
            {
                return m_removeExtensionFieldMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeExtensionFieldMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeExtensionFieldMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addExtensionFieldMethod != null)
            {
                children.Add(m_addExtensionFieldMethod);
            }

            if (m_removeExtensionFieldMethod != null)
            {
                children.Add(m_removeExtensionFieldMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddExtensionField:
                {
                    if (createOrReplace)
                    {
                        if (AddExtensionField == null)
                        {
                            if (replacement == null)
                            {
                                AddExtensionField = new AddExtensionFieldMethodState(this);
                            }
                            else
                            {
                                AddExtensionField = (AddExtensionFieldMethodState)replacement;
                            }
                        }
                    }

                    instance = AddExtensionField;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveExtensionField:
                {
                    if (createOrReplace)
                    {
                        if (RemoveExtensionField == null)
                        {
                            if (replacement == null)
                            {
                                RemoveExtensionField = new RemoveExtensionFieldMethodState(this);
                            }
                            else
                            {
                                RemoveExtensionField = (RemoveExtensionFieldMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveExtensionField;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddExtensionFieldMethodState m_addExtensionFieldMethod;
        private RemoveExtensionFieldMethodState m_removeExtensionFieldMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddExtensionFieldMethodState Class
    #if (!OPCUA_EXCLUDE_AddExtensionFieldMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddExtensionFieldMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddExtensionFieldMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddExtensionFieldMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAEFkZEV4dGVuc2lvbkZpZWxkTWV0aG9kVHlwZQEAiDwALwEAiDyI" +
           "PAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIk8AC4ARIk8AACWAgAAAAEA" +
           "KgEBGAAAAAkAAABGaWVsZE5hbWUAFP////8AAAAAAAEAKgEBGQAAAAoAAABGaWVsZFZhbHVlABj/////" +
           "AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRz" +
           "AQCKPAAuAESKPAAAlgEAAAABACoBARYAAAAHAAAARmllbGRJZAAR/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddExtensionFieldMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            QualifiedName fieldName = (QualifiedName)_inputArguments[0];
            object fieldValue = (object)_inputArguments[1];

            NodeId fieldId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fieldName,
                    fieldValue,
                    ref fieldId);
            }

            _outputArguments[0] = fieldId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddExtensionFieldMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        QualifiedName fieldName,
        object fieldValue,
        ref NodeId fieldId);
    #endif
    #endregion

    #region RemoveExtensionFieldMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveExtensionFieldMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveExtensionFieldMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveExtensionFieldMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveExtensionFieldMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAFJlbW92ZUV4dGVuc2lvbkZpZWxkTWV0aG9kVHlwZQEAizwALwEA" +
           "izyLPAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIw8AC4ARIw8AACWAQAA" +
           "AAEAKgEBFgAAAAcAAABGaWVsZElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveExtensionFieldMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId fieldId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fieldId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveExtensionFieldMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId fieldId);
    #endif
    #endregion

    #region PublishedDataItemsState Class
    #if (!OPCUA_EXCLUDE_PublishedDataItemsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedDataItemsState : PublishedDataSetState
    {
        #region Constructors
        /// <remarks />
        public PublishedDataItemsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PublishedDataItemsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddVariables != null)
            {
                AddVariables.Initialize(context, AddVariables_InitializationString);
            }

            if (RemoveVariables != null)
            {
                RemoveVariables.Initialize(context, RemoveVariables_InitializationString);
            }
        }

        #region Initialization String
        private const string AddVariables_InitializationString =
           "//////////8EYYIKBAAAAAAADAAAAEFkZFZhcmlhYmxlcwEA2zgALwEA2zjbOAAAAQH/////AgAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANw4AC4ARNw4AACWBAAAAAEAKgEBJQAAABQAAABDb25m" +
           "aWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASMAAAAQAAAARmllbGROYW1lQWxpYXNlcwAM" +
           "AQAAAAEAAAAAAAAAAAEAKgEBIQAAAA4AAABQcm9tb3RlZEZpZWxkcwABAQAAAAEAAAAAAAAAAAEAKgEB" +
           "IwAAAA4AAABWYXJpYWJsZXNUb0FkZAEAwTcBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAABAAAAAEB////" +
           "/wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA3TgALgBE3TgAAJYCAAAAAQAqAQEoAAAA" +
           "FwAAAE5ld0NvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAAAAEAKgEBHQAAAAoAAABBZGRSZXN1" +
           "bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string RemoveVariables_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFJlbW92ZVZhcmlhYmxlcwEA3jgALwEA3jjeOAAAAQH/////AgAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAN84AC4ARN84AACWAgAAAAEAKgEBJQAAABQAAABD" +
           "b25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASQAAAARAAAAVmFyaWFibGVzVG9SZW1v" +
           "dmUABwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQDgOAAuAETgOAAAlgIAAAABACoBASgAAAAXAAAATmV3Q29uZmlndXJhdGlvblZl" +
           "cnNpb24BAAE5/////wAAAAAAAQAqAQEgAAAADQAAAFJlbW92ZVJlc3VsdHMAEwEAAAABAAAAAAAAAAAB" +
           "ACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFB1Ymxpc2hlZERhdGFJdGVtc1R5cGVJbnN0YW5jZQEAxjgBAMY4" +
           "xjgAAP////8FAAAAFWCJCgIAAAAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgIAAOFWDwAALgBE4VYP" +
           "AAEAATn/////AQH/////AAAAABVgiQoCAAAAAAAPAAAARGF0YVNldE1ldGFEYXRhAgAA4lYPAAAuAETi" +
           "Vg8AAQC7OP////8BAf////8AAAAAF2CJCgIAAAAAAA0AAABQdWJsaXNoZWREYXRhAQDUOAAuAETUOAAA" +
           "AQDBNwEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAADAAAAEFkZFZhcmlhYmxlcwEA2zgALwEA" +
           "2zjbOAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANw4AC4ARNw4AACWBAAA" +
           "AAEAKgEBJQAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASMAAAAQAAAA" +
           "RmllbGROYW1lQWxpYXNlcwAMAQAAAAEAAAAAAAAAAAEAKgEBIQAAAA4AAABQcm9tb3RlZEZpZWxkcwAB" +
           "AQAAAAEAAAAAAAAAAAEAKgEBIwAAAA4AAABWYXJpYWJsZXNUb0FkZAEAwTcBAAAAAQAAAAAAAAAAAQAo" +
           "AQEAAAABAAAABAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA3TgALgBE" +
           "3TgAAJYCAAAAAQAqAQEoAAAAFwAAAE5ld0NvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAAAAEA" +
           "KgEBHQAAAAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAADwAAAFJlbW92ZVZhcmlhYmxlcwEA3jgALwEA3jjeOAAAAQH/////AgAAABdgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAN84AC4ARN84AACWAgAAAAEAKgEBJQAAABQAAABDb25maWd1" +
           "cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASQAAAARAAAAVmFyaWFibGVzVG9SZW1vdmUABwEA" +
           "AAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQDgOAAuAETgOAAAlgIAAAABACoBASgAAAAXAAAATmV3Q29uZmlndXJhdGlvblZlcnNpb24B" +
           "AAE5/////wAAAAAAAQAqAQEgAAAADQAAAFJlbW92ZVJlc3VsdHMAEwEAAAABAAAAAAAAAAABACgBAQAA" +
           "AAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<PublishedVariableDataType[]> PublishedData
        {
            get
            {
                return m_publishedData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishedData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishedData = value;
            }
        }

        /// <remarks />
        public PublishedDataItemsAddVariablesMethodState AddVariables
        {
            get
            {
                return m_addVariablesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addVariablesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addVariablesMethod = value;
            }
        }

        /// <remarks />
        public PublishedDataItemsRemoveVariablesMethodState RemoveVariables
        {
            get
            {
                return m_removeVariablesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeVariablesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeVariablesMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_publishedData != null)
            {
                children.Add(m_publishedData);
            }

            if (m_addVariablesMethod != null)
            {
                children.Add(m_addVariablesMethod);
            }

            if (m_removeVariablesMethod != null)
            {
                children.Add(m_removeVariablesMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PublishedData:
                {
                    if (createOrReplace)
                    {
                        if (PublishedData == null)
                        {
                            if (replacement == null)
                            {
                                PublishedData = new PropertyState<PublishedVariableDataType[]>(this);
                            }
                            else
                            {
                                PublishedData = (PropertyState<PublishedVariableDataType[]>)replacement;
                            }
                        }
                    }

                    instance = PublishedData;
                    break;
                }

                case Opc.Ua.BrowseNames.AddVariables:
                {
                    if (createOrReplace)
                    {
                        if (AddVariables == null)
                        {
                            if (replacement == null)
                            {
                                AddVariables = new PublishedDataItemsAddVariablesMethodState(this);
                            }
                            else
                            {
                                AddVariables = (PublishedDataItemsAddVariablesMethodState)replacement;
                            }
                        }
                    }

                    instance = AddVariables;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveVariables:
                {
                    if (createOrReplace)
                    {
                        if (RemoveVariables == null)
                        {
                            if (replacement == null)
                            {
                                RemoveVariables = new PublishedDataItemsRemoveVariablesMethodState(this);
                            }
                            else
                            {
                                RemoveVariables = (PublishedDataItemsRemoveVariablesMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveVariables;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<PublishedVariableDataType[]> m_publishedData;
        private PublishedDataItemsAddVariablesMethodState m_addVariablesMethod;
        private PublishedDataItemsRemoveVariablesMethodState m_removeVariablesMethod;
        #endregion
    }
    #endif
    #endregion

    #region PublishedDataItemsAddVariablesMethodState Class
    #if (!OPCUA_EXCLUDE_PublishedDataItemsAddVariablesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedDataItemsAddVariablesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PublishedDataItemsAddVariablesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PublishedDataItemsAddVariablesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAKAAAAFB1Ymxpc2hlZERhdGFJdGVtc0FkZFZhcmlhYmxlc01ldGhvZFR5" +
           "cGUBAOQ4AC8BAOQ45DgAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDlOAAu" +
           "AETlOAAAlgQAAAABACoBASUAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BAAE5/////wAAAAAAAQAq" +
           "AQEjAAAAEAAAAEZpZWxkTmFtZUFsaWFzZXMADAEAAAABAAAAAAAAAAABACoBASEAAAAOAAAAUHJvbW90" +
           "ZWRGaWVsZHMAAQEAAAABAAAAAAAAAAABACoBASMAAAAOAAAAVmFyaWFibGVzVG9BZGQBAME3AQAAAAEA" +
           "AAAAAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBAOY4AC4AROY4AACWAgAAAAEAKgEBKAAAABcAAABOZXdDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/" +
           "////AAAAAAABACoBAR0AAAAKAAAAQWRkUmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAIA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PublishedDataItemsAddVariablesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            string[] fieldNameAliases = (string[])_inputArguments[1];
            bool[] promotedFields = (bool[])_inputArguments[2];
            PublishedVariableDataType[] variablesToAdd = (PublishedVariableDataType[])ExtensionObject.ToArray(_inputArguments[3], typeof(PublishedVariableDataType));

            ConfigurationVersionDataType newConfigurationVersion = (ConfigurationVersionDataType)_outputArguments[0];
            StatusCode[] addResults = (StatusCode[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    fieldNameAliases,
                    promotedFields,
                    variablesToAdd,
                    ref newConfigurationVersion,
                    ref addResults);
            }

            _outputArguments[0] = newConfigurationVersion;
            _outputArguments[1] = addResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PublishedDataItemsAddVariablesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        string[] fieldNameAliases,
        bool[] promotedFields,
        PublishedVariableDataType[] variablesToAdd,
        ref ConfigurationVersionDataType newConfigurationVersion,
        ref StatusCode[] addResults);
    #endif
    #endregion

    #region PublishedDataItemsRemoveVariablesMethodState Class
    #if (!OPCUA_EXCLUDE_PublishedDataItemsRemoveVariablesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedDataItemsRemoveVariablesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PublishedDataItemsRemoveVariablesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PublishedDataItemsRemoveVariablesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAKwAAAFB1Ymxpc2hlZERhdGFJdGVtc1JlbW92ZVZhcmlhYmxlc01ldGhv" +
           "ZFR5cGUBAOc4AC8BAOc45zgAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDo" +
           "OAAuAEToOAAAlgIAAAABACoBASUAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BAAE5/////wAAAAAA" +
           "AQAqAQEkAAAAEQAAAFZhcmlhYmxlc1RvUmVtb3ZlAAcBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAA" +
           "AAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA6TgALgBE6TgAAJYCAAAAAQAq" +
           "AQEoAAAAFwAAAE5ld0NvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAAAAEAKgEBIAAAAA0AAABS" +
           "ZW1vdmVSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PublishedDataItemsRemoveVariablesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            uint[] variablesToRemove = (uint[])_inputArguments[1];

            ConfigurationVersionDataType newConfigurationVersion = (ConfigurationVersionDataType)_outputArguments[0];
            StatusCode[] removeResults = (StatusCode[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    variablesToRemove,
                    ref newConfigurationVersion,
                    ref removeResults);
            }

            _outputArguments[0] = newConfigurationVersion;
            _outputArguments[1] = removeResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PublishedDataItemsRemoveVariablesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        uint[] variablesToRemove,
        ref ConfigurationVersionDataType newConfigurationVersion,
        ref StatusCode[] removeResults);
    #endif
    #endregion

    #region PublishedEventsState Class
    #if (!OPCUA_EXCLUDE_PublishedEventsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedEventsState : PublishedDataSetState
    {
        #region Constructors
        /// <remarks />
        public PublishedEventsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PublishedEventsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ModifyFieldSelection != null)
            {
                ModifyFieldSelection.Initialize(context, ModifyFieldSelection_InitializationString);
            }
        }

        #region Initialization String
        private const string ModifyFieldSelection_InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAE1vZGlmeUZpZWxkU2VsZWN0aW9uAQDMOgAvAQDMOsw6AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAzToALgBEzToAAJYEAAAAAQAqAQElAAAA" +
           "FAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAAAAEAKgEBIwAAABAAAABGaWVsZE5hbWVB" +
           "bGlhc2VzAAwBAAAAAQAAAAAAAAAAAQAqAQEhAAAADgAAAFByb21vdGVkRmllbGRzAAEBAAAAAQAAAAAA" +
           "AAAAAQAqAQEjAAAADgAAAFNlbGVjdGVkRmllbGRzAQBZAgEAAAABAAAAAAAAAAABACgBAQAAAAEAAAAE" +
           "AAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCdPAAuAESdPAAAlgEAAAAB" +
           "ACoBASgAAAAXAAAATmV3Q29uZmlndXJhdGlvblZlcnNpb24BAAE5/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFB1Ymxpc2hlZEV2ZW50c1R5cGVJbnN0YW5jZQEA7DgBAOw47DgA" +
           "AP////8GAAAAFWCJCgIAAAAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgIAADFXDwAALgBEMVcPAAEA" +
           "ATn/////AQH/////AAAAABVgiQoCAAAAAAAPAAAARGF0YVNldE1ldGFEYXRhAgAAMlcPAAAuAEQyVw8A" +
           "AQC7OP////8BAf////8AAAAAFWDJCgIAAAATAAAAUHViU3ViRXZlbnROb3RpZmllcgAADQAAAEV2ZW50" +
           "Tm90aWZpZXIBAPo4AC4ARPo4AAAAEf////8BAf////8AAAAAF2CJCgIAAAAAAA4AAABTZWxlY3RlZEZp" +
           "ZWxkcwEA+zgALgBE+zgAAAEAWQIBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAAYAAABGaWx0" +
           "ZXIBAPw4AC4ARPw4AAABAEoC/////wEB/////wAAAAAEYYIKBAAAAAAAFAAAAE1vZGlmeUZpZWxkU2Vs" +
           "ZWN0aW9uAQDMOgAvAQDMOsw6AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "zToALgBEzToAAJYEAAAAAQAqAQElAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAA" +
           "AAEAKgEBIwAAABAAAABGaWVsZE5hbWVBbGlhc2VzAAwBAAAAAQAAAAAAAAAAAQAqAQEhAAAADgAAAFBy" +
           "b21vdGVkRmllbGRzAAEBAAAAAQAAAAAAAAAAAQAqAQEjAAAADgAAAFNlbGVjdGVkRmllbGRzAQBZAgEA" +
           "AAABAAAAAAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQCdPAAuAESdPAAAlgEAAAABACoBASgAAAAXAAAATmV3Q29uZmlndXJhdGlvblZlcnNpb24B" +
           "AAE5/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> PubSubEventNotifier
        {
            get
            {
                return m_pubSubEventNotifier;
            }

            set
            {
                if (!Object.ReferenceEquals(m_pubSubEventNotifier, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_pubSubEventNotifier = value;
            }
        }

        /// <remarks />
        public PropertyState<SimpleAttributeOperand[]> SelectedFields
        {
            get
            {
                return m_selectedFields;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selectedFields, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selectedFields = value;
            }
        }

        /// <remarks />
        public PropertyState<ContentFilter> Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_filter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_filter = value;
            }
        }

        /// <remarks />
        public PublishedEventsTypeModifyFieldSelectionMethodState ModifyFieldSelection
        {
            get
            {
                return m_modifyFieldSelectionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyFieldSelectionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyFieldSelectionMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_pubSubEventNotifier != null)
            {
                children.Add(m_pubSubEventNotifier);
            }

            if (m_selectedFields != null)
            {
                children.Add(m_selectedFields);
            }

            if (m_filter != null)
            {
                children.Add(m_filter);
            }

            if (m_modifyFieldSelectionMethod != null)
            {
                children.Add(m_modifyFieldSelectionMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PubSubEventNotifier:
                {
                    if (createOrReplace)
                    {
                        if (PubSubEventNotifier == null)
                        {
                            if (replacement == null)
                            {
                                PubSubEventNotifier = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                PubSubEventNotifier = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = PubSubEventNotifier;
                    break;
                }

                case Opc.Ua.BrowseNames.SelectedFields:
                {
                    if (createOrReplace)
                    {
                        if (SelectedFields == null)
                        {
                            if (replacement == null)
                            {
                                SelectedFields = new PropertyState<SimpleAttributeOperand[]>(this);
                            }
                            else
                            {
                                SelectedFields = (PropertyState<SimpleAttributeOperand[]>)replacement;
                            }
                        }
                    }

                    instance = SelectedFields;
                    break;
                }

                case Opc.Ua.BrowseNames.Filter:
                {
                    if (createOrReplace)
                    {
                        if (Filter == null)
                        {
                            if (replacement == null)
                            {
                                Filter = new PropertyState<ContentFilter>(this);
                            }
                            else
                            {
                                Filter = (PropertyState<ContentFilter>)replacement;
                            }
                        }
                    }

                    instance = Filter;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyFieldSelection:
                {
                    if (createOrReplace)
                    {
                        if (ModifyFieldSelection == null)
                        {
                            if (replacement == null)
                            {
                                ModifyFieldSelection = new PublishedEventsTypeModifyFieldSelectionMethodState(this);
                            }
                            else
                            {
                                ModifyFieldSelection = (PublishedEventsTypeModifyFieldSelectionMethodState)replacement;
                            }
                        }
                    }

                    instance = ModifyFieldSelection;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_pubSubEventNotifier;
        private PropertyState<SimpleAttributeOperand[]> m_selectedFields;
        private PropertyState<ContentFilter> m_filter;
        private PublishedEventsTypeModifyFieldSelectionMethodState m_modifyFieldSelectionMethod;
        #endregion
    }
    #endif
    #endregion

    #region DataSetFolderState Class
    #if (!OPCUA_EXCLUDE_DataSetFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public DataSetFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddPublishedDataItems != null)
            {
                AddPublishedDataItems.Initialize(context, AddPublishedDataItems_InitializationString);
            }

            if (AddPublishedEvents != null)
            {
                AddPublishedEvents.Initialize(context, AddPublishedEvents_InitializationString);
            }

            if (AddPublishedDataItemsTemplate != null)
            {
                AddPublishedDataItemsTemplate.Initialize(context, AddPublishedDataItemsTemplate_InitializationString);
            }

            if (AddPublishedEventsTemplate != null)
            {
                AddPublishedEventsTemplate.Initialize(context, AddPublishedEventsTemplate_InitializationString);
            }

            if (RemovePublishedDataSet != null)
            {
                RemovePublishedDataSet.Initialize(context, RemovePublishedDataSet_InitializationString);
            }

            if (AddDataSetFolder != null)
            {
                AddDataSetFolder.Initialize(context, AddDataSetFolder_InitializationString);
            }

            if (RemoveDataSetFolder != null)
            {
                RemoveDataSetFolder.Initialize(context, RemoveDataSetFolder_InitializationString);
            }
        }

        #region Initialization String
        private const string AddPublishedDataItems_InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEFkZFB1Ymxpc2hlZERhdGFJdGVtcwEAnTgALwEAnTidOAAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJ44AC4ARJ44AACWBAAAAAEAKgEBEwAA" +
           "AAQAAABOYW1lAAz/////AAAAAAABACoBASMAAAAQAAAARmllbGROYW1lQWxpYXNlcwAMAQAAAAEAAAAA" +
           "AAAAAAEAKgEBHwAAAAoAAABGaWVsZEZsYWdzAQAgPgEAAAABAAAAAAAAAAABACoBASMAAAAOAAAAVmFy" +
           "aWFibGVzVG9BZGQBAME3AQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAJ84AC4ARJ84AACWAwAAAAEAKgEBHAAAAA0AAABEYXRhU2V0" +
           "Tm9kZUlkABH/////AAAAAAABACoBASUAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BAAE5/////wAA" +
           "AAAAAQAqAQEdAAAACgAAAEFkZFJlc3VsdHMAEwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAADAAAAAQH/" +
           "////AAAAAA==";

        private const string AddPublishedEvents_InitializationString =
           "//////////8EYYIKBAAAAAAAEgAAAEFkZFB1Ymxpc2hlZEV2ZW50cwEAoDgALwEAoDigOAAAAQH/////" +
           "AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKE4AC4ARKE4AACWBgAAAAEAKgEBEwAAAAQA" +
           "AABOYW1lAAz/////AAAAAAABACoBARwAAAANAAAARXZlbnROb3RpZmllcgAR/////wAAAAAAAQAqAQEj" +
           "AAAAEAAAAEZpZWxkTmFtZUFsaWFzZXMADAEAAAABAAAAAAAAAAABACoBAR8AAAAKAAAARmllbGRGbGFn" +
           "cwEAID4BAAAAAQAAAAAAAAAAAQAqAQEjAAAADgAAAFNlbGVjdGVkRmllbGRzAQBZAgEAAAABAAAAAAAA" +
           "AAABACoBARcAAAAGAAAARmlsdGVyAQBKAv////8AAAAAAAEAKAEBAAAAAQAAAAYAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAKI4AC4ARKI4AACWAgAAAAEAKgEBJQAAABQAAABD" +
           "b25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBARwAAAANAAAARGF0YVNldE5vZGVJZAAR" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";

        private const string AddPublishedDataItemsTemplate_InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAEFkZFB1Ymxpc2hlZERhdGFJdGVtc1RlbXBsYXRlAQAnQgAvAQAn" +
           "QidCAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAPkIALgBEPkIAAJYDAAAA" +
           "AQAqAQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKgEBIAAAAA8AAABEYXRhU2V0TWV0YURhdGEBALs4" +
           "/////wAAAAAAAQAqAQEjAAAADgAAAFZhcmlhYmxlc1RvQWRkAQDBNwEAAAABAAAAAAAAAAABACgBAQAA" +
           "AAEAAAADAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQA/QgAuAEQ/QgAA" +
           "lgIAAAABACoBARwAAAANAAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAqAQEdAAAACgAAAEFkZFJl" +
           "c3VsdHMAEwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";

        private const string AddPublishedEventsTemplate_InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEFkZFB1Ymxpc2hlZEV2ZW50c1RlbXBsYXRlAQBAQgAvAQBAQkBC" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAQUIALgBEQUIAAJYFAAAAAQAq" +
           "AQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKgEBIAAAAA8AAABEYXRhU2V0TWV0YURhdGEBALs4////" +
           "/wAAAAAAAQAqAQEcAAAADQAAAEV2ZW50Tm90aWZpZXIAEf////8AAAAAAAEAKgEBIwAAAA4AAABTZWxl" +
           "Y3RlZEZpZWxkcwEAWQIBAAAAAQAAAAAAAAAAAQAqAQEXAAAABgAAAEZpbHRlcgEASgL/////AAAAAAAB" +
           "ACgBAQAAAAEAAAAFAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBLQgAu" +
           "AERLQgAAlgEAAAABACoBARwAAAANAAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAA=";

        private const string RemovePublishedDataSet_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFJlbW92ZVB1Ymxpc2hlZERhdGFTZXQBAKM4AC8BAKM4ozgAAAEB" +
           "/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCkOAAuAESkOAAAlgEAAAABACoBARwA" +
           "AAANAAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string AddDataSetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEFkZERhdGFTZXRGb2xkZXIBAGJCAC8BAGJCYkIAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBjQgAuAERjQgAAlgEAAAABACoBARMAAAAEAAAA" +
           "TmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEAZEIALgBEZEIAAJYBAAAAAQAqAQEiAAAAEwAAAERhdGFTZXRGb2xkZXJOb2RlSWQA" +
           "Ef////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveDataSetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAFJlbW92ZURhdGFTZXRGb2xkZXIBAGVCAC8BAGVCZUIAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBvQgAuAERvQgAAlgEAAAABACoBASIAAAAT" +
           "AAAARGF0YVNldEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAERhdGFTZXRGb2xkZXJUeXBlSW5zdGFuY2UBAI04AQCNOI04AAD/" +
           "////BwAAAARhggoEAAAAAAAVAAAAQWRkUHVibGlzaGVkRGF0YUl0ZW1zAQCdOAAvAQCdOJ04AAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAnjgALgBEnjgAAJYEAAAAAQAqAQETAAAA" +
           "BAAAAE5hbWUADP////8AAAAAAAEAKgEBIwAAABAAAABGaWVsZE5hbWVBbGlhc2VzAAwBAAAAAQAAAAAA" +
           "AAAAAQAqAQEfAAAACgAAAEZpZWxkRmxhZ3MBACA+AQAAAAEAAAAAAAAAAAEAKgEBIwAAAA4AAABWYXJp" +
           "YWJsZXNUb0FkZAEAwTcBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAABAAAAAEB/////wAAAAAXYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAnzgALgBEnzgAAJYDAAAAAQAqAQEcAAAADQAAAERhdGFTZXRO" +
           "b2RlSWQAEf////8AAAAAAAEAKgEBJQAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAA" +
           "AAABACoBAR0AAAAKAAAAQWRkUmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAMAAAABAf//" +
           "//8AAAAABGGCCgQAAAAAABIAAABBZGRQdWJsaXNoZWRFdmVudHMBAKA4AC8BAKA4oDgAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQChOAAuAEShOAAAlgYAAAABACoBARMAAAAEAAAA" +
           "TmFtZQAM/////wAAAAAAAQAqAQEcAAAADQAAAEV2ZW50Tm90aWZpZXIAEf////8AAAAAAAEAKgEBIwAA" +
           "ABAAAABGaWVsZE5hbWVBbGlhc2VzAAwBAAAAAQAAAAAAAAAAAQAqAQEfAAAACgAAAEZpZWxkRmxhZ3MB" +
           "ACA+AQAAAAEAAAAAAAAAAAEAKgEBIwAAAA4AAABTZWxlY3RlZEZpZWxkcwEAWQIBAAAAAQAAAAAAAAAA" +
           "AQAqAQEXAAAABgAAAEZpbHRlcgEASgL/////AAAAAAABACgBAQAAAAEAAAAGAAAAAQH/////AAAAABdg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCiOAAuAESiOAAAlgIAAAABACoBASUAAAAUAAAAQ29u" +
           "ZmlndXJhdGlvblZlcnNpb24BAAE5/////wAAAAAAAQAqAQEcAAAADQAAAERhdGFTZXROb2RlSWQAEf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAABGGCCgQAAAAAAB0AAABBZGRQdWJsaXNoZWRE" +
           "YXRhSXRlbXNUZW1wbGF0ZQEAJ0IALwEAJ0InQgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRB" +
           "cmd1bWVudHMBAD5CAC4ARD5CAACWAwAAAAEAKgEBEwAAAAQAAABOYW1lAAz/////AAAAAAABACoBASAA" +
           "AAAPAAAARGF0YVNldE1ldGFEYXRhAQC7OP////8AAAAAAAEAKgEBIwAAAA4AAABWYXJpYWJsZXNUb0Fk" +
           "ZAEAwTcBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEAP0IALgBEP0IAAJYCAAAAAQAqAQEcAAAADQAAAERhdGFTZXROb2RlSWQAEf//" +
           "//8AAAAAAAEAKgEBHQAAAAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAAGgAAAEFkZFB1Ymxpc2hlZEV2ZW50c1RlbXBsYXRlAQBAQgAvAQBA" +
           "QkBCAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAQUIALgBEQUIAAJYFAAAA" +
           "AQAqAQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKgEBIAAAAA8AAABEYXRhU2V0TWV0YURhdGEBALs4" +
           "/////wAAAAAAAQAqAQEcAAAADQAAAEV2ZW50Tm90aWZpZXIAEf////8AAAAAAAEAKgEBIwAAAA4AAABT" +
           "ZWxlY3RlZEZpZWxkcwEAWQIBAAAAAQAAAAAAAAAAAQAqAQEXAAAABgAAAEZpbHRlcgEASgL/////AAAA" +
           "AAABACgBAQAAAAEAAAAFAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBL" +
           "QgAuAERLQgAAlgEAAAABACoBARwAAAANAAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAFgAAAFJlbW92ZVB1Ymxpc2hlZERhdGFTZXQBAKM4AC8B" +
           "AKM4ozgAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCkOAAuAESkOAAAlgEA" +
           "AAABACoBARwAAAANAAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAAEAAAAEFkZERhdGFTZXRGb2xkZXIBAGJCAC8BAGJCYkIAAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBjQgAuAERjQgAAlgEAAAABACoBARMAAAAEAAAATmFt" +
           "ZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAZEIALgBEZEIAAJYBAAAAAQAqAQEiAAAAEwAAAERhdGFTZXRGb2xkZXJOb2RlSWQAEf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAABMAAABSZW1vdmVEYXRhU2V0" +
           "Rm9sZGVyAQBlQgAvAQBlQmVCAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "b0IALgBEb0IAAJYBAAAAAQAqAQEiAAAAEwAAAERhdGFTZXRGb2xkZXJOb2RlSWQAEf////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddPublishedDataItemsMethodState AddPublishedDataItems
        {
            get
            {
                return m_addPublishedDataItemsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPublishedDataItemsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPublishedDataItemsMethod = value;
            }
        }

        /// <remarks />
        public AddPublishedEventsMethodState AddPublishedEvents
        {
            get
            {
                return m_addPublishedEventsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPublishedEventsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPublishedEventsMethod = value;
            }
        }

        /// <remarks />
        public AddPublishedDataItemsTemplateMethodState AddPublishedDataItemsTemplate
        {
            get
            {
                return m_addPublishedDataItemsTemplateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPublishedDataItemsTemplateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPublishedDataItemsTemplateMethod = value;
            }
        }

        /// <remarks />
        public AddPublishedEventsTemplateMethodState AddPublishedEventsTemplate
        {
            get
            {
                return m_addPublishedEventsTemplateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPublishedEventsTemplateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPublishedEventsTemplateMethod = value;
            }
        }

        /// <remarks />
        public RemovePublishedDataSetMethodState RemovePublishedDataSet
        {
            get
            {
                return m_removePublishedDataSetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removePublishedDataSetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removePublishedDataSetMethod = value;
            }
        }

        /// <remarks />
        public AddDataSetFolderMethodState AddDataSetFolder
        {
            get
            {
                return m_addDataSetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addDataSetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addDataSetFolderMethod = value;
            }
        }

        /// <remarks />
        public RemoveDataSetFolderMethodState RemoveDataSetFolder
        {
            get
            {
                return m_removeDataSetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeDataSetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeDataSetFolderMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addPublishedDataItemsMethod != null)
            {
                children.Add(m_addPublishedDataItemsMethod);
            }

            if (m_addPublishedEventsMethod != null)
            {
                children.Add(m_addPublishedEventsMethod);
            }

            if (m_addPublishedDataItemsTemplateMethod != null)
            {
                children.Add(m_addPublishedDataItemsTemplateMethod);
            }

            if (m_addPublishedEventsTemplateMethod != null)
            {
                children.Add(m_addPublishedEventsTemplateMethod);
            }

            if (m_removePublishedDataSetMethod != null)
            {
                children.Add(m_removePublishedDataSetMethod);
            }

            if (m_addDataSetFolderMethod != null)
            {
                children.Add(m_addDataSetFolderMethod);
            }

            if (m_removeDataSetFolderMethod != null)
            {
                children.Add(m_removeDataSetFolderMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddPublishedDataItems:
                {
                    if (createOrReplace)
                    {
                        if (AddPublishedDataItems == null)
                        {
                            if (replacement == null)
                            {
                                AddPublishedDataItems = new AddPublishedDataItemsMethodState(this);
                            }
                            else
                            {
                                AddPublishedDataItems = (AddPublishedDataItemsMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPublishedDataItems;
                    break;
                }

                case Opc.Ua.BrowseNames.AddPublishedEvents:
                {
                    if (createOrReplace)
                    {
                        if (AddPublishedEvents == null)
                        {
                            if (replacement == null)
                            {
                                AddPublishedEvents = new AddPublishedEventsMethodState(this);
                            }
                            else
                            {
                                AddPublishedEvents = (AddPublishedEventsMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPublishedEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.AddPublishedDataItemsTemplate:
                {
                    if (createOrReplace)
                    {
                        if (AddPublishedDataItemsTemplate == null)
                        {
                            if (replacement == null)
                            {
                                AddPublishedDataItemsTemplate = new AddPublishedDataItemsTemplateMethodState(this);
                            }
                            else
                            {
                                AddPublishedDataItemsTemplate = (AddPublishedDataItemsTemplateMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPublishedDataItemsTemplate;
                    break;
                }

                case Opc.Ua.BrowseNames.AddPublishedEventsTemplate:
                {
                    if (createOrReplace)
                    {
                        if (AddPublishedEventsTemplate == null)
                        {
                            if (replacement == null)
                            {
                                AddPublishedEventsTemplate = new AddPublishedEventsTemplateMethodState(this);
                            }
                            else
                            {
                                AddPublishedEventsTemplate = (AddPublishedEventsTemplateMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPublishedEventsTemplate;
                    break;
                }

                case Opc.Ua.BrowseNames.RemovePublishedDataSet:
                {
                    if (createOrReplace)
                    {
                        if (RemovePublishedDataSet == null)
                        {
                            if (replacement == null)
                            {
                                RemovePublishedDataSet = new RemovePublishedDataSetMethodState(this);
                            }
                            else
                            {
                                RemovePublishedDataSet = (RemovePublishedDataSetMethodState)replacement;
                            }
                        }
                    }

                    instance = RemovePublishedDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.AddDataSetFolder:
                {
                    if (createOrReplace)
                    {
                        if (AddDataSetFolder == null)
                        {
                            if (replacement == null)
                            {
                                AddDataSetFolder = new AddDataSetFolderMethodState(this);
                            }
                            else
                            {
                                AddDataSetFolder = (AddDataSetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = AddDataSetFolder;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveDataSetFolder:
                {
                    if (createOrReplace)
                    {
                        if (RemoveDataSetFolder == null)
                        {
                            if (replacement == null)
                            {
                                RemoveDataSetFolder = new RemoveDataSetFolderMethodState(this);
                            }
                            else
                            {
                                RemoveDataSetFolder = (RemoveDataSetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveDataSetFolder;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddPublishedDataItemsMethodState m_addPublishedDataItemsMethod;
        private AddPublishedEventsMethodState m_addPublishedEventsMethod;
        private AddPublishedDataItemsTemplateMethodState m_addPublishedDataItemsTemplateMethod;
        private AddPublishedEventsTemplateMethodState m_addPublishedEventsTemplateMethod;
        private RemovePublishedDataSetMethodState m_removePublishedDataSetMethod;
        private AddDataSetFolderMethodState m_addDataSetFolderMethod;
        private RemoveDataSetFolderMethodState m_removeDataSetFolderMethod;
        #endregion
    }
    #endif
    #endregion

    #region PublishedEventsTypeModifyFieldSelectionMethodState Class
    #if (!OPCUA_EXCLUDE_PublishedEventsTypeModifyFieldSelectionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PublishedEventsTypeModifyFieldSelectionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PublishedEventsTypeModifyFieldSelectionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PublishedEventsTypeModifyFieldSelectionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAMQAAAFB1Ymxpc2hlZEV2ZW50c1R5cGVNb2RpZnlGaWVsZFNlbGVjdGlv" +
           "bk1ldGhvZFR5cGUBAM46AC8BAM46zjoAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQDPOgAuAETPOgAAlgQAAAABACoBASUAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BAAE5////" +
           "/wAAAAAAAQAqAQEjAAAAEAAAAEZpZWxkTmFtZUFsaWFzZXMADAEAAAABAAAAAAAAAAABACoBASEAAAAO" +
           "AAAAUHJvbW90ZWRGaWVsZHMAAQEAAAABAAAAAAAAAAABACoBASMAAAAOAAAAU2VsZWN0ZWRGaWVsZHMB" +
           "AFkCAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBAJ48AC4ARJ48AACWAQAAAAEAKgEBKAAAABcAAABOZXdDb25maWd1cmF0aW9uVmVy" +
           "c2lvbgEAATn/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PublishedEventsTypeModifyFieldSelectionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            string[] fieldNameAliases = (string[])_inputArguments[1];
            bool[] promotedFields = (bool[])_inputArguments[2];
            SimpleAttributeOperand[] selectedFields = (SimpleAttributeOperand[])ExtensionObject.ToArray(_inputArguments[3], typeof(SimpleAttributeOperand));

            ConfigurationVersionDataType newConfigurationVersion = (ConfigurationVersionDataType)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    fieldNameAliases,
                    promotedFields,
                    selectedFields,
                    ref newConfigurationVersion);
            }

            _outputArguments[0] = newConfigurationVersion;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PublishedEventsTypeModifyFieldSelectionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        string[] fieldNameAliases,
        bool[] promotedFields,
        SimpleAttributeOperand[] selectedFields,
        ref ConfigurationVersionDataType newConfigurationVersion);
    #endif
    #endregion

    #region AddPublishedDataItemsMethodState Class
    #if (!OPCUA_EXCLUDE_AddPublishedDataItemsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPublishedDataItemsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPublishedDataItemsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPublishedDataItemsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHwAAAEFkZFB1Ymxpc2hlZERhdGFJdGVtc01ldGhvZFR5cGUBAKU4AC8B" +
           "AKU4pTgAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCmOAAuAESmOAAAlgQA" +
           "AAABACoBARMAAAAEAAAATmFtZQAM/////wAAAAAAAQAqAQEjAAAAEAAAAEZpZWxkTmFtZUFsaWFzZXMA" +
           "DAEAAAABAAAAAAAAAAABACoBAR8AAAAKAAAARmllbGRGbGFncwEAID4BAAAAAQAAAAAAAAAAAQAqAQEj" +
           "AAAADgAAAFZhcmlhYmxlc1RvQWRkAQDBNwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCnOAAuAESnOAAAlgMAAAABACoBARwAAAAN" +
           "AAAARGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAqAQElAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9u" +
           "AQABOf////8AAAAAAAEAKgEBHQAAAAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAAB" +
           "AAAAAwAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPublishedDataItemsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];
            string[] fieldNameAliases = (string[])_inputArguments[1];
            ushort[] fieldFlags = (ushort[])_inputArguments[2];
            PublishedVariableDataType[] variablesToAdd = (PublishedVariableDataType[])ExtensionObject.ToArray(_inputArguments[3], typeof(PublishedVariableDataType));

            NodeId dataSetNodeId = (NodeId)_outputArguments[0];
            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)_outputArguments[1];
            StatusCode[] addResults = (StatusCode[])_outputArguments[2];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    fieldNameAliases,
                    fieldFlags,
                    variablesToAdd,
                    ref dataSetNodeId,
                    ref configurationVersion,
                    ref addResults);
            }

            _outputArguments[0] = dataSetNodeId;
            _outputArguments[1] = configurationVersion;
            _outputArguments[2] = addResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPublishedDataItemsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        string[] fieldNameAliases,
        ushort[] fieldFlags,
        PublishedVariableDataType[] variablesToAdd,
        ref NodeId dataSetNodeId,
        ref ConfigurationVersionDataType configurationVersion,
        ref StatusCode[] addResults);
    #endif
    #endregion

    #region AddPublishedEventsMethodState Class
    #if (!OPCUA_EXCLUDE_AddPublishedEventsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPublishedEventsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPublishedEventsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPublishedEventsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHAAAAEFkZFB1Ymxpc2hlZEV2ZW50c01ldGhvZFR5cGUBAKg4AC8BAKg4" +
           "qDgAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCpOAAuAESpOAAAlgYAAAAB" +
           "ACoBARMAAAAEAAAATmFtZQAM/////wAAAAAAAQAqAQEcAAAADQAAAEV2ZW50Tm90aWZpZXIAEf////8A" +
           "AAAAAAEAKgEBIwAAABAAAABGaWVsZE5hbWVBbGlhc2VzAAwBAAAAAQAAAAAAAAAAAQAqAQEfAAAACgAA" +
           "AEZpZWxkRmxhZ3MBACA+AQAAAAEAAAAAAAAAAAEAKgEBIwAAAA4AAABTZWxlY3RlZEZpZWxkcwEAWQIB" +
           "AAAAAQAAAAAAAAAAAQAqAQEXAAAABgAAAEZpbHRlcgEASgL/////AAAAAAABACgBAQAAAAEAAAAGAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCqOAAuAESqOAAAlgIAAAABACoB" +
           "ASUAAAAUAAAAQ29uZmlndXJhdGlvblZlcnNpb24BAAE5/////wAAAAAAAQAqAQEcAAAADQAAAERhdGFT" +
           "ZXROb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPublishedEventsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];
            NodeId eventNotifier = (NodeId)_inputArguments[1];
            string[] fieldNameAliases = (string[])_inputArguments[2];
            ushort[] fieldFlags = (ushort[])_inputArguments[3];
            SimpleAttributeOperand[] selectedFields = (SimpleAttributeOperand[])ExtensionObject.ToArray(_inputArguments[4], typeof(SimpleAttributeOperand));
            ContentFilter filter = (ContentFilter)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[5]);

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)_outputArguments[0];
            NodeId dataSetNodeId = (NodeId)_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    eventNotifier,
                    fieldNameAliases,
                    fieldFlags,
                    selectedFields,
                    filter,
                    ref configurationVersion,
                    ref dataSetNodeId);
            }

            _outputArguments[0] = configurationVersion;
            _outputArguments[1] = dataSetNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPublishedEventsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        NodeId eventNotifier,
        string[] fieldNameAliases,
        ushort[] fieldFlags,
        SimpleAttributeOperand[] selectedFields,
        ContentFilter filter,
        ref ConfigurationVersionDataType configurationVersion,
        ref NodeId dataSetNodeId);
    #endif
    #endregion

    #region AddPublishedDataItemsTemplateMethodState Class
    #if (!OPCUA_EXCLUDE_AddPublishedDataItemsTemplateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPublishedDataItemsTemplateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPublishedDataItemsTemplateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPublishedDataItemsTemplateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAJwAAAEFkZFB1Ymxpc2hlZERhdGFJdGVtc1RlbXBsYXRlTWV0aG9kVHlw" +
           "ZQEAhkIALwEAhkKGQgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIdCAC4A" +
           "RIdCAACWAwAAAAEAKgEBEwAAAAQAAABOYW1lAAz/////AAAAAAABACoBASAAAAAPAAAARGF0YVNldE1l" +
           "dGFEYXRhAQC7OP////8AAAAAAAEAKgEBIwAAAA4AAABWYXJpYWJsZXNUb0FkZAEAwTcBAAAAAQAAAAAA" +
           "AAAAAQAoAQEAAAABAAAAAwAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA" +
           "iEIALgBEiEIAAJYCAAAAAQAqAQEcAAAADQAAAERhdGFTZXROb2RlSWQAEf////8AAAAAAAEAKgEBHQAA" +
           "AAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPublishedDataItemsTemplateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];
            DataSetMetaDataType dataSetMetaData = (DataSetMetaDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[1]);
            PublishedVariableDataType[] variablesToAdd = (PublishedVariableDataType[])ExtensionObject.ToArray(_inputArguments[2], typeof(PublishedVariableDataType));

            NodeId dataSetNodeId = (NodeId)_outputArguments[0];
            StatusCode[] addResults = (StatusCode[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    dataSetMetaData,
                    variablesToAdd,
                    ref dataSetNodeId,
                    ref addResults);
            }

            _outputArguments[0] = dataSetNodeId;
            _outputArguments[1] = addResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPublishedDataItemsTemplateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        DataSetMetaDataType dataSetMetaData,
        PublishedVariableDataType[] variablesToAdd,
        ref NodeId dataSetNodeId,
        ref StatusCode[] addResults);
    #endif
    #endregion

    #region AddPublishedEventsTemplateMethodState Class
    #if (!OPCUA_EXCLUDE_AddPublishedEventsTemplateMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPublishedEventsTemplateMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPublishedEventsTemplateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPublishedEventsTemplateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAJAAAAEFkZFB1Ymxpc2hlZEV2ZW50c1RlbXBsYXRlTWV0aG9kVHlwZQEA" +
           "iUIALwEAiUKJQgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJNCAC4ARJNC" +
           "AACWBQAAAAEAKgEBEwAAAAQAAABOYW1lAAz/////AAAAAAABACoBASAAAAAPAAAARGF0YVNldE1ldGFE" +
           "YXRhAQC7OP////8AAAAAAAEAKgEBHAAAAA0AAABFdmVudE5vdGlmaWVyABH/////AAAAAAABACoBASMA" +
           "AAAOAAAAU2VsZWN0ZWRGaWVsZHMBAFkCAQAAAAEAAAAAAAAAAAEAKgEBFwAAAAYAAABGaWx0ZXIBAEoC" +
           "/////wAAAAAAAQAoAQEAAAABAAAABQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3Vt" +
           "ZW50cwEAqkIALgBEqkIAAJYBAAAAAQAqAQEcAAAADQAAAERhdGFTZXROb2RlSWQAEf////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPublishedEventsTemplateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];
            DataSetMetaDataType dataSetMetaData = (DataSetMetaDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[1]);
            NodeId eventNotifier = (NodeId)_inputArguments[2];
            SimpleAttributeOperand[] selectedFields = (SimpleAttributeOperand[])ExtensionObject.ToArray(_inputArguments[3], typeof(SimpleAttributeOperand));
            ContentFilter filter = (ContentFilter)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[4]);

            NodeId dataSetNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    dataSetMetaData,
                    eventNotifier,
                    selectedFields,
                    filter,
                    ref dataSetNodeId);
            }

            _outputArguments[0] = dataSetNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPublishedEventsTemplateMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        DataSetMetaDataType dataSetMetaData,
        NodeId eventNotifier,
        SimpleAttributeOperand[] selectedFields,
        ContentFilter filter,
        ref NodeId dataSetNodeId);
    #endif
    #endregion

    #region RemovePublishedDataSetMethodState Class
    #if (!OPCUA_EXCLUDE_RemovePublishedDataSetMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemovePublishedDataSetMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemovePublishedDataSetMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemovePublishedDataSetMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAFJlbW92ZVB1Ymxpc2hlZERhdGFTZXRNZXRob2RUeXBlAQCrOAAv" +
           "AQCrOKs4AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEArDgALgBErDgAAJYB" +
           "AAAAAQAqAQEcAAAADQAAAERhdGFTZXROb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemovePublishedDataSetMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId dataSetNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    dataSetNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemovePublishedDataSetMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId dataSetNodeId);
    #endif
    #endregion

    #region AddDataSetFolderMethodState Class
    #if (!OPCUA_EXCLUDE_AddDataSetFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddDataSetFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddDataSetFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddDataSetFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEFkZERhdGFTZXRGb2xkZXJNZXRob2RUeXBlAQCrQgAvAQCrQqtC" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEArEIALgBErEIAAJYBAAAAAQAq" +
           "AQETAAAABAAAAE5hbWUADP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAK1CAC4ARK1CAACWAQAAAAEAKgEBIgAAABMAAABEYXRhU2V0Rm9s" +
           "ZGVyTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddDataSetFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string name = (string)_inputArguments[0];

            NodeId dataSetFolderNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    name,
                    ref dataSetFolderNodeId);
            }

            _outputArguments[0] = dataSetFolderNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddDataSetFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string name,
        ref NodeId dataSetFolderNodeId);
    #endif
    #endregion

    #region RemoveDataSetFolderMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveDataSetFolderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveDataSetFolderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveDataSetFolderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveDataSetFolderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAFJlbW92ZURhdGFTZXRGb2xkZXJNZXRob2RUeXBlAQC3QgAvAQC3" +
           "QrdCAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMUMALgBEMUMAAJYBAAAA" +
           "AQAqAQEiAAAAEwAAAERhdGFTZXRGb2xkZXJOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveDataSetFolderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId dataSetFolderNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    dataSetFolderNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveDataSetFolderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId dataSetFolderNodeId);
    #endif
    #endregion

    #region PubSubConnectionState Class
    #if (!OPCUA_EXCLUDE_PubSubConnectionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConnectionState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubConnectionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubConnectionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TransportSettings != null)
            {
                TransportSettings.Initialize(context, TransportSettings_InitializationString);
            }

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }

            if (AddWriterGroup != null)
            {
                AddWriterGroup.Initialize(context, AddWriterGroup_InitializationString);
            }

            if (AddReaderGroup != null)
            {
                AddReaderGroup.Initialize(context, AddReaderGroup_InitializationString);
            }

            if (RemoveGroup != null)
            {
                RemoveGroup.Initialize(context, RemoveGroup_InitializationString);
            }
        }

        #region Initialization String
        private const string TransportSettings_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQAzQwAvAQA5RTNDAAD/////AAAA" +
           "AA==";

        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQApSwAvAQBKTSlLAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAKksALwA/KksAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAK0sALwEADU0rSwAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQAsSwAuAEQsSwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAC1LAC4ARC1LAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAC5LAC4ARC5LAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBADBLAC8BAA1NMEsAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAMUsA" +
           "LgBEMUsAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAySwAuAEQy" +
           "SwAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAzSwAuAEQz" +
           "SwAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEANUsALwEA6Uw1SwAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBADZLAC8APzZLAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAN0sALwA6N0sAAP////8GAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQA4SwAvAQANTThLAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBADlLAC4ARDlL" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAOksALgBEOksAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQA7SwAuAEQ7" +
           "SwAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAPUsALwEADU09SwAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQA+SwAu" +
           "AEQ+SwAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAD9LAC4ARD9L" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAQEsA" +
           "LgBEQEsAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBAEJLAC8BAA1NQksAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "Q0sALgBEQ0sAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBESwAu" +
           "AERESwAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "AEVLAC4AREVLAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAR0sALwEADU1HSwAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQBISwAuAERISwAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AElLAC4ARElLAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEASksALgBESksAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQBMSwAvAQANTUxLAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAE1LAC4ARE1LAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "TksALgBETksAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQBPSwAuAERPSwAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAUUsALwEADU1RSwAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQBSSwAuAERSSwAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AFNLAC4ARFNLAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAVEsALgBEVEsAAAYAAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZlVmFs" +
           "dWVzAQBWSwAvADpWSwAA/////wEAAAAVYIkKAgAAAAAADwAAAFJlc29sdmVkQWRkcmVzcwEAV0sALwA/" +
           "V0sAAAAM/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAFhLAC4ARFhL" +
           "AAAGAAAAAAEAC03/////AQH/////AAAAAA==";

        private const string AddWriterGroup_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEFkZFdyaXRlckdyb3VwAQATRAAvAQATRBNEAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAFEQALgBEFEQAAJYBAAAAAQAqAQEeAAAADQAAAENv" +
           "bmZpZ3VyYXRpb24BAHg8/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEAMEQALgBEMEQAAJYBAAAAAQAqAQEWAAAABwAAAEdyb3VwSWQAEf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string AddReaderGroup_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEFkZFJlYWRlckdyb3VwAQA5RAAvAQA5RDlEAAABAf////8CAAAA" +
           "F2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAY0QALgBEY0QAAJYBAAAAAQAqAQEeAAAADQAAAENv" +
           "bmZpZ3VyYXRpb24BAKA8/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAA" +
           "DwAAAE91dHB1dEFyZ3VtZW50cwEAZEQALgBEZEQAAJYBAAAAAQAqAQEWAAAABwAAAEdyb3VwSWQAEf//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveGroup_InitializationString =
           "//////////8EYYIKBAAAAAAACwAAAFJlbW92ZUdyb3VwAQCRNwAvAQCRN5E3AAABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAkjcALgBEkjcAAJYBAAAAAQAqAQEWAAAABwAAAEdyb3Vw" +
           "SWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHAAAAFB1YlN1YkNvbm5lY3Rpb25UeXBlSW5zdGFuY2UBAIE3AQCBN4E3" +
           "AAD/////CgAAABVgiQoCAAAAAAALAAAAUHVibGlzaGVySWQBAAM5AC4ARAM5AAAAGP////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABMAAABUcmFuc3BvcnRQcm9maWxlVXJpAQCaQwAvAQC1P5pDAAAADP////8BAf//" +
           "//8BAAAAF2CJCgIAAAAAAAoAAABTZWxlY3Rpb25zAQAuRQAuAEQuRQAAABgBAAAAAQAAAAAAAAABAf//" +
           "//8AAAAAF2CJCgIAAAAAABQAAABDb25uZWN0aW9uUHJvcGVydGllcwEATUQALgBETUQAAAEAxTgBAAAA" +
           "AQAAAAAAAAABAf////8AAAAABGCACgEAAAAAAAcAAABBZGRyZXNzAQCNNwAvAQCZUo03AAD/////AQAA" +
           "ABVgiQoCAAAAAAAQAAAATmV0d29ya0ludGVyZmFjZQEAMkMALwEAtT8yQwAAAAz/////AQH/////AQAA" +
           "ABdgiQoCAAAAAAAKAAAAU2VsZWN0aW9ucwEAqEQALgBEqEQAAAAYAQAAAAEAAAAAAAAAAQH/////AAAA" +
           "AARggAoBAAAAAAARAAAAVHJhbnNwb3J0U2V0dGluZ3MBADNDAC8BADlFM0MAAP////8AAAAABGCACgEA" +
           "AAAAAAYAAABTdGF0dXMBAAg5AC8BADM5CDkAAP////8BAAAAFWCJCgIAAAAAAAUAAABTdGF0ZQEACTkA" +
           "LwA/CTkAAAEANzn/////AQH/////AAAAAARggAoBAAAAAAALAAAARGlhZ25vc3RpY3MBAClLAC8BAEpN" +
           "KUsAAP////8HAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAqSwAvAD8qSwAAAQALTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABAAAABUb3RhbEluZm9ybWF0aW9uAQArSwAvAQANTStLAAAAB///" +
           "//8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBACxLAC4ARCxLAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEALUsALgBELUsAAAEAEk3/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEALksALgBELksAAAEAC03/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAVG90YWxFcnJvcgEAMEsALwEADU0wSwAAAAf/////AQH/////AwAAABVgiQoCAAAA" +
           "AAAGAAAAQWN0aXZlAQAxSwAuAEQxSwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3Np" +
           "ZmljYXRpb24BADJLAC4ARDJLAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0" +
           "aWNzTGV2ZWwBADNLAC4ARDNLAAABAAtN/////wEB/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AQA1" +
           "SwAvAQDpTDVLAAABAf////8AAAAAFWCJCgIAAAAAAAgAAABTdWJFcnJvcgEANksALwA/NksAAAAB////" +
           "/wEB/////wAAAAAEYIAKAQAAAAAACAAAAENvdW50ZXJzAQA3SwAvADo3SwAA/////wYAAAAVYIkKAgAA" +
           "AAAACgAAAFN0YXRlRXJyb3IBADhLAC8BAA1NOEsAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAA" +
           "AEFjdGl2ZQEAOUsALgBEOUsAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0" +
           "aW9uAQA6SwAuAEQ6SwAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0" +
           "aWNzTGV2ZWwBADtLAC4ARDtLAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3Rh" +
           "dGVPcGVyYXRpb25hbEJ5TWV0aG9kAQA9SwAvAQANTT1LAAAAB/////8BAf////8DAAAAFWCJCgIAAAAA" +
           "AAYAAABBY3RpdmUBAD5LAC4ARD5LAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lm" +
           "aWNhdGlvbgEAP0sALgBEP0sAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFn" +
           "bm9zdGljc0xldmVsAQBASwAuAERASwAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAA" +
           "AFN0YXRlT3BlcmF0aW9uYWxCeVBhcmVudAEAQksALwEADU1CSwAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQBDSwAuAERDSwAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAERLAC4ARERLAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAA" +
           "RGlhZ25vc3RpY3NMZXZlbAEARUsALgBERUsAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABkAAABTdGF0ZU9wZXJhdGlvbmFsRnJvbUVycm9yAQBHSwAvAQANTUdLAAAAB/////8BAf////8DAAAA" +
           "FWCJCgIAAAAAAAYAAABBY3RpdmUBAEhLAC4AREhLAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4A" +
           "AABDbGFzc2lmaWNhdGlvbgEASUsALgBESUsAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAA" +
           "ABAAAABEaWFnbm9zdGljc0xldmVsAQBKSwAuAERKSwAABgAAAAABAAtN/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEwAAAFN0YXRlUGF1c2VkQnlQYXJlbnQBAExLAC8BAA1NTEsAAAAH/////wEB/////wMAAAAV" +
           "YIkKAgAAAAAABgAAAEFjdGl2ZQEATUsALgBETUsAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAA" +
           "AENsYXNzaWZpY2F0aW9uAQBOSwAuAEROSwAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBAE9LAC4ARE9LAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAVAAAAU3RhdGVEaXNhYmxlZEJ5TWV0aG9kAQBRSwAvAQANTVFLAAAAB/////8BAf////8DAAAA" +
           "FWCJCgIAAAAAAAYAAABBY3RpdmUBAFJLAC4ARFJLAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4A" +
           "AABDbGFzc2lmaWNhdGlvbgEAU0sALgBEU0sAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAA" +
           "ABAAAABEaWFnbm9zdGljc0xldmVsAQBUSwAuAERUSwAABgAAAAABAAtN/////wEB/////wAAAAAEYIAK" +
           "AQAAAAAACgAAAExpdmVWYWx1ZXMBAFZLAC8AOlZLAAD/////AQAAABVgiQoCAAAAAAAPAAAAUmVzb2x2" +
           "ZWRBZGRyZXNzAQBXSwAvAD9XSwAAAAz/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEAWEsALgBEWEsAAAYAAAAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAA4AAABBZGRX" +
           "cml0ZXJHcm91cAEAE0QALwEAE0QTRAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBABREAC4ARBREAACWAQAAAAEAKgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQB4PP////8AAAAAAAEA" +
           "KAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBADBEAC4A" +
           "RDBEAACWAQAAAAEAKgEBFgAAAAcAAABHcm91cElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAAOAAAAQWRkUmVhZGVyR3JvdXABADlEAC8BADlEOUQAAAEB/////wIAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBjRAAuAERjRAAAlgEAAAABACoBAR4AAAANAAAAQ29u" +
           "ZmlndXJhdGlvbgEAoDz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAP" +
           "AAAAT3V0cHV0QXJndW1lbnRzAQBkRAAuAERkRAAAlgEAAAABACoBARYAAAAHAAAAR3JvdXBJZAAR////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFJlbW92ZUdyb3VwAQCR" +
           "NwAvAQCRN5E3AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAkjcALgBEkjcA" +
           "AJYBAAAAAQAqAQEWAAAABwAAAEdyb3VwSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState PublisherId
        {
            get
            {
                return m_publisherId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publisherId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publisherId = value;
            }
        }

        /// <remarks />
        public SelectionListState<string> TransportProfileUri
        {
            get
            {
                return m_transportProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportProfileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<KeyValuePair[]> ConnectionProperties
        {
            get
            {
                return m_connectionProperties;
            }

            set
            {
                if (!Object.ReferenceEquals(m_connectionProperties, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_connectionProperties = value;
            }
        }

        /// <remarks />
        public NetworkAddressState Address
        {
            get
            {
                return m_address;
            }

            set
            {
                if (!Object.ReferenceEquals(m_address, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_address = value;
            }
        }

        /// <remarks />
        public ConnectionTransportState TransportSettings
        {
            get
            {
                return m_transportSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportSettings = value;
            }
        }

        /// <remarks />
        public PubSubStatusState Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsConnectionState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }

        /// <remarks />
        public PubSubConnectionTypeAddWriterGroupMethodState AddWriterGroup
        {
            get
            {
                return m_addWriterGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addWriterGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addWriterGroupMethod = value;
            }
        }

        /// <remarks />
        public PubSubConnectionAddReaderGroupGroupMethodState AddReaderGroup
        {
            get
            {
                return m_addReaderGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addReaderGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addReaderGroupMethod = value;
            }
        }

        /// <remarks />
        public PubSubConnectionTypeRemoveGroupMethodState RemoveGroup
        {
            get
            {
                return m_removeGroupMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeGroupMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeGroupMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_publisherId != null)
            {
                children.Add(m_publisherId);
            }

            if (m_transportProfileUri != null)
            {
                children.Add(m_transportProfileUri);
            }

            if (m_connectionProperties != null)
            {
                children.Add(m_connectionProperties);
            }

            if (m_address != null)
            {
                children.Add(m_address);
            }

            if (m_transportSettings != null)
            {
                children.Add(m_transportSettings);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            if (m_addWriterGroupMethod != null)
            {
                children.Add(m_addWriterGroupMethod);
            }

            if (m_addReaderGroupMethod != null)
            {
                children.Add(m_addReaderGroupMethod);
            }

            if (m_removeGroupMethod != null)
            {
                children.Add(m_removeGroupMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PublisherId:
                {
                    if (createOrReplace)
                    {
                        if (PublisherId == null)
                        {
                            if (replacement == null)
                            {
                                PublisherId = new PropertyState(this);
                            }
                            else
                            {
                                PublisherId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = PublisherId;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (TransportProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                TransportProfileUri = new SelectionListState<string>(this);
                            }
                            else
                            {
                                TransportProfileUri = (SelectionListState<string>)replacement;
                            }
                        }
                    }

                    instance = TransportProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ConnectionProperties:
                {
                    if (createOrReplace)
                    {
                        if (ConnectionProperties == null)
                        {
                            if (replacement == null)
                            {
                                ConnectionProperties = new PropertyState<KeyValuePair[]>(this);
                            }
                            else
                            {
                                ConnectionProperties = (PropertyState<KeyValuePair[]>)replacement;
                            }
                        }
                    }

                    instance = ConnectionProperties;
                    break;
                }

                case Opc.Ua.BrowseNames.Address:
                {
                    if (createOrReplace)
                    {
                        if (Address == null)
                        {
                            if (replacement == null)
                            {
                                Address = new NetworkAddressState(this);
                            }
                            else
                            {
                                Address = (NetworkAddressState)replacement;
                            }
                        }
                    }

                    instance = Address;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportSettings:
                {
                    if (createOrReplace)
                    {
                        if (TransportSettings == null)
                        {
                            if (replacement == null)
                            {
                                TransportSettings = new ConnectionTransportState(this);
                            }
                            else
                            {
                                TransportSettings = (ConnectionTransportState)replacement;
                            }
                        }
                    }

                    instance = TransportSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PubSubStatusState(this);
                            }
                            else
                            {
                                Status = (PubSubStatusState)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsConnectionState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsConnectionState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.AddWriterGroup:
                {
                    if (createOrReplace)
                    {
                        if (AddWriterGroup == null)
                        {
                            if (replacement == null)
                            {
                                AddWriterGroup = new PubSubConnectionTypeAddWriterGroupMethodState(this);
                            }
                            else
                            {
                                AddWriterGroup = (PubSubConnectionTypeAddWriterGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = AddWriterGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.AddReaderGroup:
                {
                    if (createOrReplace)
                    {
                        if (AddReaderGroup == null)
                        {
                            if (replacement == null)
                            {
                                AddReaderGroup = new PubSubConnectionAddReaderGroupGroupMethodState(this);
                            }
                            else
                            {
                                AddReaderGroup = (PubSubConnectionAddReaderGroupGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = AddReaderGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveGroup:
                {
                    if (createOrReplace)
                    {
                        if (RemoveGroup == null)
                        {
                            if (replacement == null)
                            {
                                RemoveGroup = new PubSubConnectionTypeRemoveGroupMethodState(this);
                            }
                            else
                            {
                                RemoveGroup = (PubSubConnectionTypeRemoveGroupMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveGroup;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_publisherId;
        private SelectionListState<string> m_transportProfileUri;
        private PropertyState<KeyValuePair[]> m_connectionProperties;
        private NetworkAddressState m_address;
        private ConnectionTransportState m_transportSettings;
        private PubSubStatusState m_status;
        private PubSubDiagnosticsConnectionState m_diagnostics;
        private PubSubConnectionTypeAddWriterGroupMethodState m_addWriterGroupMethod;
        private PubSubConnectionAddReaderGroupGroupMethodState m_addReaderGroupMethod;
        private PubSubConnectionTypeRemoveGroupMethodState m_removeGroupMethod;
        #endregion
    }
    #endif
    #endregion

    #region GetConnectionMethodState Class
    #if (!OPCUA_EXCLUDE_GetConnectionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetConnectionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetConnectionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetConnectionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAEdldENvbm5lY3Rpb25NZXRob2RUeXBlAQCuXAAvAQCuXK5cAAAB" +
           "Af////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAr1wALgBEr1wAAJYBAAAAAQAqAQEe" +
           "AAAADwAAAEluY2x1ZGVDaGlsZHJlbgAB/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAsFwALgBEsFwAAJYCAAAAAQAqAQEeAAAADQAAAENv" +
           "bmZpZ3VyYXRpb24BAAE9/////wAAAAAAAQAqAQEXAAAACAAAAENoZWNrU3VtAA//////AAAAAAABACgB" +
           "AQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetConnectionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            bool includeChildren = (bool)_inputArguments[0];

            PubSubConnectionDataType configuration = (PubSubConnectionDataType)_outputArguments[0];
            byte[] checkSum = (byte[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    includeChildren,
                    ref configuration,
                    ref checkSum);
            }

            _outputArguments[0] = configuration;
            _outputArguments[1] = checkSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetConnectionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        bool includeChildren,
        ref PubSubConnectionDataType configuration,
        ref byte[] checkSum);
    #endif
    #endregion

    #region ModifyConnectionMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyConnectionMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyConnectionMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyConnectionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyConnectionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAE1vZGlmeUNvbm5lY3Rpb25NZXRob2RUeXBlAQCxXAAvAQCxXLFc" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAslwALgBEslwAAJYEAAAAAQAq" +
           "AQEeAAAADQAAAENvbmZpZ3VyYXRpb24BAAE9/////wAAAAAAAQAqAQEdAAAADgAAAE1vZGlmeUNoaWxk" +
           "cmVuAAH/////AAAAAAABACoBARcAAAAIAAAAQ2hlY2tTdW0AD/////8AAAAAAAEAKgEBFAAAAAUAAABG" +
           "b3JjZQAB/////wAAAAAAAQAoAQEAAAABAAAABAAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEAs1wALgBEs1wAAJYBAAAAAQAqAQEaAAAACwAAAE5ld0NoZWNrU3VtAA//////AAAA" +
           "AAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyConnectionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            PubSubConnectionDataType configuration = (PubSubConnectionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            bool modifyChildren = (bool)_inputArguments[1];
            byte[] checkSum = (byte[])_inputArguments[2];
            bool force = (bool)_inputArguments[3];

            byte[] newCheckSum = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    modifyChildren,
                    checkSum,
                    force,
                    ref newCheckSum);
            }

            _outputArguments[0] = newCheckSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyConnectionMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        PubSubConnectionDataType configuration,
        bool modifyChildren,
        byte[] checkSum,
        bool force,
        ref byte[] newCheckSum);
    #endif
    #endregion

    #region PubSubConnectionTypeAddWriterGroupMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubConnectionTypeAddWriterGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConnectionTypeAddWriterGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubConnectionTypeAddWriterGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubConnectionTypeAddWriterGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAALAAAAFB1YlN1YkNvbm5lY3Rpb25UeXBlQWRkV3JpdGVyR3JvdXBNZXRo" +
           "b2RUeXBlAQCZRAAvAQCZRJlEAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "zUQALgBEzUQAAJYBAAAAAQAqAQEeAAAADQAAAENvbmZpZ3VyYXRpb24BAHg8/////wAAAAAAAQAoAQEA" +
           "AAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAzkQALgBEzkQA" +
           "AJYBAAAAAQAqAQEWAAAABwAAAEdyb3VwSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubConnectionTypeAddWriterGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            WriterGroupDataType configuration = (WriterGroupDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId groupId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    ref groupId);
            }

            _outputArguments[0] = groupId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubConnectionTypeAddWriterGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        WriterGroupDataType configuration,
        ref NodeId groupId);
    #endif
    #endregion

    #region PubSubConnectionAddReaderGroupGroupMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubConnectionAddReaderGroupGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConnectionAddReaderGroupGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubConnectionAddReaderGroupGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubConnectionAddReaderGroupGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAALQAAAFB1YlN1YkNvbm5lY3Rpb25BZGRSZWFkZXJHcm91cEdyb3VwTWV0" +
           "aG9kVHlwZQEA3kQALwEA3kTeRAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AN9EAC4ARN9EAACWAQAAAAEAKgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQCgPP////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBADhFAC4ARDhF" +
           "AACWAQAAAAEAKgEBFgAAAAcAAABHcm91cElkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubConnectionAddReaderGroupGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ReaderGroupDataType configuration = (ReaderGroupDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId groupId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    ref groupId);
            }

            _outputArguments[0] = groupId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubConnectionAddReaderGroupGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ReaderGroupDataType configuration,
        ref NodeId groupId);
    #endif
    #endregion

    #region PubSubConnectionTypeRemoveGroupMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubConnectionTypeRemoveGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubConnectionTypeRemoveGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubConnectionTypeRemoveGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubConnectionTypeRemoveGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAKQAAAFB1YlN1YkNvbm5lY3Rpb25UeXBlUmVtb3ZlR3JvdXBNZXRob2RU" +
           "eXBlAQAMOQAvAQAMOQw5AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEADTkA" +
           "LgBEDTkAAJYBAAAAAQAqAQEWAAAABwAAAEdyb3VwSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubConnectionTypeRemoveGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId groupId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    groupId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubConnectionTypeRemoveGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId groupId);
    #endif
    #endregion

    #region ConnectionTransportState Class
    #if (!OPCUA_EXCLUDE_ConnectionTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConnectionTransportState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ConnectionTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ConnectionTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAENvbm5lY3Rpb25UcmFuc3BvcnRUeXBlSW5zdGFuY2UBADlFAQA5" +
           "RTlFAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubGroupState Class
    #if (!OPCUA_EXCLUDE_PubSubGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubGroupState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SecurityGroupId != null)
            {
                SecurityGroupId.Initialize(context, SecurityGroupId_InitializationString);
            }

            if (SecurityKeyServices != null)
            {
                SecurityKeyServices.Initialize(context, SecurityKeyServices_InitializationString);
            }
        }

        #region Initialization String
        private const string SecurityGroupId_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFNlY3VyaXR5R3JvdXBJZAEANz4ALgBENz4AAAAM/////wEB////" +
           "/wAAAAA=";

        private const string SecurityKeyServices_InitializationString =
           "//////////8XYIkKAgAAAAAAEwAAAFNlY3VyaXR5S2V5U2VydmljZXMBADg+AC4ARDg+AAABADgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAFB1YlN1Ykdyb3VwVHlwZUluc3RhbmNlAQCYNwEAmDeYNwAA////" +
           "/wYAAAAVYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEANj4ALgBENj4AAAEALgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAU2VjdXJpdHlHcm91cElkAQA3PgAuAEQ3PgAAAAz/////AQH/////AAAAABdg" +
           "iQoCAAAAAAATAAAAU2VjdXJpdHlLZXlTZXJ2aWNlcwEAOD4ALgBEOD4AAAEAOAEBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAAFWCJCgIAAAAAABUAAABNYXhOZXR3b3JrTWVzc2FnZVNpemUBADxFAC4ARDxFAAAAB///" +
           "//8BAf////8AAAAAF2CJCgIAAAAAAA8AAABHcm91cFByb3BlcnRpZXMBAFBEAC4ARFBEAAABAMU4AQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAARggAoBAAAAAAAGAAAAU3RhdHVzAQChOwAvAQAzOaE7AAD/////AQAA" +
           "ABVgiQoCAAAAAAAFAAAAU3RhdGUBAKI7AC8AP6I7AAABADc5/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityGroupId
        {
            get
            {
                return m_securityGroupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityGroupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityGroupId = value;
            }
        }

        /// <remarks />
        public PropertyState<EndpointDescription[]> SecurityKeyServices
        {
            get
            {
                return m_securityKeyServices;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityKeyServices, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityKeyServices = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNetworkMessageSize
        {
            get
            {
                return m_maxNetworkMessageSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNetworkMessageSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNetworkMessageSize = value;
            }
        }

        /// <remarks />
        public PropertyState<KeyValuePair[]> GroupProperties
        {
            get
            {
                return m_groupProperties;
            }

            set
            {
                if (!Object.ReferenceEquals(m_groupProperties, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_groupProperties = value;
            }
        }

        /// <remarks />
        public PubSubStatusState Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityGroupId != null)
            {
                children.Add(m_securityGroupId);
            }

            if (m_securityKeyServices != null)
            {
                children.Add(m_securityKeyServices);
            }

            if (m_maxNetworkMessageSize != null)
            {
                children.Add(m_maxNetworkMessageSize);
            }

            if (m_groupProperties != null)
            {
                children.Add(m_groupProperties);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityGroupId:
                {
                    if (createOrReplace)
                    {
                        if (SecurityGroupId == null)
                        {
                            if (replacement == null)
                            {
                                SecurityGroupId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityGroupId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityGroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityKeyServices:
                {
                    if (createOrReplace)
                    {
                        if (SecurityKeyServices == null)
                        {
                            if (replacement == null)
                            {
                                SecurityKeyServices = new PropertyState<EndpointDescription[]>(this);
                            }
                            else
                            {
                                SecurityKeyServices = (PropertyState<EndpointDescription[]>)replacement;
                            }
                        }
                    }

                    instance = SecurityKeyServices;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNetworkMessageSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxNetworkMessageSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxNetworkMessageSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNetworkMessageSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNetworkMessageSize;
                    break;
                }

                case Opc.Ua.BrowseNames.GroupProperties:
                {
                    if (createOrReplace)
                    {
                        if (GroupProperties == null)
                        {
                            if (replacement == null)
                            {
                                GroupProperties = new PropertyState<KeyValuePair[]>(this);
                            }
                            else
                            {
                                GroupProperties = (PropertyState<KeyValuePair[]>)replacement;
                            }
                        }
                    }

                    instance = GroupProperties;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PubSubStatusState(this);
                            }
                            else
                            {
                                Status = (PubSubStatusState)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<string> m_securityGroupId;
        private PropertyState<EndpointDescription[]> m_securityKeyServices;
        private PropertyState<uint> m_maxNetworkMessageSize;
        private PropertyState<KeyValuePair[]> m_groupProperties;
        private PubSubStatusState m_status;
        #endregion
    }
    #endif
    #endregion

    #region WriterGroupState Class
    #if (!OPCUA_EXCLUDE_WriterGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriterGroupState : PubSubGroupState
    {
        #region Constructors
        /// <remarks />
        public WriterGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.WriterGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TransportSettings != null)
            {
                TransportSettings.Initialize(context, TransportSettings_InitializationString);
            }

            if (MessageSettings != null)
            {
                MessageSettings.Initialize(context, MessageSettings_InitializationString);
            }

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }

            if (AddDataSetWriter != null)
            {
                AddDataSetWriter.Initialize(context, AddDataSetWriter_InitializationString);
            }

            if (RemoveDataSetWriter != null)
            {
                RemoveDataSetWriter.Initialize(context, RemoveDataSetWriter_InitializationString);
            }
        }

        #region Initialization String
        private const string TransportSettings_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQBNRQAvAQBNRk1FAAD/////AAAA" +
           "AA==";

        private const string MessageSettings_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5ncwEATkUALwEATkZORQAA/////wAAAAA=";

        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQCURQAvAQB6TZRFAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAlUUALwA/lUUAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAlkUALwEADU2WRQAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQCXRQAuAESXRQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAJhFAC4ARJhFAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAJlFAC4ARJlFAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBAJtFAC8BAA1Nm0UAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAnEUA" +
           "LgBEnEUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCdRQAuAESd" +
           "RQAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCeRQAuAESe" +
           "RQAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEAoEUALwEA6UygRQAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAKFFAC8AP6FFAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAokUALwA6okUAAP////8JAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQCjRQAvAQANTaNFAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAKRFAC4ARKRF" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEApUUALgBEpUUAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCmRQAuAESm" +
           "RQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAqEUALwEADU2oRQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCpRQAu" +
           "AESpRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAKpFAC4ARKpF" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAq0UA" +
           "LgBEq0UAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBAK1FAC8BAA1NrUUAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "rkUALgBErkUAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCvRQAu" +
           "AESvRQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ALBFAC4ARLBFAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAskUALwEADU2yRQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQCzRQAuAESzRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "ALRFAC4ARLRFAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAtUUALgBEtUUAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQC3RQAvAQANTbdFAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBALhFAC4ARLhFAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "uUUALgBEuUUAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQC6RQAuAES6RQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAvUUALwEADU29RQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQC+RQAuAES+RQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AL9FAC4ARL9FAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAwEUALgBEwEUAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTZW50TmV0" +
           "d29ya01lc3NhZ2VzAQDDRQAvAQANTcNFAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAMhFAC4ARMhFAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "z0UALgBEz0UAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQDQRQAuAETQRQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAEZhaWxlZFRy" +
           "YW5zbWlzc2lvbnMBANJFAC8BAA1N0kUAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2" +
           "ZQEA1kUALgBE1kUAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQDd" +
           "RQAuAETdRQAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2" +
           "ZWwBAORFAC4ARORFAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARW5jcnlwdGlv" +
           "bkVycm9ycwEA7EUALwEADU3sRQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQDt" +
           "RQAuAETtRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAO5FAC4A" +
           "RO5FAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEA" +
           "70UALgBE70UAAAYBAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZlVmFsdWVzAQDC" +
           "RQAvADrCRQAA/////wIAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRhU2V0V3JpdGVycwEA+UUA" +
           "LwA/+UUAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAABGAC4A" +
           "RABGAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3BlcmF0aW9uYWxEYXRhU2V0" +
           "V3JpdGVycwEAB0YALwA/B0YAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBAA5GAC4ARA5GAAAGAAAAAAEAC03/////AQH/////AAAAAA==";

        private const string AddDataSetWriter_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEFkZERhdGFTZXRXcml0ZXIBADFGAC8BADFGMUYAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQA4RgAuAEQ4RgAAlgEAAAABACoBAR4AAAANAAAA" +
           "Q29uZmlndXJhdGlvbgEA7Tz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQBDRgAuAERDRgAAlgEAAAABACoBASIAAAATAAAARGF0YVNldFdy" +
           "aXRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string RemoveDataSetWriter_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAFJlbW92ZURhdGFTZXRXcml0ZXIBAEhGAC8BAEhGSEYAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBJRgAuAERJRgAAlgEAAAABACoBASIAAAAT" +
           "AAAARGF0YVNldFdyaXRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAFdyaXRlckdyb3VwVHlwZUluc3RhbmNlAQA9RQEAPUU9RQAA////" +
           "/w8AAAAVYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQIAADtXDwAALgBEO1cPAAEALgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAATWF4TmV0d29ya01lc3NhZ2VTaXplAgAAPlcPAAAuAEQ+Vw8AAAf/////" +
           "AQH/////AAAAABdgiQoCAAAAAAAPAAAAR3JvdXBQcm9wZXJ0aWVzAgAAP1cPAAAuAEQ/Vw8AAQDFOAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAEYIAKAQAAAAAABgAAAFN0YXR1cwIAAEBXDwAALwEAMzlAVw8A////" +
           "/wEAAAAVYIkKAgAAAAAABQAAAFN0YXRlAgAAQVcPAAAvAD9BVw8AAQA3Of////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABXcml0ZXJHcm91cElkAQBIRQAuAERIRQAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAASAAAAUHVibGlzaGluZ0ludGVydmFsAQBJRQAuAERJRQAAAQAiAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA0AAABLZWVwQWxpdmVUaW1lAQBKRQAuAERKRQAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAgAAABQcmlvcml0eQEAS0UALgBES0UAAAAD/////wEB/////wAAAAAXYIkKAgAAAAAACQAAAExvY2Fs" +
           "ZUlkcwEATEUALgBETEUAAAEAJwEBAAAAAQAAAAAAAAABAf////8AAAAAFWCJCgIAAAAAAA8AAABIZWFk" +
           "ZXJMYXlvdXRVcmkBAJdEAC4ARJdEAAAADP////8BAf////8AAAAABGCACgEAAAAAABEAAABUcmFuc3Bv" +
           "cnRTZXR0aW5ncwEATUUALwEATUZNRQAA/////wAAAAAEYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5n" +
           "cwEATkUALwEATkZORQAA/////wAAAAAEYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQCURQAvAQB6TZRF" +
           "AAD/////BwAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAlUUALwA/lUUAAAEAC03/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAlkUALwEADU2WRQAAAAf/////" +
           "AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCXRQAuAESXRQAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAJhFAC4ARJhFAAABABJN/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAJlFAC4ARJlFAAABAAtN/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFRvdGFsRXJyb3IBAJtFAC8BAA1Nm0UAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAA" +
           "BgAAAEFjdGl2ZQEAnEUALgBEnEUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZp" +
           "Y2F0aW9uAQCdRQAuAESdRQAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQCeRQAuAESeRQAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEAoEUA" +
           "LwEA6UygRQAAAQH/////AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAKFFAC8AP6FFAAAAAf////8B" +
           "Af////8AAAAABGCACgEAAAAAAAgAAABDb3VudGVycwEAokUALwA6okUAAP////8JAAAAFWCJCgIAAAAA" +
           "AAoAAABTdGF0ZUVycm9yAQCjRQAvAQANTaNFAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUBAKRFAC4ARKRFAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgEApUUALgBEpUUAAAYBAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQCmRQAuAESmRQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRl" +
           "T3BlcmF0aW9uYWxCeU1ldGhvZAEAqEUALwEADU2oRQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAG" +
           "AAAAQWN0aXZlAQCpRQAuAESpRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmlj" +
           "YXRpb24BAKpFAC4ARKpFAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25v" +
           "c3RpY3NMZXZlbAEAq0UALgBEq0UAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABT" +
           "dGF0ZU9wZXJhdGlvbmFsQnlQYXJlbnQBAK1FAC8BAA1NrUUAAAAH/////wEB/////wMAAAAVYIkKAgAA" +
           "AAAABgAAAEFjdGl2ZQEArkUALgBErkUAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNz" +
           "aWZpY2F0aW9uAQCvRQAuAESvRQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERp" +
           "YWdub3N0aWNzTGV2ZWwBALBFAC4ARLBFAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZ" +
           "AAAAU3RhdGVPcGVyYXRpb25hbEZyb21FcnJvcgEAskUALwEADU2yRQAAAAf/////AQH/////AwAAABVg" +
           "iQoCAAAAAAAGAAAAQWN0aXZlAQCzRQAuAESzRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAA" +
           "Q2xhc3NpZmljYXRpb24BALRFAC4ARLRFAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQ" +
           "AAAARGlhZ25vc3RpY3NMZXZlbAEAtUUALgBEtUUAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABMAAABTdGF0ZVBhdXNlZEJ5UGFyZW50AQC3RQAvAQANTbdFAAAAB/////8BAf////8DAAAAFWCJ" +
           "CgIAAAAAAAYAAABBY3RpdmUBALhFAC4ARLhFAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABD" +
           "bGFzc2lmaWNhdGlvbgEAuUUALgBEuUUAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAA" +
           "AABEaWFnbm9zdGljc0xldmVsAQC6RQAuAES6RQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFQAAAFN0YXRlRGlzYWJsZWRCeU1ldGhvZAEAvUUALwEADU29RQAAAAf/////AQH/////AwAAABVg" +
           "iQoCAAAAAAAGAAAAQWN0aXZlAQC+RQAuAES+RQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAA" +
           "Q2xhc3NpZmljYXRpb24BAL9FAC4ARL9FAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQ" +
           "AAAARGlhZ25vc3RpY3NMZXZlbAEAwEUALgBEwEUAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABMAAABTZW50TmV0d29ya01lc3NhZ2VzAQDDRQAvAQANTcNFAAAAB/////8BAf////8DAAAAFWCJ" +
           "CgIAAAAAAAYAAABBY3RpdmUBAMhFAC4ARMhFAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABD" +
           "bGFzc2lmaWNhdGlvbgEAz0UALgBEz0UAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAA" +
           "AABEaWFnbm9zdGljc0xldmVsAQDQRQAuAETQRQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEwAAAEZhaWxlZFRyYW5zbWlzc2lvbnMBANJFAC8BAA1N0kUAAAAH/////wEB/////wMAAAAVYIkK" +
           "AgAAAAAABgAAAEFjdGl2ZQEA1kUALgBE1kUAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENs" +
           "YXNzaWZpY2F0aW9uAQDdRQAuAETdRQAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAA" +
           "AERpYWdub3N0aWNzTGV2ZWwBAORFAC4ARORFAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAARW5jcnlwdGlvbkVycm9ycwEA7EUALwEADU3sRQAAAAf/////AQH/////AwAAABVgiQoCAAAA" +
           "AAAGAAAAQWN0aXZlAQDtRQAuAETtRQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3Np" +
           "ZmljYXRpb24BAO5FAC4ARO5FAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlh" +
           "Z25vc3RpY3NMZXZlbAEA70UALgBE70UAAAYBAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoA" +
           "AABMaXZlVmFsdWVzAQDCRQAvADrCRQAA/////wIAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRh" +
           "U2V0V3JpdGVycwEA+UUALwA/+UUAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0" +
           "aWNzTGV2ZWwBAABGAC4ARABGAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3Bl" +
           "cmF0aW9uYWxEYXRhU2V0V3JpdGVycwEAB0YALwA/B0YAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBAA5GAC4ARA5GAAAGAAAAAAEAC03/////AQH/////AAAAAARhggoE" +
           "AAAAAAAQAAAAQWRkRGF0YVNldFdyaXRlcgEAMUYALwEAMUYxRgAAAQH/////AgAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBADhGAC4ARDhGAACWAQAAAAEAKgEBHgAAAA0AAABDb25maWd1cmF0aW9u" +
           "AQDtPP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAENGAC4ARENGAACWAQAAAAEAKgEBIgAAABMAAABEYXRhU2V0V3JpdGVyTm9kZUlkABH/" +
           "////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAATAAAAUmVtb3ZlRGF0YVNl" +
           "dFdyaXRlcgEASEYALwEASEZIRgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AElGAC4ARElGAACWAQAAAAEAKgEBIgAAABMAAABEYXRhU2V0V3JpdGVyTm9kZUlkABH/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ushort> WriterGroupId
        {
            get
            {
                return m_writerGroupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writerGroupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writerGroupId = value;
            }
        }

        /// <remarks />
        public PropertyState<double> PublishingInterval
        {
            get
            {
                return m_publishingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> KeepAliveTime
        {
            get
            {
                return m_keepAliveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_keepAliveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_keepAliveTime = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> Priority
        {
            get
            {
                return m_priority;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priority, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priority = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIds = value;
            }
        }

        /// <remarks />
        public PropertyState<string> HeaderLayoutUri
        {
            get
            {
                return m_headerLayoutUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_headerLayoutUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_headerLayoutUri = value;
            }
        }

        /// <remarks />
        public WriterGroupTransportState TransportSettings
        {
            get
            {
                return m_transportSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportSettings = value;
            }
        }

        /// <remarks />
        public WriterGroupMessageState MessageSettings
        {
            get
            {
                return m_messageSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageSettings = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsWriterGroupState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }

        /// <remarks />
        public PubSubGroupTypeAddWriterMethodState AddDataSetWriter
        {
            get
            {
                return m_addDataSetWriterMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addDataSetWriterMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addDataSetWriterMethod = value;
            }
        }

        /// <remarks />
        public PubSubGroupTypeRemoveWriterMethodState RemoveDataSetWriter
        {
            get
            {
                return m_removeDataSetWriterMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeDataSetWriterMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeDataSetWriterMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_writerGroupId != null)
            {
                children.Add(m_writerGroupId);
            }

            if (m_publishingInterval != null)
            {
                children.Add(m_publishingInterval);
            }

            if (m_keepAliveTime != null)
            {
                children.Add(m_keepAliveTime);
            }

            if (m_priority != null)
            {
                children.Add(m_priority);
            }

            if (m_localeIds != null)
            {
                children.Add(m_localeIds);
            }

            if (m_headerLayoutUri != null)
            {
                children.Add(m_headerLayoutUri);
            }

            if (m_transportSettings != null)
            {
                children.Add(m_transportSettings);
            }

            if (m_messageSettings != null)
            {
                children.Add(m_messageSettings);
            }

            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            if (m_addDataSetWriterMethod != null)
            {
                children.Add(m_addDataSetWriterMethod);
            }

            if (m_removeDataSetWriterMethod != null)
            {
                children.Add(m_removeDataSetWriterMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.WriterGroupId:
                {
                    if (createOrReplace)
                    {
                        if (WriterGroupId == null)
                        {
                            if (replacement == null)
                            {
                                WriterGroupId = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                WriterGroupId = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = WriterGroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingInterval:
                {
                    if (createOrReplace)
                    {
                        if (PublishingInterval == null)
                        {
                            if (replacement == null)
                            {
                                PublishingInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                PublishingInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = PublishingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.KeepAliveTime:
                {
                    if (createOrReplace)
                    {
                        if (KeepAliveTime == null)
                        {
                            if (replacement == null)
                            {
                                KeepAliveTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                KeepAliveTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = KeepAliveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Priority:
                {
                    if (createOrReplace)
                    {
                        if (Priority == null)
                        {
                            if (replacement == null)
                            {
                                Priority = new PropertyState<byte>(this);
                            }
                            else
                            {
                                Priority = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = Priority;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIds:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIds == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIds = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                LocaleIds = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIds;
                    break;
                }

                case Opc.Ua.BrowseNames.HeaderLayoutUri:
                {
                    if (createOrReplace)
                    {
                        if (HeaderLayoutUri == null)
                        {
                            if (replacement == null)
                            {
                                HeaderLayoutUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                HeaderLayoutUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = HeaderLayoutUri;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportSettings:
                {
                    if (createOrReplace)
                    {
                        if (TransportSettings == null)
                        {
                            if (replacement == null)
                            {
                                TransportSettings = new WriterGroupTransportState(this);
                            }
                            else
                            {
                                TransportSettings = (WriterGroupTransportState)replacement;
                            }
                        }
                    }

                    instance = TransportSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageSettings:
                {
                    if (createOrReplace)
                    {
                        if (MessageSettings == null)
                        {
                            if (replacement == null)
                            {
                                MessageSettings = new WriterGroupMessageState(this);
                            }
                            else
                            {
                                MessageSettings = (WriterGroupMessageState)replacement;
                            }
                        }
                    }

                    instance = MessageSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsWriterGroupState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsWriterGroupState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.AddDataSetWriter:
                {
                    if (createOrReplace)
                    {
                        if (AddDataSetWriter == null)
                        {
                            if (replacement == null)
                            {
                                AddDataSetWriter = new PubSubGroupTypeAddWriterMethodState(this);
                            }
                            else
                            {
                                AddDataSetWriter = (PubSubGroupTypeAddWriterMethodState)replacement;
                            }
                        }
                    }

                    instance = AddDataSetWriter;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveDataSetWriter:
                {
                    if (createOrReplace)
                    {
                        if (RemoveDataSetWriter == null)
                        {
                            if (replacement == null)
                            {
                                RemoveDataSetWriter = new PubSubGroupTypeRemoveWriterMethodState(this);
                            }
                            else
                            {
                                RemoveDataSetWriter = (PubSubGroupTypeRemoveWriterMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveDataSetWriter;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ushort> m_writerGroupId;
        private PropertyState<double> m_publishingInterval;
        private PropertyState<double> m_keepAliveTime;
        private PropertyState<byte> m_priority;
        private PropertyState<string[]> m_localeIds;
        private PropertyState<string> m_headerLayoutUri;
        private WriterGroupTransportState m_transportSettings;
        private WriterGroupMessageState m_messageSettings;
        private PubSubDiagnosticsWriterGroupState m_diagnostics;
        private PubSubGroupTypeAddWriterMethodState m_addDataSetWriterMethod;
        private PubSubGroupTypeRemoveWriterMethodState m_removeDataSetWriterMethod;
        #endregion
    }
    #endif
    #endregion

    #region GetWriterGroupMethodState Class
    #if (!OPCUA_EXCLUDE_GetWriterGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetWriterGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetWriterGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetWriterGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEdldFdyaXRlckdyb3VwTWV0aG9kVHlwZQEAwVwALwEAwVzBXAAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMJcAC4ARMJcAACWAQAAAAEAKgEB" +
           "HgAAAA8AAABJbmNsdWRlQ2hpbGRyZW4AAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAMNcAC4ARMNcAACWAgAAAAEAKgEBHgAAAA0AAABD" +
           "b25maWd1cmF0aW9uAQB4PP////8AAAAAAAEAKgEBFwAAAAgAAABDaGVja1N1bQAP/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetWriterGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            bool includeChildren = (bool)_inputArguments[0];

            WriterGroupDataType configuration = (WriterGroupDataType)_outputArguments[0];
            byte[] checkSum = (byte[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    includeChildren,
                    ref configuration,
                    ref checkSum);
            }

            _outputArguments[0] = configuration;
            _outputArguments[1] = checkSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetWriterGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        bool includeChildren,
        ref WriterGroupDataType configuration,
        ref byte[] checkSum);
    #endif
    #endregion

    #region ModifyWriterGroupMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyWriterGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyWriterGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyWriterGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyWriterGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAE1vZGlmeVdyaXRlckdyb3VwTWV0aG9kVHlwZQEAxFwALwEAxFzE" +
           "XAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMVcAC4ARMVcAACWBAAAAAEA" +
           "KgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQB4PP////8AAAAAAAEAKgEBHQAAAA4AAABNb2RpZnlDaGls" +
           "ZHJlbgAB/////wAAAAAAAQAqAQEXAAAACAAAAENoZWNrU3VtAA//////AAAAAAABACoBARQAAAAFAAAA" +
           "Rm9yY2UAAf////8AAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBAMZcAC4ARMZcAACWAQAAAAEAKgEBGgAAAAsAAABOZXdDaGVja1N1bQAP/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyWriterGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            WriterGroupDataType configuration = (WriterGroupDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            bool modifyChildren = (bool)_inputArguments[1];
            byte[] checkSum = (byte[])_inputArguments[2];
            bool force = (bool)_inputArguments[3];

            byte[] newCheckSum = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    modifyChildren,
                    checkSum,
                    force,
                    ref newCheckSum);
            }

            _outputArguments[0] = newCheckSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyWriterGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        WriterGroupDataType configuration,
        bool modifyChildren,
        byte[] checkSum,
        bool force,
        ref byte[] newCheckSum);
    #endif
    #endregion

    #region PubSubGroupTypeAddWriterMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubGroupTypeAddWriterMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubGroupTypeAddWriterMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubGroupTypeAddWriterMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubGroupTypeAddWriterMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAFB1YlN1Ykdyb3VwVHlwZUFkZFdyaXRlck1ldGhvZFR5cGUBAEpG" +
           "AC8BAEpGSkYAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBLRgAuAERLRgAA" +
           "lgEAAAABACoBAR4AAAANAAAAQ29uZmlndXJhdGlvbgEA7Tz/////AAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBMRgAuAERMRgAAlgEAAAABACoB" +
           "ASIAAAATAAAARGF0YVNldFdyaXRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubGroupTypeAddWriterMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetWriterDataType configuration = (DataSetWriterDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId dataSetWriterNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    ref dataSetWriterNodeId);
            }

            _outputArguments[0] = dataSetWriterNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubGroupTypeAddWriterMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        DataSetWriterDataType configuration,
        ref NodeId dataSetWriterNodeId);
    #endif
    #endregion

    #region PubSubGroupTypeRemoveWriterMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubGroupTypeRemoveWriterMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubGroupTypeRemoveWriterMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubGroupTypeRemoveWriterMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubGroupTypeRemoveWriterMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAJQAAAFB1YlN1Ykdyb3VwVHlwZVJlbW92ZVdyaXRlck1ldGhvZFR5cGUB" +
           "AB85AC8BAB85HzkAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAgOQAuAEQg" +
           "OQAAlgEAAAABACoBASIAAAATAAAARGF0YVNldFdyaXRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubGroupTypeRemoveWriterMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId dataSetWriterNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    dataSetWriterNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubGroupTypeRemoveWriterMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId dataSetWriterNodeId);
    #endif
    #endregion

    #region WriterGroupTransportState Class
    #if (!OPCUA_EXCLUDE_WriterGroupTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriterGroupTransportState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public WriterGroupTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.WriterGroupTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFdyaXRlckdyb3VwVHJhbnNwb3J0VHlwZUluc3RhbmNlAQBNRgEA" +
           "TUZNRgAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region WriterGroupMessageState Class
    #if (!OPCUA_EXCLUDE_WriterGroupMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriterGroupMessageState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public WriterGroupMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.WriterGroupMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFdyaXRlckdyb3VwTWVzc2FnZVR5cGVJbnN0YW5jZQEATkYBAE5G" +
           "TkYAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ReaderGroupState Class
    #if (!OPCUA_EXCLUDE_ReaderGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReaderGroupState : PubSubGroupState
    {
        #region Constructors
        /// <remarks />
        public ReaderGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ReaderGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }

            if (TransportSettings != null)
            {
                TransportSettings.Initialize(context, TransportSettings_InitializationString);
            }

            if (MessageSettings != null)
            {
                MessageSettings.Initialize(context, MessageSettings_InitializationString);
            }

            if (AddDataSetReader != null)
            {
                AddDataSetReader.Initialize(context, AddDataSetReader_InitializationString);
            }

            if (RemoveDataSetReader != null)
            {
                RemoveDataSetReader.Initialize(context, RemoveDataSetReader_InitializationString);
            }
        }

        #region Initialization String
        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQAXUgAvAQC/TRdSAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAGFIALwA/GFIAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAGVIALwEADU0ZUgAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQAaUgAuAEQaUgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BABtSAC4ARBtSAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBABxSAC4ARBxSAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBAB5SAC8BAA1NHlIAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAH1IA" +
           "LgBEH1IAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAgUgAuAEQg" +
           "UgAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAhUgAuAEQh" +
           "UgAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEAI1IALwEA6UwjUgAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBACRSAC8APyRSAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAJVIALwA6JVIAAP////8HAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQAmUgAvAQANTSZSAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBACdSAC4ARCdS" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAKFIALgBEKFIAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQApUgAuAEQp" +
           "UgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAK1IALwEADU0rUgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQAsUgAu" +
           "AEQsUgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAC1SAC4ARC1S" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEALlIA" +
           "LgBELlIAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBADBSAC8BAA1NMFIAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "MVIALgBEMVIAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAyUgAu" +
           "AEQyUgAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ADNSAC4ARDNSAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEANVIALwEADU01UgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQA2UgAuAEQ2UgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "ADdSAC4ARDdSAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAOFIALgBEOFIAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQA6UgAvAQANTTpSAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBADtSAC4ARDtSAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "PFIALgBEPFIAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQA9UgAuAEQ9UgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAP1IALwEADU0/UgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQBAUgAuAERAUgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AEFSAC4AREFSAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAQlIALgBEQlIAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABcAAABSZWNlaXZl" +
           "ZE5ldHdvcmtNZXNzYWdlcwEARVIALwEADU1FUgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAA" +
           "QWN0aXZlAQBGUgAuAERGUgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRp" +
           "b24BAEdSAC4AREdSAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEASFIALgBESFIAAAYAAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZl" +
           "VmFsdWVzAQBEUgAvADpEUgAA/////wIAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRhU2V0UmVh" +
           "ZGVycwEAVFIALwA/VFIAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2" +
           "ZWwBAFVSAC4ARFVSAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3BlcmF0aW9u" +
           "YWxEYXRhU2V0UmVhZGVycwEAVlIALwA/VlIAAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERp" +
           "YWdub3N0aWNzTGV2ZWwBAFdSAC4ARFdSAAAGAAAAAAEAC03/////AQH/////AAAAAA==";

        private const string TransportSettings_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQBYUgAvAQBiUlhSAAD/////AAAA" +
           "AA==";

        private const string MessageSettings_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5ncwEAWVIALwEAY1JZUgAA/////wAAAAA=";

        private const string AddDataSetReader_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEFkZERhdGFTZXRSZWFkZXIBAFpSAC8BAFpSWlIAAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBbUgAuAERbUgAAlgEAAAABACoBAR4AAAANAAAA" +
           "Q29uZmlndXJhdGlvbgEABz3/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQBcUgAuAERcUgAAlgEAAAABACoBASIAAAATAAAARGF0YVNldFJl" +
           "YWRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string RemoveDataSetReader_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAFJlbW92ZURhdGFTZXRSZWFkZXIBAF1SAC8BAF1SXVIAAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBeUgAuAEReUgAAlgEAAAABACoBASIAAAAT" +
           "AAAARGF0YVNldFJlYWRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFwAAAFJlYWRlckdyb3VwVHlwZUluc3RhbmNlAQBPRgEAT0ZPRgAA////" +
           "/wkAAAAVYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQIAAERXDwAALgBERFcPAAEALgH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAVAAAATWF4TmV0d29ya01lc3NhZ2VTaXplAgAAR1cPAAAuAERHVw8AAAf/////" +
           "AQH/////AAAAABdgiQoCAAAAAAAPAAAAR3JvdXBQcm9wZXJ0aWVzAgAASFcPAAAuAERIVw8AAQDFOAEA" +
           "AAABAAAAAAAAAAEB/////wAAAAAEYIAKAQAAAAAABgAAAFN0YXR1cwIAAElXDwAALwEAMzlJVw8A////" +
           "/wEAAAAVYIkKAgAAAAAABQAAAFN0YXRlAgAASlcPAAAvAD9KVw8AAQA3Of////8BAf////8AAAAABGCA" +
           "CgEAAAAAAAsAAABEaWFnbm9zdGljcwEAF1IALwEAv00XUgAA/////wcAAAAVYIkKAgAAAAAAEAAAAERp" +
           "YWdub3N0aWNzTGV2ZWwBABhSAC8APxhSAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAFRv" +
           "dGFsSW5mb3JtYXRpb24BABlSAC8BAA1NGVIAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAGlIALgBEGlIAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQAbUgAuAEQbUgAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVs" +
           "AQAcUgAuAEQcUgAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABUb3RhbEVycm9yAQAeUgAv" +
           "AQANTR5SAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAB9SAC4ARB9SAAAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAIFIALgBEIFIAAAEAEk3/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAIVIALgBEIVIAAAEAC03/////" +
           "AQH/////AAAAAARhggoEAAAAAAAFAAAAUmVzZXQBACNSAC8BAOlMI1IAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFN1YkVycm9yAQAkUgAvAD8kUgAAAAH/////AQH/////AAAAAARggAoBAAAAAAAIAAAAQ291" +
           "bnRlcnMBACVSAC8AOiVSAAD/////BwAAABVgiQoCAAAAAAAKAAAAU3RhdGVFcnJvcgEAJlIALwEADU0m" +
           "UgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQAnUgAuAEQnUgAAAAH/////AQH/" +
           "////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAChSAC4ARChSAAAGAQAAAAEAEk3/////" +
           "AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAKVIALgBEKVIAAAYAAAAAAQAL" +
           "Tf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFsQnlNZXRob2QBACtSAC8B" +
           "AA1NK1IAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEALFIALgBELFIAAAAB////" +
           "/wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAtUgAuAEQtUgAABgAAAAABABJN" +
           "/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAC5SAC4ARC5SAAAGAAAA" +
           "AAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRpb25hbEJ5UGFyZW50AQAw" +
           "UgAvAQANTTBSAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBADFSAC4ARDFSAAAA" +
           "Af////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAMlIALgBEMlIAAAYAAAAA" +
           "AQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAzUgAuAEQzUgAA" +
           "BgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAFN0YXRlT3BlcmF0aW9uYWxGcm9tRXJy" +
           "b3IBADVSAC8BAA1NNVIAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEANlIALgBE" +
           "NlIAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQA3UgAuAEQ3UgAA" +
           "BgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBADhSAC4A" +
           "RDhSAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3RhdGVQYXVzZWRCeVBhcmVu" +
           "dAEAOlIALwEADU06UgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQA7UgAuAEQ7" +
           "UgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BADxSAC4ARDxSAAAG" +
           "AAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAPVIALgBE" +
           "PVIAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABTdGF0ZURpc2FibGVkQnlNZXRo" +
           "b2QBAD9SAC8BAA1NP1IAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAQFIALgBE" +
           "QFIAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBBUgAuAERBUgAA" +
           "BgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAEJSAC4A" +
           "REJSAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAXAAAAUmVjZWl2ZWROZXR3b3JrTWVz" +
           "c2FnZXMBAEVSAC8BAA1NRVIAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEARlIA" +
           "LgBERlIAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBHUgAuAERH" +
           "UgAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAEhS" +
           "AC4AREhSAAAGAAAAAAEAC03/////AQH/////AAAAAARggAoBAAAAAAAKAAAATGl2ZVZhbHVlcwEARFIA" +
           "LwA6RFIAAP////8CAAAAFWCJCgIAAAAAABgAAABDb25maWd1cmVkRGF0YVNldFJlYWRlcnMBAFRSAC8A" +
           "P1RSAAAABf////8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBVUgAuAERV" +
           "UgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE9wZXJhdGlvbmFsRGF0YVNldFJl" +
           "YWRlcnMBAFZSAC8AP1ZSAAAABf////8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQBXUgAuAERXUgAABgAAAAABAAtN/////wEB/////wAAAAAEYIAKAQAAAAAAEQAAAFRyYW5zcG9y" +
           "dFNldHRpbmdzAQBYUgAvAQBiUlhSAAD/////AAAAAARggAoBAAAAAAAPAAAATWVzc2FnZVNldHRpbmdz" +
           "AQBZUgAvAQBjUllSAAD/////AAAAAARhggoEAAAAAAAQAAAAQWRkRGF0YVNldFJlYWRlcgEAWlIALwEA" +
           "WlJaUgAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFtSAC4ARFtSAACWAQAA" +
           "AAEAKgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQAHPf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFxSAC4ARFxSAACWAQAAAAEAKgEBIgAA" +
           "ABMAAABEYXRhU2V0UmVhZGVyTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AARhggoEAAAAAAATAAAAUmVtb3ZlRGF0YVNldFJlYWRlcgEAXVIALwEAXVJdUgAAAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAF5SAC4ARF5SAACWAQAAAAEAKgEBIgAAABMAAABEYXRh" +
           "U2V0UmVhZGVyTm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PubSubDiagnosticsReaderGroupState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }

        /// <remarks />
        public ReaderGroupTransportState TransportSettings
        {
            get
            {
                return m_transportSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportSettings = value;
            }
        }

        /// <remarks />
        public ReaderGroupMessageState MessageSettings
        {
            get
            {
                return m_messageSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageSettings = value;
            }
        }

        /// <remarks />
        public PubSubGroupTypeAddReaderMethodState AddDataSetReader
        {
            get
            {
                return m_addDataSetReaderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addDataSetReaderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addDataSetReaderMethod = value;
            }
        }

        /// <remarks />
        public PubSubGroupTypeRemoveReaderMethodState RemoveDataSetReader
        {
            get
            {
                return m_removeDataSetReaderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeDataSetReaderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeDataSetReaderMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            if (m_transportSettings != null)
            {
                children.Add(m_transportSettings);
            }

            if (m_messageSettings != null)
            {
                children.Add(m_messageSettings);
            }

            if (m_addDataSetReaderMethod != null)
            {
                children.Add(m_addDataSetReaderMethod);
            }

            if (m_removeDataSetReaderMethod != null)
            {
                children.Add(m_removeDataSetReaderMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsReaderGroupState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsReaderGroupState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportSettings:
                {
                    if (createOrReplace)
                    {
                        if (TransportSettings == null)
                        {
                            if (replacement == null)
                            {
                                TransportSettings = new ReaderGroupTransportState(this);
                            }
                            else
                            {
                                TransportSettings = (ReaderGroupTransportState)replacement;
                            }
                        }
                    }

                    instance = TransportSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageSettings:
                {
                    if (createOrReplace)
                    {
                        if (MessageSettings == null)
                        {
                            if (replacement == null)
                            {
                                MessageSettings = new ReaderGroupMessageState(this);
                            }
                            else
                            {
                                MessageSettings = (ReaderGroupMessageState)replacement;
                            }
                        }
                    }

                    instance = MessageSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.AddDataSetReader:
                {
                    if (createOrReplace)
                    {
                        if (AddDataSetReader == null)
                        {
                            if (replacement == null)
                            {
                                AddDataSetReader = new PubSubGroupTypeAddReaderMethodState(this);
                            }
                            else
                            {
                                AddDataSetReader = (PubSubGroupTypeAddReaderMethodState)replacement;
                            }
                        }
                    }

                    instance = AddDataSetReader;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveDataSetReader:
                {
                    if (createOrReplace)
                    {
                        if (RemoveDataSetReader == null)
                        {
                            if (replacement == null)
                            {
                                RemoveDataSetReader = new PubSubGroupTypeRemoveReaderMethodState(this);
                            }
                            else
                            {
                                RemoveDataSetReader = (PubSubGroupTypeRemoveReaderMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveDataSetReader;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PubSubDiagnosticsReaderGroupState m_diagnostics;
        private ReaderGroupTransportState m_transportSettings;
        private ReaderGroupMessageState m_messageSettings;
        private PubSubGroupTypeAddReaderMethodState m_addDataSetReaderMethod;
        private PubSubGroupTypeRemoveReaderMethodState m_removeDataSetReaderMethod;
        #endregion
    }
    #endif
    #endregion

    #region GetReaderGroupMethodState Class
    #if (!OPCUA_EXCLUDE_GetReaderGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetReaderGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetReaderGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetReaderGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEdldFJlYWRlckdyb3VwTWV0aG9kVHlwZQEA11wALwEA11zXXAAA" +
           "AQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANhcAC4ARNhcAACWAQAAAAEAKgEB" +
           "HgAAAA8AAABJbmNsdWRlQ2hpbGRyZW4AAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBANlcAC4ARNlcAACWAgAAAAEAKgEBHgAAAA0AAABD" +
           "b25maWd1cmF0aW9uAQCgPP////8AAAAAAAEAKgEBFwAAAAgAAABDaGVja1N1bQAP/////wAAAAAAAQAo" +
           "AQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetReaderGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            bool includeChildren = (bool)_inputArguments[0];

            ReaderGroupDataType configuration = (ReaderGroupDataType)_outputArguments[0];
            byte[] checkSum = (byte[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    includeChildren,
                    ref configuration,
                    ref checkSum);
            }

            _outputArguments[0] = configuration;
            _outputArguments[1] = checkSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetReaderGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        bool includeChildren,
        ref ReaderGroupDataType configuration,
        ref byte[] checkSum);
    #endif
    #endregion

    #region ModifyReaderGroupMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyReaderGroupMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyReaderGroupMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyReaderGroupMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyReaderGroupMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAE1vZGlmeVJlYWRlckdyb3VwTWV0aG9kVHlwZQEA2lwALwEA2lza" +
           "XAAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANtcAC4ARNtcAACWBAAAAAEA" +
           "KgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQCgPP////8AAAAAAAEAKgEBHQAAAA4AAABNb2RpZnlDaGls" +
           "ZHJlbgAB/////wAAAAAAAQAqAQEXAAAACAAAAENoZWNrU3VtAA//////AAAAAAABACoBARQAAAAFAAAA" +
           "Rm9yY2UAAf////8AAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRw" +
           "dXRBcmd1bWVudHMBANxcAC4ARNxcAACWAQAAAAEAKgEBGgAAAAsAAABOZXdDaGVja1N1bQAP/////wAA" +
           "AAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyReaderGroupMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ReaderGroupDataType configuration = (ReaderGroupDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            bool modifyChildren = (bool)_inputArguments[1];
            byte[] checkSum = (byte[])_inputArguments[2];
            bool force = (bool)_inputArguments[3];

            byte[] newCheckSum = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    modifyChildren,
                    checkSum,
                    force,
                    ref newCheckSum);
            }

            _outputArguments[0] = newCheckSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyReaderGroupMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ReaderGroupDataType configuration,
        bool modifyChildren,
        byte[] checkSum,
        bool force,
        ref byte[] newCheckSum);
    #endif
    #endregion

    #region PubSubGroupTypeAddReaderMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubGroupTypeAddReaderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubGroupTypeAddReaderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubGroupTypeAddReaderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubGroupTypeAddReaderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAFB1YlN1Ykdyb3VwVHlwZUFkZFJlYWRlck1ldGhvZFR5cGUBAF9S" +
           "AC8BAF9SX1IAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBgUgAuAERgUgAA" +
           "lgEAAAABACoBAR4AAAANAAAAQ29uZmlndXJhdGlvbgEABz3/////AAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBhUgAuAERhUgAAlgEAAAABACoB" +
           "ASIAAAATAAAARGF0YVNldFJlYWRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubGroupTypeAddReaderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetReaderDataType configuration = (DataSetReaderDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId dataSetReaderNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    ref dataSetReaderNodeId);
            }

            _outputArguments[0] = dataSetReaderNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubGroupTypeAddReaderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        DataSetReaderDataType configuration,
        ref NodeId dataSetReaderNodeId);
    #endif
    #endregion

    #region PubSubGroupTypeRemoveReaderMethodState Class
    #if (!OPCUA_EXCLUDE_PubSubGroupTypeRemoveReaderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubGroupTypeRemoveReaderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public PubSubGroupTypeRemoveReaderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new PubSubGroupTypeRemoveReaderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAJQAAAFB1YlN1Ykdyb3VwVHlwZVJlbW92ZVJlYWRlck1ldGhvZFR5cGUB" +
           "ACE5AC8BACE5ITkAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAiOQAuAEQi" +
           "OQAAlgEAAAABACoBASIAAAATAAAARGF0YVNldFJlYWRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public PubSubGroupTypeRemoveReaderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId dataSetReaderNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    dataSetReaderNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult PubSubGroupTypeRemoveReaderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId dataSetReaderNodeId);
    #endif
    #endregion

    #region ReaderGroupTransportState Class
    #if (!OPCUA_EXCLUDE_ReaderGroupTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReaderGroupTransportState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ReaderGroupTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ReaderGroupTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFJlYWRlckdyb3VwVHJhbnNwb3J0VHlwZUluc3RhbmNlAQBiUgEA" +
           "YlJiUgAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ReaderGroupMessageState Class
    #if (!OPCUA_EXCLUDE_ReaderGroupMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReaderGroupMessageState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ReaderGroupMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ReaderGroupMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFJlYWRlckdyb3VwTWVzc2FnZVR5cGVJbnN0YW5jZQEAY1IBAGNS" +
           "Y1IAAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataSetWriterState Class
    #if (!OPCUA_EXCLUDE_DataSetWriterState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetWriterState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetWriterState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetWriterType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (KeyFrameCount != null)
            {
                KeyFrameCount.Initialize(context, KeyFrameCount_InitializationString);
            }

            if (TransportSettings != null)
            {
                TransportSettings.Initialize(context, TransportSettings_InitializationString);
            }

            if (MessageSettings != null)
            {
                MessageSettings.Initialize(context, MessageSettings_InitializationString);
            }

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }
        }

        #region Initialization String
        private const string KeyFrameCount_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEtleUZyYW1lQ291bnQBAGZSAC4ARGZSAAAAB/////8BAf////8A" +
           "AAAA";

        private const string TransportSettings_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQDHOwAvAQDJO8c7AAD/////AAAA" +
           "AA==";

        private const string MessageSettings_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5ncwEAZ1IALwEAaFJnUgAA/////wAAAAA=";

        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQBeTAAvAQAATl5MAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAX0wALwA/X0wAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAYEwALwEADU1gTAAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQBhTAAuAERhTAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAGJMAC4ARGJMAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAGNMAC4ARGNMAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBAGVMAC8BAA1NZUwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAZkwA" +
           "LgBEZkwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBnTAAuAERn" +
           "TAAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBoTAAuAERo" +
           "TAAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEAakwALwEA6UxqTAAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAGtMAC8AP2tMAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAbEwALwA6bEwAAP////8HAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQBtTAAvAQANTW1MAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAG5MAC4ARG5M" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAb0wALgBEb0wAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBwTAAuAERw" +
           "TAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAckwALwEADU1yTAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQBzTAAu" +
           "AERzTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAHRMAC4ARHRM" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAdUwA" +
           "LgBEdUwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBAHdMAC8BAA1Nd0wAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "eEwALgBEeEwAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQB5TAAu" +
           "AER5TAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "AHpMAC4ARHpMAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAfEwALwEADU18TAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQB9TAAuAER9TAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AH5MAC4ARH5MAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAf0wALgBEf0wAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQCBTAAvAQANTYFMAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAIJMAC4ARIJMAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "g0wALgBEg0wAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQCETAAuAESETAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAhkwALwEADU2GTAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQCHTAAuAESHTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AIhMAC4ARIhMAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAiUwALgBEiUwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABGYWlsZWRE" +
           "YXRhU2V0TWVzc2FnZXMBAIxMAC8BAA1NjEwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAjUwALgBEjUwAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQCOTAAuAESOTAAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBAI9MAC4ARI9MAAAGAAAAAAEAC03/////AQH/////AAAAAARggAoBAAAAAAAKAAAATGl2ZVZh" +
           "bHVlcwEAi0wALwA6i0wAAP////8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAERhdGFTZXRXcml0ZXJUeXBlSW5zdGFuY2UBAMI7AQDCO8I7AAD/" +
           "////CAAAABVgiQoCAAAAAAAPAAAARGF0YVNldFdyaXRlcklkAQBkUgAuAERkUgAAAAX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAXAAAARGF0YVNldEZpZWxkQ29udGVudE1hc2sBAGVSAC4ARGVSAAABAN88////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADQAAAEtleUZyYW1lQ291bnQBAGZSAC4ARGZSAAAAB/////8BAf//" +
           "//8AAAAAF2CJCgIAAAAAABcAAABEYXRhU2V0V3JpdGVyUHJvcGVydGllcwEAVUQALgBEVUQAAAEAxTgB" +
           "AAAAAQAAAAAAAAABAf////8AAAAABGCACgEAAAAAABEAAABUcmFuc3BvcnRTZXR0aW5ncwEAxzsALwEA" +
           "yTvHOwAA/////wAAAAAEYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5ncwEAZ1IALwEAaFJnUgAA////" +
           "/wAAAAAEYIAKAQAAAAAABgAAAFN0YXR1cwEAwzsALwEAMznDOwAA/////wEAAAAVYIkKAgAAAAAABQAA" +
           "AFN0YXRlAQDEOwAvAD/EOwAAAQA3Of////8BAf////8AAAAABGCACgEAAAAAAAsAAABEaWFnbm9zdGlj" +
           "cwEAXkwALwEAAE5eTAAA/////wcAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAF9MAC8A" +
           "P19MAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAFRvdGFsSW5mb3JtYXRpb24BAGBMAC8B" +
           "AA1NYEwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAYUwALgBEYUwAAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBiTAAuAERiTAAAAQASTf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBjTAAuAERjTAAAAQALTf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAoAAABUb3RhbEVycm9yAQBlTAAvAQANTWVMAAAAB/////8BAf////8D" +
           "AAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAGZMAC4ARGZMAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA4AAABDbGFzc2lmaWNhdGlvbgEAZ0wALgBEZ0wAAAEAEk3/////AQH/////AAAAABVgiQoCAAAAAAAQ" +
           "AAAARGlhZ25vc3RpY3NMZXZlbAEAaEwALgBEaEwAAAEAC03/////AQH/////AAAAAARhggoEAAAAAAAF" +
           "AAAAUmVzZXQBAGpMAC8BAOlMakwAAAEB/////wAAAAAVYIkKAgAAAAAACAAAAFN1YkVycm9yAQBrTAAv" +
           "AD9rTAAAAAH/////AQH/////AAAAAARggAoBAAAAAAAIAAAAQ291bnRlcnMBAGxMAC8AOmxMAAD/////" +
           "BwAAABVgiQoCAAAAAAAKAAAAU3RhdGVFcnJvcgEAbUwALwEADU1tTAAAAAf/////AQH/////AwAAABVg" +
           "iQoCAAAAAAAGAAAAQWN0aXZlAQBuTAAuAERuTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAA" +
           "Q2xhc3NpZmljYXRpb24BAG9MAC4ARG9MAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQ" +
           "AAAARGlhZ25vc3RpY3NMZXZlbAEAcEwALgBEcEwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABgAAABTdGF0ZU9wZXJhdGlvbmFsQnlNZXRob2QBAHJMAC8BAA1NckwAAAAH/////wEB/////wMA" +
           "AAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAc0wALgBEc0wAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAA" +
           "DgAAAENsYXNzaWZpY2F0aW9uAQB0TAAuAER0TAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAA" +
           "AAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAHVMAC4ARHVMAAAGAAAAAAEAC03/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRpb25hbEJ5UGFyZW50AQB3TAAvAQANTXdMAAAAB/////8BAf//" +
           "//8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAHhMAC4ARHhMAAAAAf////8BAf////8AAAAAFWCpCgIA" +
           "AAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAeUwALgBEeUwAAAYAAAAAAQASTf////8BAf////8AAAAAFWCp" +
           "CgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQB6TAAuAER6TAAABgAAAAABAAtN/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAGQAAAFN0YXRlT3BlcmF0aW9uYWxGcm9tRXJyb3IBAHxMAC8BAA1NfEwAAAAH////" +
           "/wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAfUwALgBEfUwAAAAB/////wEB/////wAAAAAV" +
           "YKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQB+TAAuAER+TAAABgAAAAABABJN/////wEB/////wAA" +
           "AAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAH9MAC4ARH9MAAAGAAAAAAEAC03/////AQH/" +
           "////AAAAABVgiQoCAAAAAAATAAAAU3RhdGVQYXVzZWRCeVBhcmVudAEAgUwALwEADU2BTAAAAAf/////" +
           "AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCCTAAuAESCTAAAAAH/////AQH/////AAAAABVg" +
           "qQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAINMAC4ARINMAAAGAAAAAAEAEk3/////AQH/////AAAA" +
           "ABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAhEwALgBEhEwAAAYAAAAAAQALTf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABUAAABTdGF0ZURpc2FibGVkQnlNZXRob2QBAIZMAC8BAA1NhkwAAAAH////" +
           "/wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAh0wALgBEh0wAAAAB/////wEB/////wAAAAAV" +
           "YKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCITAAuAESITAAABgAAAAABABJN/////wEB/////wAA" +
           "AAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAIlMAC4ARIlMAAAGAAAAAAEAC03/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAVAAAARmFpbGVkRGF0YVNldE1lc3NhZ2VzAQCMTAAvAQANTYxMAAAAB///" +
           "//8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAI1MAC4ARI1MAAAAAf////8BAf////8AAAAA" +
           "FWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAjkwALgBEjkwAAAYBAAAAAQASTf////8BAf////8A" +
           "AAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCPTAAuAESPTAAABgAAAAABAAtN/////wEB" +
           "/////wAAAAAEYIAKAQAAAAAACgAAAExpdmVWYWx1ZXMBAItMAC8AOotMAAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ushort> DataSetWriterId
        {
            get
            {
                return m_dataSetWriterId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetWriterId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetWriterId = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DataSetFieldContentMask
        {
            get
            {
                return m_dataSetFieldContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetFieldContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetFieldContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> KeyFrameCount
        {
            get
            {
                return m_keyFrameCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_keyFrameCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_keyFrameCount = value;
            }
        }

        /// <remarks />
        public PropertyState<KeyValuePair[]> DataSetWriterProperties
        {
            get
            {
                return m_dataSetWriterProperties;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetWriterProperties, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetWriterProperties = value;
            }
        }

        /// <remarks />
        public DataSetWriterTransportState TransportSettings
        {
            get
            {
                return m_transportSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportSettings = value;
            }
        }

        /// <remarks />
        public DataSetWriterMessageState MessageSettings
        {
            get
            {
                return m_messageSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageSettings = value;
            }
        }

        /// <remarks />
        public PubSubStatusState Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsDataSetWriterState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dataSetWriterId != null)
            {
                children.Add(m_dataSetWriterId);
            }

            if (m_dataSetFieldContentMask != null)
            {
                children.Add(m_dataSetFieldContentMask);
            }

            if (m_keyFrameCount != null)
            {
                children.Add(m_keyFrameCount);
            }

            if (m_dataSetWriterProperties != null)
            {
                children.Add(m_dataSetWriterProperties);
            }

            if (m_transportSettings != null)
            {
                children.Add(m_transportSettings);
            }

            if (m_messageSettings != null)
            {
                children.Add(m_messageSettings);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DataSetWriterId:
                {
                    if (createOrReplace)
                    {
                        if (DataSetWriterId == null)
                        {
                            if (replacement == null)
                            {
                                DataSetWriterId = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                DataSetWriterId = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = DataSetWriterId;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetFieldContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetFieldContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetFieldContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetFieldContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetFieldContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.KeyFrameCount:
                {
                    if (createOrReplace)
                    {
                        if (KeyFrameCount == null)
                        {
                            if (replacement == null)
                            {
                                KeyFrameCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                KeyFrameCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = KeyFrameCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetWriterProperties:
                {
                    if (createOrReplace)
                    {
                        if (DataSetWriterProperties == null)
                        {
                            if (replacement == null)
                            {
                                DataSetWriterProperties = new PropertyState<KeyValuePair[]>(this);
                            }
                            else
                            {
                                DataSetWriterProperties = (PropertyState<KeyValuePair[]>)replacement;
                            }
                        }
                    }

                    instance = DataSetWriterProperties;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportSettings:
                {
                    if (createOrReplace)
                    {
                        if (TransportSettings == null)
                        {
                            if (replacement == null)
                            {
                                TransportSettings = new DataSetWriterTransportState(this);
                            }
                            else
                            {
                                TransportSettings = (DataSetWriterTransportState)replacement;
                            }
                        }
                    }

                    instance = TransportSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageSettings:
                {
                    if (createOrReplace)
                    {
                        if (MessageSettings == null)
                        {
                            if (replacement == null)
                            {
                                MessageSettings = new DataSetWriterMessageState(this);
                            }
                            else
                            {
                                MessageSettings = (DataSetWriterMessageState)replacement;
                            }
                        }
                    }

                    instance = MessageSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PubSubStatusState(this);
                            }
                            else
                            {
                                Status = (PubSubStatusState)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsDataSetWriterState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsDataSetWriterState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ushort> m_dataSetWriterId;
        private PropertyState<uint> m_dataSetFieldContentMask;
        private PropertyState<uint> m_keyFrameCount;
        private PropertyState<KeyValuePair[]> m_dataSetWriterProperties;
        private DataSetWriterTransportState m_transportSettings;
        private DataSetWriterMessageState m_messageSettings;
        private PubSubStatusState m_status;
        private PubSubDiagnosticsDataSetWriterState m_diagnostics;
        #endregion
    }
    #endif
    #endregion

    #region GetDataSetWriterMethodState Class
    #if (!OPCUA_EXCLUDE_GetDataSetWriterMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetDataSetWriterMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetDataSetWriterMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetDataSetWriterMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEdldERhdGFTZXRXcml0ZXJNZXRob2RUeXBlAQDjXAAvAQDjXONc" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAORcAC4ARORcAACWAgAAAAEA" +
           "KgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQDtPP////8AAAAAAAEAKgEBFwAAAAgAAABDaGVja1N1bQAP" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetDataSetWriterMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetWriterDataType configuration = (DataSetWriterDataType)_outputArguments[0];
            byte[] checkSum = (byte[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref configuration,
                    ref checkSum);
            }

            _outputArguments[0] = configuration;
            _outputArguments[1] = checkSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetDataSetWriterMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref DataSetWriterDataType configuration,
        ref byte[] checkSum);
    #endif
    #endregion

    #region ModifyDataSetWriterMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyDataSetWriterMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyDataSetWriterMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyDataSetWriterMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyDataSetWriterMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAE1vZGlmeURhdGFTZXRXcml0ZXJNZXRob2RUeXBlAQDlXAAvAQDl" +
           "XOVcAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA5lwALgBE5lwAAJYDAAAA" +
           "AQAqAQEeAAAADQAAAENvbmZpZ3VyYXRpb24BAO08/////wAAAAAAAQAqAQEXAAAACAAAAENoZWNrU3Vt" +
           "AA//////AAAAAAABACoBARQAAAAFAAAARm9yY2UAAf////8AAAAAAAEAKAEBAAAAAQAAAAMAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOdcAC4AROdcAACWAQAAAAEAKgEBGgAA" +
           "AAsAAABOZXdDaGVja1N1bQAP/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyDataSetWriterMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetWriterDataType configuration = (DataSetWriterDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            byte[] checkSum = (byte[])_inputArguments[1];
            bool force = (bool)_inputArguments[2];

            byte[] newCheckSum = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    checkSum,
                    force,
                    ref newCheckSum);
            }

            _outputArguments[0] = newCheckSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyDataSetWriterMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        DataSetWriterDataType configuration,
        byte[] checkSum,
        bool force,
        ref byte[] newCheckSum);
    #endif
    #endregion

    #region DataSetWriterTransportState Class
    #if (!OPCUA_EXCLUDE_DataSetWriterTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetWriterTransportState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetWriterTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetWriterTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAERhdGFTZXRXcml0ZXJUcmFuc3BvcnRUeXBlSW5zdGFuY2UBAMk7" +
           "AQDJO8k7AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataSetWriterMessageState Class
    #if (!OPCUA_EXCLUDE_DataSetWriterMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetWriterMessageState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetWriterMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetWriterMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAERhdGFTZXRXcml0ZXJNZXNzYWdlVHlwZUluc3RhbmNlAQBoUgEA" +
           "aFJoUgAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataSetReaderState Class
    #if (!OPCUA_EXCLUDE_DataSetReaderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetReaderState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetReaderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetReaderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SecurityMode != null)
            {
                SecurityMode.Initialize(context, SecurityMode_InitializationString);
            }

            if (SecurityGroupId != null)
            {
                SecurityGroupId.Initialize(context, SecurityGroupId_InitializationString);
            }

            if (SecurityKeyServices != null)
            {
                SecurityKeyServices.Initialize(context, SecurityKeyServices_InitializationString);
            }

            if (TransportSettings != null)
            {
                TransportSettings.Initialize(context, TransportSettings_InitializationString);
            }

            if (MessageSettings != null)
            {
                MessageSettings.Initialize(context, MessageSettings_InitializationString);
            }

            if (Diagnostics != null)
            {
                Diagnostics.Initialize(context, Diagnostics_InitializationString);
            }

            if (CreateTargetVariables != null)
            {
                CreateTargetVariables.Initialize(context, CreateTargetVariables_InitializationString);
            }

            if (CreateDataSetMirror != null)
            {
                CreateDataSetMirror.Initialize(context, CreateDataSetMirror_InitializationString);
            }
        }

        #region Initialization String
        private const string SecurityMode_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEAPD4ALgBEPD4AAAEALgH/////AQH/////" +
           "AAAAAA==";

        private const string SecurityGroupId_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFNlY3VyaXR5R3JvdXBJZAEAPT4ALgBEPT4AAAAM/////wEB////" +
           "/wAAAAA=";

        private const string SecurityKeyServices_InitializationString =
           "//////////8XYIkKAgAAAAAAEwAAAFNlY3VyaXR5S2V5U2VydmljZXMBAD4+AC4ARD4+AAABADgBAQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string TransportSettings_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQDPOwAvAQDXO887AAD/////AAAA" +
           "AA==";

        private const string MessageSettings_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE1lc3NhZ2VTZXR0aW5ncwEAb1IALwEAcFJvUgAA/////wAAAAA=";

        private const string Diagnostics_InitializationString =
           "//////////8EYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQCZTAAvAQA7TplMAAD/////BwAAABVgiQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAmkwALwA/mkwAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAm0wALwEADU2bTAAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQCcTAAuAEScTAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAJ1MAC4ARJ1MAAABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAJ5MAC4ARJ5MAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFs" +
           "RXJyb3IBAKBMAC8BAA1NoEwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAoUwA" +
           "LgBEoUwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCiTAAuAESi" +
           "TAAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCjTAAuAESj" +
           "TAAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAEApUwALwEA6UylTAAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAKZMAC8AP6ZMAAAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAp0wALwA6p0wAAP////8HAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQCoTAAvAQANTahMAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAKlMAC4ARKlM" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAqkwALgBEqkwAAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCrTAAuAESr" +
           "TAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEArUwALwEADU2tTAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCuTAAu" +
           "AESuTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAK9MAC4ARK9M" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAsEwA" +
           "LgBEsEwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBALJMAC8BAA1NskwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "s0wALgBEs0wAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQC0TAAu" +
           "AES0TAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ALVMAC4ARLVMAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAt0wALwEADU23TAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQC4TAAuAES4TAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "ALlMAC4ARLlMAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAukwALgBEukwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQC8TAAvAQANTbxMAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAL1MAC4ARL1MAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "vkwALgBEvkwAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQC/TAAuAES/TAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAwUwALwEADU3BTAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQDCTAAuAETCTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AMNMAC4ARMNMAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAxEwALgBExEwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABUAAABGYWlsZWRE" +
           "YXRhU2V0TWVzc2FnZXMBAMdMAC8BAA1Nx0wAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAyEwALgBEyEwAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQDJTAAuAETJTAAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBAMpMAC4ARMpMAAAGAAAAAAEAC03/////AQH/////AAAAAARggAoBAAAAAAAKAAAATGl2ZVZh" +
           "bHVlcwEAxkwALwA6xkwAAP////8AAAAA";

        private const string CreateTargetVariables_InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAENyZWF0ZVRhcmdldFZhcmlhYmxlcwEA6kMALwEA6kPqQwAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOtDAC4AROtDAACWAgAAAAEAKgEBJQAA" +
           "ABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASkAAAAUAAAAVGFyZ2V0VmFy" +
           "aWFibGVzVG9BZGQBAJg5AQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOxDAC4AROxDAACWAQAAAAEAKgEBHQAAAAoAAABBZGRSZXN1" +
           "bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string CreateDataSetMirror_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAENyZWF0ZURhdGFTZXRNaXJyb3IBAO1DAC8BAO1D7UMAAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDuQwAuAETuQwAAlgIAAAABACoBAR0AAAAO" +
           "AAAAUGFyZW50Tm9kZU5hbWUADP////8AAAAAAAEAKgEBIgAAAA8AAABSb2xlUGVybWlzc2lvbnMAYAEA" +
           "AAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQDvQwAuAETvQwAAlgEAAAABACoBARsAAAAMAAAAUGFyZW50Tm9kZUlkABH/////AAAAAAAB" +
           "ACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGQAAAERhdGFTZXRSZWFkZXJUeXBlSW5zdGFuY2UBAMo7AQDKO8o7AAD/" +
           "////EwAAABVgiQoCAAAAAAALAAAAUHVibGlzaGVySWQBAGlSAC4ARGlSAAAAGP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABXcml0ZXJHcm91cElkAQBqUgAuAERqUgAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAARGF0YVNldFdyaXRlcklkAQBrUgAuAERrUgAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAARGF0YVNldE1ldGFEYXRhAQBsUgAuAERsUgAAAQC7OP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABcAAABEYXRhU2V0RmllbGRDb250ZW50TWFzawEAbVIALgBEbVIAAAEA3zz/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAVAAAATWVzc2FnZVJlY2VpdmVUaW1lb3V0AQBuUgAuAERuUgAAAQAiAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA0AAABLZXlGcmFtZUNvdW50AQCbRAAuAESbRAAAAAf/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAASGVhZGVyTGF5b3V0VXJpAQCcRAAuAEScRAAAAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAMAAAAU2VjdXJpdHlNb2RlAQA8PgAuAEQ8PgAAAQAuAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABTZWN1cml0eUdyb3VwSWQBAD0+AC4ARD0+AAAADP////8BAf////8AAAAAF2CJCgIAAAAAABMA" +
           "AABTZWN1cml0eUtleVNlcnZpY2VzAQA+PgAuAEQ+PgAAAQA4AQEAAAABAAAAAAAAAAEB/////wAAAAAX" +
           "YIkKAgAAAAAAFwAAAERhdGFTZXRSZWFkZXJQcm9wZXJ0aWVzAQBWRAAuAERWRAAAAQDFOAEAAAABAAAA" +
           "AAAAAAEB/////wAAAAAEYIAKAQAAAAAAEQAAAFRyYW5zcG9ydFNldHRpbmdzAQDPOwAvAQDXO887AAD/" +
           "////AAAAAARggAoBAAAAAAAPAAAATWVzc2FnZVNldHRpbmdzAQBvUgAvAQBwUm9SAAD/////AAAAAARg" +
           "gAoBAAAAAAAGAAAAU3RhdHVzAQDLOwAvAQAzOcs7AAD/////AQAAABVgiQoCAAAAAAAFAAAAU3RhdGUB" +
           "AMw7AC8AP8w7AAABADc5/////wEB/////wAAAAAEYIAKAQAAAAAACwAAAERpYWdub3N0aWNzAQCZTAAv" +
           "AQA7TplMAAD/////BwAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAmkwALwA/mkwAAAEA" +
           "C03/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgEAm0wALwEADU2bTAAA" +
           "AAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCcTAAuAEScTAAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAJ1MAC4ARJ1MAAABABJN/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAJ5MAC4ARJ5MAAABAAtN/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFRvdGFsRXJyb3IBAKBMAC8BAA1NoEwAAAAH/////wEB/////wMAAAAVYIkK" +
           "AgAAAAAABgAAAEFjdGl2ZQEAoUwALgBEoUwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENs" +
           "YXNzaWZpY2F0aW9uAQCiTAAuAESiTAAAAQASTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFn" +
           "bm9zdGljc0xldmVsAQCjTAAuAESjTAAAAQALTf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNl" +
           "dAEApUwALwEA6UylTAAAAQH/////AAAAABVgiQoCAAAAAAAIAAAAU3ViRXJyb3IBAKZMAC8AP6ZMAAAA" +
           "Af////8BAf////8AAAAABGCACgEAAAAAAAgAAABDb3VudGVycwEAp0wALwA6p0wAAP////8HAAAAFWCJ" +
           "CgIAAAAAAAoAAABTdGF0ZUVycm9yAQCoTAAvAQANTahMAAAAB/////8BAf////8DAAAAFWCJCgIAAAAA" +
           "AAYAAABBY3RpdmUBAKlMAC4ARKlMAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lm" +
           "aWNhdGlvbgEAqkwALgBEqkwAAAYBAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFn" +
           "bm9zdGljc0xldmVsAQCrTAAuAESrTAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAA" +
           "AFN0YXRlT3BlcmF0aW9uYWxCeU1ldGhvZAEArUwALwEADU2tTAAAAAf/////AQH/////AwAAABVgiQoC" +
           "AAAAAAAGAAAAQWN0aXZlAQCuTAAuAESuTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xh" +
           "c3NpZmljYXRpb24BAK9MAC4ARK9MAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAA" +
           "RGlhZ25vc3RpY3NMZXZlbAEAsEwALgBEsEwAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABgAAABTdGF0ZU9wZXJhdGlvbmFsQnlQYXJlbnQBALJMAC8BAA1NskwAAAAH/////wEB/////wMAAAAV" +
           "YIkKAgAAAAAABgAAAEFjdGl2ZQEAs0wALgBEs0wAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAA" +
           "AENsYXNzaWZpY2F0aW9uAQC0TAAuAES0TAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBALVMAC4ARLVMAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAZAAAAU3RhdGVPcGVyYXRpb25hbEZyb21FcnJvcgEAt0wALwEADU23TAAAAAf/////AQH/////" +
           "AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQC4TAAuAES4TAAAAAH/////AQH/////AAAAABVgqQoCAAAA" +
           "AAAOAAAAQ2xhc3NpZmljYXRpb24BALlMAC4ARLlMAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAukwALgBEukwAAAYAAAAAAQALTf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABMAAABTdGF0ZVBhdXNlZEJ5UGFyZW50AQC8TAAvAQANTbxMAAAAB/////8BAf////8D" +
           "AAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAL1MAC4ARL1MAAAAAf////8BAf////8AAAAAFWCpCgIAAAAA" +
           "AA4AAABDbGFzc2lmaWNhdGlvbgEAvkwALgBEvkwAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIA" +
           "AAAAABAAAABEaWFnbm9zdGljc0xldmVsAQC/TAAuAES/TAAABgAAAAABAAtN/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAFQAAAFN0YXRlRGlzYWJsZWRCeU1ldGhvZAEAwUwALwEADU3BTAAAAAf/////AQH/////" +
           "AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQDCTAAuAETCTAAAAAH/////AQH/////AAAAABVgqQoCAAAA" +
           "AAAOAAAAQ2xhc3NpZmljYXRpb24BAMNMAC4ARMNMAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoC" +
           "AAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAxEwALgBExEwAAAYAAAAAAQALTf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABUAAABGYWlsZWREYXRhU2V0TWVzc2FnZXMBAMdMAC8BAA1Nx0wAAAAH/////wEB////" +
           "/wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAyEwALgBEyEwAAAAB/////wEB/////wAAAAAVYKkKAgAA" +
           "AAAADgAAAENsYXNzaWZpY2F0aW9uAQDJTAAuAETJTAAABgEAAAABABJN/////wEB/////wAAAAAVYKkK" +
           "AgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAMpMAC4ARMpMAAAGAAAAAAEAC03/////AQH/////AAAA" +
           "AARggAoBAAAAAAAKAAAATGl2ZVZhbHVlcwEAxkwALwA6xkwAAP////8AAAAABGCACgEAAAAAABEAAABT" +
           "dWJzY3JpYmVkRGF0YVNldAEA1DsALwEABDvUOwAA/////wAAAAAEYYIKBAAAAAAAFQAAAENyZWF0ZVRh" +
           "cmdldFZhcmlhYmxlcwEA6kMALwEA6kPqQwAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAOtDAC4AROtDAACWAgAAAAEAKgEBJQAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/" +
           "////AAAAAAABACoBASkAAAAUAAAAVGFyZ2V0VmFyaWFibGVzVG9BZGQBAJg5AQAAAAEAAAAAAAAAAAEA" +
           "KAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOxDAC4A" +
           "ROxDAACWAQAAAAEAKgEBHQAAAAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAA" +
           "AQAAAAEB/////wAAAAAEYYIKBAAAAAAAEwAAAENyZWF0ZURhdGFTZXRNaXJyb3IBAO1DAC8BAO1D7UMA" +
           "AAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDuQwAuAETuQwAAlgIAAAABACoB" +
           "AR0AAAAOAAAAUGFyZW50Tm9kZU5hbWUADP////8AAAAAAAEAKgEBIgAAAA8AAABSb2xlUGVybWlzc2lv" +
           "bnMAYAEAAAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQDvQwAuAETvQwAAlgEAAAABACoBARsAAAAMAAAAUGFyZW50Tm9kZUlkABH/////" +
           "AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState PublisherId
        {
            get
            {
                return m_publisherId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publisherId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publisherId = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> WriterGroupId
        {
            get
            {
                return m_writerGroupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writerGroupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writerGroupId = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> DataSetWriterId
        {
            get
            {
                return m_dataSetWriterId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetWriterId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetWriterId = value;
            }
        }

        /// <remarks />
        public PropertyState<DataSetMetaDataType> DataSetMetaData
        {
            get
            {
                return m_dataSetMetaData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMetaData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMetaData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DataSetFieldContentMask
        {
            get
            {
                return m_dataSetFieldContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetFieldContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetFieldContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MessageReceiveTimeout
        {
            get
            {
                return m_messageReceiveTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageReceiveTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageReceiveTimeout = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> KeyFrameCount
        {
            get
            {
                return m_keyFrameCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_keyFrameCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_keyFrameCount = value;
            }
        }

        /// <remarks />
        public PropertyState<string> HeaderLayoutUri
        {
            get
            {
                return m_headerLayoutUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_headerLayoutUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_headerLayoutUri = value;
            }
        }

        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityGroupId
        {
            get
            {
                return m_securityGroupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityGroupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityGroupId = value;
            }
        }

        /// <remarks />
        public PropertyState<EndpointDescription[]> SecurityKeyServices
        {
            get
            {
                return m_securityKeyServices;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityKeyServices, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityKeyServices = value;
            }
        }

        /// <remarks />
        public PropertyState<KeyValuePair[]> DataSetReaderProperties
        {
            get
            {
                return m_dataSetReaderProperties;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetReaderProperties, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetReaderProperties = value;
            }
        }

        /// <remarks />
        public DataSetReaderTransportState TransportSettings
        {
            get
            {
                return m_transportSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportSettings = value;
            }
        }

        /// <remarks />
        public DataSetReaderMessageState MessageSettings
        {
            get
            {
                return m_messageSettings;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageSettings, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageSettings = value;
            }
        }

        /// <remarks />
        public PubSubStatusState Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsDataSetReaderState Diagnostics
        {
            get
            {
                return m_diagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnostics = value;
            }
        }

        /// <remarks />
        public SubscribedDataSetState SubscribedDataSet
        {
            get
            {
                return m_subscribedDataSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscribedDataSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscribedDataSet = value;
            }
        }

        /// <remarks />
        public DataSetReaderTypeCreateTargetVariablesMethodState CreateTargetVariables
        {
            get
            {
                return m_createTargetVariablesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createTargetVariablesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createTargetVariablesMethod = value;
            }
        }

        /// <remarks />
        public DataSetReaderTypeCreateDataSetMirrorMethodState CreateDataSetMirror
        {
            get
            {
                return m_createDataSetMirrorMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createDataSetMirrorMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createDataSetMirrorMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_publisherId != null)
            {
                children.Add(m_publisherId);
            }

            if (m_writerGroupId != null)
            {
                children.Add(m_writerGroupId);
            }

            if (m_dataSetWriterId != null)
            {
                children.Add(m_dataSetWriterId);
            }

            if (m_dataSetMetaData != null)
            {
                children.Add(m_dataSetMetaData);
            }

            if (m_dataSetFieldContentMask != null)
            {
                children.Add(m_dataSetFieldContentMask);
            }

            if (m_messageReceiveTimeout != null)
            {
                children.Add(m_messageReceiveTimeout);
            }

            if (m_keyFrameCount != null)
            {
                children.Add(m_keyFrameCount);
            }

            if (m_headerLayoutUri != null)
            {
                children.Add(m_headerLayoutUri);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityGroupId != null)
            {
                children.Add(m_securityGroupId);
            }

            if (m_securityKeyServices != null)
            {
                children.Add(m_securityKeyServices);
            }

            if (m_dataSetReaderProperties != null)
            {
                children.Add(m_dataSetReaderProperties);
            }

            if (m_transportSettings != null)
            {
                children.Add(m_transportSettings);
            }

            if (m_messageSettings != null)
            {
                children.Add(m_messageSettings);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_diagnostics != null)
            {
                children.Add(m_diagnostics);
            }

            if (m_subscribedDataSet != null)
            {
                children.Add(m_subscribedDataSet);
            }

            if (m_createTargetVariablesMethod != null)
            {
                children.Add(m_createTargetVariablesMethod);
            }

            if (m_createDataSetMirrorMethod != null)
            {
                children.Add(m_createDataSetMirrorMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PublisherId:
                {
                    if (createOrReplace)
                    {
                        if (PublisherId == null)
                        {
                            if (replacement == null)
                            {
                                PublisherId = new PropertyState(this);
                            }
                            else
                            {
                                PublisherId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = PublisherId;
                    break;
                }

                case Opc.Ua.BrowseNames.WriterGroupId:
                {
                    if (createOrReplace)
                    {
                        if (WriterGroupId == null)
                        {
                            if (replacement == null)
                            {
                                WriterGroupId = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                WriterGroupId = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = WriterGroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetWriterId:
                {
                    if (createOrReplace)
                    {
                        if (DataSetWriterId == null)
                        {
                            if (replacement == null)
                            {
                                DataSetWriterId = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                DataSetWriterId = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = DataSetWriterId;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetMetaData:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMetaData == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMetaData = new PropertyState<DataSetMetaDataType>(this);
                            }
                            else
                            {
                                DataSetMetaData = (PropertyState<DataSetMetaDataType>)replacement;
                            }
                        }
                    }

                    instance = DataSetMetaData;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetFieldContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetFieldContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetFieldContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetFieldContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetFieldContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageReceiveTimeout:
                {
                    if (createOrReplace)
                    {
                        if (MessageReceiveTimeout == null)
                        {
                            if (replacement == null)
                            {
                                MessageReceiveTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                MessageReceiveTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MessageReceiveTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.KeyFrameCount:
                {
                    if (createOrReplace)
                    {
                        if (KeyFrameCount == null)
                        {
                            if (replacement == null)
                            {
                                KeyFrameCount = new PropertyState<uint>(this);
                            }
                            else
                            {
                                KeyFrameCount = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = KeyFrameCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HeaderLayoutUri:
                {
                    if (createOrReplace)
                    {
                        if (HeaderLayoutUri == null)
                        {
                            if (replacement == null)
                            {
                                HeaderLayoutUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                HeaderLayoutUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = HeaderLayoutUri;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityGroupId:
                {
                    if (createOrReplace)
                    {
                        if (SecurityGroupId == null)
                        {
                            if (replacement == null)
                            {
                                SecurityGroupId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityGroupId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityGroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityKeyServices:
                {
                    if (createOrReplace)
                    {
                        if (SecurityKeyServices == null)
                        {
                            if (replacement == null)
                            {
                                SecurityKeyServices = new PropertyState<EndpointDescription[]>(this);
                            }
                            else
                            {
                                SecurityKeyServices = (PropertyState<EndpointDescription[]>)replacement;
                            }
                        }
                    }

                    instance = SecurityKeyServices;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetReaderProperties:
                {
                    if (createOrReplace)
                    {
                        if (DataSetReaderProperties == null)
                        {
                            if (replacement == null)
                            {
                                DataSetReaderProperties = new PropertyState<KeyValuePair[]>(this);
                            }
                            else
                            {
                                DataSetReaderProperties = (PropertyState<KeyValuePair[]>)replacement;
                            }
                        }
                    }

                    instance = DataSetReaderProperties;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportSettings:
                {
                    if (createOrReplace)
                    {
                        if (TransportSettings == null)
                        {
                            if (replacement == null)
                            {
                                TransportSettings = new DataSetReaderTransportState(this);
                            }
                            else
                            {
                                TransportSettings = (DataSetReaderTransportState)replacement;
                            }
                        }
                    }

                    instance = TransportSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageSettings:
                {
                    if (createOrReplace)
                    {
                        if (MessageSettings == null)
                        {
                            if (replacement == null)
                            {
                                MessageSettings = new DataSetReaderMessageState(this);
                            }
                            else
                            {
                                MessageSettings = (DataSetReaderMessageState)replacement;
                            }
                        }
                    }

                    instance = MessageSettings;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PubSubStatusState(this);
                            }
                            else
                            {
                                Status = (PubSubStatusState)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.Diagnostics:
                {
                    if (createOrReplace)
                    {
                        if (Diagnostics == null)
                        {
                            if (replacement == null)
                            {
                                Diagnostics = new PubSubDiagnosticsDataSetReaderState(this);
                            }
                            else
                            {
                                Diagnostics = (PubSubDiagnosticsDataSetReaderState)replacement;
                            }
                        }
                    }

                    instance = Diagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscribedDataSet:
                {
                    if (createOrReplace)
                    {
                        if (SubscribedDataSet == null)
                        {
                            if (replacement == null)
                            {
                                SubscribedDataSet = new SubscribedDataSetState(this);
                            }
                            else
                            {
                                SubscribedDataSet = (SubscribedDataSetState)replacement;
                            }
                        }
                    }

                    instance = SubscribedDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateTargetVariables:
                {
                    if (createOrReplace)
                    {
                        if (CreateTargetVariables == null)
                        {
                            if (replacement == null)
                            {
                                CreateTargetVariables = new DataSetReaderTypeCreateTargetVariablesMethodState(this);
                            }
                            else
                            {
                                CreateTargetVariables = (DataSetReaderTypeCreateTargetVariablesMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateTargetVariables;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateDataSetMirror:
                {
                    if (createOrReplace)
                    {
                        if (CreateDataSetMirror == null)
                        {
                            if (replacement == null)
                            {
                                CreateDataSetMirror = new DataSetReaderTypeCreateDataSetMirrorMethodState(this);
                            }
                            else
                            {
                                CreateDataSetMirror = (DataSetReaderTypeCreateDataSetMirrorMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateDataSetMirror;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_publisherId;
        private PropertyState<ushort> m_writerGroupId;
        private PropertyState<ushort> m_dataSetWriterId;
        private PropertyState<DataSetMetaDataType> m_dataSetMetaData;
        private PropertyState<uint> m_dataSetFieldContentMask;
        private PropertyState<double> m_messageReceiveTimeout;
        private PropertyState<uint> m_keyFrameCount;
        private PropertyState<string> m_headerLayoutUri;
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<string> m_securityGroupId;
        private PropertyState<EndpointDescription[]> m_securityKeyServices;
        private PropertyState<KeyValuePair[]> m_dataSetReaderProperties;
        private DataSetReaderTransportState m_transportSettings;
        private DataSetReaderMessageState m_messageSettings;
        private PubSubStatusState m_status;
        private PubSubDiagnosticsDataSetReaderState m_diagnostics;
        private SubscribedDataSetState m_subscribedDataSet;
        private DataSetReaderTypeCreateTargetVariablesMethodState m_createTargetVariablesMethod;
        private DataSetReaderTypeCreateDataSetMirrorMethodState m_createDataSetMirrorMethod;
        #endregion
    }
    #endif
    #endregion

    #region DataSetReaderTransportState Class
    #if (!OPCUA_EXCLUDE_DataSetReaderTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetReaderTransportState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetReaderTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetReaderTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAERhdGFTZXRSZWFkZXJUcmFuc3BvcnRUeXBlSW5zdGFuY2UBANc7" +
           "AQDXO9c7AAD/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataSetReaderMessageState Class
    #if (!OPCUA_EXCLUDE_DataSetReaderMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetReaderMessageState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public DataSetReaderMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DataSetReaderMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAERhdGFTZXRSZWFkZXJNZXNzYWdlVHlwZUluc3RhbmNlAQBwUgEA" +
           "cFJwUgAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region GetDataSetReaderMethodState Class
    #if (!OPCUA_EXCLUDE_GetDataSetReaderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetDataSetReaderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public GetDataSetReaderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new GetDataSetReaderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAEdldERhdGFTZXRSZWFkZXJNZXRob2RUeXBlAQDuXAAvAQDuXO5c" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAO9cAC4ARO9cAACWAgAAAAEA" +
           "KgEBHgAAAA0AAABDb25maWd1cmF0aW9uAQAHPf////8AAAAAAAEAKgEBFwAAAAgAAABDaGVja1N1bQAP" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public GetDataSetReaderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetReaderDataType configuration = (DataSetReaderDataType)_outputArguments[0];
            byte[] checkSum = (byte[])_outputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref configuration,
                    ref checkSum);
            }

            _outputArguments[0] = configuration;
            _outputArguments[1] = checkSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult GetDataSetReaderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref DataSetReaderDataType configuration,
        ref byte[] checkSum);
    #endif
    #endregion

    #region ModifyDataSetReaderMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyDataSetReaderMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyDataSetReaderMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyDataSetReaderMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyDataSetReaderMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHQAAAE1vZGlmeURhdGFTZXRSZWFkZXJNZXRob2RUeXBlAQDwXAAvAQDw" +
           "XPBcAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA8VwALgBE8VwAAJYDAAAA" +
           "AQAqAQEeAAAADQAAAENvbmZpZ3VyYXRpb24BAAc9/////wAAAAAAAQAqAQEXAAAACAAAAENoZWNrU3Vt" +
           "AA//////AAAAAAABACoBARQAAAAFAAAARm9yY2UAAf////8AAAAAAAEAKAEBAAAAAQAAAAMAAAABAf//" +
           "//8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPJcAC4ARPJcAACWAQAAAAEAKgEBGgAA" +
           "AAsAAABOZXdDaGVja1N1bQAP/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyDataSetReaderMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            DataSetReaderDataType configuration = (DataSetReaderDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            byte[] checkSum = (byte[])_inputArguments[1];
            bool force = (bool)_inputArguments[2];

            byte[] newCheckSum = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configuration,
                    checkSum,
                    force,
                    ref newCheckSum);
            }

            _outputArguments[0] = newCheckSum;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyDataSetReaderMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        DataSetReaderDataType configuration,
        byte[] checkSum,
        bool force,
        ref byte[] newCheckSum);
    #endif
    #endregion

    #region DataSetReaderTypeCreateTargetVariablesMethodState Class
    #if (!OPCUA_EXCLUDE_DataSetReaderTypeCreateTargetVariablesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetReaderTypeCreateTargetVariablesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DataSetReaderTypeCreateTargetVariablesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DataSetReaderTypeCreateTargetVariablesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAMAAAAERhdGFTZXRSZWFkZXJUeXBlQ3JlYXRlVGFyZ2V0VmFyaWFibGVz" +
           "TWV0aG9kVHlwZQEA8EMALwEA8EPwQwAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBAPFDAC4ARPFDAACWAgAAAAEAKgEBJQAAABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////" +
           "AAAAAAABACoBASkAAAAUAAAAVGFyZ2V0VmFyaWFibGVzVG9BZGQBAJg5AQAAAAEAAAAAAAAAAAEAKAEB" +
           "AAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPJDAC4ARPJD" +
           "AACWAQAAAAEAKgEBHQAAAAoAAABBZGRSZXN1bHRzABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DataSetReaderTypeCreateTargetVariablesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            FieldTargetDataType[] targetVariablesToAdd = (FieldTargetDataType[])ExtensionObject.ToArray(_inputArguments[1], typeof(FieldTargetDataType));

            StatusCode[] addResults = (StatusCode[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    targetVariablesToAdd,
                    ref addResults);
            }

            _outputArguments[0] = addResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DataSetReaderTypeCreateTargetVariablesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        FieldTargetDataType[] targetVariablesToAdd,
        ref StatusCode[] addResults);
    #endif
    #endregion

    #region DataSetReaderTypeCreateDataSetMirrorMethodState Class
    #if (!OPCUA_EXCLUDE_DataSetReaderTypeCreateDataSetMirrorMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataSetReaderTypeCreateDataSetMirrorMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DataSetReaderTypeCreateDataSetMirrorMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DataSetReaderTypeCreateDataSetMirrorMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAALgAAAERhdGFTZXRSZWFkZXJUeXBlQ3JlYXRlRGF0YVNldE1pcnJvck1l" +
           "dGhvZFR5cGUBAPNDAC8BAPND80MAAAEB/////wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQD0QwAuAET0QwAAlgIAAAABACoBAR0AAAAOAAAAUGFyZW50Tm9kZU5hbWUADP////8AAAAAAAEAKgEB" +
           "IgAAAA8AAABSb2xlUGVybWlzc2lvbnMAYAEAAAABAAAAAAAAAAABACgBAQAAAAEAAAACAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQD1QwAuAET1QwAAlgEAAAABACoBARsAAAAM" +
           "AAAAUGFyZW50Tm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DataSetReaderTypeCreateDataSetMirrorMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string parentNodeName = (string)_inputArguments[0];
            RolePermissionType[] rolePermissions = (RolePermissionType[])ExtensionObject.ToArray(_inputArguments[1], typeof(RolePermissionType));

            NodeId parentNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    parentNodeName,
                    rolePermissions,
                    ref parentNodeId);
            }

            _outputArguments[0] = parentNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DataSetReaderTypeCreateDataSetMirrorMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string parentNodeName,
        RolePermissionType[] rolePermissions,
        ref NodeId parentNodeId);
    #endif
    #endregion

    #region SubscribedDataSetState Class
    #if (!OPCUA_EXCLUDE_SubscribedDataSetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscribedDataSetState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public SubscribedDataSetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SubscribedDataSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFN1YnNjcmliZWREYXRhU2V0VHlwZUluc3RhbmNlAQAEOwEABDsE" +
           "OwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TargetVariablesState Class
    #if (!OPCUA_EXCLUDE_TargetVariablesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TargetVariablesState : SubscribedDataSetState
    {
        #region Constructors
        /// <remarks />
        public TargetVariablesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TargetVariablesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddTargetVariables != null)
            {
                AddTargetVariables.Initialize(context, AddTargetVariables_InitializationString);
            }

            if (RemoveTargetVariables != null)
            {
                RemoveTargetVariables.Initialize(context, RemoveTargetVariables_InitializationString);
            }
        }

        #region Initialization String
        private const string AddTargetVariables_InitializationString =
           "//////////8EYYIKBAAAAAAAEgAAAEFkZFRhcmdldFZhcmlhYmxlcwEACzsALwEACzsLOwAAAQH/////" +
           "AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAw7AC4ARAw7AACWAgAAAAEAKgEBJQAAABQA" +
           "AABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASkAAAAUAAAAVGFyZ2V0VmFyaWFi" +
           "bGVzVG9BZGQBAJg5AQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAA07AC4ARA07AACWAQAAAAEAKgEBHQAAAAoAAABBZGRSZXN1bHRz" +
           "ABMBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string RemoveTargetVariables_InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFJlbW92ZVRhcmdldFZhcmlhYmxlcwEADjsALwEADjsOOwAAAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAA87AC4ARA87AACWAgAAAAEAKgEBJQAA" +
           "ABQAAABDb25maWd1cmF0aW9uVmVyc2lvbgEAATn/////AAAAAAABACoBASIAAAAPAAAAVGFyZ2V0c1Rv" +
           "UmVtb3ZlAAcBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYKkKAgAAAAAADwAA" +
           "AE91dHB1dEFyZ3VtZW50cwEAEDsALgBEEDsAAJYBAAAAAQAqAQEgAAAADQAAAFJlbW92ZVJlc3VsdHMA" +
           "EwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAFRhcmdldFZhcmlhYmxlc1R5cGVJbnN0YW5jZQEABzsBAAc7BzsA" +
           "AP////8DAAAAF2CJCgIAAAAAAA8AAABUYXJnZXRWYXJpYWJsZXMBAAo7AC4ARAo7AAABAJg5AQAAAAEA" +
           "AAAAAAAAAQH/////AAAAAARhggoEAAAAAAASAAAAQWRkVGFyZ2V0VmFyaWFibGVzAQALOwAvAQALOws7" +
           "AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEADDsALgBEDDsAAJYCAAAAAQAq" +
           "AQElAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8AAAAAAAEAKgEBKQAAABQAAABUYXJn" +
           "ZXRWYXJpYWJsZXNUb0FkZAEAmDkBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAX" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEADTsALgBEDTsAAJYBAAAAAQAqAQEdAAAACgAAAEFk" +
           "ZFJlc3VsdHMAEwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAARhggoEAAAAAAAV" +
           "AAAAUmVtb3ZlVGFyZ2V0VmFyaWFibGVzAQAOOwAvAQAOOw47AAABAf////8CAAAAF2CpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEADzsALgBEDzsAAJYCAAAAAQAqAQElAAAAFAAAAENvbmZpZ3VyYXRpb25W" +
           "ZXJzaW9uAQABOf////8AAAAAAAEAKgEBIgAAAA8AAABUYXJnZXRzVG9SZW1vdmUABwEAAAABAAAAAAAA" +
           "AAABACgBAQAAAAEAAAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAQ" +
           "OwAuAEQQOwAAlgEAAAABACoBASAAAAANAAAAUmVtb3ZlUmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<FieldTargetDataType[]> TargetVariables
        {
            get
            {
                return m_targetVariables;
            }

            set
            {
                if (!Object.ReferenceEquals(m_targetVariables, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_targetVariables = value;
            }
        }

        /// <remarks />
        public TargetVariablesTypeAddTargetVariablesMethodState AddTargetVariables
        {
            get
            {
                return m_addTargetVariablesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addTargetVariablesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addTargetVariablesMethod = value;
            }
        }

        /// <remarks />
        public TargetVariablesTypeRemoveTargetVariablesMethodState RemoveTargetVariables
        {
            get
            {
                return m_removeTargetVariablesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeTargetVariablesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeTargetVariablesMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_targetVariables != null)
            {
                children.Add(m_targetVariables);
            }

            if (m_addTargetVariablesMethod != null)
            {
                children.Add(m_addTargetVariablesMethod);
            }

            if (m_removeTargetVariablesMethod != null)
            {
                children.Add(m_removeTargetVariablesMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TargetVariables:
                {
                    if (createOrReplace)
                    {
                        if (TargetVariables == null)
                        {
                            if (replacement == null)
                            {
                                TargetVariables = new PropertyState<FieldTargetDataType[]>(this);
                            }
                            else
                            {
                                TargetVariables = (PropertyState<FieldTargetDataType[]>)replacement;
                            }
                        }
                    }

                    instance = TargetVariables;
                    break;
                }

                case Opc.Ua.BrowseNames.AddTargetVariables:
                {
                    if (createOrReplace)
                    {
                        if (AddTargetVariables == null)
                        {
                            if (replacement == null)
                            {
                                AddTargetVariables = new TargetVariablesTypeAddTargetVariablesMethodState(this);
                            }
                            else
                            {
                                AddTargetVariables = (TargetVariablesTypeAddTargetVariablesMethodState)replacement;
                            }
                        }
                    }

                    instance = AddTargetVariables;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveTargetVariables:
                {
                    if (createOrReplace)
                    {
                        if (RemoveTargetVariables == null)
                        {
                            if (replacement == null)
                            {
                                RemoveTargetVariables = new TargetVariablesTypeRemoveTargetVariablesMethodState(this);
                            }
                            else
                            {
                                RemoveTargetVariables = (TargetVariablesTypeRemoveTargetVariablesMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveTargetVariables;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<FieldTargetDataType[]> m_targetVariables;
        private TargetVariablesTypeAddTargetVariablesMethodState m_addTargetVariablesMethod;
        private TargetVariablesTypeRemoveTargetVariablesMethodState m_removeTargetVariablesMethod;
        #endregion
    }
    #endif
    #endregion

    #region TargetVariablesTypeAddTargetVariablesMethodState Class
    #if (!OPCUA_EXCLUDE_TargetVariablesTypeAddTargetVariablesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TargetVariablesTypeAddTargetVariablesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public TargetVariablesTypeAddTargetVariablesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new TargetVariablesTypeAddTargetVariablesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAALwAAAFRhcmdldFZhcmlhYmxlc1R5cGVBZGRUYXJnZXRWYXJpYWJsZXNN" +
           "ZXRob2RUeXBlAQAROwAvAQAROxE7AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAEjsALgBEEjsAAJYCAAAAAQAqAQElAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf////8A" +
           "AAAAAAEAKgEBKQAAABQAAABUYXJnZXRWYXJpYWJsZXNUb0FkZAEAmDkBAAAAAQAAAAAAAAAAAQAoAQEA" +
           "AAABAAAAAgAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAEzsALgBEEzsA" +
           "AJYBAAAAAQAqAQEdAAAACgAAAEFkZFJlc3VsdHMAEwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public TargetVariablesTypeAddTargetVariablesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            FieldTargetDataType[] targetVariablesToAdd = (FieldTargetDataType[])ExtensionObject.ToArray(_inputArguments[1], typeof(FieldTargetDataType));

            StatusCode[] addResults = (StatusCode[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    targetVariablesToAdd,
                    ref addResults);
            }

            _outputArguments[0] = addResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult TargetVariablesTypeAddTargetVariablesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        FieldTargetDataType[] targetVariablesToAdd,
        ref StatusCode[] addResults);
    #endif
    #endregion

    #region TargetVariablesTypeRemoveTargetVariablesMethodState Class
    #if (!OPCUA_EXCLUDE_TargetVariablesTypeRemoveTargetVariablesMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TargetVariablesTypeRemoveTargetVariablesMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public TargetVariablesTypeRemoveTargetVariablesMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new TargetVariablesTypeRemoveTargetVariablesMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAMgAAAFRhcmdldFZhcmlhYmxlc1R5cGVSZW1vdmVUYXJnZXRWYXJpYWJs" +
           "ZXNNZXRob2RUeXBlAQAUOwAvAQAUOxQ7AAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEAFTsALgBEFTsAAJYCAAAAAQAqAQElAAAAFAAAAENvbmZpZ3VyYXRpb25WZXJzaW9uAQABOf//" +
           "//8AAAAAAAEAKgEBIgAAAA8AAABUYXJnZXRzVG9SZW1vdmUABwEAAAABAAAAAAAAAAABACgBAQAAAAEA" +
           "AAACAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAWOwAuAEQWOwAAlgEA" +
           "AAABACoBASAAAAANAAAAUmVtb3ZlUmVzdWx0cwATAQAAAAEAAAAAAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public TargetVariablesTypeRemoveTargetVariablesMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ConfigurationVersionDataType configurationVersion = (ConfigurationVersionDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);
            uint[] targetsToRemove = (uint[])_inputArguments[1];

            StatusCode[] removeResults = (StatusCode[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    configurationVersion,
                    targetsToRemove,
                    ref removeResults);
            }

            _outputArguments[0] = removeResults;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult TargetVariablesTypeRemoveTargetVariablesMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ConfigurationVersionDataType configurationVersion,
        uint[] targetsToRemove,
        ref StatusCode[] removeResults);
    #endif
    #endregion

    #region SubscribedDataSetMirrorState Class
    #if (!OPCUA_EXCLUDE_SubscribedDataSetMirrorState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscribedDataSetMirrorState : SubscribedDataSetState
    {
        #region Constructors
        /// <remarks />
        public SubscribedDataSetMirrorState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SubscribedDataSetMirrorType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAFN1YnNjcmliZWREYXRhU2V0TWlycm9yVHlwZUluc3RhbmNlAQAX" +
           "OwEAFzsXOwAA/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SubscribedDataSetFolderState Class
    #if (!OPCUA_EXCLUDE_SubscribedDataSetFolderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscribedDataSetFolderState : FolderState
    {
        #region Constructors
        /// <remarks />
        public SubscribedDataSetFolderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SubscribedDataSetFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddSubscribedDataSet != null)
            {
                AddSubscribedDataSet.Initialize(context, AddSubscribedDataSet_InitializationString);
            }

            if (RemoveSubscribedDataSet != null)
            {
                RemoveSubscribedDataSet.Initialize(context, RemoveSubscribedDataSet_InitializationString);
            }

            if (AddDataSetFolder != null)
            {
                AddDataSetFolder.Initialize(context, AddDataSetFolder_InitializationString);
            }

            if (RemoveDataSetFolder != null)
            {
                RemoveDataSetFolder.Initialize(context, RemoveDataSetFolder_InitializationString);
            }
        }

        #region Initialization String
        private const string AddSubscribedDataSet_InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAEFkZFN1YnNjcmliZWREYXRhU2V0AQADXQAvAQADXQNdAAABAf//" +
           "//8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABF0ALgBEBF0AAJYBAAAAAQAqAQEiAAAA" +
           "EQAAAFN1YnNjcmliZWREYXRhU2V0AQAwXP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA" +
           "F2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAAVdAC4ARAVdAACWAQAAAAEAKgEBJgAAABcAAABT" +
           "dWJzY3JpYmVkRGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string RemoveSubscribedDataSet_InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAFJlbW92ZVN1YnNjcmliZWREYXRhU2V0AQAGXQAvAQAGXQZdAAAB" +
           "Af////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAB10ALgBEB10AAJYBAAAAAQAqAQEm" +
           "AAAAFwAAAFN1YnNjcmliZWREYXRhU2V0Tm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAA==";

        private const string AddDataSetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAEAAAAEFkZERhdGFTZXRGb2xkZXIBAAhdAC8BAAhdCF0AAAEB/////wIA" +
           "AAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAJXQAuAEQJXQAAlgEAAAABACoBARMAAAAEAAAA" +
           "TmFtZQAM/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEACl0ALgBECl0AAJYBAAAAAQAqAQEiAAAAEwAAAERhdGFTZXRGb2xkZXJOb2RlSWQA" +
           "Ef////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAA";

        private const string RemoveDataSetFolder_InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAFJlbW92ZURhdGFTZXRGb2xkZXIBAAtdAC8BAAtdC10AAAEB////" +
           "/wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAMXQAuAEQMXQAAlgEAAAABACoBASIAAAAT" +
           "AAAARGF0YVNldEZvbGRlck5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIwAAAFN1YnNjcmliZWREYXRhU2V0Rm9sZGVyVHlwZUluc3RhbmNlAQDz" +
           "XAEA81zzXAAA/////wQAAAAEYYIKBAAAAAAAFAAAAEFkZFN1YnNjcmliZWREYXRhU2V0AQADXQAvAQAD" +
           "XQNdAAABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABF0ALgBEBF0AAJYBAAAA" +
           "AQAqAQEiAAAAEQAAAFN1YnNjcmliZWREYXRhU2V0AQAwXP////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAAVdAC4ARAVdAACWAQAAAAEAKgEB" +
           "JgAAABcAAABTdWJzY3JpYmVkRGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB" +
           "/////wAAAAAEYYIKBAAAAAAAFwAAAFJlbW92ZVN1YnNjcmliZWREYXRhU2V0AQAGXQAvAQAGXQZdAAAB" +
           "Af////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAB10ALgBEB10AAJYBAAAAAQAqAQEm" +
           "AAAAFwAAAFN1YnNjcmliZWREYXRhU2V0Tm9kZUlkABH/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/" +
           "////AAAAAARhggoEAAAAAAAQAAAAQWRkRGF0YVNldEZvbGRlcgEACF0ALwEACF0IXQAAAQH/////AgAA" +
           "ABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAldAC4ARAldAACWAQAAAAEAKgEBEwAAAAQAAABO" +
           "YW1lAAz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0" +
           "QXJndW1lbnRzAQAKXQAuAEQKXQAAlgEAAAABACoBASIAAAATAAAARGF0YVNldEZvbGRlck5vZGVJZAAR" +
           "/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAEwAAAFJlbW92ZURhdGFT" +
           "ZXRGb2xkZXIBAAtdAC8BAAtdC10AAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQAMXQAuAEQMXQAAlgEAAAABACoBASIAAAATAAAARGF0YVNldEZvbGRlck5vZGVJZAAR/////wAAAAAA" +
           "AQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddSubscribedDataSetMethodState AddSubscribedDataSet
        {
            get
            {
                return m_addSubscribedDataSetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addSubscribedDataSetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addSubscribedDataSetMethod = value;
            }
        }

        /// <remarks />
        public RemoveSubscribedDataSetMethodState RemoveSubscribedDataSet
        {
            get
            {
                return m_removeSubscribedDataSetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeSubscribedDataSetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeSubscribedDataSetMethod = value;
            }
        }

        /// <remarks />
        public AddDataSetFolderMethodState AddDataSetFolder
        {
            get
            {
                return m_addDataSetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addDataSetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addDataSetFolderMethod = value;
            }
        }

        /// <remarks />
        public RemoveDataSetFolderMethodState RemoveDataSetFolder
        {
            get
            {
                return m_removeDataSetFolderMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeDataSetFolderMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeDataSetFolderMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addSubscribedDataSetMethod != null)
            {
                children.Add(m_addSubscribedDataSetMethod);
            }

            if (m_removeSubscribedDataSetMethod != null)
            {
                children.Add(m_removeSubscribedDataSetMethod);
            }

            if (m_addDataSetFolderMethod != null)
            {
                children.Add(m_addDataSetFolderMethod);
            }

            if (m_removeDataSetFolderMethod != null)
            {
                children.Add(m_removeDataSetFolderMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddSubscribedDataSet:
                {
                    if (createOrReplace)
                    {
                        if (AddSubscribedDataSet == null)
                        {
                            if (replacement == null)
                            {
                                AddSubscribedDataSet = new AddSubscribedDataSetMethodState(this);
                            }
                            else
                            {
                                AddSubscribedDataSet = (AddSubscribedDataSetMethodState)replacement;
                            }
                        }
                    }

                    instance = AddSubscribedDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveSubscribedDataSet:
                {
                    if (createOrReplace)
                    {
                        if (RemoveSubscribedDataSet == null)
                        {
                            if (replacement == null)
                            {
                                RemoveSubscribedDataSet = new RemoveSubscribedDataSetMethodState(this);
                            }
                            else
                            {
                                RemoveSubscribedDataSet = (RemoveSubscribedDataSetMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveSubscribedDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.AddDataSetFolder:
                {
                    if (createOrReplace)
                    {
                        if (AddDataSetFolder == null)
                        {
                            if (replacement == null)
                            {
                                AddDataSetFolder = new AddDataSetFolderMethodState(this);
                            }
                            else
                            {
                                AddDataSetFolder = (AddDataSetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = AddDataSetFolder;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveDataSetFolder:
                {
                    if (createOrReplace)
                    {
                        if (RemoveDataSetFolder == null)
                        {
                            if (replacement == null)
                            {
                                RemoveDataSetFolder = new RemoveDataSetFolderMethodState(this);
                            }
                            else
                            {
                                RemoveDataSetFolder = (RemoveDataSetFolderMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveDataSetFolder;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddSubscribedDataSetMethodState m_addSubscribedDataSetMethod;
        private RemoveSubscribedDataSetMethodState m_removeSubscribedDataSetMethod;
        private AddDataSetFolderMethodState m_addDataSetFolderMethod;
        private RemoveDataSetFolderMethodState m_removeDataSetFolderMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddSubscribedDataSetMethodState Class
    #if (!OPCUA_EXCLUDE_AddSubscribedDataSetMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddSubscribedDataSetMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddSubscribedDataSetMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddSubscribedDataSetMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAEFkZFN1YnNjcmliZWREYXRhU2V0TWV0aG9kVHlwZQEADV0ALwEA" +
           "DV0NXQAAAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAA5dAC4ARA5dAACWAQAA" +
           "AAEAKgEBIgAAABEAAABTdWJzY3JpYmVkRGF0YVNldAEAMFz/////AAAAAAABACgBAQAAAAEAAAABAAAA" +
           "AQH/////AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAPXQAuAEQPXQAAlgEAAAABACoB" +
           "ASYAAAAXAAAAU3Vic2NyaWJlZERhdGFTZXROb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddSubscribedDataSetMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            StandaloneSubscribedDataSetDataType subscribedDataSet = (StandaloneSubscribedDataSetDataType)ExtensionObject.ToEncodeable((ExtensionObject)_inputArguments[0]);

            NodeId subscribedDataSetNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscribedDataSet,
                    ref subscribedDataSetNodeId);
            }

            _outputArguments[0] = subscribedDataSetNodeId;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddSubscribedDataSetMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        StandaloneSubscribedDataSetDataType subscribedDataSet,
        ref NodeId subscribedDataSetNodeId);
    #endif
    #endregion

    #region RemoveSubscribedDataSetMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveSubscribedDataSetMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveSubscribedDataSetMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveSubscribedDataSetMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveSubscribedDataSetMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIQAAAFJlbW92ZVN1YnNjcmliZWREYXRhU2V0TWV0aG9kVHlwZQEAEF0A" +
           "LwEAEF0QXQAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABFdAC4ARBFdAACW" +
           "AQAAAAEAKgEBJgAAABcAAABTdWJzY3JpYmVkRGF0YVNldE5vZGVJZAAR/////wAAAAAAAQAoAQEAAAAB" +
           "AAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveSubscribedDataSetMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            NodeId subscribedDataSetNodeId = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscribedDataSetNodeId);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveSubscribedDataSetMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        NodeId subscribedDataSetNodeId);
    #endif
    #endregion

    #region StandaloneSubscribedDataSetState Class
    #if (!OPCUA_EXCLUDE_StandaloneSubscribedDataSetState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StandaloneSubscribedDataSetState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public StandaloneSubscribedDataSetState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StandaloneSubscribedDataSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAFN0YW5kYWxvbmVTdWJzY3JpYmVkRGF0YVNldFR5cGVJbnN0YW5j" +
           "ZQEAFF0BABRdFF0AAP////8DAAAABGCACgEAAAAAABEAAABTdWJzY3JpYmVkRGF0YVNldAEAFV0ALwEA" +
           "BDsVXQAA/////wAAAAAVYIkKAgAAAAAADwAAAERhdGFTZXRNZXRhRGF0YQEAFl0ALgBEFl0AAAEAuzj/" +
           "////AQH/////AAAAABVgiQoCAAAAAAALAAAASXNDb25uZWN0ZWQBABddAC4ARBddAAAAAf////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SubscribedDataSetState SubscribedDataSet
        {
            get
            {
                return m_subscribedDataSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscribedDataSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscribedDataSet = value;
            }
        }

        /// <remarks />
        public PropertyState<DataSetMetaDataType> DataSetMetaData
        {
            get
            {
                return m_dataSetMetaData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMetaData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMetaData = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> IsConnected
        {
            get
            {
                return m_isConnected;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isConnected, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isConnected = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_subscribedDataSet != null)
            {
                children.Add(m_subscribedDataSet);
            }

            if (m_dataSetMetaData != null)
            {
                children.Add(m_dataSetMetaData);
            }

            if (m_isConnected != null)
            {
                children.Add(m_isConnected);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SubscribedDataSet:
                {
                    if (createOrReplace)
                    {
                        if (SubscribedDataSet == null)
                        {
                            if (replacement == null)
                            {
                                SubscribedDataSet = new SubscribedDataSetState(this);
                            }
                            else
                            {
                                SubscribedDataSet = (SubscribedDataSetState)replacement;
                            }
                        }
                    }

                    instance = SubscribedDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetMetaData:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMetaData == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMetaData = new PropertyState<DataSetMetaDataType>(this);
                            }
                            else
                            {
                                DataSetMetaData = (PropertyState<DataSetMetaDataType>)replacement;
                            }
                        }
                    }

                    instance = DataSetMetaData;
                    break;
                }

                case Opc.Ua.BrowseNames.IsConnected:
                {
                    if (createOrReplace)
                    {
                        if (IsConnected == null)
                        {
                            if (replacement == null)
                            {
                                IsConnected = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsConnected = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsConnected;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SubscribedDataSetState m_subscribedDataSet;
        private PropertyState<DataSetMetaDataType> m_dataSetMetaData;
        private PropertyState<bool> m_isConnected;
        #endregion
    }
    #endif
    #endregion

    #region PubSubStatusState Class
    #if (!OPCUA_EXCLUDE_PubSubStatusState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubStatusState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubStatusState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubStatusType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Enable != null)
            {
                Enable.Initialize(context, Enable_InitializationString);
            }

            if (Disable != null)
            {
                Disable.Initialize(context, Disable_InitializationString);
            }
        }

        #region Initialization String
        private const string Enable_InitializationString =
           "//////////8EYYIKBAAAAAAABgAAAEVuYWJsZQEANTkALwEANTk1OQAAAQH/////AAAAAA==";

        private const string Disable_InitializationString =
           "//////////8EYYIKBAAAAAAABwAAAERpc2FibGUBADY5AC8BADY5NjkAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGAAAAFB1YlN1YlN0YXR1c1R5cGVJbnN0YW5jZQEAMzkBADM5MzkAAP//" +
           "//8DAAAAFWCJCgIAAAAAAAUAAABTdGF0ZQEANDkALwA/NDkAAAEANzn/////AQH/////AAAAAARhggoE" +
           "AAAAAAAGAAAARW5hYmxlAQA1OQAvAQA1OTU5AAABAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxl" +
           "AQA2OQAvAQA2OTY5AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<PubSubState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }

        /// <remarks />
        public MethodState Enable
        {
            get
            {
                return m_enableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableMethod = value;
            }
        }

        /// <remarks />
        public MethodState Disable
        {
            get
            {
                return m_disableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_state != null)
            {
                children.Add(m_state);
            }

            if (m_enableMethod != null)
            {
                children.Add(m_enableMethod);
            }

            if (m_disableMethod != null)
            {
                children.Add(m_disableMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new BaseDataVariableState<PubSubState>(this);
                            }
                            else
                            {
                                State = (BaseDataVariableState<PubSubState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }

                case Opc.Ua.BrowseNames.Enable:
                {
                    if (createOrReplace)
                    {
                        if (Enable == null)
                        {
                            if (replacement == null)
                            {
                                Enable = new MethodState(this);
                            }
                            else
                            {
                                Enable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Enable;
                    break;
                }

                case Opc.Ua.BrowseNames.Disable:
                {
                    if (createOrReplace)
                    {
                        if (Disable == null)
                        {
                            if (replacement == null)
                            {
                                Disable = new MethodState(this);
                            }
                            else
                            {
                                Disable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Disable;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<PubSubState> m_state;
        private MethodState m_enableMethod;
        private MethodState m_disableMethod;
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFB1YlN1YkRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQDdTAEA3Uzd" +
           "TAAA/////wcAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAN5MAC8AP95MAAABAAtN////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEAAAAFRvdGFsSW5mb3JtYXRpb24BAN9MAC8BAA1N30wAAAAH////" +
           "/wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA4EwALgBE4EwAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQDhTAAuAEThTAAAAQASTf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQDiTAAuAETiTAAAAQALTf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABUb3RhbEVycm9yAQDkTAAvAQANTeRMAAAAB/////8BAf////8DAAAAFWCJCgIAAAAA" +
           "AAYAAABBY3RpdmUBAOVMAC4AROVMAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lm" +
           "aWNhdGlvbgEA5kwALgBE5kwAAAEAEk3/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEA50wALgBE50wAAAEAC03/////AQH/////AAAAAARhggoEAAAAAAAFAAAAUmVzZXQBAOlM" +
           "AC8BAOlM6UwAAAEB/////wAAAAAVYIkKAgAAAAAACAAAAFN1YkVycm9yAQDqTAAvAD/qTAAAAAH/////" +
           "AQH/////AAAAAARggAoBAAAAAAAIAAAAQ291bnRlcnMBAOtMAC8AOutMAAD/////BgAAABVgiQoCAAAA" +
           "AAAKAAAAU3RhdGVFcnJvcgEA7EwALwEADU3sTAAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAA" +
           "QWN0aXZlAQDtTAAuAETtTAAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRp" +
           "b24BAO5MAC4ARO5MAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEA70wALgBE70wAAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0" +
           "ZU9wZXJhdGlvbmFsQnlNZXRob2QBAPFMAC8BAA1N8UwAAAAH/////wEB/////wMAAAAVYIkKAgAAAAAA" +
           "BgAAAEFjdGl2ZQEA8kwALgBE8kwAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZp" +
           "Y2F0aW9uAQDzTAAuAETzTAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdu" +
           "b3N0aWNzTGV2ZWwBAPRMAC4ARPRMAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAA" +
           "U3RhdGVPcGVyYXRpb25hbEJ5UGFyZW50AQD2TAAvAQANTfZMAAAAB/////8BAf////8DAAAAFWCJCgIA" +
           "AAAAAAYAAABBY3RpdmUBAPdMAC4ARPdMAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFz" +
           "c2lmaWNhdGlvbgEA+EwALgBE+EwAAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABE" +
           "aWFnbm9zdGljc0xldmVsAQD5TAAuAET5TAAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GQAAAFN0YXRlT3BlcmF0aW9uYWxGcm9tRXJyb3IBAPtMAC8BAA1N+0wAAAAH/////wEB/////wMAAAAV" +
           "YIkKAgAAAAAABgAAAEFjdGl2ZQEA/EwALgBE/EwAAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAA" +
           "AENsYXNzaWZpY2F0aW9uAQD9TAAuAET9TAAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBAP5MAC4ARP5MAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoC" +
           "AAAAAAATAAAAU3RhdGVQYXVzZWRCeVBhcmVudAEAAE0ALwEADU0ATQAAAAf/////AQH/////AwAAABVg" +
           "iQoCAAAAAAAGAAAAQWN0aXZlAQABTQAuAEQBTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAA" +
           "Q2xhc3NpZmljYXRpb24BAAJNAC4ARAJNAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQ" +
           "AAAARGlhZ25vc3RpY3NMZXZlbAEAA00ALgBEA00AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABUAAABTdGF0ZURpc2FibGVkQnlNZXRob2QBAAVNAC8BAA1NBU0AAAAH/////wEB/////wMAAAAV" +
           "YIkKAgAAAAAABgAAAEFjdGl2ZQEABk0ALgBEBk0AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAA" +
           "AENsYXNzaWZpY2F0aW9uAQAHTQAuAEQHTQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBAAhNAC4ARAhNAAAGAAAAAAEAC03/////AQH/////AAAAAARggAoB" +
           "AAAAAAAKAAAATGl2ZVZhbHVlcwEACk0ALwA6Ck0AAP////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<DiagnosticsLevel> DiagnosticsLevel
        {
            get
            {
                return m_diagnosticsLevel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnosticsLevel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnosticsLevel = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsCounterState TotalInformation
        {
            get
            {
                return m_totalInformation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_totalInformation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_totalInformation = value;
            }
        }

        /// <remarks />
        public PubSubDiagnosticsCounterState TotalError
        {
            get
            {
                return m_totalError;
            }

            set
            {
                if (!Object.ReferenceEquals(m_totalError, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_totalError = value;
            }
        }

        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<bool> SubError
        {
            get
            {
                return m_subError;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subError, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subError = value;
            }
        }

        /// <remarks />
        public BaseObjectState Counters
        {
            get
            {
                return m_counters;
            }

            set
            {
                if (!Object.ReferenceEquals(m_counters, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_counters = value;
            }
        }

        /// <remarks />
        public BaseObjectState LiveValues
        {
            get
            {
                return m_liveValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_liveValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_liveValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_diagnosticsLevel != null)
            {
                children.Add(m_diagnosticsLevel);
            }

            if (m_totalInformation != null)
            {
                children.Add(m_totalInformation);
            }

            if (m_totalError != null)
            {
                children.Add(m_totalError);
            }

            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            if (m_subError != null)
            {
                children.Add(m_subError);
            }

            if (m_counters != null)
            {
                children.Add(m_counters);
            }

            if (m_liveValues != null)
            {
                children.Add(m_liveValues);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DiagnosticsLevel:
                {
                    if (createOrReplace)
                    {
                        if (DiagnosticsLevel == null)
                        {
                            if (replacement == null)
                            {
                                DiagnosticsLevel = new BaseDataVariableState<DiagnosticsLevel>(this);
                            }
                            else
                            {
                                DiagnosticsLevel = (BaseDataVariableState<DiagnosticsLevel>)replacement;
                            }
                        }
                    }

                    instance = DiagnosticsLevel;
                    break;
                }

                case Opc.Ua.BrowseNames.TotalInformation:
                {
                    if (createOrReplace)
                    {
                        if (TotalInformation == null)
                        {
                            if (replacement == null)
                            {
                                TotalInformation = new PubSubDiagnosticsCounterState(this);
                            }
                            else
                            {
                                TotalInformation = (PubSubDiagnosticsCounterState)replacement;
                            }
                        }
                    }

                    instance = TotalInformation;
                    break;
                }

                case Opc.Ua.BrowseNames.TotalError:
                {
                    if (createOrReplace)
                    {
                        if (TotalError == null)
                        {
                            if (replacement == null)
                            {
                                TotalError = new PubSubDiagnosticsCounterState(this);
                            }
                            else
                            {
                                TotalError = (PubSubDiagnosticsCounterState)replacement;
                            }
                        }
                    }

                    instance = TotalError;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }

                case Opc.Ua.BrowseNames.SubError:
                {
                    if (createOrReplace)
                    {
                        if (SubError == null)
                        {
                            if (replacement == null)
                            {
                                SubError = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                SubError = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = SubError;
                    break;
                }

                case Opc.Ua.BrowseNames.Counters:
                {
                    if (createOrReplace)
                    {
                        if (Counters == null)
                        {
                            if (replacement == null)
                            {
                                Counters = new BaseObjectState(this);
                            }
                            else
                            {
                                Counters = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = Counters;
                    break;
                }

                case Opc.Ua.BrowseNames.LiveValues:
                {
                    if (createOrReplace)
                    {
                        if (LiveValues == null)
                        {
                            if (replacement == null)
                            {
                                LiveValues = new BaseObjectState(this);
                            }
                            else
                            {
                                LiveValues = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = LiveValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<DiagnosticsLevel> m_diagnosticsLevel;
        private PubSubDiagnosticsCounterState m_totalInformation;
        private PubSubDiagnosticsCounterState m_totalError;
        private MethodState m_resetMethod;
        private BaseDataVariableState<bool> m_subError;
        private BaseObjectState m_counters;
        private BaseObjectState m_liveValues;
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsCounterState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsCounterState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsCounterState : BaseDataVariableState<uint>
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsCounterState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.PubSubDiagnosticsCounterType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.UInt32, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TimeFirstChange != null)
            {
                TimeFirstChange.Initialize(context, TimeFirstChange_InitializationString);
            }
        }

        #region Initialization String
        private const string TimeFirstChange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFRpbWVGaXJzdENoYW5nZQEAEU0ALgBEEU0AAAAN/////wEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAJAAAAFB1YlN1YkRpYWdub3N0aWNzQ291bnRlclR5cGVJbnN0YW5jZQEA" +
           "DU0BAA1NDU0AAAAH/////wEB/////wQAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEADk0ALgBEDk0AAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQAPTQAuAEQPTQAAAQASTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAQTQAuAEQQTQAAAQALTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABUaW1lRmlyc3RDaGFuZ2UBABFNAC4ARBFNAAAADf////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> Active
        {
            get
            {
                return m_active;
            }

            set
            {
                if (!Object.ReferenceEquals(m_active, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_active = value;
            }
        }

        /// <remarks />
        public PropertyState<PubSubDiagnosticsCounterClassification> Classification
        {
            get
            {
                return m_classification;
            }

            set
            {
                if (!Object.ReferenceEquals(m_classification, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_classification = value;
            }
        }

        /// <remarks />
        public PropertyState<DiagnosticsLevel> DiagnosticsLevel
        {
            get
            {
                return m_diagnosticsLevel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_diagnosticsLevel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_diagnosticsLevel = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> TimeFirstChange
        {
            get
            {
                return m_timeFirstChange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timeFirstChange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timeFirstChange = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_active != null)
            {
                children.Add(m_active);
            }

            if (m_classification != null)
            {
                children.Add(m_classification);
            }

            if (m_diagnosticsLevel != null)
            {
                children.Add(m_diagnosticsLevel);
            }

            if (m_timeFirstChange != null)
            {
                children.Add(m_timeFirstChange);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Active:
                {
                    if (createOrReplace)
                    {
                        if (Active == null)
                        {
                            if (replacement == null)
                            {
                                Active = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Active = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Active;
                    break;
                }

                case Opc.Ua.BrowseNames.Classification:
                {
                    if (createOrReplace)
                    {
                        if (Classification == null)
                        {
                            if (replacement == null)
                            {
                                Classification = new PropertyState<PubSubDiagnosticsCounterClassification>(this);
                            }
                            else
                            {
                                Classification = (PropertyState<PubSubDiagnosticsCounterClassification>)replacement;
                            }
                        }
                    }

                    instance = Classification;
                    break;
                }

                case Opc.Ua.BrowseNames.DiagnosticsLevel:
                {
                    if (createOrReplace)
                    {
                        if (DiagnosticsLevel == null)
                        {
                            if (replacement == null)
                            {
                                DiagnosticsLevel = new PropertyState<DiagnosticsLevel>(this);
                            }
                            else
                            {
                                DiagnosticsLevel = (PropertyState<DiagnosticsLevel>)replacement;
                            }
                        }
                    }

                    instance = DiagnosticsLevel;
                    break;
                }

                case Opc.Ua.BrowseNames.TimeFirstChange:
                {
                    if (createOrReplace)
                    {
                        if (TimeFirstChange == null)
                        {
                            if (replacement == null)
                            {
                                TimeFirstChange = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TimeFirstChange = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TimeFirstChange;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_active;
        private PropertyState<PubSubDiagnosticsCounterClassification> m_classification;
        private PropertyState<DiagnosticsLevel> m_diagnosticsLevel;
        private PropertyState<DateTime> m_timeFirstChange;
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsRootState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsRootState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsRootState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsRootState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsRootType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAFB1YlN1YkRpYWdub3N0aWNzUm9vdFR5cGVJbnN0YW5jZQEAFE0B" +
           "ABRNFE0AAP////8HAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAATVcPAAAvAD9NVw8A" +
           "AQALTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABUb3RhbEluZm9ybWF0aW9uAgAATlcPAAAvAQAN" +
           "TU5XDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAABPVw8AAC4ARE9XDwAAAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAFBXDwAALgBEUFcPAAEAEk3/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAFFXDwAALgBEUVcPAAEA" +
           "C03/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAVG90YWxFcnJvcgIAAFNXDwAALwEADU1TVw8AAAf/" +
           "////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAVFcPAAAuAERUVw8AAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAABVVw8AAC4ARFVXDwABABJN/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAABWVw8AAC4ARFZXDwABAAtN/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AgAAWFcPAAAvAQDpTFhXDwABAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABTdWJFcnJvcgIAAFlXDwAALwA/WVcPAAAB/////wEB/////wAAAAAEYIAKAQAAAAAACAAA" +
           "AENvdW50ZXJzAgAAWlcPAAAvADpaVw8A/////wYAAAAVYIkKAgAAAAAACgAAAFN0YXRlRXJyb3ICAABb" +
           "Vw8AAC8BAA1NW1cPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAAFxXDwAALgBE" +
           "XFcPAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAAXVcPAAAuAERd" +
           "Vw8ABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAABe" +
           "Vw8AAC4ARF5XDwAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEJ5TWV0aG9kAgAAYFcPAAAvAQANTWBXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUCAABhVw8AAC4ARGFXDwAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNh" +
           "dGlvbgIAAGJXDwAALgBEYlcPAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFn" +
           "bm9zdGljc0xldmVsAgAAY1cPAAAuAERjVw8ABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "GAAAAFN0YXRlT3BlcmF0aW9uYWxCeVBhcmVudAIAAGVXDwAALwEADU1lVw8AAAf/////AQH/////AwAA" +
           "ABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAZlcPAAAuAERmVw8AAAH/////AQH/////AAAAABVgqQoCAAAA" +
           "AAAOAAAAQ2xhc3NpZmljYXRpb24CAABnVw8AAC4ARGdXDwAGAAAAAAEAEk3/////AQH/////AAAAABVg" +
           "qQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAGhXDwAALgBEaFcPAAYAAAAAAQALTf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABkAAABTdGF0ZU9wZXJhdGlvbmFsRnJvbUVycm9yAgAAalcPAAAvAQANTWpX" +
           "DwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAABrVw8AAC4ARGtXDwAAAf////8B" +
           "Af////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAGxXDwAALgBEbFcPAAYAAAAAAQAS" +
           "Tf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAbVcPAAAuAERtVw8A" +
           "BgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN0YXRlUGF1c2VkQnlQYXJlbnQCAABv" +
           "Vw8AAC8BAA1Nb1cPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAAHBXDwAALgBE" +
           "cFcPAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAAcVcPAAAuAERx" +
           "Vw8ABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAABy" +
           "Vw8AAC4ARHJXDwAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAU3RhdGVEaXNhYmxl" +
           "ZEJ5TWV0aG9kAgAAdFcPAAAvAQANTXRXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUCAAB1Vw8AAC4ARHVXDwAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgIAAHZXDwAALgBEdlcPAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9z" +
           "dGljc0xldmVsAgAAd1cPAAAuAER3Vw8ABgAAAAABAAtN/////wEB/////wAAAAAEYIAKAQAAAAAACgAA" +
           "AExpdmVWYWx1ZXMBAEFNAC8AOkFNAAD/////BAAAABVgiQoCAAAAAAAYAAAAQ29uZmlndXJlZERhdGFT" +
           "ZXRXcml0ZXJzAQBCTQAvAD9CTQAAAAX/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEAQ00ALgBEQ00AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABDb25m" +
           "aWd1cmVkRGF0YVNldFJlYWRlcnMBAERNAC8AP0RNAAAABf////8BAf////8BAAAAFWCpCgIAAAAAABAA" +
           "AABEaWFnbm9zdGljc0xldmVsAQBFTQAuAERFTQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAGQAAAE9wZXJhdGlvbmFsRGF0YVNldFdyaXRlcnMBAEZNAC8AP0ZNAAAABf////8BAf////8BAAAA" +
           "FWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBHTQAuAERHTQAABgAAAAABAAtN/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAGQAAAE9wZXJhdGlvbmFsRGF0YVNldFJlYWRlcnMBAEhNAC8AP0hNAAAABf//" +
           "//8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBJTQAuAERJTQAABgAAAAAB" +
           "AAtN/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsConnectionState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsConnectionState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsConnectionState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsConnectionState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsConnectionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAFB1YlN1YkRpYWdub3N0aWNzQ29ubmVjdGlvblR5cGVJbnN0YW5j" +
           "ZQEASk0BAEpNSk0AAP////8HAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAeVcPAAAv" +
           "AD95Vw8AAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABUb3RhbEluZm9ybWF0aW9uAgAAelcP" +
           "AAAvAQANTXpXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAAB7Vw8AAC4ARHtX" +
           "DwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAHxXDwAALgBEfFcP" +
           "AAEAEk3/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAH1XDwAALgBE" +
           "fVcPAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAVG90YWxFcnJvcgIAAH9XDwAALwEADU1/" +
           "Vw8AAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAgFcPAAAuAESAVw8AAAH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAACBVw8AAC4ARIFXDwABABJN////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAACCVw8AAC4ARIJXDwABAAtN" +
           "/////wEB/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AgAAhFcPAAAvAQDpTIRXDwABAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTdWJFcnJvcgIAAIVXDwAALwA/hVcPAAAB/////wEB/////wAAAAAEYIAKAQAA" +
           "AAAACAAAAENvdW50ZXJzAgAAhlcPAAAvADqGVw8A/////wYAAAAVYIkKAgAAAAAACgAAAFN0YXRlRXJy" +
           "b3ICAACHVw8AAC8BAA1Nh1cPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAAIhX" +
           "DwAALgBEiFcPAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAAiVcP" +
           "AAAuAESJVw8ABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2" +
           "ZWwCAACKVw8AAC4ARIpXDwAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVP" +
           "cGVyYXRpb25hbEJ5TWV0aG9kAgAAjFcPAAAvAQANTYxXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAA" +
           "AAYAAABBY3RpdmUCAACNVw8AAC4ARI1XDwAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFz" +
           "c2lmaWNhdGlvbgIAAI5XDwAALgBEjlcPAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAA" +
           "AABEaWFnbm9zdGljc0xldmVsAgAAj1cPAAAuAESPVw8ABgAAAAABAAtN/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeVBhcmVudAIAAJFXDwAALwEADU2RVw8AAAf/////AQH/" +
           "////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAklcPAAAuAESSVw8AAAH/////AQH/////AAAAABVg" +
           "qQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAACTVw8AAC4ARJNXDwAGAAAAAAEAEk3/////AQH/////" +
           "AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAJRXDwAALgBElFcPAAYAAAAAAQALTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABkAAABTdGF0ZU9wZXJhdGlvbmFsRnJvbUVycm9yAgAAllcPAAAv" +
           "AQANTZZXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAACXVw8AAC4ARJdXDwAA" +
           "Af////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAJhXDwAALgBEmFcPAAYA" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAmVcPAAAu" +
           "AESZVw8ABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN0YXRlUGF1c2VkQnlQYXJl" +
           "bnQCAACbVw8AAC8BAA1Nm1cPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAAJxX" +
           "DwAALgBEnFcPAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAAnVcP" +
           "AAAuAESdVw8ABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2" +
           "ZWwCAACeVw8AAC4ARJ5XDwAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAU3RhdGVE" +
           "aXNhYmxlZEJ5TWV0aG9kAgAAoFcPAAAvAQANTaBXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYA" +
           "AABBY3RpdmUCAAChVw8AAC4ARKFXDwAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lm" +
           "aWNhdGlvbgIAAKJXDwAALgBEolcPAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABE" +
           "aWFnbm9zdGljc0xldmVsAgAAo1cPAAAuAESjVw8ABgAAAAABAAtN/////wEB/////wAAAAAEYIAKAQAA" +
           "AAAACgAAAExpdmVWYWx1ZXMBAHdNAC8AOndNAAD/////AQAAABVgiQoCAAAAAAAPAAAAUmVzb2x2ZWRB" +
           "ZGRyZXNzAQB4TQAvAD94TQAAAAz/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAeU0ALgBEeU0AAAYAAAAAAQALTf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsWriterGroupState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsWriterGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsWriterGroupState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsWriterGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsWriterGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAFB1YlN1YkRpYWdub3N0aWNzV3JpdGVyR3JvdXBUeXBlSW5zdGFu" +
           "Y2UBAHpNAQB6TXpNAAD/////BwAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAKVXDwAA" +
           "LwA/pVcPAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgIAAKZX" +
           "DwAALwEADU2mVw8AAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAp1cPAAAuAESn" +
           "Vw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAACoVw8AAC4ARKhX" +
           "DwABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAACpVw8AAC4A" +
           "RKlXDwABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFsRXJyb3ICAACrVw8AAC8BAA1N" +
           "q1cPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAAKxXDwAALgBErFcPAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAArVcPAAAuAEStVw8AAQASTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAArlcPAAAuAESuVw8AAQAL" +
           "Tf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAIAALBXDwAALwEA6UywVw8AAQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU3ViRXJyb3ICAACxVw8AAC8AP7FXDwAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAiE0ALwA6iE0AAP////8JAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQCJTQAvAQANTYlNAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAIpNAC4ARIpN" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAi00ALgBEi00AAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQCMTQAuAESM" +
           "TQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEAjk0ALwEADU2OTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCPTQAu" +
           "AESPTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAJBNAC4ARJBN" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAkU0A" +
           "LgBEkU0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBAJNNAC8BAA1Nk00AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "lE0ALgBElE0AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCVTQAu" +
           "AESVTQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "AJZNAC4ARJZNAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEAmE0ALwEADU2YTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQCZTQAuAESZTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AJpNAC4ARJpNAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEAm00ALgBEm00AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQCdTQAvAQANTZ1NAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAJ5NAC4ARJ5NAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "n00ALgBEn00AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQCgTQAuAESgTQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEAok0ALwEADU2iTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQCjTQAuAESjTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AKRNAC4ARKRNAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEApU0ALgBEpU0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTZW50TmV0" +
           "d29ya01lc3NhZ2VzAQCoTQAvAQANTahNAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAKlNAC4ARKlNAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "qk0ALgBEqk0AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQCrTQAuAESrTQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAEZhaWxlZFRy" +
           "YW5zbWlzc2lvbnMBAK1NAC8BAA1NrU0AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2" +
           "ZQEArk0ALgBErk0AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQCv" +
           "TQAuAESvTQAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2" +
           "ZWwBALBNAC4ARLBNAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARW5jcnlwdGlv" +
           "bkVycm9ycwEAsk0ALwEADU2yTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQCz" +
           "TQAuAESzTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BALRNAC4A" +
           "RLRNAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEA" +
           "tU0ALgBEtU0AAAYBAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZlVmFsdWVzAQCn" +
           "TQAvADqnTQAA/////wQAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRhU2V0V3JpdGVycwEAt00A" +
           "LwA/t00AAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBALhNAC4A" +
           "RLhNAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3BlcmF0aW9uYWxEYXRhU2V0" +
           "V3JpdGVycwEAuU0ALwA/uU0AAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBALpNAC4ARLpNAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJp" +
           "dHlUb2tlbklEAQC7TQAvAD+7TQAAAAf/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEAvE0ALgBEvE0AAAYCAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABEAAABUaW1l" +
           "VG9OZXh0VG9rZW5JRAEAvU0ALwA/vU0AAAEAIgH/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlh" +
           "Z25vc3RpY3NMZXZlbAEAvk0ALgBEvk0AAAYCAAAAAQALTf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsReaderGroupState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsReaderGroupState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsReaderGroupState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsReaderGroupState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsReaderGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAFB1YlN1YkRpYWdub3N0aWNzUmVhZGVyR3JvdXBUeXBlSW5zdGFu" +
           "Y2UBAL9NAQC/Tb9NAAD/////BwAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAALJXDwAA" +
           "LwA/slcPAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAVG90YWxJbmZvcm1hdGlvbgIAALNX" +
           "DwAALwEADU2zVw8AAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAtFcPAAAuAES0" +
           "Vw8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAAC1Vw8AAC4ARLVX" +
           "DwABABJN/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAAC2Vw8AAC4A" +
           "RLZXDwABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRvdGFsRXJyb3ICAAC4Vw8AAC8BAA1N" +
           "uFcPAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQIAALlXDwAALgBEuVcPAAAB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAgAAulcPAAAuAES6Vw8AAQASTf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAu1cPAAAuAES7Vw8AAQAL" +
           "Tf////8BAf////8AAAAABGGCCgQAAAAAAAUAAABSZXNldAIAAL1XDwAALwEA6Uy9Vw8AAQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU3ViRXJyb3ICAAC+Vw8AAC8AP75XDwAAAf////8BAf////8AAAAABGCACgEA" +
           "AAAAAAgAAABDb3VudGVycwEAzU0ALwA6zU0AAP////8JAAAAFWCJCgIAAAAAAAoAAABTdGF0ZUVycm9y" +
           "AQDOTQAvAQANTc5NAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAM9NAC4ARM9N" +
           "AAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA0E0ALgBE0E0AAAYB" +
           "AAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQDRTQAuAETR" +
           "TQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9uYWxCeU1l" +
           "dGhvZAEA000ALwEADU3TTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAQDUTQAu" +
           "AETUTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BANVNAC4ARNVN" +
           "AAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEA1k0A" +
           "LgBE1k0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABgAAABTdGF0ZU9wZXJhdGlvbmFs" +
           "QnlQYXJlbnQBANhNAC8BAA1N2E0AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEA" +
           "2U0ALgBE2U0AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQDaTQAu" +
           "AETaTQAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ANtNAC4ARNtNAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGVPcGVyYXRp" +
           "b25hbEZyb21FcnJvcgEA3U0ALwEADU3dTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQDeTQAuAETeTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AN9NAC4ARN9NAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEA4E0ALgBE4E0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdGF0ZVBh" +
           "dXNlZEJ5UGFyZW50AQDiTQAvAQANTeJNAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAONNAC4ARONNAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "5E0ALgBE5E0AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQDlTQAuAETlTQAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFN0YXRlRGlz" +
           "YWJsZWRCeU1ldGhvZAEA500ALwEADU3nTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0" +
           "aXZlAQDoTQAuAEToTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24B" +
           "AOlNAC4AROlNAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NM" +
           "ZXZlbAEA6k0ALgBE6k0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABcAAABSZWNlaXZl" +
           "ZE5ldHdvcmtNZXNzYWdlcwEA7U0ALwEADU3tTQAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAA" +
           "QWN0aXZlAQDuTQAuAETuTQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRp" +
           "b24BAO9NAC4ARO9NAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEA8E0ALgBE8E0AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAB4AAABSZWNl" +
           "aXZlZEludmFsaWROZXR3b3JrTWVzc2FnZXMBAPJNAC8BAA1N8k0AAAAH/////wEB/////wMAAAAVYIkK" +
           "AgAAAAAABgAAAEFjdGl2ZQEA800ALgBE800AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENs" +
           "YXNzaWZpY2F0aW9uAQD0TQAuAET0TQAABgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAA" +
           "AERpYWdub3N0aWNzTGV2ZWwBAPVNAC4ARPVNAAAGAQAAAAEAC03/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAARGVjcnlwdGlvbkVycm9ycwEA900ALwEADU33TQAAAAf/////AQH/////AwAAABVgiQoCAAAA" +
           "AAAGAAAAQWN0aXZlAQD4TQAuAET4TQAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3Np" +
           "ZmljYXRpb24BAPlNAC4ARPlNAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlh" +
           "Z25vc3RpY3NMZXZlbAEA+k0ALgBE+k0AAAYBAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoA" +
           "AABMaXZlVmFsdWVzAQDsTQAvADrsTQAA/////wIAAAAVYIkKAgAAAAAAGAAAAENvbmZpZ3VyZWREYXRh" +
           "U2V0UmVhZGVycwEA/E0ALwA//E0AAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0" +
           "aWNzTGV2ZWwBAP1NAC4ARP1NAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAZAAAAT3Bl" +
           "cmF0aW9uYWxEYXRhU2V0UmVhZGVycwEA/k0ALwA//k0AAAAF/////wEB/////wEAAAAVYKkKAgAAAAAA" +
           "EAAAAERpYWdub3N0aWNzTGV2ZWwBAP9NAC4ARP9NAAAGAAAAAAEAC03/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsDataSetWriterState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsDataSetWriterState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsDataSetWriterState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsDataSetWriterState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsDataSetWriterType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAFB1YlN1YkRpYWdub3N0aWNzRGF0YVNldFdyaXRlclR5cGVJbnN0" +
           "YW5jZQEAAE4BAABOAE4AAP////8HAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAv1cP" +
           "AAAvAD+/Vw8AAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABUb3RhbEluZm9ybWF0aW9uAgAA" +
           "wFcPAAAvAQANTcBXDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAADBVw8AAC4A" +
           "RMFXDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAMJXDwAALgBE" +
           "wlcPAAEAEk3/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAAMNXDwAA" +
           "LgBEw1cPAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAVG90YWxFcnJvcgIAAMVXDwAALwEA" +
           "DU3FVw8AAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAAxlcPAAAuAETGVw8AAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAADHVw8AAC4ARMdXDwABABJN" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAADIVw8AAC4ARMhXDwAB" +
           "AAtN/////wEB/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AgAAylcPAAAvAQDpTMpXDwABAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTdWJFcnJvcgIAAMtXDwAALwA/y1cPAAAB/////wEB/////wAAAAAEYIAK" +
           "AQAAAAAACAAAAENvdW50ZXJzAQAOTgAvADoOTgAA/////wcAAAAVYIkKAgAAAAAACgAAAFN0YXRlRXJy" +
           "b3IBAA9OAC8BAA1ND04AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAEE4ALgBE" +
           "EE4AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQARTgAuAEQRTgAA" +
           "BgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBABJOAC4A" +
           "RBJOAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRpb25hbEJ5" +
           "TWV0aG9kAQAUTgAvAQANTRROAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBABVO" +
           "AC4ARBVOAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAFk4ALgBE" +
           "Fk4AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQAX" +
           "TgAuAEQXTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9u" +
           "YWxCeVBhcmVudAEAGU4ALwEADU0ZTgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZl" +
           "AQAaTgAuAEQaTgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BABtO" +
           "AC4ARBtOAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZl" +
           "bAEAHE4ALgBEHE4AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABkAAABTdGF0ZU9wZXJh" +
           "dGlvbmFsRnJvbUVycm9yAQAeTgAvAQANTR5OAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUBAB9OAC4ARB9OAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgEAIE4ALgBEIE4AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQAhTgAuAEQhTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN0YXRl" +
           "UGF1c2VkQnlQYXJlbnQBACNOAC8BAA1NI04AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAJE4ALgBEJE4AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQAlTgAuAEQlTgAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBACZOAC4ARCZOAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAU3RhdGVE" +
           "aXNhYmxlZEJ5TWV0aG9kAQAoTgAvAQANTShOAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUBAClOAC4ARClOAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgEAKk4ALgBEKk4AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQArTgAuAEQrTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAEZhaWxl" +
           "ZERhdGFTZXRNZXNzYWdlcwEALk4ALwEADU0uTgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAA" +
           "QWN0aXZlAQAvTgAuAEQvTgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRp" +
           "b24BADBOAC4ARDBOAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEAMU4ALgBEMU4AAAYAAAAAAQALTf////8BAf////8AAAAABGCACgEAAAAAAAoAAABMaXZl" +
           "VmFsdWVzAQAtTgAvADotTgAA/////wQAAAAVYIkKAgAAAAAAFQAAAE1lc3NhZ2VTZXF1ZW5jZU51bWJl" +
           "cgEAM04ALwA/M04AAAAF/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwB" +
           "ADROAC4ARDROAAAGAgAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU3RhdHVzQ29kZQEA" +
           "NU4ALwA/NU4AAAAT/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBADZO" +
           "AC4ARDZOAAAGAgAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATWFqb3JWZXJzaW9uAQA3" +
           "TgAvAD83TgAAAAf/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAOE4A" +
           "LgBEOE4AAAYCAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABNaW5vclZlcnNpb24BADlO" +
           "AC8APzlOAAAAB/////8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQA6TgAu" +
           "AEQ6TgAABgIAAAABAAtN/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubDiagnosticsDataSetReaderState Class
    #if (!OPCUA_EXCLUDE_PubSubDiagnosticsDataSetReaderState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubDiagnosticsDataSetReaderState : PubSubDiagnosticsState
    {
        #region Constructors
        /// <remarks />
        public PubSubDiagnosticsDataSetReaderState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubDiagnosticsDataSetReaderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAFB1YlN1YkRpYWdub3N0aWNzRGF0YVNldFJlYWRlclR5cGVJbnN0" +
           "YW5jZQEAO04BADtOO04AAP////8HAAAAFWCJCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAgAAzFcP" +
           "AAAvAD/MVw8AAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABUb3RhbEluZm9ybWF0aW9uAgAA" +
           "zVcPAAAvAQANTc1XDwAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUCAADOVw8AAC4A" +
           "RM5XDwAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgIAAM9XDwAALgBE" +
           "z1cPAAEAEk3/////AQH/////AAAAABVgiQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAIAANBXDwAA" +
           "LgBE0FcPAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAVG90YWxFcnJvcgIAANJXDwAALwEA" +
           "DU3SVw8AAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZlAgAA01cPAAAuAETTVw8AAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24CAADUVw8AAC4ARNRXDwABABJN" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwCAADVVw8AAC4ARNVXDwAB" +
           "AAtN/////wEB/////wAAAAAEYYIKBAAAAAAABQAAAFJlc2V0AgAA11cPAAAvAQDpTNdXDwABAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTdWJFcnJvcgIAANhXDwAALwA/2FcPAAAB/////wEB/////wAAAAAEYIAK" +
           "AQAAAAAACAAAAENvdW50ZXJzAQBJTgAvADpJTgAA/////wgAAAAVYIkKAgAAAAAACgAAAFN0YXRlRXJy" +
           "b3IBAEpOAC8BAA1NSk4AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFjdGl2ZQEAS04ALgBE" +
           "S04AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9uAQBMTgAuAERMTgAA" +
           "BgEAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAE1OAC4A" +
           "RE1OAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAU3RhdGVPcGVyYXRpb25hbEJ5" +
           "TWV0aG9kAQBPTgAvAQANTU9OAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3RpdmUBAFBO" +
           "AC4ARFBOAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEAUU4ALgBE" +
           "UU4AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQBS" +
           "TgAuAERSTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRlT3BlcmF0aW9u" +
           "YWxCeVBhcmVudAEAVE4ALwEADU1UTgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAAQWN0aXZl" +
           "AQBVTgAuAERVTgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRpb24BAFZO" +
           "AC4ARFZOAAAGAAAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZl" +
           "bAEAV04ALgBEV04AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABkAAABTdGF0ZU9wZXJh" +
           "dGlvbmFsRnJvbUVycm9yAQBZTgAvAQANTVlOAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUBAFpOAC4ARFpOAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgEAW04ALgBEW04AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQBcTgAuAERcTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN0YXRl" +
           "UGF1c2VkQnlQYXJlbnQBAF5OAC8BAA1NXk4AAAAH/////wEB/////wMAAAAVYIkKAgAAAAAABgAAAEFj" +
           "dGl2ZQEAX04ALgBEX04AAAAB/////wEB/////wAAAAAVYKkKAgAAAAAADgAAAENsYXNzaWZpY2F0aW9u" +
           "AQBgTgAuAERgTgAABgAAAAABABJN/////wEB/////wAAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNz" +
           "TGV2ZWwBAGFOAC4ARGFOAAAGAAAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAU3RhdGVE" +
           "aXNhYmxlZEJ5TWV0aG9kAQBjTgAvAQANTWNOAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABB" +
           "Y3RpdmUBAGROAC4ARGROAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlv" +
           "bgEAZU4ALgBEZU4AAAYAAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGlj" +
           "c0xldmVsAQBmTgAuAERmTgAABgAAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAEZhaWxl" +
           "ZERhdGFTZXRNZXNzYWdlcwEAaU4ALwEADU1pTgAAAAf/////AQH/////AwAAABVgiQoCAAAAAAAGAAAA" +
           "QWN0aXZlAQBqTgAuAERqTgAAAAH/////AQH/////AAAAABVgqQoCAAAAAAAOAAAAQ2xhc3NpZmljYXRp" +
           "b24BAGtOAC4ARGtOAAAGAQAAAAEAEk3/////AQH/////AAAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3Rp" +
           "Y3NMZXZlbAEAbE4ALgBEbE4AAAYAAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEZWNy" +
           "eXB0aW9uRXJyb3JzAQBuTgAvAQANTW5OAAAAB/////8BAf////8DAAAAFWCJCgIAAAAAAAYAAABBY3Rp" +
           "dmUBAG9OAC4ARG9OAAAAAf////8BAf////8AAAAAFWCpCgIAAAAAAA4AAABDbGFzc2lmaWNhdGlvbgEA" +
           "cE4ALgBEcE4AAAYBAAAAAQASTf////8BAf////8AAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xl" +
           "dmVsAQBxTgAuAERxTgAABgEAAAABAAtN/////wEB/////wAAAAAEYIAKAQAAAAAACgAAAExpdmVWYWx1" +
           "ZXMBAGhOAC8AOmhOAAD/////BgAAABVgiQoCAAAAAAAVAAAATWVzc2FnZVNlcXVlbmNlTnVtYmVyAQBz" +
           "TgAvAD9zTgAAAAX/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAdE4A" +
           "LgBEdE4AAAYCAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTdGF0dXNDb2RlAQB1TgAv" +
           "AD91TgAAABP/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAdk4ALgBE" +
           "dk4AAAYCAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABNYWpvclZlcnNpb24BAHdOAC8A" +
           "P3dOAAAAB/////8BAf////8BAAAAFWCpCgIAAAAAABAAAABEaWFnbm9zdGljc0xldmVsAQB4TgAuAER4" +
           "TgAABgIAAAABAAtN/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAE1pbm9yVmVyc2lvbgEAeU4ALwA/" +
           "eU4AAAAH/////wEB/////wEAAAAVYKkKAgAAAAAAEAAAAERpYWdub3N0aWNzTGV2ZWwBAHpOAC4ARHpO" +
           "AAAGAgAAAAEAC03/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU2VjdXJpdHlUb2tlbklEAQB7TgAv" +
           "AD97TgAAAAf/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEAfE4ALgBE" +
           "fE4AAAYCAAAAAQALTf////8BAf////8AAAAAFWCJCgIAAAAAABEAAABUaW1lVG9OZXh0VG9rZW5JRAEA" +
           "fU4ALwA/fU4AAAEAIgH/////AQH/////AQAAABVgqQoCAAAAAAAQAAAARGlhZ25vc3RpY3NMZXZlbAEA" +
           "fk4ALgBEfk4AAAYCAAAAAQALTf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region PubSubCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_PubSubCapabilitiesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PubSubCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxDataSetWritersPerGroup != null)
            {
                MaxDataSetWritersPerGroup.Initialize(context, MaxDataSetWritersPerGroup_InitializationString);
            }

            if (MaxSecurityGroups != null)
            {
                MaxSecurityGroups.Initialize(context, MaxSecurityGroups_InitializationString);
            }

            if (MaxPushTargets != null)
            {
                MaxPushTargets.Initialize(context, MaxPushTargets_InitializationString);
            }

            if (MaxPublishedDataSets != null)
            {
                MaxPublishedDataSets.Initialize(context, MaxPublishedDataSets_InitializationString);
            }

            if (MaxStandaloneSubscribedDataSets != null)
            {
                MaxStandaloneSubscribedDataSets.Initialize(context, MaxStandaloneSubscribedDataSets_InitializationString);
            }

            if (MaxNetworkMessageSizeDatagram != null)
            {
                MaxNetworkMessageSizeDatagram.Initialize(context, MaxNetworkMessageSizeDatagram_InitializationString);
            }

            if (MaxNetworkMessageSizeBroker != null)
            {
                MaxNetworkMessageSizeBroker.Initialize(context, MaxNetworkMessageSizeBroker_InitializationString);
            }

            if (SupportSecurityKeyPull != null)
            {
                SupportSecurityKeyPull.Initialize(context, SupportSecurityKeyPull_InitializationString);
            }

            if (SupportSecurityKeyPush != null)
            {
                SupportSecurityKeyPush.Initialize(context, SupportSecurityKeyPush_InitializationString);
            }

            if (SupportSecurityKeyServer != null)
            {
                SupportSecurityKeyServer.Initialize(context, SupportSecurityKeyServer_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxDataSetWritersPerGroup_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAE1heERhdGFTZXRXcml0ZXJzUGVyR3JvdXABAIt/AC4ARIt/AAAA" +
           "B/////8BAf////8AAAAA";

        private const string MaxSecurityGroups_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE1heFNlY3VyaXR5R3JvdXBzAQBMgAAuAERMgAAAAAf/////AQH/" +
           "////AAAAAA==";

        private const string MaxPushTargets_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heFB1c2hUYXJnZXRzAQBNgAAuAERNgAAAAAf/////AQH/////" +
           "AAAAAA==";

        private const string MaxPublishedDataSets_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAE1heFB1Ymxpc2hlZERhdGFTZXRzAQBOgAAuAEROgAAAAAf/////" +
           "AQH/////AAAAAA==";

        private const string MaxStandaloneSubscribedDataSets_InitializationString =
           "//////////8VYIkKAgAAAAAAHwAAAE1heFN0YW5kYWxvbmVTdWJzY3JpYmVkRGF0YVNldHMBAE+AAC4A" +
           "RE+AAAAAB/////8BAf////8AAAAA";

        private const string MaxNetworkMessageSizeDatagram_InitializationString =
           "//////////8VYIkKAgAAAAAAHQAAAE1heE5ldHdvcmtNZXNzYWdlU2l6ZURhdGFncmFtAQCMfwAuAESM" +
           "fwAAAAf/////AQH/////AAAAAA==";

        private const string MaxNetworkMessageSizeBroker_InitializationString =
           "//////////8VYIkKAgAAAAAAGwAAAE1heE5ldHdvcmtNZXNzYWdlU2l6ZUJyb2tlcgEAjX8ALgBEjX8A" +
           "AAAH/////wEB/////wAAAAA=";

        private const string SupportSecurityKeyPull_InitializationString =
           "//////////8VYIkKAgAAAAAAFgAAAFN1cHBvcnRTZWN1cml0eUtleVB1bGwBAI5/AC4ARI5/AAAAAf//" +
           "//8BAf////8AAAAA";

        private const string SupportSecurityKeyPush_InitializationString =
           "//////////8VYIkKAgAAAAAAFgAAAFN1cHBvcnRTZWN1cml0eUtleVB1c2gBAI9/AC4ARI9/AAAAAf//" +
           "//8BAf////8AAAAA";

        private const string SupportSecurityKeyServer_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAFN1cHBvcnRTZWN1cml0eUtleVNlcnZlcgEAUIAALgBEUIAAAAAB" +
           "/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAFB1YlN1YkNhcGFiaWxpdGllc1R5cGVJbnN0YW5jZQEAGF0BABhd" +
           "GF0AAP////8QAAAAFWCJCgIAAAAAABQAAABNYXhQdWJTdWJDb25uZWN0aW9ucwEAGV0ALgBEGV0AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAE1heFdyaXRlckdyb3VwcwEAGl0ALgBEGl0AAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADwAAAE1heFJlYWRlckdyb3VwcwEAG10ALgBEG10AAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEQAAAE1heERhdGFTZXRXcml0ZXJzAQAcXQAuAEQcXQAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAARAAAATWF4RGF0YVNldFJlYWRlcnMBAB1dAC4ARB1dAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABMAAABNYXhGaWVsZHNQZXJEYXRhU2V0AQAeXQAuAEQeXQAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAZAAAATWF4RGF0YVNldFdyaXRlcnNQZXJHcm91cAEAi38ALgBEi38AAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAE1heFNlY3VyaXR5R3JvdXBzAQBMgAAuAERMgAAAAAf/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAOAAAATWF4UHVzaFRhcmdldHMBAE2AAC4ARE2AAAAAB/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABQAAABNYXhQdWJsaXNoZWREYXRhU2V0cwEAToAALgBEToAAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAHwAAAE1heFN0YW5kYWxvbmVTdWJzY3JpYmVkRGF0YVNldHMBAE+A" +
           "AC4ARE+AAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABNYXhOZXR3b3JrTWVzc2FnZVNpemVE" +
           "YXRhZ3JhbQEAjH8ALgBEjH8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAGwAAAE1heE5ldHdvcmtN" +
           "ZXNzYWdlU2l6ZUJyb2tlcgEAjX8ALgBEjX8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAFN1" +
           "cHBvcnRTZWN1cml0eUtleVB1bGwBAI5/AC4ARI5/AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAABYA" +
           "AABTdXBwb3J0U2VjdXJpdHlLZXlQdXNoAQCPfwAuAESPfwAAAAH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAYAAAAU3VwcG9ydFNlY3VyaXR5S2V5U2VydmVyAQBQgAAuAERQgAAAAAH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> MaxPubSubConnections
        {
            get
            {
                return m_maxPubSubConnections;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxPubSubConnections, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxPubSubConnections = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxWriterGroups
        {
            get
            {
                return m_maxWriterGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxWriterGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxWriterGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReaderGroups
        {
            get
            {
                return m_maxReaderGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReaderGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReaderGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxDataSetWriters
        {
            get
            {
                return m_maxDataSetWriters;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxDataSetWriters, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxDataSetWriters = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxDataSetReaders
        {
            get
            {
                return m_maxDataSetReaders;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxDataSetReaders, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxDataSetReaders = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxFieldsPerDataSet
        {
            get
            {
                return m_maxFieldsPerDataSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxFieldsPerDataSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxFieldsPerDataSet = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxDataSetWritersPerGroup
        {
            get
            {
                return m_maxDataSetWritersPerGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxDataSetWritersPerGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxDataSetWritersPerGroup = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxSecurityGroups
        {
            get
            {
                return m_maxSecurityGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSecurityGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSecurityGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxPushTargets
        {
            get
            {
                return m_maxPushTargets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxPushTargets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxPushTargets = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxPublishedDataSets
        {
            get
            {
                return m_maxPublishedDataSets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxPublishedDataSets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxPublishedDataSets = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxStandaloneSubscribedDataSets
        {
            get
            {
                return m_maxStandaloneSubscribedDataSets;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxStandaloneSubscribedDataSets, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxStandaloneSubscribedDataSets = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNetworkMessageSizeDatagram
        {
            get
            {
                return m_maxNetworkMessageSizeDatagram;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNetworkMessageSizeDatagram, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNetworkMessageSizeDatagram = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNetworkMessageSizeBroker
        {
            get
            {
                return m_maxNetworkMessageSizeBroker;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNetworkMessageSizeBroker, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNetworkMessageSizeBroker = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SupportSecurityKeyPull
        {
            get
            {
                return m_supportSecurityKeyPull;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportSecurityKeyPull, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportSecurityKeyPull = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SupportSecurityKeyPush
        {
            get
            {
                return m_supportSecurityKeyPush;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportSecurityKeyPush, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportSecurityKeyPush = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SupportSecurityKeyServer
        {
            get
            {
                return m_supportSecurityKeyServer;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportSecurityKeyServer, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportSecurityKeyServer = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_maxPubSubConnections != null)
            {
                children.Add(m_maxPubSubConnections);
            }

            if (m_maxWriterGroups != null)
            {
                children.Add(m_maxWriterGroups);
            }

            if (m_maxReaderGroups != null)
            {
                children.Add(m_maxReaderGroups);
            }

            if (m_maxDataSetWriters != null)
            {
                children.Add(m_maxDataSetWriters);
            }

            if (m_maxDataSetReaders != null)
            {
                children.Add(m_maxDataSetReaders);
            }

            if (m_maxFieldsPerDataSet != null)
            {
                children.Add(m_maxFieldsPerDataSet);
            }

            if (m_maxDataSetWritersPerGroup != null)
            {
                children.Add(m_maxDataSetWritersPerGroup);
            }

            if (m_maxSecurityGroups != null)
            {
                children.Add(m_maxSecurityGroups);
            }

            if (m_maxPushTargets != null)
            {
                children.Add(m_maxPushTargets);
            }

            if (m_maxPublishedDataSets != null)
            {
                children.Add(m_maxPublishedDataSets);
            }

            if (m_maxStandaloneSubscribedDataSets != null)
            {
                children.Add(m_maxStandaloneSubscribedDataSets);
            }

            if (m_maxNetworkMessageSizeDatagram != null)
            {
                children.Add(m_maxNetworkMessageSizeDatagram);
            }

            if (m_maxNetworkMessageSizeBroker != null)
            {
                children.Add(m_maxNetworkMessageSizeBroker);
            }

            if (m_supportSecurityKeyPull != null)
            {
                children.Add(m_supportSecurityKeyPull);
            }

            if (m_supportSecurityKeyPush != null)
            {
                children.Add(m_supportSecurityKeyPush);
            }

            if (m_supportSecurityKeyServer != null)
            {
                children.Add(m_supportSecurityKeyServer);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MaxPubSubConnections:
                {
                    if (createOrReplace)
                    {
                        if (MaxPubSubConnections == null)
                        {
                            if (replacement == null)
                            {
                                MaxPubSubConnections = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxPubSubConnections = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxPubSubConnections;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxWriterGroups:
                {
                    if (createOrReplace)
                    {
                        if (MaxWriterGroups == null)
                        {
                            if (replacement == null)
                            {
                                MaxWriterGroups = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxWriterGroups = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxWriterGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReaderGroups:
                {
                    if (createOrReplace)
                    {
                        if (MaxReaderGroups == null)
                        {
                            if (replacement == null)
                            {
                                MaxReaderGroups = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReaderGroups = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReaderGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxDataSetWriters:
                {
                    if (createOrReplace)
                    {
                        if (MaxDataSetWriters == null)
                        {
                            if (replacement == null)
                            {
                                MaxDataSetWriters = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxDataSetWriters = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxDataSetWriters;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxDataSetReaders:
                {
                    if (createOrReplace)
                    {
                        if (MaxDataSetReaders == null)
                        {
                            if (replacement == null)
                            {
                                MaxDataSetReaders = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxDataSetReaders = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxDataSetReaders;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxFieldsPerDataSet:
                {
                    if (createOrReplace)
                    {
                        if (MaxFieldsPerDataSet == null)
                        {
                            if (replacement == null)
                            {
                                MaxFieldsPerDataSet = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxFieldsPerDataSet = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxFieldsPerDataSet;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxDataSetWritersPerGroup:
                {
                    if (createOrReplace)
                    {
                        if (MaxDataSetWritersPerGroup == null)
                        {
                            if (replacement == null)
                            {
                                MaxDataSetWritersPerGroup = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxDataSetWritersPerGroup = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxDataSetWritersPerGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSecurityGroups:
                {
                    if (createOrReplace)
                    {
                        if (MaxSecurityGroups == null)
                        {
                            if (replacement == null)
                            {
                                MaxSecurityGroups = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxSecurityGroups = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSecurityGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxPushTargets:
                {
                    if (createOrReplace)
                    {
                        if (MaxPushTargets == null)
                        {
                            if (replacement == null)
                            {
                                MaxPushTargets = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxPushTargets = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxPushTargets;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxPublishedDataSets:
                {
                    if (createOrReplace)
                    {
                        if (MaxPublishedDataSets == null)
                        {
                            if (replacement == null)
                            {
                                MaxPublishedDataSets = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxPublishedDataSets = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxPublishedDataSets;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxStandaloneSubscribedDataSets:
                {
                    if (createOrReplace)
                    {
                        if (MaxStandaloneSubscribedDataSets == null)
                        {
                            if (replacement == null)
                            {
                                MaxStandaloneSubscribedDataSets = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxStandaloneSubscribedDataSets = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxStandaloneSubscribedDataSets;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNetworkMessageSizeDatagram:
                {
                    if (createOrReplace)
                    {
                        if (MaxNetworkMessageSizeDatagram == null)
                        {
                            if (replacement == null)
                            {
                                MaxNetworkMessageSizeDatagram = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNetworkMessageSizeDatagram = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNetworkMessageSizeDatagram;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNetworkMessageSizeBroker:
                {
                    if (createOrReplace)
                    {
                        if (MaxNetworkMessageSizeBroker == null)
                        {
                            if (replacement == null)
                            {
                                MaxNetworkMessageSizeBroker = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNetworkMessageSizeBroker = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNetworkMessageSizeBroker;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportSecurityKeyPull:
                {
                    if (createOrReplace)
                    {
                        if (SupportSecurityKeyPull == null)
                        {
                            if (replacement == null)
                            {
                                SupportSecurityKeyPull = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SupportSecurityKeyPull = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SupportSecurityKeyPull;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportSecurityKeyPush:
                {
                    if (createOrReplace)
                    {
                        if (SupportSecurityKeyPush == null)
                        {
                            if (replacement == null)
                            {
                                SupportSecurityKeyPush = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SupportSecurityKeyPush = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SupportSecurityKeyPush;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportSecurityKeyServer:
                {
                    if (createOrReplace)
                    {
                        if (SupportSecurityKeyServer == null)
                        {
                            if (replacement == null)
                            {
                                SupportSecurityKeyServer = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SupportSecurityKeyServer = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SupportSecurityKeyServer;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_maxPubSubConnections;
        private PropertyState<uint> m_maxWriterGroups;
        private PropertyState<uint> m_maxReaderGroups;
        private PropertyState<uint> m_maxDataSetWriters;
        private PropertyState<uint> m_maxDataSetReaders;
        private PropertyState<uint> m_maxFieldsPerDataSet;
        private PropertyState<uint> m_maxDataSetWritersPerGroup;
        private PropertyState<uint> m_maxSecurityGroups;
        private PropertyState<uint> m_maxPushTargets;
        private PropertyState<uint> m_maxPublishedDataSets;
        private PropertyState<uint> m_maxStandaloneSubscribedDataSets;
        private PropertyState<uint> m_maxNetworkMessageSizeDatagram;
        private PropertyState<uint> m_maxNetworkMessageSizeBroker;
        private PropertyState<bool> m_supportSecurityKeyPull;
        private PropertyState<bool> m_supportSecurityKeyPush;
        private PropertyState<bool> m_supportSecurityKeyServer;
        #endregion
    }
    #endif
    #endregion

    #region PubSubStatusEventState Class
    #if (!OPCUA_EXCLUDE_PubSubStatusEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubStatusEventState : SystemEventState
    {
        #region Constructors
        /// <remarks />
        public PubSubStatusEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubStatusEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAFB1YlN1YlN0YXR1c0V2ZW50VHlwZUluc3RhbmNlAQCvPAEArzyv" +
           "PAAA/////wsAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADZVw8AAC4ARNlXDwAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADaVw8AAC4ARNpXDwAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA21cPAAAuAETbVw8AABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQIAANxXDwAALgBE3FcPAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUCAADdVw8AAC4ARN1XDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVU" +
           "aW1lAgAA3lcPAAAuAETeVw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAgAA" +
           "4FcPAAAuAETgVw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkCAADhVw8AAC4A" +
           "ROFXDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDb25uZWN0aW9uSWQBALk8AC4ARLk8AAAA" +
           "Ef////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABHcm91cElkAQC6PAAuAES6PAAAABH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAFAAAAU3RhdGUBALs8AC4ARLs8AAABADc5/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ConnectionId
        {
            get
            {
                return m_connectionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_connectionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_connectionId = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> GroupId
        {
            get
            {
                return m_groupId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_groupId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_groupId = value;
            }
        }

        /// <remarks />
        public PropertyState<PubSubState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_connectionId != null)
            {
                children.Add(m_connectionId);
            }

            if (m_groupId != null)
            {
                children.Add(m_groupId);
            }

            if (m_state != null)
            {
                children.Add(m_state);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConnectionId:
                {
                    if (createOrReplace)
                    {
                        if (ConnectionId == null)
                        {
                            if (replacement == null)
                            {
                                ConnectionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ConnectionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ConnectionId;
                    break;
                }

                case Opc.Ua.BrowseNames.GroupId:
                {
                    if (createOrReplace)
                    {
                        if (GroupId == null)
                        {
                            if (replacement == null)
                            {
                                GroupId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                GroupId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = GroupId;
                    break;
                }

                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new PropertyState<PubSubState>(this);
                            }
                            else
                            {
                                State = (PropertyState<PubSubState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_connectionId;
        private PropertyState<NodeId> m_groupId;
        private PropertyState<PubSubState> m_state;
        #endregion
    }
    #endif
    #endregion

    #region PubSubTransportLimitsExceedEventState Class
    #if (!OPCUA_EXCLUDE_PubSubTransportLimitsExceedEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubTransportLimitsExceedEventState : PubSubStatusEventState
    {
        #region Constructors
        /// <remarks />
        public PubSubTransportLimitsExceedEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubTransportLimitsExceedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAFB1YlN1YlRyYW5zcG9ydExpbWl0c0V4Y2VlZEV2ZW50VHlwZUlu" +
           "c3RhbmNlAQC8PAEAvDy8PAAA/////w0AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQCAADmVw8AAC4AROZX" +
           "DwAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUCAADnVw8AAC4AROdXDwAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAgAA6FcPAAAuAEToVw8AABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQIAAOlXDwAALgBE6VcPAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABAAAAFRpbWUCAADqVw8AAC4AROpXDwABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACwAAAFJlY2VpdmVUaW1lAgAA61cPAAAuAETrVw8AAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABNZXNzYWdlAgAA7VcPAAAuAETtVw8AABX/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2V2" +
           "ZXJpdHkCAADuVw8AAC4ARO5XDwAABf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDb25uZWN0aW9u" +
           "SWQCAADzVw8AAC4ARPNXDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABHcm91cElkAgAA9FcP" +
           "AAAuAET0Vw8AABH/////AQH/////AAAAABVgiQoCAAAAAAAFAAAAU3RhdGUCAAD1Vw8AAC4ARPVXDwAB" +
           "ADc5/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAEFjdHVhbAEAyTwALgBEyTwAAAAH/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAE1heGltdW0BAMo8AC4ARMo8AAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> Actual
        {
            get
            {
                return m_actual;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actual, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actual = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Maximum
        {
            get
            {
                return m_maximum;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maximum, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maximum = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_actual != null)
            {
                children.Add(m_actual);
            }

            if (m_maximum != null)
            {
                children.Add(m_maximum);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Actual:
                {
                    if (createOrReplace)
                    {
                        if (Actual == null)
                        {
                            if (replacement == null)
                            {
                                Actual = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Actual = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Actual;
                    break;
                }

                case Opc.Ua.BrowseNames.Maximum:
                {
                    if (createOrReplace)
                    {
                        if (Maximum == null)
                        {
                            if (replacement == null)
                            {
                                Maximum = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Maximum = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Maximum;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_actual;
        private PropertyState<uint> m_maximum;
        #endregion
    }
    #endif
    #endregion

    #region PubSubCommunicationFailureEventState Class
    #if (!OPCUA_EXCLUDE_PubSubCommunicationFailureEventState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PubSubCommunicationFailureEventState : PubSubStatusEventState
    {
        #region Constructors
        /// <remarks />
        public PubSubCommunicationFailureEventState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PubSubCommunicationFailureEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKwAAAFB1YlN1YkNvbW11bmljYXRpb25GYWlsdXJlRXZlbnRUeXBlSW5z" +
           "dGFuY2UBAMs8AQDLPMs8AAD/////DAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAIAAPZXDwAALgBE9lcP" +
           "AAAP/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQIAAPdXDwAALgBE91cPAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUCAAD4Vw8AAC4ARPhXDwAAEf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAgAA+VcPAAAuAET5Vw8AAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAEAAAAVGltZQIAAPpXDwAALgBE+lcPAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAALAAAAUmVjZWl2ZVRpbWUCAAD7Vw8AAC4ARPtXDwABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BwAAAE1lc3NhZ2UCAAD9Vw8AAC4ARP1XDwAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZl" +
           "cml0eQIAAP5XDwAALgBE/lcPAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENvbm5lY3Rpb25J" +
           "ZAIAAANYDwAALgBEA1gPAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAEdyb3VwSWQCAAAEWA8A" +
           "AC4ARARYDwAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAUAAABTdGF0ZQIAAAVYDwAALgBEBVgPAAEA" +
           "Nzn/////AQH/////AAAAABVgiQoCAAAAAAAFAAAARXJyb3IBANg8AC4ARNg8AAAAE/////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<StatusCode> Error
        {
            get
            {
                return m_error;
            }

            set
            {
                if (!Object.ReferenceEquals(m_error, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_error = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_error != null)
            {
                children.Add(m_error);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Error:
                {
                    if (createOrReplace)
                    {
                        if (Error == null)
                        {
                            if (replacement == null)
                            {
                                Error = new PropertyState<StatusCode>(this);
                            }
                            else
                            {
                                Error = (PropertyState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = Error;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<StatusCode> m_error;
        #endregion
    }
    #endif
    #endregion

    #region UadpWriterGroupMessageState Class
    #if (!OPCUA_EXCLUDE_UadpWriterGroupMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UadpWriterGroupMessageState : WriterGroupMessageState
    {
        #region Constructors
        /// <remarks />
        public UadpWriterGroupMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UadpWriterGroupMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SamplingOffset != null)
            {
                SamplingOffset.Initialize(context, SamplingOffset_InitializationString);
            }
        }

        #region Initialization String
        private const string SamplingOffset_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFNhbXBsaW5nT2Zmc2V0AQB1UgAuAER1UgAAAQAiAf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAFVhZHBXcml0ZXJHcm91cE1lc3NhZ2VUeXBlSW5zdGFuY2UBAHFS" +
           "AQBxUnFSAAD/////BQAAABVgiQoCAAAAAAAMAAAAR3JvdXBWZXJzaW9uAQByUgAuAERyUgAAAQAGUv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABEYXRhU2V0T3JkZXJpbmcBAHNSAC4ARHNSAAABALhP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE5ldHdvcmtNZXNzYWdlQ29udGVudE1hc2sBAHRSAC4ARHRS" +
           "AAABABo9/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFNhbXBsaW5nT2Zmc2V0AQB1UgAuAER1UgAA" +
           "AQAiAf////8BAf////8AAAAAF2CJCgIAAAAAABAAAABQdWJsaXNoaW5nT2Zmc2V0AQB2UgAuAER2UgAA" +
           "AQAiAQEAAAABAAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> GroupVersion
        {
            get
            {
                return m_groupVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_groupVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_groupVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<DataSetOrderingType> DataSetOrdering
        {
            get
            {
                return m_dataSetOrdering;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetOrdering, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetOrdering = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> NetworkMessageContentMask
        {
            get
            {
                return m_networkMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<double> SamplingOffset
        {
            get
            {
                return m_samplingOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingOffset = value;
            }
        }

        /// <remarks />
        public PropertyState<double[]> PublishingOffset
        {
            get
            {
                return m_publishingOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingOffset = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_groupVersion != null)
            {
                children.Add(m_groupVersion);
            }

            if (m_dataSetOrdering != null)
            {
                children.Add(m_dataSetOrdering);
            }

            if (m_networkMessageContentMask != null)
            {
                children.Add(m_networkMessageContentMask);
            }

            if (m_samplingOffset != null)
            {
                children.Add(m_samplingOffset);
            }

            if (m_publishingOffset != null)
            {
                children.Add(m_publishingOffset);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.GroupVersion:
                {
                    if (createOrReplace)
                    {
                        if (GroupVersion == null)
                        {
                            if (replacement == null)
                            {
                                GroupVersion = new PropertyState<uint>(this);
                            }
                            else
                            {
                                GroupVersion = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = GroupVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetOrdering:
                {
                    if (createOrReplace)
                    {
                        if (DataSetOrdering == null)
                        {
                            if (replacement == null)
                            {
                                DataSetOrdering = new PropertyState<DataSetOrderingType>(this);
                            }
                            else
                            {
                                DataSetOrdering = (PropertyState<DataSetOrderingType>)replacement;
                            }
                        }
                    }

                    instance = DataSetOrdering;
                    break;
                }

                case Opc.Ua.BrowseNames.NetworkMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                NetworkMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.SamplingOffset:
                {
                    if (createOrReplace)
                    {
                        if (SamplingOffset == null)
                        {
                            if (replacement == null)
                            {
                                SamplingOffset = new PropertyState<double>(this);
                            }
                            else
                            {
                                SamplingOffset = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = SamplingOffset;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingOffset:
                {
                    if (createOrReplace)
                    {
                        if (PublishingOffset == null)
                        {
                            if (replacement == null)
                            {
                                PublishingOffset = new PropertyState<double[]>(this);
                            }
                            else
                            {
                                PublishingOffset = (PropertyState<double[]>)replacement;
                            }
                        }
                    }

                    instance = PublishingOffset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_groupVersion;
        private PropertyState<DataSetOrderingType> m_dataSetOrdering;
        private PropertyState<uint> m_networkMessageContentMask;
        private PropertyState<double> m_samplingOffset;
        private PropertyState<double[]> m_publishingOffset;
        #endregion
    }
    #endif
    #endregion

    #region UadpDataSetWriterMessageState Class
    #if (!OPCUA_EXCLUDE_UadpDataSetWriterMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UadpDataSetWriterMessageState : DataSetWriterMessageState
    {
        #region Constructors
        /// <remarks />
        public UadpDataSetWriterMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UadpDataSetWriterMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAFVhZHBEYXRhU2V0V3JpdGVyTWVzc2FnZVR5cGVJbnN0YW5jZQEA" +
           "d1IBAHdSd1IAAP////8EAAAAFWCJCgIAAAAAABkAAABEYXRhU2V0TWVzc2FnZUNvbnRlbnRNYXNrAQB4" +
           "UgAuAER4UgAAAQAePf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABDb25maWd1cmVkU2l6ZQEAeVIA" +
           "LgBEeVIAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAE5ldHdvcmtNZXNzYWdlTnVtYmVyAQB6" +
           "UgAuAER6UgAAAAX/////AQH/////AAAAABVgiQoCAAAAAAANAAAARGF0YVNldE9mZnNldAEAe1IALgBE" +
           "e1IAAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> DataSetMessageContentMask
        {
            get
            {
                return m_dataSetMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMessageContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> ConfiguredSize
        {
            get
            {
                return m_configuredSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_configuredSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_configuredSize = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> NetworkMessageNumber
        {
            get
            {
                return m_networkMessageNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageNumber = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> DataSetOffset
        {
            get
            {
                return m_dataSetOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetOffset = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dataSetMessageContentMask != null)
            {
                children.Add(m_dataSetMessageContentMask);
            }

            if (m_configuredSize != null)
            {
                children.Add(m_configuredSize);
            }

            if (m_networkMessageNumber != null)
            {
                children.Add(m_networkMessageNumber);
            }

            if (m_dataSetOffset != null)
            {
                children.Add(m_dataSetOffset);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DataSetMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetMessageContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfiguredSize:
                {
                    if (createOrReplace)
                    {
                        if (ConfiguredSize == null)
                        {
                            if (replacement == null)
                            {
                                ConfiguredSize = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                ConfiguredSize = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = ConfiguredSize;
                    break;
                }

                case Opc.Ua.BrowseNames.NetworkMessageNumber:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageNumber == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageNumber = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                NetworkMessageNumber = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetOffset:
                {
                    if (createOrReplace)
                    {
                        if (DataSetOffset == null)
                        {
                            if (replacement == null)
                            {
                                DataSetOffset = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                DataSetOffset = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = DataSetOffset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_dataSetMessageContentMask;
        private PropertyState<ushort> m_configuredSize;
        private PropertyState<ushort> m_networkMessageNumber;
        private PropertyState<ushort> m_dataSetOffset;
        #endregion
    }
    #endif
    #endregion

    #region UadpDataSetReaderMessageState Class
    #if (!OPCUA_EXCLUDE_UadpDataSetReaderMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UadpDataSetReaderMessageState : DataSetReaderMessageState
    {
        #region Constructors
        /// <remarks />
        public UadpDataSetReaderMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UadpDataSetReaderMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAFVhZHBEYXRhU2V0UmVhZGVyTWVzc2FnZVR5cGVJbnN0YW5jZQEA" +
           "fFIBAHxSfFIAAP////8JAAAAFWCJCgIAAAAAAAwAAABHcm91cFZlcnNpb24BAH1SAC4ARH1SAAABAAZS" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAE5ldHdvcmtNZXNzYWdlTnVtYmVyAQB/UgAuAER/UgAA" +
           "AAX/////AQH/////AAAAABVgiQoCAAAAAAANAAAARGF0YVNldE9mZnNldAEARUQALgBERUQAAAAF////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAERhdGFTZXRDbGFzc0lkAQCAUgAuAESAUgAAAA7/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAZAAAATmV0d29ya01lc3NhZ2VDb250ZW50TWFzawEAgVIALgBEgVIAAAEA" +
           "Gj3/////AQH/////AAAAABVgiQoCAAAAAAAZAAAARGF0YVNldE1lc3NhZ2VDb250ZW50TWFzawEAglIA" +
           "LgBEglIAAAEAHj3/////AQH/////AAAAABVgiQoCAAAAAAASAAAAUHVibGlzaGluZ0ludGVydmFsAQCD" +
           "UgAuAESDUgAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABQcm9jZXNzaW5nT2Zmc2V0AQCE" +
           "UgAuAESEUgAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABSZWNlaXZlT2Zmc2V0AQCFUgAu" +
           "AESFUgAAAQAiAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> GroupVersion
        {
            get
            {
                return m_groupVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_groupVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_groupVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> NetworkMessageNumber
        {
            get
            {
                return m_networkMessageNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageNumber = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> DataSetOffset
        {
            get
            {
                return m_dataSetOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetOffset = value;
            }
        }

        /// <remarks />
        public PropertyState<Guid> DataSetClassId
        {
            get
            {
                return m_dataSetClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> NetworkMessageContentMask
        {
            get
            {
                return m_networkMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DataSetMessageContentMask
        {
            get
            {
                return m_dataSetMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMessageContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<double> PublishingInterval
        {
            get
            {
                return m_publishingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ProcessingOffset
        {
            get
            {
                return m_processingOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_processingOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_processingOffset = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ReceiveOffset
        {
            get
            {
                return m_receiveOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_receiveOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_receiveOffset = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_groupVersion != null)
            {
                children.Add(m_groupVersion);
            }

            if (m_networkMessageNumber != null)
            {
                children.Add(m_networkMessageNumber);
            }

            if (m_dataSetOffset != null)
            {
                children.Add(m_dataSetOffset);
            }

            if (m_dataSetClassId != null)
            {
                children.Add(m_dataSetClassId);
            }

            if (m_networkMessageContentMask != null)
            {
                children.Add(m_networkMessageContentMask);
            }

            if (m_dataSetMessageContentMask != null)
            {
                children.Add(m_dataSetMessageContentMask);
            }

            if (m_publishingInterval != null)
            {
                children.Add(m_publishingInterval);
            }

            if (m_processingOffset != null)
            {
                children.Add(m_processingOffset);
            }

            if (m_receiveOffset != null)
            {
                children.Add(m_receiveOffset);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.GroupVersion:
                {
                    if (createOrReplace)
                    {
                        if (GroupVersion == null)
                        {
                            if (replacement == null)
                            {
                                GroupVersion = new PropertyState<uint>(this);
                            }
                            else
                            {
                                GroupVersion = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = GroupVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.NetworkMessageNumber:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageNumber == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageNumber = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                NetworkMessageNumber = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetOffset:
                {
                    if (createOrReplace)
                    {
                        if (DataSetOffset == null)
                        {
                            if (replacement == null)
                            {
                                DataSetOffset = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                DataSetOffset = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = DataSetOffset;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetClassId:
                {
                    if (createOrReplace)
                    {
                        if (DataSetClassId == null)
                        {
                            if (replacement == null)
                            {
                                DataSetClassId = new PropertyState<Guid>(this);
                            }
                            else
                            {
                                DataSetClassId = (PropertyState<Guid>)replacement;
                            }
                        }
                    }

                    instance = DataSetClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.NetworkMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                NetworkMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetMessageContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingInterval:
                {
                    if (createOrReplace)
                    {
                        if (PublishingInterval == null)
                        {
                            if (replacement == null)
                            {
                                PublishingInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                PublishingInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = PublishingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.ProcessingOffset:
                {
                    if (createOrReplace)
                    {
                        if (ProcessingOffset == null)
                        {
                            if (replacement == null)
                            {
                                ProcessingOffset = new PropertyState<double>(this);
                            }
                            else
                            {
                                ProcessingOffset = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ProcessingOffset;
                    break;
                }

                case Opc.Ua.BrowseNames.ReceiveOffset:
                {
                    if (createOrReplace)
                    {
                        if (ReceiveOffset == null)
                        {
                            if (replacement == null)
                            {
                                ReceiveOffset = new PropertyState<double>(this);
                            }
                            else
                            {
                                ReceiveOffset = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ReceiveOffset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_groupVersion;
        private PropertyState<ushort> m_networkMessageNumber;
        private PropertyState<ushort> m_dataSetOffset;
        private PropertyState<Guid> m_dataSetClassId;
        private PropertyState<uint> m_networkMessageContentMask;
        private PropertyState<uint> m_dataSetMessageContentMask;
        private PropertyState<double> m_publishingInterval;
        private PropertyState<double> m_processingOffset;
        private PropertyState<double> m_receiveOffset;
        #endregion
    }
    #endif
    #endregion

    #region JsonWriterGroupMessageState Class
    #if (!OPCUA_EXCLUDE_JsonWriterGroupMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class JsonWriterGroupMessageState : WriterGroupMessageState
    {
        #region Constructors
        /// <remarks />
        public JsonWriterGroupMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.JsonWriterGroupMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIgAAAEpzb25Xcml0ZXJHcm91cE1lc3NhZ2VUeXBlSW5zdGFuY2UBAIZS" +
           "AQCGUoZSAAD/////AQAAABVgiQoCAAAAAAAZAAAATmV0d29ya01lc3NhZ2VDb250ZW50TWFzawEAh1IA" +
           "LgBEh1IAAAEAJj3/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> NetworkMessageContentMask
        {
            get
            {
                return m_networkMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageContentMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_networkMessageContentMask != null)
            {
                children.Add(m_networkMessageContentMask);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NetworkMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                NetworkMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageContentMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_networkMessageContentMask;
        #endregion
    }
    #endif
    #endregion

    #region JsonDataSetWriterMessageState Class
    #if (!OPCUA_EXCLUDE_JsonDataSetWriterMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class JsonDataSetWriterMessageState : DataSetWriterMessageState
    {
        #region Constructors
        /// <remarks />
        public JsonDataSetWriterMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.JsonDataSetWriterMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEpzb25EYXRhU2V0V3JpdGVyTWVzc2FnZVR5cGVJbnN0YW5jZQEA" +
           "iFIBAIhSiFIAAP////8BAAAAFWCJCgIAAAAAABkAAABEYXRhU2V0TWVzc2FnZUNvbnRlbnRNYXNrAQCJ" +
           "UgAuAESJUgAAAQAqPf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> DataSetMessageContentMask
        {
            get
            {
                return m_dataSetMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMessageContentMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dataSetMessageContentMask != null)
            {
                children.Add(m_dataSetMessageContentMask);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DataSetMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetMessageContentMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_dataSetMessageContentMask;
        #endregion
    }
    #endif
    #endregion

    #region JsonDataSetReaderMessageState Class
    #if (!OPCUA_EXCLUDE_JsonDataSetReaderMessageState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class JsonDataSetReaderMessageState : DataSetReaderMessageState
    {
        #region Constructors
        /// <remarks />
        public JsonDataSetReaderMessageState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.JsonDataSetReaderMessageType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEpzb25EYXRhU2V0UmVhZGVyTWVzc2FnZVR5cGVJbnN0YW5jZQEA" +
           "ilIBAIpSilIAAP////8CAAAAFWCJCgIAAAAAABkAAABOZXR3b3JrTWVzc2FnZUNvbnRlbnRNYXNrAQCL" +
           "UgAuAESLUgAAAQAmPf////8BAf////8AAAAAFWCJCgIAAAAAABkAAABEYXRhU2V0TWVzc2FnZUNvbnRl" +
           "bnRNYXNrAQCMUgAuAESMUgAAAQAqPf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> NetworkMessageContentMask
        {
            get
            {
                return m_networkMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkMessageContentMask = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DataSetMessageContentMask
        {
            get
            {
                return m_dataSetMessageContentMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataSetMessageContentMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataSetMessageContentMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_networkMessageContentMask != null)
            {
                children.Add(m_networkMessageContentMask);
            }

            if (m_dataSetMessageContentMask != null)
            {
                children.Add(m_dataSetMessageContentMask);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NetworkMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (NetworkMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                NetworkMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                NetworkMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = NetworkMessageContentMask;
                    break;
                }

                case Opc.Ua.BrowseNames.DataSetMessageContentMask:
                {
                    if (createOrReplace)
                    {
                        if (DataSetMessageContentMask == null)
                        {
                            if (replacement == null)
                            {
                                DataSetMessageContentMask = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DataSetMessageContentMask = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataSetMessageContentMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_networkMessageContentMask;
        private PropertyState<uint> m_dataSetMessageContentMask;
        #endregion
    }
    #endif
    #endregion

    #region DatagramConnectionTransportState Class
    #if (!OPCUA_EXCLUDE_DatagramConnectionTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DatagramConnectionTransportState : ConnectionTransportState
    {
        #region Constructors
        /// <remarks />
        public DatagramConnectionTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DatagramConnectionTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (DiscoveryAnnounceRate != null)
            {
                DiscoveryAnnounceRate.Initialize(context, DiscoveryAnnounceRate_InitializationString);
            }

            if (DiscoveryMaxMessageSize != null)
            {
                DiscoveryMaxMessageSize.Initialize(context, DiscoveryMaxMessageSize_InitializationString);
            }

            if (QosCategory != null)
            {
                QosCategory.Initialize(context, QosCategory_InitializationString);
            }

            if (DatagramQos != null)
            {
                DatagramQos.Initialize(context, DatagramQos_InitializationString);
            }
        }

        #region Initialization String
        private const string DiscoveryAnnounceRate_InitializationString =
           "//////////8VYIkKAgAAAAAAFQAAAERpc2NvdmVyeUFubm91bmNlUmF0ZQEAH10ALgBEH10AAAAH////" +
           "/wEB/////wAAAAA=";

        private const string DiscoveryMaxMessageSize_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAERpc2NvdmVyeU1heE1lc3NhZ2VTaXplAQAgXQAuAEQgXQAAAAf/" +
           "////AQH/////AAAAAA==";

        private const string QosCategory_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFFvc0NhdGVnb3J5AQC1YwAuAES1YwAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string DatagramQos_InitializationString =
           "//////////8XYIkKAgAAAAAACwAAAERhdGFncmFtUW9zAQC2YwAuAES2YwAAAQAzXAEAAAABAAAAAAAA" +
           "AAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJwAAAERhdGFncmFtQ29ubmVjdGlvblRyYW5zcG9ydFR5cGVJbnN0YW5j" +
           "ZQEA2DoBANg62DoAAP////8FAAAABGCACgEAAAAAABAAAABEaXNjb3ZlcnlBZGRyZXNzAQDgOgAvAQCZ" +
           "UuA6AAD/////AQAAABVgiQoCAAAAAAAQAAAATmV0d29ya0ludGVyZmFjZQEAMjsALwEAtT8yOwAAAAz/" +
           "////AQH/////AQAAABdgiQoCAAAAAAAKAAAAU2VsZWN0aW9ucwEAq0QALgBEq0QAAAAYAQAAAAEAAAAA" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAVAAAARGlzY292ZXJ5QW5ub3VuY2VSYXRlAQAfXQAuAEQfXQAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAARGlzY292ZXJ5TWF4TWVzc2FnZVNpemUBACBdAC4A" +
           "RCBdAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABRb3NDYXRlZ29yeQEAtWMALgBEtWMAAAAM" +
           "/////wEB/////wAAAAAXYIkKAgAAAAAACwAAAERhdGFncmFtUW9zAQC2YwAuAES2YwAAAQAzXAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public NetworkAddressState DiscoveryAddress
        {
            get
            {
                return m_discoveryAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discoveryAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discoveryAddress = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DiscoveryAnnounceRate
        {
            get
            {
                return m_discoveryAnnounceRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discoveryAnnounceRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discoveryAnnounceRate = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DiscoveryMaxMessageSize
        {
            get
            {
                return m_discoveryMaxMessageSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discoveryMaxMessageSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discoveryMaxMessageSize = value;
            }
        }

        /// <remarks />
        public PropertyState<string> QosCategory
        {
            get
            {
                return m_qosCategory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_qosCategory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_qosCategory = value;
            }
        }

        /// <remarks />
        public PropertyState<QosDataType[]> DatagramQos
        {
            get
            {
                return m_datagramQos;
            }

            set
            {
                if (!Object.ReferenceEquals(m_datagramQos, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_datagramQos = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_discoveryAddress != null)
            {
                children.Add(m_discoveryAddress);
            }

            if (m_discoveryAnnounceRate != null)
            {
                children.Add(m_discoveryAnnounceRate);
            }

            if (m_discoveryMaxMessageSize != null)
            {
                children.Add(m_discoveryMaxMessageSize);
            }

            if (m_qosCategory != null)
            {
                children.Add(m_qosCategory);
            }

            if (m_datagramQos != null)
            {
                children.Add(m_datagramQos);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DiscoveryAddress:
                {
                    if (createOrReplace)
                    {
                        if (DiscoveryAddress == null)
                        {
                            if (replacement == null)
                            {
                                DiscoveryAddress = new NetworkAddressState(this);
                            }
                            else
                            {
                                DiscoveryAddress = (NetworkAddressState)replacement;
                            }
                        }
                    }

                    instance = DiscoveryAddress;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscoveryAnnounceRate:
                {
                    if (createOrReplace)
                    {
                        if (DiscoveryAnnounceRate == null)
                        {
                            if (replacement == null)
                            {
                                DiscoveryAnnounceRate = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DiscoveryAnnounceRate = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscoveryAnnounceRate;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscoveryMaxMessageSize:
                {
                    if (createOrReplace)
                    {
                        if (DiscoveryMaxMessageSize == null)
                        {
                            if (replacement == null)
                            {
                                DiscoveryMaxMessageSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DiscoveryMaxMessageSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscoveryMaxMessageSize;
                    break;
                }

                case Opc.Ua.BrowseNames.QosCategory:
                {
                    if (createOrReplace)
                    {
                        if (QosCategory == null)
                        {
                            if (replacement == null)
                            {
                                QosCategory = new PropertyState<string>(this);
                            }
                            else
                            {
                                QosCategory = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QosCategory;
                    break;
                }

                case Opc.Ua.BrowseNames.DatagramQos:
                {
                    if (createOrReplace)
                    {
                        if (DatagramQos == null)
                        {
                            if (replacement == null)
                            {
                                DatagramQos = new PropertyState<QosDataType[]>(this);
                            }
                            else
                            {
                                DatagramQos = (PropertyState<QosDataType[]>)replacement;
                            }
                        }
                    }

                    instance = DatagramQos;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private NetworkAddressState m_discoveryAddress;
        private PropertyState<uint> m_discoveryAnnounceRate;
        private PropertyState<uint> m_discoveryMaxMessageSize;
        private PropertyState<string> m_qosCategory;
        private PropertyState<QosDataType[]> m_datagramQos;
        #endregion
    }
    #endif
    #endregion

    #region DatagramWriterGroupTransportState Class
    #if (!OPCUA_EXCLUDE_DatagramWriterGroupTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DatagramWriterGroupTransportState : WriterGroupTransportState
    {
        #region Constructors
        /// <remarks />
        public DatagramWriterGroupTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DatagramWriterGroupTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MessageRepeatCount != null)
            {
                MessageRepeatCount.Initialize(context, MessageRepeatCount_InitializationString);
            }

            if (MessageRepeatDelay != null)
            {
                MessageRepeatDelay.Initialize(context, MessageRepeatDelay_InitializationString);
            }

            if (Address != null)
            {
                Address.Initialize(context, Address_InitializationString);
            }

            if (QosCategory != null)
            {
                QosCategory.Initialize(context, QosCategory_InitializationString);
            }

            if (DatagramQos != null)
            {
                DatagramQos.Initialize(context, DatagramQos_InitializationString);
            }

            if (DiscoveryAnnounceRate != null)
            {
                DiscoveryAnnounceRate.Initialize(context, DiscoveryAnnounceRate_InitializationString);
            }

            if (Topic != null)
            {
                Topic.Initialize(context, Topic_InitializationString);
            }
        }

        #region Initialization String
        private const string MessageRepeatCount_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAE1lc3NhZ2VSZXBlYXRDb3VudAEAjlIALgBEjlIAAAAD/////wEB" +
           "/////wAAAAA=";

        private const string MessageRepeatDelay_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAE1lc3NhZ2VSZXBlYXREZWxheQEAj1IALgBEj1IAAAEAIgH/////" +
           "AQH/////AAAAAA==";

        private const string Address_InitializationString =
           "//////////8EYIAKAQAAAAAABwAAAEFkZHJlc3MBACJdAC8BAJlSIl0AAP////8BAAAAFWCJCgIAAAAA" +
           "ABAAAABOZXR3b3JrSW50ZXJmYWNlAQAjXQAvAQC1PyNdAAAADP////8BAf////8BAAAAF2CJCgIAAAAA" +
           "AAoAAABTZWxlY3Rpb25zAQAkXQAuAEQkXQAAABgBAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string QosCategory_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFFvc0NhdGVnb3J5AQC3YwAuAES3YwAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string DatagramQos_InitializationString =
           "//////////8XYIkKAgAAAAAACwAAAERhdGFncmFtUW9zAQAnXQAuAEQnXQAAAQA0XAEAAAABAAAAAAAA" +
           "AAEB/////wAAAAA=";

        private const string DiscoveryAnnounceRate_InitializationString =
           "//////////8VYIkKAgAAAAAAFQAAAERpc2NvdmVyeUFubm91bmNlUmF0ZQEAKF0ALgBEKF0AAAAH////" +
           "/wEB/////wAAAAA=";

        private const string Topic_InitializationString =
           "//////////8VYIkKAgAAAAAABQAAAFRvcGljAQApXQAuAEQpXQAAAAz/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAERhdGFncmFtV3JpdGVyR3JvdXBUcmFuc3BvcnRUeXBlSW5zdGFu" +
           "Y2UBAI1SAQCNUo1SAAD/////BwAAABVgiQoCAAAAAAASAAAATWVzc2FnZVJlcGVhdENvdW50AQCOUgAu" +
           "AESOUgAAAAP/////AQH/////AAAAABVgiQoCAAAAAAASAAAATWVzc2FnZVJlcGVhdERlbGF5AQCPUgAu" +
           "AESPUgAAAQAiAf////8BAf////8AAAAABGCACgEAAAAAAAcAAABBZGRyZXNzAQAiXQAvAQCZUiJdAAD/" +
           "////AQAAABVgiQoCAAAAAAAQAAAATmV0d29ya0ludGVyZmFjZQEAI10ALwEAtT8jXQAAAAz/////AQH/" +
           "////AQAAABdgiQoCAAAAAAAKAAAAU2VsZWN0aW9ucwEAJF0ALgBEJF0AAAAYAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAALAAAAUW9zQ2F0ZWdvcnkBALdjAC4ARLdjAAAADP////8BAf////8AAAAA" +
           "F2CJCgIAAAAAAAsAAABEYXRhZ3JhbVFvcwEAJ10ALgBEJ10AAAEANFwBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAABUAAABEaXNjb3ZlcnlBbm5vdW5jZVJhdGUBAChdAC4ARChdAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAUAAABUb3BpYwEAKV0ALgBEKV0AAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte> MessageRepeatCount
        {
            get
            {
                return m_messageRepeatCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageRepeatCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageRepeatCount = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MessageRepeatDelay
        {
            get
            {
                return m_messageRepeatDelay;
            }

            set
            {
                if (!Object.ReferenceEquals(m_messageRepeatDelay, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_messageRepeatDelay = value;
            }
        }

        /// <remarks />
        public NetworkAddressState Address
        {
            get
            {
                return m_address;
            }

            set
            {
                if (!Object.ReferenceEquals(m_address, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_address = value;
            }
        }

        /// <remarks />
        public PropertyState<string> QosCategory
        {
            get
            {
                return m_qosCategory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_qosCategory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_qosCategory = value;
            }
        }

        /// <remarks />
        public PropertyState<TransmitQosDataType[]> DatagramQos
        {
            get
            {
                return m_datagramQos;
            }

            set
            {
                if (!Object.ReferenceEquals(m_datagramQos, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_datagramQos = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> DiscoveryAnnounceRate
        {
            get
            {
                return m_discoveryAnnounceRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discoveryAnnounceRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discoveryAnnounceRate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Topic
        {
            get
            {
                return m_topic;
            }

            set
            {
                if (!Object.ReferenceEquals(m_topic, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_topic = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_messageRepeatCount != null)
            {
                children.Add(m_messageRepeatCount);
            }

            if (m_messageRepeatDelay != null)
            {
                children.Add(m_messageRepeatDelay);
            }

            if (m_address != null)
            {
                children.Add(m_address);
            }

            if (m_qosCategory != null)
            {
                children.Add(m_qosCategory);
            }

            if (m_datagramQos != null)
            {
                children.Add(m_datagramQos);
            }

            if (m_discoveryAnnounceRate != null)
            {
                children.Add(m_discoveryAnnounceRate);
            }

            if (m_topic != null)
            {
                children.Add(m_topic);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MessageRepeatCount:
                {
                    if (createOrReplace)
                    {
                        if (MessageRepeatCount == null)
                        {
                            if (replacement == null)
                            {
                                MessageRepeatCount = new PropertyState<byte>(this);
                            }
                            else
                            {
                                MessageRepeatCount = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = MessageRepeatCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MessageRepeatDelay:
                {
                    if (createOrReplace)
                    {
                        if (MessageRepeatDelay == null)
                        {
                            if (replacement == null)
                            {
                                MessageRepeatDelay = new PropertyState<double>(this);
                            }
                            else
                            {
                                MessageRepeatDelay = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MessageRepeatDelay;
                    break;
                }

                case Opc.Ua.BrowseNames.Address:
                {
                    if (createOrReplace)
                    {
                        if (Address == null)
                        {
                            if (replacement == null)
                            {
                                Address = new NetworkAddressState(this);
                            }
                            else
                            {
                                Address = (NetworkAddressState)replacement;
                            }
                        }
                    }

                    instance = Address;
                    break;
                }

                case Opc.Ua.BrowseNames.QosCategory:
                {
                    if (createOrReplace)
                    {
                        if (QosCategory == null)
                        {
                            if (replacement == null)
                            {
                                QosCategory = new PropertyState<string>(this);
                            }
                            else
                            {
                                QosCategory = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QosCategory;
                    break;
                }

                case Opc.Ua.BrowseNames.DatagramQos:
                {
                    if (createOrReplace)
                    {
                        if (DatagramQos == null)
                        {
                            if (replacement == null)
                            {
                                DatagramQos = new PropertyState<TransmitQosDataType[]>(this);
                            }
                            else
                            {
                                DatagramQos = (PropertyState<TransmitQosDataType[]>)replacement;
                            }
                        }
                    }

                    instance = DatagramQos;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscoveryAnnounceRate:
                {
                    if (createOrReplace)
                    {
                        if (DiscoveryAnnounceRate == null)
                        {
                            if (replacement == null)
                            {
                                DiscoveryAnnounceRate = new PropertyState<uint>(this);
                            }
                            else
                            {
                                DiscoveryAnnounceRate = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscoveryAnnounceRate;
                    break;
                }

                case Opc.Ua.BrowseNames.Topic:
                {
                    if (createOrReplace)
                    {
                        if (Topic == null)
                        {
                            if (replacement == null)
                            {
                                Topic = new PropertyState<string>(this);
                            }
                            else
                            {
                                Topic = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Topic;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte> m_messageRepeatCount;
        private PropertyState<double> m_messageRepeatDelay;
        private NetworkAddressState m_address;
        private PropertyState<string> m_qosCategory;
        private PropertyState<TransmitQosDataType[]> m_datagramQos;
        private PropertyState<uint> m_discoveryAnnounceRate;
        private PropertyState<string> m_topic;
        #endregion
    }
    #endif
    #endregion

    #region DatagramDataSetReaderTransportState Class
    #if (!OPCUA_EXCLUDE_DatagramDataSetReaderTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DatagramDataSetReaderTransportState : DataSetReaderTransportState
    {
        #region Constructors
        /// <remarks />
        public DatagramDataSetReaderTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DatagramDataSetReaderTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Address != null)
            {
                Address.Initialize(context, Address_InitializationString);
            }

            if (QosCategory != null)
            {
                QosCategory.Initialize(context, QosCategory_InitializationString);
            }

            if (DatagramQos != null)
            {
                DatagramQos.Initialize(context, DatagramQos_InitializationString);
            }

            if (Topic != null)
            {
                Topic.Initialize(context, Topic_InitializationString);
            }
        }

        #region Initialization String
        private const string Address_InitializationString =
           "//////////8EYIAKAQAAAAAABwAAAEFkZHJlc3MBANFdAC8BAJlS0V0AAP////8BAAAAFWCJCgIAAAAA" +
           "ABAAAABOZXR3b3JrSW50ZXJmYWNlAQDSXQAvAQC1P9JdAAAADP////8BAf////8BAAAAF2CJCgIAAAAA" +
           "AAoAAABTZWxlY3Rpb25zAQDTXQAuAETTXQAAABgBAAAAAQAAAAAAAAABAf////8AAAAA";

        private const string QosCategory_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFFvc0NhdGVnb3J5AQC4YwAuAES4YwAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string DatagramQos_InitializationString =
           "//////////8XYIkKAgAAAAAACwAAAERhdGFncmFtUW9zAQDWXQAuAETWXQAAAQA4XAEAAAABAAAAAAAA" +
           "AAEB/////wAAAAA=";

        private const string Topic_InitializationString =
           "//////////8VYIkKAgAAAAAABQAAAFRvcGljAQDXXQAuAETXXQAAAAz/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAERhdGFncmFtRGF0YVNldFJlYWRlclRyYW5zcG9ydFR5cGVJbnN0" +
           "YW5jZQEA0F0BANBd0F0AAP////8EAAAABGCACgEAAAAAAAcAAABBZGRyZXNzAQDRXQAvAQCZUtFdAAD/" +
           "////AQAAABVgiQoCAAAAAAAQAAAATmV0d29ya0ludGVyZmFjZQEA0l0ALwEAtT/SXQAAAAz/////AQH/" +
           "////AQAAABdgiQoCAAAAAAAKAAAAU2VsZWN0aW9ucwEA010ALgBE010AAAAYAQAAAAEAAAAAAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAALAAAAUW9zQ2F0ZWdvcnkBALhjAC4ARLhjAAAADP////8BAf////8AAAAA" +
           "F2CJCgIAAAAAAAsAAABEYXRhZ3JhbVFvcwEA1l0ALgBE1l0AAAEAOFwBAAAAAQAAAAAAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAAUAAABUb3BpYwEA110ALgBE110AAAAM/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public NetworkAddressState Address
        {
            get
            {
                return m_address;
            }

            set
            {
                if (!Object.ReferenceEquals(m_address, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_address = value;
            }
        }

        /// <remarks />
        public PropertyState<string> QosCategory
        {
            get
            {
                return m_qosCategory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_qosCategory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_qosCategory = value;
            }
        }

        /// <remarks />
        public PropertyState<ReceiveQosDataType[]> DatagramQos
        {
            get
            {
                return m_datagramQos;
            }

            set
            {
                if (!Object.ReferenceEquals(m_datagramQos, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_datagramQos = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Topic
        {
            get
            {
                return m_topic;
            }

            set
            {
                if (!Object.ReferenceEquals(m_topic, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_topic = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_address != null)
            {
                children.Add(m_address);
            }

            if (m_qosCategory != null)
            {
                children.Add(m_qosCategory);
            }

            if (m_datagramQos != null)
            {
                children.Add(m_datagramQos);
            }

            if (m_topic != null)
            {
                children.Add(m_topic);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Address:
                {
                    if (createOrReplace)
                    {
                        if (Address == null)
                        {
                            if (replacement == null)
                            {
                                Address = new NetworkAddressState(this);
                            }
                            else
                            {
                                Address = (NetworkAddressState)replacement;
                            }
                        }
                    }

                    instance = Address;
                    break;
                }

                case Opc.Ua.BrowseNames.QosCategory:
                {
                    if (createOrReplace)
                    {
                        if (QosCategory == null)
                        {
                            if (replacement == null)
                            {
                                QosCategory = new PropertyState<string>(this);
                            }
                            else
                            {
                                QosCategory = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QosCategory;
                    break;
                }

                case Opc.Ua.BrowseNames.DatagramQos:
                {
                    if (createOrReplace)
                    {
                        if (DatagramQos == null)
                        {
                            if (replacement == null)
                            {
                                DatagramQos = new PropertyState<ReceiveQosDataType[]>(this);
                            }
                            else
                            {
                                DatagramQos = (PropertyState<ReceiveQosDataType[]>)replacement;
                            }
                        }
                    }

                    instance = DatagramQos;
                    break;
                }

                case Opc.Ua.BrowseNames.Topic:
                {
                    if (createOrReplace)
                    {
                        if (Topic == null)
                        {
                            if (replacement == null)
                            {
                                Topic = new PropertyState<string>(this);
                            }
                            else
                            {
                                Topic = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Topic;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private NetworkAddressState m_address;
        private PropertyState<string> m_qosCategory;
        private PropertyState<ReceiveQosDataType[]> m_datagramQos;
        private PropertyState<string> m_topic;
        #endregion
    }
    #endif
    #endregion

    #region BrokerConnectionTransportState Class
    #if (!OPCUA_EXCLUDE_BrokerConnectionTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BrokerConnectionTransportState : ConnectionTransportState
    {
        #region Constructors
        /// <remarks />
        public BrokerConnectionTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BrokerConnectionTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAEJyb2tlckNvbm5lY3Rpb25UcmFuc3BvcnRUeXBlSW5zdGFuY2UB" +
           "ADM7AQAzOzM7AAD/////AgAAABVgiQoCAAAAAAALAAAAUmVzb3VyY2VVcmkBADQ7AC4ARDQ7AAAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABgAAABBdXRoZW50aWNhdGlvblByb2ZpbGVVcmkBAEo7AC4AREo7" +
           "AAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> AuthenticationProfileUri
        {
            get
            {
                return m_authenticationProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationProfileUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            if (m_authenticationProfileUri != null)
            {
                children.Add(m_authenticationProfileUri);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                AuthenticationProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationProfileUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_resourceUri;
        private PropertyState<string> m_authenticationProfileUri;
        #endregion
    }
    #endif
    #endregion

    #region BrokerWriterGroupTransportState Class
    #if (!OPCUA_EXCLUDE_BrokerWriterGroupTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BrokerWriterGroupTransportState : WriterGroupTransportState
    {
        #region Constructors
        /// <remarks />
        public BrokerWriterGroupTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BrokerWriterGroupTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAEJyb2tlcldyaXRlckdyb3VwVHJhbnNwb3J0VHlwZUluc3RhbmNl" +
           "AQCQUgEAkFKQUgAA/////wQAAAAVYIkKAgAAAAAACQAAAFF1ZXVlTmFtZQEAkVIALgBEkVIAAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlc291cmNlVXJpAQCOOwAuAESOOwAAAAz/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAYAAAAQXV0aGVudGljYXRpb25Qcm9maWxlVXJpAQCPOwAuAESPOwAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAaAAAAUmVxdWVzdGVkRGVsaXZlcnlHdWFyYW50ZWUBAJE7AC4ARJE7" +
           "AAABAKA6/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> QueueName
        {
            get
            {
                return m_queueName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queueName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queueName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> AuthenticationProfileUri
        {
            get
            {
                return m_authenticationProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationProfileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<BrokerTransportQualityOfService> RequestedDeliveryGuarantee
        {
            get
            {
                return m_requestedDeliveryGuarantee;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedDeliveryGuarantee, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedDeliveryGuarantee = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_queueName != null)
            {
                children.Add(m_queueName);
            }

            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            if (m_authenticationProfileUri != null)
            {
                children.Add(m_authenticationProfileUri);
            }

            if (m_requestedDeliveryGuarantee != null)
            {
                children.Add(m_requestedDeliveryGuarantee);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.QueueName:
                {
                    if (createOrReplace)
                    {
                        if (QueueName == null)
                        {
                            if (replacement == null)
                            {
                                QueueName = new PropertyState<string>(this);
                            }
                            else
                            {
                                QueueName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QueueName;
                    break;
                }

                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                AuthenticationProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedDeliveryGuarantee:
                {
                    if (createOrReplace)
                    {
                        if (RequestedDeliveryGuarantee == null)
                        {
                            if (replacement == null)
                            {
                                RequestedDeliveryGuarantee = new PropertyState<BrokerTransportQualityOfService>(this);
                            }
                            else
                            {
                                RequestedDeliveryGuarantee = (PropertyState<BrokerTransportQualityOfService>)replacement;
                            }
                        }
                    }

                    instance = RequestedDeliveryGuarantee;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_queueName;
        private PropertyState<string> m_resourceUri;
        private PropertyState<string> m_authenticationProfileUri;
        private PropertyState<BrokerTransportQualityOfService> m_requestedDeliveryGuarantee;
        #endregion
    }
    #endif
    #endregion

    #region BrokerDataSetWriterTransportState Class
    #if (!OPCUA_EXCLUDE_BrokerDataSetWriterTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BrokerDataSetWriterTransportState : DataSetWriterTransportState
    {
        #region Constructors
        /// <remarks />
        public BrokerDataSetWriterTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BrokerDataSetWriterTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEJyb2tlckRhdGFTZXRXcml0ZXJUcmFuc3BvcnRUeXBlSW5zdGFu" +
           "Y2UBAJJSAQCSUpJSAAD/////BgAAABVgiQoCAAAAAAAJAAAAUXVldWVOYW1lAQCTUgAuAESTUgAAAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAARAAAATWV0YURhdGFRdWV1ZU5hbWUBAJRSAC4ARJRSAAAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZXNvdXJjZVVyaQEAkjsALgBEkjsAAAAM/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAGAAAAEF1dGhlbnRpY2F0aW9uUHJvZmlsZVVyaQEAkzsALgBEkzsAAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAGgAAAFJlcXVlc3RlZERlbGl2ZXJ5R3VhcmFudGVlAQDiOwAuAETi" +
           "OwAAAQCgOv////8BAf////8AAAAAFWCJCgIAAAAAABIAAABNZXRhRGF0YVVwZGF0ZVRpbWUBAJVSAC4A" +
           "RJVSAAABACIB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> QueueName
        {
            get
            {
                return m_queueName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queueName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queueName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MetaDataQueueName
        {
            get
            {
                return m_metaDataQueueName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_metaDataQueueName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_metaDataQueueName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> AuthenticationProfileUri
        {
            get
            {
                return m_authenticationProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationProfileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<BrokerTransportQualityOfService> RequestedDeliveryGuarantee
        {
            get
            {
                return m_requestedDeliveryGuarantee;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedDeliveryGuarantee, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedDeliveryGuarantee = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MetaDataUpdateTime
        {
            get
            {
                return m_metaDataUpdateTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_metaDataUpdateTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_metaDataUpdateTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_queueName != null)
            {
                children.Add(m_queueName);
            }

            if (m_metaDataQueueName != null)
            {
                children.Add(m_metaDataQueueName);
            }

            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            if (m_authenticationProfileUri != null)
            {
                children.Add(m_authenticationProfileUri);
            }

            if (m_requestedDeliveryGuarantee != null)
            {
                children.Add(m_requestedDeliveryGuarantee);
            }

            if (m_metaDataUpdateTime != null)
            {
                children.Add(m_metaDataUpdateTime);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.QueueName:
                {
                    if (createOrReplace)
                    {
                        if (QueueName == null)
                        {
                            if (replacement == null)
                            {
                                QueueName = new PropertyState<string>(this);
                            }
                            else
                            {
                                QueueName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QueueName;
                    break;
                }

                case Opc.Ua.BrowseNames.MetaDataQueueName:
                {
                    if (createOrReplace)
                    {
                        if (MetaDataQueueName == null)
                        {
                            if (replacement == null)
                            {
                                MetaDataQueueName = new PropertyState<string>(this);
                            }
                            else
                            {
                                MetaDataQueueName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MetaDataQueueName;
                    break;
                }

                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                AuthenticationProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedDeliveryGuarantee:
                {
                    if (createOrReplace)
                    {
                        if (RequestedDeliveryGuarantee == null)
                        {
                            if (replacement == null)
                            {
                                RequestedDeliveryGuarantee = new PropertyState<BrokerTransportQualityOfService>(this);
                            }
                            else
                            {
                                RequestedDeliveryGuarantee = (PropertyState<BrokerTransportQualityOfService>)replacement;
                            }
                        }
                    }

                    instance = RequestedDeliveryGuarantee;
                    break;
                }

                case Opc.Ua.BrowseNames.MetaDataUpdateTime:
                {
                    if (createOrReplace)
                    {
                        if (MetaDataUpdateTime == null)
                        {
                            if (replacement == null)
                            {
                                MetaDataUpdateTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                MetaDataUpdateTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MetaDataUpdateTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_queueName;
        private PropertyState<string> m_metaDataQueueName;
        private PropertyState<string> m_resourceUri;
        private PropertyState<string> m_authenticationProfileUri;
        private PropertyState<BrokerTransportQualityOfService> m_requestedDeliveryGuarantee;
        private PropertyState<double> m_metaDataUpdateTime;
        #endregion
    }
    #endif
    #endregion

    #region BrokerDataSetReaderTransportState Class
    #if (!OPCUA_EXCLUDE_BrokerDataSetReaderTransportState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BrokerDataSetReaderTransportState : DataSetReaderTransportState
    {
        #region Constructors
        /// <remarks />
        public BrokerDataSetReaderTransportState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BrokerDataSetReaderTransportType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKAAAAEJyb2tlckRhdGFTZXRSZWFkZXJUcmFuc3BvcnRUeXBlSW5zdGFu" +
           "Y2UBAJZSAQCWUpZSAAD/////BQAAABVgiQoCAAAAAAAJAAAAUXVldWVOYW1lAQCXUgAuAESXUgAAAAz/" +
           "////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVzb3VyY2VVcmkBAOY7AC4AROY7AAAADP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABgAAABBdXRoZW50aWNhdGlvblByb2ZpbGVVcmkBADs8AC4ARDs8AAAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABoAAABSZXF1ZXN0ZWREZWxpdmVyeUd1YXJhbnRlZQEAPDwALgBE" +
           "PDwAAAEAoDr/////AQH/////AAAAABVgiQoCAAAAAAARAAAATWV0YURhdGFRdWV1ZU5hbWUBAJhSAC4A" +
           "RJhSAAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> QueueName
        {
            get
            {
                return m_queueName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queueName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queueName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ResourceUri
        {
            get
            {
                return m_resourceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resourceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resourceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> AuthenticationProfileUri
        {
            get
            {
                return m_authenticationProfileUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationProfileUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationProfileUri = value;
            }
        }

        /// <remarks />
        public PropertyState<BrokerTransportQualityOfService> RequestedDeliveryGuarantee
        {
            get
            {
                return m_requestedDeliveryGuarantee;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedDeliveryGuarantee, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedDeliveryGuarantee = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MetaDataQueueName
        {
            get
            {
                return m_metaDataQueueName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_metaDataQueueName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_metaDataQueueName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_queueName != null)
            {
                children.Add(m_queueName);
            }

            if (m_resourceUri != null)
            {
                children.Add(m_resourceUri);
            }

            if (m_authenticationProfileUri != null)
            {
                children.Add(m_authenticationProfileUri);
            }

            if (m_requestedDeliveryGuarantee != null)
            {
                children.Add(m_requestedDeliveryGuarantee);
            }

            if (m_metaDataQueueName != null)
            {
                children.Add(m_metaDataQueueName);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.QueueName:
                {
                    if (createOrReplace)
                    {
                        if (QueueName == null)
                        {
                            if (replacement == null)
                            {
                                QueueName = new PropertyState<string>(this);
                            }
                            else
                            {
                                QueueName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = QueueName;
                    break;
                }

                case Opc.Ua.BrowseNames.ResourceUri:
                {
                    if (createOrReplace)
                    {
                        if (ResourceUri == null)
                        {
                            if (replacement == null)
                            {
                                ResourceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                ResourceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ResourceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationProfileUri:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationProfileUri == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationProfileUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                AuthenticationProfileUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationProfileUri;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedDeliveryGuarantee:
                {
                    if (createOrReplace)
                    {
                        if (RequestedDeliveryGuarantee == null)
                        {
                            if (replacement == null)
                            {
                                RequestedDeliveryGuarantee = new PropertyState<BrokerTransportQualityOfService>(this);
                            }
                            else
                            {
                                RequestedDeliveryGuarantee = (PropertyState<BrokerTransportQualityOfService>)replacement;
                            }
                        }
                    }

                    instance = RequestedDeliveryGuarantee;
                    break;
                }

                case Opc.Ua.BrowseNames.MetaDataQueueName:
                {
                    if (createOrReplace)
                    {
                        if (MetaDataQueueName == null)
                        {
                            if (replacement == null)
                            {
                                MetaDataQueueName = new PropertyState<string>(this);
                            }
                            else
                            {
                                MetaDataQueueName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MetaDataQueueName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_queueName;
        private PropertyState<string> m_resourceUri;
        private PropertyState<string> m_authenticationProfileUri;
        private PropertyState<BrokerTransportQualityOfService> m_requestedDeliveryGuarantee;
        private PropertyState<string> m_metaDataQueueName;
        #endregion
    }
    #endif
    #endregion

    #region NetworkAddressState Class
    #if (!OPCUA_EXCLUDE_NetworkAddressState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NetworkAddressState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public NetworkAddressState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NetworkAddressType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAE5ldHdvcmtBZGRyZXNzVHlwZUluc3RhbmNlAQCZUgEAmVKZUgAA" +
           "/////wEAAAAVYIkKAgAAAAAAEAAAAE5ldHdvcmtJbnRlcmZhY2UBAJpSAC8BALU/mlIAAAAM/////wEB" +
           "/////wEAAAAXYIkKAgAAAAAACgAAAFNlbGVjdGlvbnMBAK5EAC4ARK5EAAAAGAEAAAABAAAAAAAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SelectionListState<string> NetworkInterface
        {
            get
            {
                return m_networkInterface;
            }

            set
            {
                if (!Object.ReferenceEquals(m_networkInterface, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_networkInterface = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_networkInterface != null)
            {
                children.Add(m_networkInterface);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NetworkInterface:
                {
                    if (createOrReplace)
                    {
                        if (NetworkInterface == null)
                        {
                            if (replacement == null)
                            {
                                NetworkInterface = new SelectionListState<string>(this);
                            }
                            else
                            {
                                NetworkInterface = (SelectionListState<string>)replacement;
                            }
                        }
                    }

                    instance = NetworkInterface;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SelectionListState<string> m_networkInterface;
        #endregion
    }
    #endif
    #endregion

    #region NetworkAddressUrlState Class
    #if (!OPCUA_EXCLUDE_NetworkAddressUrlState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NetworkAddressUrlState : NetworkAddressState
    {
        #region Constructors
        /// <remarks />
        public NetworkAddressUrlState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NetworkAddressUrlType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAE5ldHdvcmtBZGRyZXNzVXJsVHlwZUluc3RhbmNlAQCbUgEAm1Kb" +
           "UgAA/////wIAAAAVYIkKAgAAAAAAEAAAAE5ldHdvcmtJbnRlcmZhY2UCAAAGWA8AAC8BALU/BlgPAAAM" +
           "/////wEB/////wEAAAAXYIkKAgAAAAAACgAAAFNlbGVjdGlvbnMCAAAHWA8AAC4ARAdYDwAAGAEAAAAB" +
           "AAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAAAwAAAFVybAEAnVIALwA/nVIAAAAM/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> Url
        {
            get
            {
                return m_url;
            }

            set
            {
                if (!Object.ReferenceEquals(m_url, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_url = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_url != null)
            {
                children.Add(m_url);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Url:
                {
                    if (createOrReplace)
                    {
                        if (Url == null)
                        {
                            if (replacement == null)
                            {
                                Url = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                Url = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = Url;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_url;
        #endregion
    }
    #endif
    #endregion

    #region AliasNameState Class
    #if (!OPCUA_EXCLUDE_AliasNameState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AliasNameState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public AliasNameState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AliasNameType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFQAAAEFsaWFzTmFtZVR5cGVJbnN0YW5jZQEAn1sBAJ9bn1sAAP////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AliasNameCategoryState Class
    #if (!OPCUA_EXCLUDE_AliasNameCategoryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AliasNameCategoryState : FolderState
    {
        #region Constructors
        /// <remarks />
        public AliasNameCategoryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AliasNameCategoryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastChange != null)
            {
                LastChange.Initialize(context, LastChange_InitializationString);
            }
        }

        #region Initialization String
        private const string LastChange_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAExhc3RDaGFuZ2UBAFKAAC4ARFKAAAABAAZS/////wEB/////wAA" +
           "AAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHQAAAEFsaWFzTmFtZUNhdGVnb3J5VHlwZUluc3RhbmNlAQCgWwEAoFug" +
           "WwAA/////wIAAAAEYYIKBAAAAAAACQAAAEZpbmRBbGlhcwEAplsALwEAplumWwAAAQH/////AgAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKdbAC4ARKdbAACWAgAAAAEAKgEBJQAAABYAAABBbGlh" +
           "c05hbWVTZWFyY2hQYXR0ZXJuAAz/////AAAAAAABACoBASIAAAATAAAAUmVmZXJlbmNlVHlwZUZpbHRl" +
           "cgAR/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEAqFsALgBEqFsAAJYBAAAAAQAqAQEiAAAADQAAAEFsaWFzTm9kZUxpc3QBAKxbAQAAAAEA" +
           "AAAAAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAAFWCJCgIAAAAAAAoAAABMYXN0Q2hhbmdlAQBS" +
           "gAAuAERSgAAAAQAGUv////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public FindAliasMethodState FindAlias
        {
            get
            {
                return m_findAliasMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_findAliasMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_findAliasMethod = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> LastChange
        {
            get
            {
                return m_lastChange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastChange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastChange = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_findAliasMethod != null)
            {
                children.Add(m_findAliasMethod);
            }

            if (m_lastChange != null)
            {
                children.Add(m_lastChange);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.FindAlias:
                {
                    if (createOrReplace)
                    {
                        if (FindAlias == null)
                        {
                            if (replacement == null)
                            {
                                FindAlias = new FindAliasMethodState(this);
                            }
                            else
                            {
                                FindAlias = (FindAliasMethodState)replacement;
                            }
                        }
                    }

                    instance = FindAlias;
                    break;
                }

                case Opc.Ua.BrowseNames.LastChange:
                {
                    if (createOrReplace)
                    {
                        if (LastChange == null)
                        {
                            if (replacement == null)
                            {
                                LastChange = new PropertyState<uint>(this);
                            }
                            else
                            {
                                LastChange = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = LastChange;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private FindAliasMethodState m_findAliasMethod;
        private PropertyState<uint> m_lastChange;
        #endregion
    }
    #endif
    #endregion

    #region FindAliasMethodState Class
    #if (!OPCUA_EXCLUDE_FindAliasMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FindAliasMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public FindAliasMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new FindAliasMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAEwAAAEZpbmRBbGlhc01ldGhvZFR5cGUBAKlbAC8BAKlbqVsAAAEB////" +
           "/wIAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCqWwAuAESqWwAAlgIAAAABACoBASUAAAAW" +
           "AAAAQWxpYXNOYW1lU2VhcmNoUGF0dGVybgAM/////wAAAAAAAQAqAQEiAAAAEwAAAFJlZmVyZW5jZVR5" +
           "cGVGaWx0ZXIAEf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBAKtbAC4ARKtbAACWAQAAAAEAKgEBIgAAAA0AAABBbGlhc05vZGVMaXN0AQCs" +
           "WwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public FindAliasMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string aliasNameSearchPattern = (string)_inputArguments[0];
            NodeId referenceTypeFilter = (NodeId)_inputArguments[1];

            AliasNameDataType[] aliasNodeList = (AliasNameDataType[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    aliasNameSearchPattern,
                    referenceTypeFilter,
                    ref aliasNodeList);
            }

            _outputArguments[0] = aliasNodeList;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult FindAliasMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string aliasNameSearchPattern,
        NodeId referenceTypeFilter,
        ref AliasNameDataType[] aliasNodeList);
    #endif
    #endregion

    #region UserManagementState Class
    #if (!OPCUA_EXCLUDE_UserManagementState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UserManagementState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public UserManagementState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.UserManagementType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (PasswordRestrictions != null)
            {
                PasswordRestrictions.Initialize(context, PasswordRestrictions_InitializationString);
            }
        }

        #region Initialization String
        private const string PasswordRestrictions_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAFBhc3N3b3JkUmVzdHJpY3Rpb25zAQDMXgAuAETMXgAAABX/////" +
           "AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGgAAAFVzZXJNYW5hZ2VtZW50VHlwZUluc3RhbmNlAQDIXgEAyF7IXgAA" +
           "/////wgAAAAXYIkKAgAAAAAABQAAAFVzZXJzAQDJXgAuAETJXgAAAQDZXgEAAAABAAAAAAAAAAEB////" +
           "/wAAAAAVYIkKAgAAAAAADgAAAFBhc3N3b3JkTGVuZ3RoAQDKXgAuAETKXgAAAQB0A/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA8AAABQYXNzd29yZE9wdGlvbnMBAMteAC4ARMteAAABANVe/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAFAAAAFBhc3N3b3JkUmVzdHJpY3Rpb25zAQDMXgAuAETMXgAAABX/////AQH/////" +
           "AAAAAARhggoEAAAAAAAHAAAAQWRkVXNlcgEAzV4ALwEAzV7NXgAAAQH/////AQAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBAM5eAC4ARM5eAACWBAAAAAEAKgEBFwAAAAgAAABVc2VyTmFtZQAM////" +
           "/wAAAAAAAQAqAQEXAAAACAAAAFBhc3N3b3JkAAz/////AAAAAAABACoBASIAAAARAAAAVXNlckNvbmZp" +
           "Z3VyYXRpb24BANde/////wAAAAAAAQAqAQEaAAAACwAAAERlc2NyaXB0aW9uAAz/////AAAAAAABACgB" +
           "AQAAAAEAAAAEAAAAAQH/////AAAAAARhggoEAAAAAAAKAAAATW9kaWZ5VXNlcgEAz14ALwEAz17PXgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANBeAC4ARNBeAACWBwAAAAEAKgEB" +
           "FwAAAAgAAABVc2VyTmFtZQAM/////wAAAAAAAQAqAQEdAAAADgAAAE1vZGlmeVBhc3N3b3JkAAH/////" +
           "AAAAAAABACoBARcAAAAIAAAAUGFzc3dvcmQADP////8AAAAAAAEAKgEBJgAAABcAAABNb2RpZnlVc2Vy" +
           "Q29uZmlndXJhdGlvbgAB/////wAAAAAAAQAqAQEiAAAAEQAAAFVzZXJDb25maWd1cmF0aW9uAQDXXv//" +
           "//8AAAAAAAEAKgEBIAAAABEAAABNb2RpZnlEZXNjcmlwdGlvbgAB/////wAAAAAAAQAqAQEaAAAACwAA" +
           "AERlc2NyaXB0aW9uAAz/////AAAAAAABACgBAQAAAAEAAAAHAAAAAQH/////AAAAAARhggoEAAAAAAAK" +
           "AAAAUmVtb3ZlVXNlcgEA0V4ALwEA0V7RXgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBANJeAC4ARNJeAACWAQAAAAEAKgEBFwAAAAgAAABVc2VyTmFtZQAM/////wAAAAAAAQAoAQEA" +
           "AAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAADgAAAENoYW5nZVBhc3N3b3JkAQDTXgAvAQDTXtNe" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA1F4ALgBE1F4AAJYCAAAAAQAq" +
           "AQEaAAAACwAAAE9sZFBhc3N3b3JkAAz/////AAAAAAABACoBARoAAAALAAAATmV3UGFzc3dvcmQADP//" +
           "//8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<UserManagementDataType[]> Users
        {
            get
            {
                return m_users;
            }

            set
            {
                if (!Object.ReferenceEquals(m_users, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_users = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> PasswordLength
        {
            get
            {
                return m_passwordLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_passwordLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_passwordLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> PasswordOptions
        {
            get
            {
                return m_passwordOptions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_passwordOptions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_passwordOptions = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> PasswordRestrictions
        {
            get
            {
                return m_passwordRestrictions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_passwordRestrictions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_passwordRestrictions = value;
            }
        }

        /// <remarks />
        public AddUserMethodState AddUser
        {
            get
            {
                return m_addUserMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addUserMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addUserMethod = value;
            }
        }

        /// <remarks />
        public ModifyUserMethodState ModifyUser
        {
            get
            {
                return m_modifyUserMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyUserMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyUserMethod = value;
            }
        }

        /// <remarks />
        public RemoveUserMethodState RemoveUser
        {
            get
            {
                return m_removeUserMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeUserMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeUserMethod = value;
            }
        }

        /// <remarks />
        public ChangePasswordMethodState ChangePassword
        {
            get
            {
                return m_changePasswordMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changePasswordMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changePasswordMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_users != null)
            {
                children.Add(m_users);
            }

            if (m_passwordLength != null)
            {
                children.Add(m_passwordLength);
            }

            if (m_passwordOptions != null)
            {
                children.Add(m_passwordOptions);
            }

            if (m_passwordRestrictions != null)
            {
                children.Add(m_passwordRestrictions);
            }

            if (m_addUserMethod != null)
            {
                children.Add(m_addUserMethod);
            }

            if (m_modifyUserMethod != null)
            {
                children.Add(m_modifyUserMethod);
            }

            if (m_removeUserMethod != null)
            {
                children.Add(m_removeUserMethod);
            }

            if (m_changePasswordMethod != null)
            {
                children.Add(m_changePasswordMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Users:
                {
                    if (createOrReplace)
                    {
                        if (Users == null)
                        {
                            if (replacement == null)
                            {
                                Users = new PropertyState<UserManagementDataType[]>(this);
                            }
                            else
                            {
                                Users = (PropertyState<UserManagementDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Users;
                    break;
                }

                case Opc.Ua.BrowseNames.PasswordLength:
                {
                    if (createOrReplace)
                    {
                        if (PasswordLength == null)
                        {
                            if (replacement == null)
                            {
                                PasswordLength = new PropertyState<Range>(this);
                            }
                            else
                            {
                                PasswordLength = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = PasswordLength;
                    break;
                }

                case Opc.Ua.BrowseNames.PasswordOptions:
                {
                    if (createOrReplace)
                    {
                        if (PasswordOptions == null)
                        {
                            if (replacement == null)
                            {
                                PasswordOptions = new PropertyState<uint>(this);
                            }
                            else
                            {
                                PasswordOptions = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = PasswordOptions;
                    break;
                }

                case Opc.Ua.BrowseNames.PasswordRestrictions:
                {
                    if (createOrReplace)
                    {
                        if (PasswordRestrictions == null)
                        {
                            if (replacement == null)
                            {
                                PasswordRestrictions = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                PasswordRestrictions = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = PasswordRestrictions;
                    break;
                }

                case Opc.Ua.BrowseNames.AddUser:
                {
                    if (createOrReplace)
                    {
                        if (AddUser == null)
                        {
                            if (replacement == null)
                            {
                                AddUser = new AddUserMethodState(this);
                            }
                            else
                            {
                                AddUser = (AddUserMethodState)replacement;
                            }
                        }
                    }

                    instance = AddUser;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyUser:
                {
                    if (createOrReplace)
                    {
                        if (ModifyUser == null)
                        {
                            if (replacement == null)
                            {
                                ModifyUser = new ModifyUserMethodState(this);
                            }
                            else
                            {
                                ModifyUser = (ModifyUserMethodState)replacement;
                            }
                        }
                    }

                    instance = ModifyUser;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveUser:
                {
                    if (createOrReplace)
                    {
                        if (RemoveUser == null)
                        {
                            if (replacement == null)
                            {
                                RemoveUser = new RemoveUserMethodState(this);
                            }
                            else
                            {
                                RemoveUser = (RemoveUserMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveUser;
                    break;
                }

                case Opc.Ua.BrowseNames.ChangePassword:
                {
                    if (createOrReplace)
                    {
                        if (ChangePassword == null)
                        {
                            if (replacement == null)
                            {
                                ChangePassword = new ChangePasswordMethodState(this);
                            }
                            else
                            {
                                ChangePassword = (ChangePasswordMethodState)replacement;
                            }
                        }
                    }

                    instance = ChangePassword;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<UserManagementDataType[]> m_users;
        private PropertyState<Range> m_passwordLength;
        private PropertyState<uint> m_passwordOptions;
        private PropertyState<LocalizedText> m_passwordRestrictions;
        private AddUserMethodState m_addUserMethod;
        private ModifyUserMethodState m_modifyUserMethod;
        private RemoveUserMethodState m_removeUserMethod;
        private ChangePasswordMethodState m_changePasswordMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddUserMethodState Class
    #if (!OPCUA_EXCLUDE_AddUserMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddUserMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddUserMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddUserMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAEFkZFVzZXJNZXRob2RUeXBlAQDaXgAvAQDaXtpeAAABAf////8B" +
           "AAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA214ALgBE214AAJYEAAAAAQAqAQEXAAAACAAA" +
           "AFVzZXJOYW1lAAz/////AAAAAAABACoBARcAAAAIAAAAUGFzc3dvcmQADP////8AAAAAAAEAKgEBIgAA" +
           "ABEAAABVc2VyQ29uZmlndXJhdGlvbgEA117/////AAAAAAABACoBARoAAAALAAAARGVzY3JpcHRpb24A" +
           "DP////8AAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddUserMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string userName = (string)_inputArguments[0];
            string password = (string)_inputArguments[1];
            uint userConfiguration = (uint)_inputArguments[2];
            string description = (string)_inputArguments[3];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    userName,
                    password,
                    userConfiguration,
                    description);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddUserMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string userName,
        string password,
        uint userConfiguration,
        string description);
    #endif
    #endregion

    #region ModifyUserMethodState Class
    #if (!OPCUA_EXCLUDE_ModifyUserMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ModifyUserMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ModifyUserMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ModifyUserMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAE1vZGlmeVVzZXJNZXRob2RUeXBlAQDcXgAvAQDcXtxeAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA3V4ALgBE3V4AAJYHAAAAAQAqAQEXAAAA" +
           "CAAAAFVzZXJOYW1lAAz/////AAAAAAABACoBAR0AAAAOAAAATW9kaWZ5UGFzc3dvcmQAAf////8AAAAA" +
           "AAEAKgEBFwAAAAgAAABQYXNzd29yZAAM/////wAAAAAAAQAqAQEmAAAAFwAAAE1vZGlmeVVzZXJDb25m" +
           "aWd1cmF0aW9uAAH/////AAAAAAABACoBASIAAAARAAAAVXNlckNvbmZpZ3VyYXRpb24BANde/////wAA" +
           "AAAAAQAqAQEgAAAAEQAAAE1vZGlmeURlc2NyaXB0aW9uAAH/////AAAAAAABACoBARoAAAALAAAARGVz" +
           "Y3JpcHRpb24ADP////8AAAAAAAEAKAEBAAAAAQAAAAcAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ModifyUserMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string userName = (string)_inputArguments[0];
            bool modifyPassword = (bool)_inputArguments[1];
            string password = (string)_inputArguments[2];
            bool modifyUserConfiguration = (bool)_inputArguments[3];
            uint userConfiguration = (uint)_inputArguments[4];
            bool modifyDescription = (bool)_inputArguments[5];
            string description = (string)_inputArguments[6];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    userName,
                    modifyPassword,
                    password,
                    modifyUserConfiguration,
                    userConfiguration,
                    modifyDescription,
                    description);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ModifyUserMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string userName,
        bool modifyPassword,
        string password,
        bool modifyUserConfiguration,
        uint userConfiguration,
        bool modifyDescription,
        string description);
    #endif
    #endregion

    #region RemoveUserMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveUserMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveUserMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RemoveUserMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveUserMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAFJlbW92ZVVzZXJNZXRob2RUeXBlAQDeXgAvAQDeXt5eAAABAf//" +
           "//8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA314ALgBE314AAJYBAAAAAQAqAQEXAAAA" +
           "CAAAAFVzZXJOYW1lAAz/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RemoveUserMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string userName = (string)_inputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    userName);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RemoveUserMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string userName);
    #endif
    #endregion

    #region ChangePasswordMethodState Class
    #if (!OPCUA_EXCLUDE_ChangePasswordMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ChangePasswordMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public ChangePasswordMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new ChangePasswordMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAENoYW5nZVBhc3N3b3JkTWV0aG9kVHlwZQEA4F4ALwEA4F7gXgAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOFeAC4AROFeAACWAgAAAAEAKgEB" +
           "GgAAAAsAAABPbGRQYXNzd29yZAAM/////wAAAAAAAQAqAQEaAAAACwAAAE5ld1Bhc3N3b3JkAAz/////" +
           "AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public ChangePasswordMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string oldPassword = (string)_inputArguments[0];
            string newPassword = (string)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    oldPassword,
                    newPassword);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult ChangePasswordMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string oldPassword,
        string newPassword);
    #endif
    #endregion

    #region MultiStateDictionaryEntryDiscreteBaseState Class
    #if (!OPCUA_EXCLUDE_MultiStateDictionaryEntryDiscreteBaseState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateDictionaryEntryDiscreteBaseState : MultiStateValueDiscreteState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDictionaryEntryDiscreteBaseState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateDictionaryEntryDiscreteBaseType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ValueAsDictionaryEntries != null)
            {
                ValueAsDictionaryEntries.Initialize(context, ValueAsDictionaryEntries_InitializationString);
            }
        }

        #region Initialization String
        private const string ValueAsDictionaryEntries_InitializationString =
           "//////////8XYIkKAgAAAAAAGAAAAFZhbHVlQXNEaWN0aW9uYXJ5RW50cmllcwEAi0oALgBEi0oAAAAR" +
           "AQAAAAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAMQAAAE11bHRpU3RhdGVEaWN0aW9uYXJ5RW50cnlEaXNjcmV0ZUJhc2VU" +
           "eXBlSW5zdGFuY2UBAIVKAQCFSoVKAAAAGv////8BAf////8EAAAAF2CJCgIAAAAAAAoAAABFbnVtVmFs" +
           "dWVzAgAAHlgPAAAuAEQeWA8AAQCqHQEAAAABAAAAAAAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAFZh" +
           "bHVlQXNUZXh0AgAAH1gPAAAuAEQfWA8AABX/////AQH/////AAAAABdgiQoCAAAAAAAVAAAARW51bURp" +
           "Y3Rpb25hcnlFbnRyaWVzAQCKSgAuAESKSgAAABECAAAAAgAAAAAAAAAAAAAAAQH/////AAAAABdgiQoC" +
           "AAAAAAAYAAAAVmFsdWVBc0RpY3Rpb25hcnlFbnRyaWVzAQCLSgAuAESLSgAAABEBAAAAAQAAAAAAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState EnumDictionaryEntries
        {
            get
            {
                return m_enumDictionaryEntries;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enumDictionaryEntries, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enumDictionaryEntries = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> ValueAsDictionaryEntries
        {
            get
            {
                return m_valueAsDictionaryEntries;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valueAsDictionaryEntries, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valueAsDictionaryEntries = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_enumDictionaryEntries != null)
            {
                children.Add(m_enumDictionaryEntries);
            }

            if (m_valueAsDictionaryEntries != null)
            {
                children.Add(m_valueAsDictionaryEntries);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EnumDictionaryEntries:
                {
                    if (createOrReplace)
                    {
                        if (EnumDictionaryEntries == null)
                        {
                            if (replacement == null)
                            {
                                EnumDictionaryEntries = new PropertyState(this);
                            }
                            else
                            {
                                EnumDictionaryEntries = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = EnumDictionaryEntries;
                    break;
                }

                case Opc.Ua.BrowseNames.ValueAsDictionaryEntries:
                {
                    if (createOrReplace)
                    {
                        if (ValueAsDictionaryEntries == null)
                        {
                            if (replacement == null)
                            {
                                ValueAsDictionaryEntries = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                ValueAsDictionaryEntries = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = ValueAsDictionaryEntries;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_enumDictionaryEntries;
        private PropertyState<NodeId[]> m_valueAsDictionaryEntries;
        #endregion
    }

    #region MultiStateDictionaryEntryDiscreteBaseState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateDictionaryEntryDiscreteBaseState<T> : MultiStateDictionaryEntryDiscreteBaseState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDictionaryEntryDiscreteBaseState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region MultiStateDictionaryEntryDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateDictionaryEntryDiscreteState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateDictionaryEntryDiscreteState : MultiStateDictionaryEntryDiscreteBaseState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDictionaryEntryDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateDictionaryEntryDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkCAgAAAAAALQAAAE11bHRpU3RhdGVEaWN0aW9uYXJ5RW50cnlEaXNjcmV0ZVR5cGVJ" +
           "bnN0YW5jZQEAjEoBAIxKjEoAAAAa/////wEB/////wQAAAAXYIkKAgAAAAAACgAAAEVudW1WYWx1ZXMC" +
           "AAAiWA8AAC4ARCJYDwABAKodAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAAVmFsdWVB" +
           "c1RleHQCAAAjWA8AAC4ARCNYDwAAFf////8BAf////8AAAAAF2CJCgIAAAAAABUAAABFbnVtRGljdGlv" +
           "bmFyeUVudHJpZXMCAAAkWA8AAC4ARCRYDwAAEQIAAAACAAAAAAAAAAAAAAABAf////8AAAAAF2CJCgIA" +
           "AAAAABgAAABWYWx1ZUFzRGljdGlvbmFyeUVudHJpZXMBAJJKAC4ARJJKAAAAEQEAAAABAAAAAAAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region MultiStateDictionaryEntryDiscreteState<T> Class
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateDictionaryEntryDiscreteState<T> : MultiStateDictionaryEntryDiscreteState
    {
        #region Constructors
        /// <remarks />
        public MultiStateDictionaryEntryDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <remarks />
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(((BaseVariableState)this).Value, true);
            }

            set
            {
                ((BaseVariableState)this).Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region RequestTicketsMethodState Class
    #if (!OPCUA_EXCLUDE_RequestTicketsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RequestTicketsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public RequestTicketsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new RequestTicketsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlcXVlc3RUaWNrZXRzTWV0aG9kVHlwZQEAf2QALwEAf2R/ZAAA" +
           "AQH/////AQAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCAZAAuAESAZAAAlgEAAAABACoB" +
           "ARwAAAAHAAAAVGlja2V0cwEAfmQBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public RequestTicketsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string[] tickets = (string[])_outputArguments[0];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref tickets);
            }

            _outputArguments[0] = tickets;

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult RequestTicketsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ref string[] tickets);
    #endif
    #endregion

    #region SetRegistrarEndpointsMethodState Class
    #if (!OPCUA_EXCLUDE_SetRegistrarEndpointsMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetRegistrarEndpointsMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public SetRegistrarEndpointsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new SetRegistrarEndpointsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHwAAAFNldFJlZ2lzdHJhckVuZHBvaW50c01ldGhvZFR5cGUBAIFkAC8B" +
           "AIFkgWQAAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCCZAAuAESCZAAAlgEA" +
           "AAABACoBAR8AAAAKAAAAUmVnaXN0cmFycwEANAEBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public SetRegistrarEndpointsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            ApplicationDescription[] registrars = (ApplicationDescription[])ExtensionObject.ToArray(_inputArguments[0], typeof(ApplicationDescription));

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    registrars);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult SetRegistrarEndpointsMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        ApplicationDescription[] registrars);
    #endif
    #endregion

    #region ApplicationConfigurationState Class
    #if (!OPCUA_EXCLUDE_ApplicationConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ApplicationConfigurationState : ServerConfigurationState
    {
        #region Constructors
        /// <remarks />
        public ApplicationConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ApplicationConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAEFwcGxpY2F0aW9uQ29uZmlndXJhdGlvblR5cGVJbnN0YW5jZQEA" +
           "g2QBAINkg2QAAP////8NAAAABGCACgEAAAAAABEAAABDZXJ0aWZpY2F0ZUdyb3VwcwIAACVYDwAALwEA" +
           "9TUlWA8A/////wEAAAAEYIAKAQAAAAAAFwAAAERlZmF1bHRBcHBsaWNhdGlvbkdyb3VwAgAAJlgPAAAv" +
           "AQALMSZYDwD/////AgAAAARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AgAAJ1gPAAAvAQDqMCdYDwD/////" +
           "DwAAABVgiQoCAAAAAAAEAAAAU2l6ZQIAAChYDwAALgBEKFgPAAAJ/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFdyaXRhYmxlAgAAKVgPAAAuAEQpWA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAA" +
           "VXNlcldyaXRhYmxlAgAAKlgPAAAuAEQqWA8AAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3Bl" +
           "bkNvdW50AgAAK1gPAAAuAEQrWA8AAAX/////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgIAAC9Y" +
           "DwAALwEAPC0vWA8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAAwWA8AAC4A" +
           "RDBYDwCWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAMVgPAAAuAEQxWA8AlgEAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAABQAAAENsb3NlAgAAMlgPAAAvAQA/LTJYDwABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwIAADNYDwAALgBEM1gPAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAgAANFgPAAAvAQBBLTRY" +
           "DwABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwIAADVYDwAALgBENVgPAJYCAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8A" +
           "AAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAF2CpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMC" +
           "AAA2WA8AAC4ARDZYDwCWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEAAAAB" +
           "AAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUCAAA3WA8AAC8BAEQtN1gPAAEB/////wEAAAAX" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAAOFgPAAAuAEQ4WA8AlgIAAAABACoBARkAAAAKAAAA" +
           "RmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAIAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgIAADlYDwAALwEARi05WA8AAQH/" +
           "////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAAA6WA8AAC4ARDpYDwCWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABdgqQoC" +
           "AAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAO1gPAAAuAEQ7WA8AlgEAAAABACoBARcAAAAIAAAAUG9z" +
           "aXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQ" +
           "b3NpdGlvbgIAADxYDwAALwEASS08WA8AAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMCAAA9WA8AAC4ARD1YDwCWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoB" +
           "ARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQAAAAIAAAABAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABMYXN0VXBkYXRlVGltZQIAAD5YDwAALgBEPlgPAAEAJgH/////AQH/////AAAAAARhggoE" +
           "AAAAAAANAAAAT3BlbldpdGhNYXNrcwIAAEJYDwAALwEA/zBCWA8AAQH/////AgAAABdgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMCAABDWA8AAC4ARENYDwCWAQAAAAEAKgEBFAAAAAUAAABNYXNrcwAH////" +
           "/wAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAXYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50" +
           "cwIAAERYDwAALgBERFgPAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEB" +
           "AAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAA4AAABDbG9zZUFuZFVwZGF0ZQIAAEVYDwAALwEA" +
           "AjFFWA8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABGWA8AAC4AREZYDwCW" +
           "AQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAR1gPAAAuAERHWA8AlgEAAAABACoBASMA" +
           "AAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAA4AAABBZGRDZXJ0aWZpY2F0ZQIAAEhYDwAALwEABDFIWA8AAQH/////AQAAABdg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMCAABJWA8AAC4ARElYDwCWAgAAAAEAKgEBGgAAAAsAAABD" +
           "ZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////" +
           "AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAARhggoEAAAAAAARAAAAUmVtb3ZlQ2VydGlmaWNh" +
           "dGUCAABKWA8AAC8BAAYxSlgPAAEB/////wEAAAAXYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAgAA" +
           "S1gPAAAuAERLWA8AlgIAAAABACoBARkAAAAKAAAAVGh1bWJwcmludAAM/////wAAAAAAAQAqAQEjAAAA" +
           "FAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAA" +
           "ABdgiQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBlcwIAAExYDwAALgBETFgPAAARAQAAAAEAAAAAAAAA" +
           "AQH/////AAAAABVgiQoCAAAAAAAOAAAAQXBwbGljYXRpb25VcmkBAOJoAC4AROJoAAABAMdc/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACgAAAFByb2R1Y3RVcmkBAONoAC4ARONoAAABAMdc/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADwAAAEFwcGxpY2F0aW9uVHlwZQEA5GgALgBE5GgAAAEAMwH/////AQH/////AAAA" +
           "ABdgiQoCAAAAAAASAAAAU2VydmVyQ2FwYWJpbGl0aWVzAgAAglwPAAAuAESCXA8AAAwBAAAAAQAAAAAA" +
           "AAABAf////8AAAAAF2CJCgIAAAAAABoAAABTdXBwb3J0ZWRQcml2YXRlS2V5Rm9ybWF0cwIAAINcDwAA" +
           "LgBEg1wPAAAMAQAAAAEAAAAAAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAATWF4VHJ1c3RMaXN0U2l6" +
           "ZQIAAIRcDwAALgBEhFwPAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAE11bHRpY2FzdERuc0Vu" +
           "YWJsZWQCAACFXA8AAC4ARIVcDwAAAf////8BAf////8AAAAABGGCCgQAAAAAABEAAABVcGRhdGVDZXJ0" +
           "aWZpY2F0ZQIAAIdcDwAALwEASDGHXA8AAQH/////AgAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMCAACIXA8AAC4ARIhcDwCWBgAAAAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8A" +
           "AAAAAAEAKgEBIAAAABEAAABDZXJ0aWZpY2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAENl" +
           "cnRpZmljYXRlAA//////AAAAAAABACoBASUAAAASAAAASXNzdWVyQ2VydGlmaWNhdGVzAA8BAAAAAQAA" +
           "AAAAAAAAAQAqAQEfAAAAEAAAAFByaXZhdGVLZXlGb3JtYXQADP////8AAAAAAAEAKgEBGQAAAAoAAABQ" +
           "cml2YXRlS2V5AA//////AAAAAAABACgBAQAAAAEAAAAGAAAAAQH/////AAAAABdgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAgAAiVwPAAAuAESJXA8AlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2Vz" +
           "UmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQAAAAEAAAABAf////8AAAAABGGCCgQAAAAAAAwAAABB" +
           "cHBseUNoYW5nZXMCAACNXA8AAC8BAL4xjVwPAAEB/////wAAAAAEYYIKBAAAAAAAFAAAAENyZWF0ZVNp" +
           "Z25pbmdSZXF1ZXN0AgAAj1wPAAAvAQC7MY9cDwABAf////8CAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwIAAJBcDwAALgBEkFwPAJYFAAAAAQAqAQEhAAAAEgAAAENlcnRpZmljYXRlR3JvdXBJZAAR" +
           "/////wAAAAAAAQAqAQEgAAAAEQAAAENlcnRpZmljYXRlVHlwZUlkABH/////AAAAAAABACoBARoAAAAL" +
           "AAAAU3ViamVjdE5hbWUADP////8AAAAAAAEAKgEBIwAAABQAAABSZWdlbmVyYXRlUHJpdmF0ZUtleQAB" +
           "/////wAAAAAAAQAqAQEUAAAABQAAAE5vbmNlAA//////AAAAAAABACgBAQAAAAEAAAAFAAAAAQH/////" +
           "AAAAABdgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAgAAkVwPAAAuAESRXA8AlgEAAAABACoBASEA" +
           "AAASAAAAQ2VydGlmaWNhdGVSZXF1ZXN0AA//////AAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAA" +
           "AARhggoEAAAAAAAPAAAAR2V0UmVqZWN0ZWRMaXN0AgAAklwPAAAvAQDnMZJcDwABAf////8BAAAAF2Cp" +
           "CgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMCAACTXA8AAC4ARJNcDwCWAQAAAAEAKgEBHwAAAAwAAABD" +
           "ZXJ0aWZpY2F0ZXMADwEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAHAAAARW5hYmxlZAEA4WgALgBE4WgAAAAB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> Enabled
        {
            get
            {
                return m_enabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabled = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_enabled != null)
            {
                children.Add(m_enabled);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Enabled:
                {
                    if (createOrReplace)
                    {
                        if (Enabled == null)
                        {
                            if (replacement == null)
                            {
                                Enabled = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Enabled = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Enabled;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_enabled;
        #endregion
    }
    #endif
    #endregion

    #region ProvisionableDeviceState Class
    #if (!OPCUA_EXCLUDE_ProvisionableDeviceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProvisionableDeviceState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public ProvisionableDeviceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProvisionableDeviceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SetRegistrarEndpoints != null)
            {
                SetRegistrarEndpoints.Initialize(context, SetRegistrarEndpoints_InitializationString);
            }
        }

        #region Initialization String
        private const string SetRegistrarEndpoints_InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFNldFJlZ2lzdHJhckVuZHBvaW50cwEA+2gALwEA+2j7aAAAAQH/" +
           "////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAPxoAC4ARPxoAACWAQAAAAEAKgEBHwAA" +
           "AAoAAABSZWdpc3RyYXJzAQA0AQEAAAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHwAAAFByb3Zpc2lvbmFibGVEZXZpY2VUeXBlSW5zdGFuY2UBAPdoAQD3" +
           "aPdoAAD/////AwAAABVgiQoCAAAAAAALAAAASXNTaW5nbGV0b24BAPhoAC4ARPhoAAAAAf////8BAf//" +
           "//8AAAAABGGCCgQAAAAAAA4AAABSZXF1ZXN0VGlja2V0cwEA+WgALwEA+Wj5aAAAAQH/////AQAAABdg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQD6aAAuAET6aAAAlgEAAAABACoBARwAAAAHAAAAVGlj" +
           "a2V0cwEAfmQBAAAAAQAAAAAAAAAAAQAoAQEAAAABAAAAAQAAAAEB/////wAAAAAEYYIKBAAAAAAAFQAA" +
           "AFNldFJlZ2lzdHJhckVuZHBvaW50cwEA+2gALwEA+2j7aAAAAQH/////AQAAABdgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAPxoAC4ARPxoAACWAQAAAAEAKgEBHwAAAAoAAABSZWdpc3RyYXJzAQA0AQEA" +
           "AAABAAAAAAAAAAABACgBAQAAAAEAAAABAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> IsSingleton
        {
            get
            {
                return m_isSingleton;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isSingleton, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isSingleton = value;
            }
        }

        /// <remarks />
        public RequestTicketsMethodState RequestTickets
        {
            get
            {
                return m_requestTicketsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestTicketsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestTicketsMethod = value;
            }
        }

        /// <remarks />
        public SetRegistrarEndpointsMethodState SetRegistrarEndpoints
        {
            get
            {
                return m_setRegistrarEndpointsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setRegistrarEndpointsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setRegistrarEndpointsMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_isSingleton != null)
            {
                children.Add(m_isSingleton);
            }

            if (m_requestTicketsMethod != null)
            {
                children.Add(m_requestTicketsMethod);
            }

            if (m_setRegistrarEndpointsMethod != null)
            {
                children.Add(m_setRegistrarEndpointsMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IsSingleton:
                {
                    if (createOrReplace)
                    {
                        if (IsSingleton == null)
                        {
                            if (replacement == null)
                            {
                                IsSingleton = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsSingleton = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsSingleton;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestTickets:
                {
                    if (createOrReplace)
                    {
                        if (RequestTickets == null)
                        {
                            if (replacement == null)
                            {
                                RequestTickets = new RequestTicketsMethodState(this);
                            }
                            else
                            {
                                RequestTickets = (RequestTicketsMethodState)replacement;
                            }
                        }
                    }

                    instance = RequestTickets;
                    break;
                }

                case Opc.Ua.BrowseNames.SetRegistrarEndpoints:
                {
                    if (createOrReplace)
                    {
                        if (SetRegistrarEndpoints == null)
                        {
                            if (replacement == null)
                            {
                                SetRegistrarEndpoints = new SetRegistrarEndpointsMethodState(this);
                            }
                            else
                            {
                                SetRegistrarEndpoints = (SetRegistrarEndpointsMethodState)replacement;
                            }
                        }
                    }

                    instance = SetRegistrarEndpoints;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_isSingleton;
        private RequestTicketsMethodState m_requestTicketsMethod;
        private SetRegistrarEndpointsMethodState m_setRegistrarEndpointsMethod;
        #endregion
    }
    #endif
    #endregion

    #region IIetfBaseNetworkInterfaceState Class
    #if (!OPCUA_EXCLUDE_IIetfBaseNetworkInterfaceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIetfBaseNetworkInterfaceState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIetfBaseNetworkInterfaceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIetfBaseNetworkInterfaceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (PhysAddress != null)
            {
                PhysAddress.Initialize(context, PhysAddress_InitializationString);
            }
        }

        #region Initialization String
        private const string PhysAddress_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFBoeXNBZGRyZXNzAQBXXgAvAD9XXgAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAElJZXRmQmFzZU5ldHdvcmtJbnRlcmZhY2VUeXBlSW5zdGFuY2UB" +
           "AFReAQBUXlReAAD/////BAAAABVgiQoCAAAAAAALAAAAQWRtaW5TdGF0dXMBAFVeAC8AP1VeAAABAJRe" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAE9wZXJTdGF0dXMBAFZeAC8AP1ZeAAABAJZe/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACwAAAFBoeXNBZGRyZXNzAQBXXgAvAD9XXgAAAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAFAAAAU3BlZWQBAFheAC8BAFlEWF4AAAAJ/////wEB/////wEAAAAVYKkKAgAAAAAA" +
           "EAAAAEVuZ2luZWVyaW5nVW5pdHMBAF1eAC4ARF1eAAAWAQB5AwFgAAAALwAAAGh0dHA6Ly93d3cub3Bj" +
           "Zm91bmRhdGlvbi5vcmcvVUEvdW5pdHMvdW4vY2VmYWN0MDFCAAMCAAAAZW4FAAAAYml0L3MDAgAAAGVu" +
           "DgAAAGJpdCBwZXIgc2Vjb25kAQB3A/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<InterfaceAdminStatus> AdminStatus
        {
            get
            {
                return m_adminStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_adminStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_adminStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<InterfaceOperStatus> OperStatus
        {
            get
            {
                return m_operStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_operStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_operStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> PhysAddress
        {
            get
            {
                return m_physAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_physAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_physAddress = value;
            }
        }

        /// <remarks />
        public AnalogUnitState<ulong> Speed
        {
            get
            {
                return m_speed;
            }

            set
            {
                if (!Object.ReferenceEquals(m_speed, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_speed = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_adminStatus != null)
            {
                children.Add(m_adminStatus);
            }

            if (m_operStatus != null)
            {
                children.Add(m_operStatus);
            }

            if (m_physAddress != null)
            {
                children.Add(m_physAddress);
            }

            if (m_speed != null)
            {
                children.Add(m_speed);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AdminStatus:
                {
                    if (createOrReplace)
                    {
                        if (AdminStatus == null)
                        {
                            if (replacement == null)
                            {
                                AdminStatus = new BaseDataVariableState<InterfaceAdminStatus>(this);
                            }
                            else
                            {
                                AdminStatus = (BaseDataVariableState<InterfaceAdminStatus>)replacement;
                            }
                        }
                    }

                    instance = AdminStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.OperStatus:
                {
                    if (createOrReplace)
                    {
                        if (OperStatus == null)
                        {
                            if (replacement == null)
                            {
                                OperStatus = new BaseDataVariableState<InterfaceOperStatus>(this);
                            }
                            else
                            {
                                OperStatus = (BaseDataVariableState<InterfaceOperStatus>)replacement;
                            }
                        }
                    }

                    instance = OperStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.PhysAddress:
                {
                    if (createOrReplace)
                    {
                        if (PhysAddress == null)
                        {
                            if (replacement == null)
                            {
                                PhysAddress = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                PhysAddress = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = PhysAddress;
                    break;
                }

                case Opc.Ua.BrowseNames.Speed:
                {
                    if (createOrReplace)
                    {
                        if (Speed == null)
                        {
                            if (replacement == null)
                            {
                                Speed = new AnalogUnitState<ulong>(this);
                            }
                            else
                            {
                                Speed = (AnalogUnitState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Speed;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<InterfaceAdminStatus> m_adminStatus;
        private BaseDataVariableState<InterfaceOperStatus> m_operStatus;
        private BaseDataVariableState<string> m_physAddress;
        private AnalogUnitState<ulong> m_speed;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeBaseEthernetPortState Class
    #if (!OPCUA_EXCLUDE_IIeeeBaseEthernetPortState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeBaseEthernetPortState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeBaseEthernetPortState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeBaseEthernetPortType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAElJZWVlQmFzZUV0aGVybmV0UG9ydFR5cGVJbnN0YW5jZQEAXl4B" +
           "AF5eXl4AAP////8DAAAAFWCJCgIAAAAAAAUAAABTcGVlZAEAX14ALwEAWURfXgAAAAn/////AQH/////" +
           "AQAAABVgqQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAZF4ALgBEZF4AABYBAHkDAWUAAAAvAAAA" +
           "aHR0cDovL3d3dy5vcGNmb3VuZGF0aW9uLm9yZy9VQS91bml0cy91bi9jZWZhY3QwMkUAAwIAAABlbgYA" +
           "AABNYml0L3MDAgAAAGVuEgAAAG1lZ2FiaXQgcGVyIHNlY29uZAEAdwP/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAARHVwbGV4AQBlXgAvAD9lXgAAAQCSXv////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABN" +
           "YXhGcmFtZUxlbmd0aAEAZl4ALwA/Zl4AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AnalogUnitState<ulong> Speed
        {
            get
            {
                return m_speed;
            }

            set
            {
                if (!Object.ReferenceEquals(m_speed, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_speed = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<Duplex> Duplex
        {
            get
            {
                return m_duplex;
            }

            set
            {
                if (!Object.ReferenceEquals(m_duplex, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_duplex = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ushort> MaxFrameLength
        {
            get
            {
                return m_maxFrameLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxFrameLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxFrameLength = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_speed != null)
            {
                children.Add(m_speed);
            }

            if (m_duplex != null)
            {
                children.Add(m_duplex);
            }

            if (m_maxFrameLength != null)
            {
                children.Add(m_maxFrameLength);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Speed:
                {
                    if (createOrReplace)
                    {
                        if (Speed == null)
                        {
                            if (replacement == null)
                            {
                                Speed = new AnalogUnitState<ulong>(this);
                            }
                            else
                            {
                                Speed = (AnalogUnitState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Speed;
                    break;
                }

                case Opc.Ua.BrowseNames.Duplex:
                {
                    if (createOrReplace)
                    {
                        if (Duplex == null)
                        {
                            if (replacement == null)
                            {
                                Duplex = new BaseDataVariableState<Duplex>(this);
                            }
                            else
                            {
                                Duplex = (BaseDataVariableState<Duplex>)replacement;
                            }
                        }
                    }

                    instance = Duplex;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxFrameLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxFrameLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxFrameLength = new BaseDataVariableState<ushort>(this);
                            }
                            else
                            {
                                MaxFrameLength = (BaseDataVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxFrameLength;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AnalogUnitState<ulong> m_speed;
        private BaseDataVariableState<Duplex> m_duplex;
        private BaseDataVariableState<ushort> m_maxFrameLength;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeAutoNegotiationStatusState Class
    #if (!OPCUA_EXCLUDE_IIeeeAutoNegotiationStatusState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeAutoNegotiationStatusState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeAutoNegotiationStatusState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeAutoNegotiationStatusType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJgAAAElJZWVlQXV0b05lZ290aWF0aW9uU3RhdHVzVHlwZUluc3RhbmNl" +
           "AQCpXgEAqV6pXgAA/////wEAAAAVYIkKAgAAAAAAEQAAAE5lZ290aWF0aW9uU3RhdHVzAQCqXgAvAD+q" +
           "XgAAAQCYXv////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NegotiationStatus> NegotiationStatus
        {
            get
            {
                return m_negotiationStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_negotiationStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_negotiationStatus = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_negotiationStatus != null)
            {
                children.Add(m_negotiationStatus);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NegotiationStatus:
                {
                    if (createOrReplace)
                    {
                        if (NegotiationStatus == null)
                        {
                            if (replacement == null)
                            {
                                NegotiationStatus = new BaseDataVariableState<NegotiationStatus>(this);
                            }
                            else
                            {
                                NegotiationStatus = (BaseDataVariableState<NegotiationStatus>)replacement;
                            }
                        }
                    }

                    instance = NegotiationStatus;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NegotiationStatus> m_negotiationStatus;
        #endregion
    }
    #endif
    #endregion

    #region IBaseEthernetCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_IBaseEthernetCapabilitiesState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IBaseEthernetCapabilitiesState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IBaseEthernetCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IBaseEthernetCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJQAAAElCYXNlRXRoZXJuZXRDYXBhYmlsaXRpZXNUeXBlSW5zdGFuY2UB" +
           "AGdeAQBnXmdeAAD/////AQAAABVgiQoCAAAAAAAOAAAAVmxhblRhZ0NhcGFibGUBAGheAC8AP2heAAAA" +
           "Af////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<bool> VlanTagCapable
        {
            get
            {
                return m_vlanTagCapable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vlanTagCapable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vlanTagCapable = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_vlanTagCapable != null)
            {
                children.Add(m_vlanTagCapable);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.VlanTagCapable:
                {
                    if (createOrReplace)
                    {
                        if (VlanTagCapable == null)
                        {
                            if (replacement == null)
                            {
                                VlanTagCapable = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                VlanTagCapable = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = VlanTagCapable;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<bool> m_vlanTagCapable;
        #endregion
    }
    #endif
    #endregion

    #region IVlanIdState Class
    #if (!OPCUA_EXCLUDE_IVlanIdState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IVlanIdState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IVlanIdState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IVlanIdType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAEwAAAElWbGFuSWRUeXBlSW5zdGFuY2UBAIJiAQCCYoJiAAD/////AQAA" +
           "ABVgiQoCAAAAAAAGAAAAVmxhbklkAQCDYgAvAD+DYgAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<ushort> VlanId
        {
            get
            {
                return m_vlanId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vlanId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vlanId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_vlanId != null)
            {
                children.Add(m_vlanId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.VlanId:
                {
                    if (createOrReplace)
                    {
                        if (VlanId == null)
                        {
                            if (replacement == null)
                            {
                                VlanId = new BaseDataVariableState<ushort>(this);
                            }
                            else
                            {
                                VlanId = (BaseDataVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = VlanId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<ushort> m_vlanId;
        #endregion
    }
    #endif
    #endregion

    #region ISrClassState Class
    #if (!OPCUA_EXCLUDE_ISrClassState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ISrClassState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public ISrClassState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ISrClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAFAAAAElTckNsYXNzVHlwZUluc3RhbmNlAQBpXgEAaV5pXgAA/////wMA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQBqXgAvAD9qXgAAAAP/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "UHJpb3JpdHkBAGteAC8AP2teAAAAA/////8BAf////8AAAAAFWCJCgIAAAAAAAMAAABWaWQBAGxeAC8A" +
           "P2xeAAAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<byte> Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> Priority
        {
            get
            {
                return m_priority;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priority, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priority = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ushort> Vid
        {
            get
            {
                return m_vid;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vid, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vid = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_priority != null)
            {
                children.Add(m_priority);
            }

            if (m_vid != null)
            {
                children.Add(m_vid);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                Id = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Priority:
                {
                    if (createOrReplace)
                    {
                        if (Priority == null)
                        {
                            if (replacement == null)
                            {
                                Priority = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                Priority = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = Priority;
                    break;
                }

                case Opc.Ua.BrowseNames.Vid:
                {
                    if (createOrReplace)
                    {
                        if (Vid == null)
                        {
                            if (replacement == null)
                            {
                                Vid = new BaseDataVariableState<ushort>(this);
                            }
                            else
                            {
                                Vid = (BaseDataVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Vid;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<byte> m_id;
        private BaseDataVariableState<byte> m_priority;
        private BaseDataVariableState<ushort> m_vid;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeBaseTsnStreamState Class
    #if (!OPCUA_EXCLUDE_IIeeeBaseTsnStreamState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeBaseTsnStreamState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeBaseTsnStreamState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeBaseTsnStreamType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AccumulatedLatency != null)
            {
                AccumulatedLatency.Initialize(context, AccumulatedLatency_InitializationString);
            }

            if (SrClassId != null)
            {
                SrClassId.Initialize(context, SrClassId_InitializationString);
            }
        }

        #region Initialization String
        private const string AccumulatedLatency_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAEFjY3VtdWxhdGVkTGF0ZW5jeQEAcV4ALwA/cV4AAAAH/////wEB" +
           "/////wAAAAA=";

        private const string SrClassId_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFNyQ2xhc3NJZAEAcl4ALwA/cl4AAAAD/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAElJZWVlQmFzZVRzblN0cmVhbVR5cGVJbnN0YW5jZQEAbV4BAG1e" +
           "bV4AAP////8FAAAAF2CJCgIAAAAAAAgAAABTdHJlYW1JZAEAbl4ALwA/bl4AAAADAQAAAAEAAAAIAAAA" +
           "AQH/////AAAAABVgiQoCAAAAAAAKAAAAU3RyZWFtTmFtZQEAb14ALwA/b14AAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAABQAAAFN0YXRlAQBwXgAvAD9wXgAAAQCcXv////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABIAAABBY2N1bXVsYXRlZExhdGVuY3kBAHFeAC8AP3FeAAAAB/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAkAAABTckNsYXNzSWQBAHJeAC8AP3JeAAAAA/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<byte[]> StreamId
        {
            get
            {
                return m_streamId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_streamId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_streamId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> StreamName
        {
            get
            {
                return m_streamName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_streamName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_streamName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<TsnStreamState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> AccumulatedLatency
        {
            get
            {
                return m_accumulatedLatency;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accumulatedLatency, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accumulatedLatency = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> SrClassId
        {
            get
            {
                return m_srClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_srClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_srClassId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_streamId != null)
            {
                children.Add(m_streamId);
            }

            if (m_streamName != null)
            {
                children.Add(m_streamName);
            }

            if (m_state != null)
            {
                children.Add(m_state);
            }

            if (m_accumulatedLatency != null)
            {
                children.Add(m_accumulatedLatency);
            }

            if (m_srClassId != null)
            {
                children.Add(m_srClassId);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StreamId:
                {
                    if (createOrReplace)
                    {
                        if (StreamId == null)
                        {
                            if (replacement == null)
                            {
                                StreamId = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                StreamId = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = StreamId;
                    break;
                }

                case Opc.Ua.BrowseNames.StreamName:
                {
                    if (createOrReplace)
                    {
                        if (StreamName == null)
                        {
                            if (replacement == null)
                            {
                                StreamName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                StreamName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = StreamName;
                    break;
                }

                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new BaseDataVariableState<TsnStreamState>(this);
                            }
                            else
                            {
                                State = (BaseDataVariableState<TsnStreamState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }

                case Opc.Ua.BrowseNames.AccumulatedLatency:
                {
                    if (createOrReplace)
                    {
                        if (AccumulatedLatency == null)
                        {
                            if (replacement == null)
                            {
                                AccumulatedLatency = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                AccumulatedLatency = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = AccumulatedLatency;
                    break;
                }

                case Opc.Ua.BrowseNames.SrClassId:
                {
                    if (createOrReplace)
                    {
                        if (SrClassId == null)
                        {
                            if (replacement == null)
                            {
                                SrClassId = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                SrClassId = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = SrClassId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<byte[]> m_streamId;
        private BaseDataVariableState<string> m_streamName;
        private BaseDataVariableState<TsnStreamState> m_state;
        private BaseDataVariableState<uint> m_accumulatedLatency;
        private BaseDataVariableState<byte> m_srClassId;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeBaseTsnTrafficSpecificationState Class
    #if (!OPCUA_EXCLUDE_IIeeeBaseTsnTrafficSpecificationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeBaseTsnTrafficSpecificationState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeBaseTsnTrafficSpecificationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeBaseTsnTrafficSpecificationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAALAAAAElJZWVlQmFzZVRzblRyYWZmaWNTcGVjaWZpY2F0aW9uVHlwZUlu" +
           "c3RhbmNlAQBzXgEAc15zXgAA/////wMAAAAVYIkKAgAAAAAAEQAAAE1heEludGVydmFsRnJhbWVzAQB0" +
           "XgAvAD90XgAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATWF4RnJhbWVTaXplAQB1XgAvAD91" +
           "XgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAIAAAASW50ZXJ2YWwBAHZeAC8AP3ZeAAABACte////" +
           "/wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<ushort> MaxIntervalFrames
        {
            get
            {
                return m_maxIntervalFrames;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxIntervalFrames, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxIntervalFrames = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxFrameSize
        {
            get
            {
                return m_maxFrameSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxFrameSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxFrameSize = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<UnsignedRationalNumber> Interval
        {
            get
            {
                return m_interval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_interval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_interval = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_maxIntervalFrames != null)
            {
                children.Add(m_maxIntervalFrames);
            }

            if (m_maxFrameSize != null)
            {
                children.Add(m_maxFrameSize);
            }

            if (m_interval != null)
            {
                children.Add(m_interval);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MaxIntervalFrames:
                {
                    if (createOrReplace)
                    {
                        if (MaxIntervalFrames == null)
                        {
                            if (replacement == null)
                            {
                                MaxIntervalFrames = new BaseDataVariableState<ushort>(this);
                            }
                            else
                            {
                                MaxIntervalFrames = (BaseDataVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxIntervalFrames;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxFrameSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxFrameSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxFrameSize = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxFrameSize = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxFrameSize;
                    break;
                }

                case Opc.Ua.BrowseNames.Interval:
                {
                    if (createOrReplace)
                    {
                        if (Interval == null)
                        {
                            if (replacement == null)
                            {
                                Interval = new BaseDataVariableState<UnsignedRationalNumber>(this);
                            }
                            else
                            {
                                Interval = (BaseDataVariableState<UnsignedRationalNumber>)replacement;
                            }
                        }
                    }

                    instance = Interval;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<ushort> m_maxIntervalFrames;
        private BaseDataVariableState<uint> m_maxFrameSize;
        private BaseDataVariableState<UnsignedRationalNumber> m_interval;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeBaseTsnStatusStreamState Class
    #if (!OPCUA_EXCLUDE_IIeeeBaseTsnStatusStreamState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeBaseTsnStatusStreamState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeBaseTsnStatusStreamState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeBaseTsnStatusStreamType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TalkerStatus != null)
            {
                TalkerStatus.Initialize(context, TalkerStatus_InitializationString);
            }

            if (ListenerStatus != null)
            {
                ListenerStatus.Initialize(context, ListenerStatus_InitializationString);
            }
        }

        #region Initialization String
        private const string TalkerStatus_InitializationString =
           "//////////8VYIkKAgAAAAAADAAAAFRhbGtlclN0YXR1cwEAeF4ALwA/eF4AAAEAnl7/////AQH/////" +
           "AAAAAA==";

        private const string ListenerStatus_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExpc3RlbmVyU3RhdHVzAQB5XgAvAD95XgAAAQCgXv////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAElJZWVlQmFzZVRzblN0YXR1c1N0cmVhbVR5cGVJbnN0YW5jZQEA" +
           "d14BAHded14AAP////8EAAAAFWCJCgIAAAAAAAwAAABUYWxrZXJTdGF0dXMBAHheAC8AP3heAAABAJ5e" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExpc3RlbmVyU3RhdHVzAQB5XgAvAD95XgAAAQCgXv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABGYWlsdXJlQ29kZQEAel4ALwA/el4AAAEAml7/////AQH/" +
           "////AAAAABdgiQoCAAAAAAAXAAAARmFpbHVyZVN5c3RlbUlkZW50aWZpZXIBAHteAC8AP3teAAAAAwIA" +
           "AAACAAAAAAAAAAgAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<TsnTalkerStatus> TalkerStatus
        {
            get
            {
                return m_talkerStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_talkerStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_talkerStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<TsnListenerStatus> ListenerStatus
        {
            get
            {
                return m_listenerStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_listenerStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_listenerStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<TsnFailureCode> FailureCode
        {
            get
            {
                return m_failureCode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_failureCode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_failureCode = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState FailureSystemIdentifier
        {
            get
            {
                return m_failureSystemIdentifier;
            }

            set
            {
                if (!Object.ReferenceEquals(m_failureSystemIdentifier, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_failureSystemIdentifier = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_talkerStatus != null)
            {
                children.Add(m_talkerStatus);
            }

            if (m_listenerStatus != null)
            {
                children.Add(m_listenerStatus);
            }

            if (m_failureCode != null)
            {
                children.Add(m_failureCode);
            }

            if (m_failureSystemIdentifier != null)
            {
                children.Add(m_failureSystemIdentifier);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TalkerStatus:
                {
                    if (createOrReplace)
                    {
                        if (TalkerStatus == null)
                        {
                            if (replacement == null)
                            {
                                TalkerStatus = new BaseDataVariableState<TsnTalkerStatus>(this);
                            }
                            else
                            {
                                TalkerStatus = (BaseDataVariableState<TsnTalkerStatus>)replacement;
                            }
                        }
                    }

                    instance = TalkerStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.ListenerStatus:
                {
                    if (createOrReplace)
                    {
                        if (ListenerStatus == null)
                        {
                            if (replacement == null)
                            {
                                ListenerStatus = new BaseDataVariableState<TsnListenerStatus>(this);
                            }
                            else
                            {
                                ListenerStatus = (BaseDataVariableState<TsnListenerStatus>)replacement;
                            }
                        }
                    }

                    instance = ListenerStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.FailureCode:
                {
                    if (createOrReplace)
                    {
                        if (FailureCode == null)
                        {
                            if (replacement == null)
                            {
                                FailureCode = new BaseDataVariableState<TsnFailureCode>(this);
                            }
                            else
                            {
                                FailureCode = (BaseDataVariableState<TsnFailureCode>)replacement;
                            }
                        }
                    }

                    instance = FailureCode;
                    break;
                }

                case Opc.Ua.BrowseNames.FailureSystemIdentifier:
                {
                    if (createOrReplace)
                    {
                        if (FailureSystemIdentifier == null)
                        {
                            if (replacement == null)
                            {
                                FailureSystemIdentifier = new BaseDataVariableState(this);
                            }
                            else
                            {
                                FailureSystemIdentifier = (BaseDataVariableState)replacement;
                            }
                        }
                    }

                    instance = FailureSystemIdentifier;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<TsnTalkerStatus> m_talkerStatus;
        private BaseDataVariableState<TsnListenerStatus> m_listenerStatus;
        private BaseDataVariableState<TsnFailureCode> m_failureCode;
        private BaseDataVariableState m_failureSystemIdentifier;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeTsnInterfaceConfigurationState Class
    #if (!OPCUA_EXCLUDE_IIeeeTsnInterfaceConfigurationState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeTsnInterfaceConfigurationState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeTsnInterfaceConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeTsnInterfaceConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InterfaceName != null)
            {
                InterfaceName.Initialize(context, InterfaceName_InitializationString);
            }
        }

        #region Initialization String
        private const string InterfaceName_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEludGVyZmFjZU5hbWUBAH5eAC8AP35eAAAADP////8BAf////8A" +
           "AAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAKgAAAElJZWVlVHNuSW50ZXJmYWNlQ29uZmlndXJhdGlvblR5cGVJbnN0" +
           "YW5jZQEAfF4BAHxefF4AAP////8CAAAAFWCJCgIAAAAAAAoAAABNYWNBZGRyZXNzAQB9XgAvAD99XgAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAANAAAASW50ZXJmYWNlTmFtZQEAfl4ALwA/fl4AAAAM////" +
           "/wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> MacAddress
        {
            get
            {
                return m_macAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_macAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_macAddress = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> InterfaceName
        {
            get
            {
                return m_interfaceName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_interfaceName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_interfaceName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_macAddress != null)
            {
                children.Add(m_macAddress);
            }

            if (m_interfaceName != null)
            {
                children.Add(m_interfaceName);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MacAddress:
                {
                    if (createOrReplace)
                    {
                        if (MacAddress == null)
                        {
                            if (replacement == null)
                            {
                                MacAddress = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                MacAddress = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = MacAddress;
                    break;
                }

                case Opc.Ua.BrowseNames.InterfaceName:
                {
                    if (createOrReplace)
                    {
                        if (InterfaceName == null)
                        {
                            if (replacement == null)
                            {
                                InterfaceName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                InterfaceName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = InterfaceName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_macAddress;
        private BaseDataVariableState<string> m_interfaceName;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeTsnInterfaceConfigurationTalkerState Class
    #if (!OPCUA_EXCLUDE_IIeeeTsnInterfaceConfigurationTalkerState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeTsnInterfaceConfigurationTalkerState : IIeeeTsnInterfaceConfigurationState
    {
        #region Constructors
        /// <remarks />
        public IIeeeTsnInterfaceConfigurationTalkerState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeTsnInterfaceConfigurationTalkerType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TimeAwareOffset != null)
            {
                TimeAwareOffset.Initialize(context, TimeAwareOffset_InitializationString);
            }
        }

        #region Initialization String
        private const string TimeAwareOffset_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFRpbWVBd2FyZU9mZnNldAEAgl4ALwA/gl4AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAMAAAAElJZWVlVHNuSW50ZXJmYWNlQ29uZmlndXJhdGlvblRhbGtlclR5" +
           "cGVJbnN0YW5jZQEAf14BAH9ef14AAP////8CAAAAFWCJCgIAAAAAAAoAAABNYWNBZGRyZXNzAgAAGGEP" +
           "AAAvAD8YYQ8AAAz/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAVGltZUF3YXJlT2Zmc2V0AQCCXgAv" +
           "AD+CXgAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> TimeAwareOffset
        {
            get
            {
                return m_timeAwareOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timeAwareOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timeAwareOffset = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_timeAwareOffset != null)
            {
                children.Add(m_timeAwareOffset);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TimeAwareOffset:
                {
                    if (createOrReplace)
                    {
                        if (TimeAwareOffset == null)
                        {
                            if (replacement == null)
                            {
                                TimeAwareOffset = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TimeAwareOffset = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TimeAwareOffset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_timeAwareOffset;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeTsnInterfaceConfigurationListenerState Class
    #if (!OPCUA_EXCLUDE_IIeeeTsnInterfaceConfigurationListenerState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeTsnInterfaceConfigurationListenerState : IIeeeTsnInterfaceConfigurationState
    {
        #region Constructors
        /// <remarks />
        public IIeeeTsnInterfaceConfigurationListenerState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeTsnInterfaceConfigurationListenerType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ReceiveOffset != null)
            {
                ReceiveOffset.Initialize(context, ReceiveOffset_InitializationString);
            }
        }

        #region Initialization String
        private const string ReceiveOffset_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAFJlY2VpdmVPZmZzZXQBAIZeAC8AP4ZeAAAAB/////8BAf////8A" +
           "AAAA";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAMgAAAElJZWVlVHNuSW50ZXJmYWNlQ29uZmlndXJhdGlvbkxpc3RlbmVy" +
           "VHlwZUluc3RhbmNlAQCDXgEAg16DXgAA/////wIAAAAVYIkKAgAAAAAACgAAAE1hY0FkZHJlc3MCAAAa" +
           "YQ8AAC8APxphDwAADP////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABSZWNlaXZlT2Zmc2V0AQCGXgAv" +
           "AD+GXgAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> ReceiveOffset
        {
            get
            {
                return m_receiveOffset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_receiveOffset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_receiveOffset = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_receiveOffset != null)
            {
                children.Add(m_receiveOffset);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReceiveOffset:
                {
                    if (createOrReplace)
                    {
                        if (ReceiveOffset == null)
                        {
                            if (replacement == null)
                            {
                                ReceiveOffset = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ReceiveOffset = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ReceiveOffset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_receiveOffset;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeTsnMacAddressState Class
    #if (!OPCUA_EXCLUDE_IIeeeTsnMacAddressState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeTsnMacAddressState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeTsnMacAddressState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeTsnMacAddressType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SourceAddress != null)
            {
                SourceAddress.Initialize(context, SourceAddress_InitializationString);
            }
        }

        #region Initialization String
        private const string SourceAddress_InitializationString =
           "//////////8XYIkKAgAAAAAADQAAAFNvdXJjZUFkZHJlc3MBAIleAC8AP4leAAAAAwEAAAABAAAABgAA" +
           "AAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAHgAAAElJZWVlVHNuTWFjQWRkcmVzc1R5cGVJbnN0YW5jZQEAh14BAIde" +
           "h14AAP////8CAAAAF2CJCgIAAAAAABIAAABEZXN0aW5hdGlvbkFkZHJlc3MBAIheAC8AP4heAAAAAwEA" +
           "AAABAAAABgAAAAEB/////wAAAAAXYIkKAgAAAAAADQAAAFNvdXJjZUFkZHJlc3MBAIleAC8AP4leAAAA" +
           "AwEAAAABAAAABgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<byte[]> DestinationAddress
        {
            get
            {
                return m_destinationAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_destinationAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_destinationAddress = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte[]> SourceAddress
        {
            get
            {
                return m_sourceAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceAddress = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_destinationAddress != null)
            {
                children.Add(m_destinationAddress);
            }

            if (m_sourceAddress != null)
            {
                children.Add(m_sourceAddress);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DestinationAddress:
                {
                    if (createOrReplace)
                    {
                        if (DestinationAddress == null)
                        {
                            if (replacement == null)
                            {
                                DestinationAddress = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                DestinationAddress = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = DestinationAddress;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceAddress:
                {
                    if (createOrReplace)
                    {
                        if (SourceAddress == null)
                        {
                            if (replacement == null)
                            {
                                SourceAddress = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                SourceAddress = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = SourceAddress;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<byte[]> m_destinationAddress;
        private BaseDataVariableState<byte[]> m_sourceAddress;
        #endregion
    }
    #endif
    #endregion

    #region IIeeeTsnVlanTagState Class
    #if (!OPCUA_EXCLUDE_IIeeeTsnVlanTagState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IIeeeTsnVlanTagState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IIeeeTsnVlanTagState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IIeeeTsnVlanTagType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIACAQAAAAAAGwAAAElJZWVlVHNuVmxhblRhZ1R5cGVJbnN0YW5jZQEAil4BAIpeil4A" +
           "AP////8CAAAAFWCJCgIAAAAAAAYAAABWbGFuSWQBAIteAC8AP4teAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABEAAABQcmlvcml0eUNvZGVQb2ludAEAjF4ALwA/jF4AAAAD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<ushort> VlanId
        {
            get
            {
                return m_vlanId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vlanId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vlanId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> PriorityCodePoint
        {
            get
            {
                return m_priorityCodePoint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priorityCodePoint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priorityCodePoint = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_vlanId != null)
            {
                children.Add(m_vlanId);
            }

            if (m_priorityCodePoint != null)
            {
                children.Add(m_priorityCodePoint);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.VlanId:
                {
                    if (createOrReplace)
                    {
                        if (VlanId == null)
                        {
                            if (replacement == null)
                            {
                                VlanId = new BaseDataVariableState<ushort>(this);
                            }
                            else
                            {
                                VlanId = (BaseDataVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = VlanId;
                    break;
                }

                case Opc.Ua.BrowseNames.PriorityCodePoint:
                {
                    if (createOrReplace)
                    {
                        if (PriorityCodePoint == null)
                        {
                            if (replacement == null)
                            {
                                PriorityCodePoint = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                PriorityCodePoint = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = PriorityCodePoint;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<ushort> m_vlanId;
        private BaseDataVariableState<byte> m_priorityCodePoint;
        #endregion
    }
    #endif
    #endregion

    #region IPriorityMappingEntryState Class
    #if (!OPCUA_EXCLUDE_IPriorityMappingEntryState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IPriorityMappingEntryState : BaseInterfaceState
    {
        #region Constructors
        /// <remarks />
        public IPriorityMappingEntryState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IPriorityMappingEntryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (PriorityValue_PCP != null)
            {
                PriorityValue_PCP.Initialize(context, PriorityValue_PCP_InitializationString);
            }

            if (PriorityValue_DSCP != null)
            {
                PriorityValue_DSCP.Initialize(context, PriorityValue_DSCP_InitializationString);
            }
        }

        #region Initialization String
        private const string PriorityValue_PCP_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAFByaW9yaXR5VmFsdWVfUENQAQCQXgAvAD+QXgAAAAP/////AQH/" +
           "////AAAAAA==";

        private const string PriorityValue_DSCP_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAFByaW9yaXR5VmFsdWVfRFNDUAEAkV4ALwA/kV4AAAAH/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIQAAAElQcmlvcml0eU1hcHBpbmdFbnRyeVR5cGVJbnN0YW5jZQEAjV4B" +
           "AI1ejV4AAP////8EAAAAFWCJCgIAAAAAAAoAAABNYXBwaW5nVXJpAQCOXgAvAD+OXgAAAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAANAAAAUHJpb3JpdHlMYWJlbAEAj14ALwA/j14AAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEQAAAFByaW9yaXR5VmFsdWVfUENQAQCQXgAvAD+QXgAAAAP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAASAAAAUHJpb3JpdHlWYWx1ZV9EU0NQAQCRXgAvAD+RXgAAAAf/////AQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> MappingUri
        {
            get
            {
                return m_mappingUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mappingUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mappingUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> PriorityLabel
        {
            get
            {
                return m_priorityLabel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priorityLabel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priorityLabel = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> PriorityValue_PCP
        {
            get
            {
                return m_priorityValue_PCP;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priorityValue_PCP, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priorityValue_PCP = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PriorityValue_DSCP
        {
            get
            {
                return m_priorityValue_DSCP;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priorityValue_DSCP, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priorityValue_DSCP = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_mappingUri != null)
            {
                children.Add(m_mappingUri);
            }

            if (m_priorityLabel != null)
            {
                children.Add(m_priorityLabel);
            }

            if (m_priorityValue_PCP != null)
            {
                children.Add(m_priorityValue_PCP);
            }

            if (m_priorityValue_DSCP != null)
            {
                children.Add(m_priorityValue_DSCP);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MappingUri:
                {
                    if (createOrReplace)
                    {
                        if (MappingUri == null)
                        {
                            if (replacement == null)
                            {
                                MappingUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                MappingUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = MappingUri;
                    break;
                }

                case Opc.Ua.BrowseNames.PriorityLabel:
                {
                    if (createOrReplace)
                    {
                        if (PriorityLabel == null)
                        {
                            if (replacement == null)
                            {
                                PriorityLabel = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                PriorityLabel = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = PriorityLabel;
                    break;
                }

                case Opc.Ua.BrowseNames.PriorityValue_PCP:
                {
                    if (createOrReplace)
                    {
                        if (PriorityValue_PCP == null)
                        {
                            if (replacement == null)
                            {
                                PriorityValue_PCP = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                PriorityValue_PCP = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = PriorityValue_PCP;
                    break;
                }

                case Opc.Ua.BrowseNames.PriorityValue_DSCP:
                {
                    if (createOrReplace)
                    {
                        if (PriorityValue_DSCP == null)
                        {
                            if (replacement == null)
                            {
                                PriorityValue_DSCP = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PriorityValue_DSCP = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PriorityValue_DSCP;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_mappingUri;
        private BaseDataVariableState<string> m_priorityLabel;
        private BaseDataVariableState<byte> m_priorityValue_PCP;
        private BaseDataVariableState<uint> m_priorityValue_DSCP;
        #endregion
    }
    #endif
    #endregion

    #region IetfBaseNetworkInterfaceState Class
    #if (!OPCUA_EXCLUDE_IetfBaseNetworkInterfaceState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class IetfBaseNetworkInterfaceState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public IetfBaseNetworkInterfaceState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.IetfBaseNetworkInterfaceType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (PhysAddress != null)
            {
                PhysAddress.Initialize(context, PhysAddress_InitializationString);
            }
        }

        #region Initialization String
        private const string PhysAddress_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAFBoeXNBZGRyZXNzAQCIYgAvAD+IYgAAAAz/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAJAAAAElldGZCYXNlTmV0d29ya0ludGVyZmFjZVR5cGVJbnN0YW5jZQEA" +
           "hWIBAIVihWIAAAEAAAABAMNEAAEAVF4EAAAAFWCJCgIAAAAAAAsAAABBZG1pblN0YXR1cwEAhmIALwA/" +
           "hmIAAAEAlF7/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAT3BlclN0YXR1cwEAh2IALwA/h2IAAAEA" +
           "ll7/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUGh5c0FkZHJlc3MBAIhiAC8AP4hiAAAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAUAAABTcGVlZAEAiWIALwEAWUSJYgAAAAn/////AQH/////AQAAABVg" +
           "qQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEApGIALgBEpGIAABYBAHkDAWAAAAAvAAAAaHR0cDov" +
           "L3d3dy5vcGNmb3VuZGF0aW9uLm9yZy9VQS91bml0cy91bi9jZWZhY3QwMUIAAwIAAABlbgUAAABiaXQv" +
           "cwMCAAAAZW4OAAAAYml0IHBlciBzZWNvbmQBAHcD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<InterfaceAdminStatus> AdminStatus
        {
            get
            {
                return m_adminStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_adminStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_adminStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<InterfaceOperStatus> OperStatus
        {
            get
            {
                return m_operStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_operStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_operStatus = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> PhysAddress
        {
            get
            {
                return m_physAddress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_physAddress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_physAddress = value;
            }
        }

        /// <remarks />
        public AnalogUnitState<ulong> Speed
        {
            get
            {
                return m_speed;
            }

            set
            {
                if (!Object.ReferenceEquals(m_speed, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_speed = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_adminStatus != null)
            {
                children.Add(m_adminStatus);
            }

            if (m_operStatus != null)
            {
                children.Add(m_operStatus);
            }

            if (m_physAddress != null)
            {
                children.Add(m_physAddress);
            }

            if (m_speed != null)
            {
                children.Add(m_speed);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AdminStatus:
                {
                    if (createOrReplace)
                    {
                        if (AdminStatus == null)
                        {
                            if (replacement == null)
                            {
                                AdminStatus = new BaseDataVariableState<InterfaceAdminStatus>(this);
                            }
                            else
                            {
                                AdminStatus = (BaseDataVariableState<InterfaceAdminStatus>)replacement;
                            }
                        }
                    }

                    instance = AdminStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.OperStatus:
                {
                    if (createOrReplace)
                    {
                        if (OperStatus == null)
                        {
                            if (replacement == null)
                            {
                                OperStatus = new BaseDataVariableState<InterfaceOperStatus>(this);
                            }
                            else
                            {
                                OperStatus = (BaseDataVariableState<InterfaceOperStatus>)replacement;
                            }
                        }
                    }

                    instance = OperStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.PhysAddress:
                {
                    if (createOrReplace)
                    {
                        if (PhysAddress == null)
                        {
                            if (replacement == null)
                            {
                                PhysAddress = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                PhysAddress = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = PhysAddress;
                    break;
                }

                case Opc.Ua.BrowseNames.Speed:
                {
                    if (createOrReplace)
                    {
                        if (Speed == null)
                        {
                            if (replacement == null)
                            {
                                Speed = new AnalogUnitState<ulong>(this);
                            }
                            else
                            {
                                Speed = (AnalogUnitState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Speed;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<InterfaceAdminStatus> m_adminStatus;
        private BaseDataVariableState<InterfaceOperStatus> m_operStatus;
        private BaseDataVariableState<string> m_physAddress;
        private AnalogUnitState<ulong> m_speed;
        #endregion
    }
    #endif
    #endregion

    #region PriorityMappingTableState Class
    #if (!OPCUA_EXCLUDE_PriorityMappingTableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class PriorityMappingTableState : BaseObjectState
    {
        #region Constructors
        /// <remarks />
        public PriorityMappingTableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.PriorityMappingTableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddPriorityMappingEntry != null)
            {
                AddPriorityMappingEntry.Initialize(context, AddPriorityMappingEntry_InitializationString);
            }

            if (DeletePriorityMappingEntry != null)
            {
                DeletePriorityMappingEntry.Initialize(context, DeletePriorityMappingEntry_InitializationString);
            }
        }

        #region Initialization String
        private const string AddPriorityMappingEntry_InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAEFkZFByaW9yaXR5TWFwcGluZ0VudHJ5AQCNYgAvAQCNYo1iAAAB" +
           "Af////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAjmIALgBEjmIAAJYEAAAAAQAqAQEZ" +
           "AAAACgAAAE1hcHBpbmdVcmkADP////8AAAAAAAEAKgEBHAAAAA0AAABQcmlvcml0eUxhYmVsAAz/////" +
           "AAAAAAABACoBASAAAAARAAAAUHJpb3JpdHlWYWx1ZV9QQ1AAA/////8AAAAAAAEAKgEBIQAAABIAAABQ" +
           "cmlvcml0eVZhbHVlX0RTQ1AAB/////8AAAAAAAEAKAEBAAAAAQAAAAQAAAABAf////8AAAAA";

        private const string DeletePriorityMappingEntry_InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAERlbGV0ZVByaW9yaXR5TWFwcGluZ0VudHJ5AQCPYgAvAQCPYo9i" +
           "AAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAkGIALgBEkGIAAJYCAAAAAQAq" +
           "AQEZAAAACgAAAE1hcHBpbmdVcmkADP////8AAAAAAAEAKgEBHAAAAA0AAABQcmlvcml0eUxhYmVsAAz/" +
           "////AAAAAAABACgBAQAAAAEAAAACAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIACAQAAAAAAIAAAAFByaW9yaXR5TWFwcGluZ1RhYmxlVHlwZUluc3RhbmNlAQCLYgEA" +
           "i2KLYgAA/////wMAAAAXYIkKAgAAAAAAFwAAAFByaW9yaXR5TWFwcHBpbmdFbnRyaWVzAQCMYgAuAESM" +
           "YgAAAQCEYgEAAAABAAAAAAAAAAEB/////wAAAAAEYYIKBAAAAAAAFwAAAEFkZFByaW9yaXR5TWFwcGlu" +
           "Z0VudHJ5AQCNYgAvAQCNYo1iAAABAf////8BAAAAF2CpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "jmIALgBEjmIAAJYEAAAAAQAqAQEZAAAACgAAAE1hcHBpbmdVcmkADP////8AAAAAAAEAKgEBHAAAAA0A" +
           "AABQcmlvcml0eUxhYmVsAAz/////AAAAAAABACoBASAAAAARAAAAUHJpb3JpdHlWYWx1ZV9QQ1AAA///" +
           "//8AAAAAAAEAKgEBIQAAABIAAABQcmlvcml0eVZhbHVlX0RTQ1AAB/////8AAAAAAAEAKAEBAAAAAQAA" +
           "AAQAAAABAf////8AAAAABGGCCgQAAAAAABoAAABEZWxldGVQcmlvcml0eU1hcHBpbmdFbnRyeQEAj2IA" +
           "LwEAj2KPYgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJBiAC4ARJBiAACW" +
           "AgAAAAEAKgEBGQAAAAoAAABNYXBwaW5nVXJpAAz/////AAAAAAABACoBARwAAAANAAAAUHJpb3JpdHlM" +
           "YWJlbAAM/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<PriorityMappingEntryType[]> PriorityMapppingEntries
        {
            get
            {
                return m_priorityMapppingEntries;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priorityMapppingEntries, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priorityMapppingEntries = value;
            }
        }

        /// <remarks />
        public AddPriorityMappingEntryMethodState AddPriorityMappingEntry
        {
            get
            {
                return m_addPriorityMappingEntryMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addPriorityMappingEntryMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addPriorityMappingEntryMethod = value;
            }
        }

        /// <remarks />
        public DeletePriorityMappingEntryMethodState DeletePriorityMappingEntry
        {
            get
            {
                return m_deletePriorityMappingEntryMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deletePriorityMappingEntryMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deletePriorityMappingEntryMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_priorityMapppingEntries != null)
            {
                children.Add(m_priorityMapppingEntries);
            }

            if (m_addPriorityMappingEntryMethod != null)
            {
                children.Add(m_addPriorityMappingEntryMethod);
            }

            if (m_deletePriorityMappingEntryMethod != null)
            {
                children.Add(m_deletePriorityMappingEntryMethod);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.PriorityMapppingEntries:
                {
                    if (createOrReplace)
                    {
                        if (PriorityMapppingEntries == null)
                        {
                            if (replacement == null)
                            {
                                PriorityMapppingEntries = new PropertyState<PriorityMappingEntryType[]>(this);
                            }
                            else
                            {
                                PriorityMapppingEntries = (PropertyState<PriorityMappingEntryType[]>)replacement;
                            }
                        }
                    }

                    instance = PriorityMapppingEntries;
                    break;
                }

                case Opc.Ua.BrowseNames.AddPriorityMappingEntry:
                {
                    if (createOrReplace)
                    {
                        if (AddPriorityMappingEntry == null)
                        {
                            if (replacement == null)
                            {
                                AddPriorityMappingEntry = new AddPriorityMappingEntryMethodState(this);
                            }
                            else
                            {
                                AddPriorityMappingEntry = (AddPriorityMappingEntryMethodState)replacement;
                            }
                        }
                    }

                    instance = AddPriorityMappingEntry;
                    break;
                }

                case Opc.Ua.BrowseNames.DeletePriorityMappingEntry:
                {
                    if (createOrReplace)
                    {
                        if (DeletePriorityMappingEntry == null)
                        {
                            if (replacement == null)
                            {
                                DeletePriorityMappingEntry = new DeletePriorityMappingEntryMethodState(this);
                            }
                            else
                            {
                                DeletePriorityMappingEntry = (DeletePriorityMappingEntryMethodState)replacement;
                            }
                        }
                    }

                    instance = DeletePriorityMappingEntry;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<PriorityMappingEntryType[]> m_priorityMapppingEntries;
        private AddPriorityMappingEntryMethodState m_addPriorityMappingEntryMethod;
        private DeletePriorityMappingEntryMethodState m_deletePriorityMappingEntryMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddPriorityMappingEntryMethodState Class
    #if (!OPCUA_EXCLUDE_AddPriorityMappingEntryMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddPriorityMappingEntryMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public AddPriorityMappingEntryMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new AddPriorityMappingEntryMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIQAAAEFkZFByaW9yaXR5TWFwcGluZ0VudHJ5TWV0aG9kVHlwZQEAkWIA" +
           "LwEAkWKRYgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJJiAC4ARJJiAACW" +
           "BAAAAAEAKgEBGQAAAAoAAABNYXBwaW5nVXJpAAz/////AAAAAAABACoBARwAAAANAAAAUHJpb3JpdHlM" +
           "YWJlbAAM/////wAAAAAAAQAqAQEgAAAAEQAAAFByaW9yaXR5VmFsdWVfUENQAAP/////AAAAAAABACoB" +
           "ASEAAAASAAAAUHJpb3JpdHlWYWx1ZV9EU0NQAAf/////AAAAAAABACgBAQAAAAEAAAAEAAAAAQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public AddPriorityMappingEntryMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string mappingUri = (string)_inputArguments[0];
            string priorityLabel = (string)_inputArguments[1];
            byte priorityValue_PCP = (byte)_inputArguments[2];
            uint priorityValue_DSCP = (uint)_inputArguments[3];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    mappingUri,
                    priorityLabel,
                    priorityValue_PCP,
                    priorityValue_DSCP);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult AddPriorityMappingEntryMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string mappingUri,
        string priorityLabel,
        byte priorityValue_PCP,
        uint priorityValue_DSCP);
    #endif
    #endregion

    #region DeletePriorityMappingEntryMethodState Class
    #if (!OPCUA_EXCLUDE_DeletePriorityMappingEntryMethodState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeletePriorityMappingEntryMethodState : MethodState
    {
        #region Constructors
        /// <remarks />
        public DeletePriorityMappingEntryMethodState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        public new static NodeState Construct(NodeState parent)
        {
            return new DeletePriorityMappingEntryMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAJAAAAERlbGV0ZVByaW9yaXR5TWFwcGluZ0VudHJ5TWV0aG9kVHlwZQEA" +
           "k2IALwEAk2KTYgAAAQH/////AQAAABdgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJRiAC4ARJRi" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABNYXBwaW5nVXJpAAz/////AAAAAAABACoBARwAAAANAAAAUHJpb3Jp" +
           "dHlMYWJlbAAM/////wAAAAAAAQAoAQEAAAABAAAAAgAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <remarks />
        public DeletePriorityMappingEntryMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <remarks />
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult _result = null;

            string mappingUri = (string)_inputArguments[0];
            string priorityLabel = (string)_inputArguments[1];

            if (OnCall != null)
            {
                _result = OnCall(
                    _context,
                    this,
                    _objectId,
                    mappingUri,
                    priorityLabel);
            }

            return _result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <remarks />
    /// <exclude />
    public delegate ServiceResult DeletePriorityMappingEntryMethodStateMethodCallHandler(
        ISystemContext _context,
        MethodState _method,
        NodeId _objectId,
        string mappingUri,
        string priorityLabel);
    #endif
    #endregion

    #region ReferenceDescriptionVariableState Class
    #if (!OPCUA_EXCLUDE_ReferenceDescriptionVariableState)
    /// <remarks />
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReferenceDescriptionVariableState : BaseDataVariableState<Opc.Ua.ReferenceDescriptionDataType>
    {
        #region Constructors
        /// <remarks />
        public ReferenceDescriptionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <remarks />
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ReferenceDescriptionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ReferenceDescriptionDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <remarks />
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <remarks />
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <remarks />
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <remarks />
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ReferenceRefinement != null)
            {
                ReferenceRefinement.Initialize(context, ReferenceRefinement_InitializationString);
            }
        }

        #region Initialization String
        private const string ReferenceRefinement_InitializationString =
           "//////////8XYIkKAgAAAAAAEwAAAFJlZmVyZW5jZVJlZmluZW1lbnQBAJJ/AC4ARJJ/AAABAJR/AQAA" +
           "AAEAAAAAAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkCAgAAAAAAKAAAAFJlZmVyZW5jZURlc2NyaXB0aW9uVmFyaWFibGVUeXBlSW5zdGFu" +
           "Y2UBAJF/AQCRf5F/AAABAJN//////wEB/////wEAAAAXYIkKAgAAAAAAEwAAAFJlZmVyZW5jZVJlZmlu" +
           "ZW1lbnQBAJJ/AC4ARJJ/AAABAJR/AQAAAAEAAAAAAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ReferenceListEntryDataType[]> ReferenceRefinement
        {
            get
            {
                return m_referenceRefinement;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referenceRefinement, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referenceRefinement = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <remarks />
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referenceRefinement != null)
            {
                children.Add(m_referenceRefinement);
            }

            base.GetChildren(context, children);
        }
            
        /// <remarks />
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferenceRefinement:
                {
                    if (createOrReplace)
                    {
                        if (ReferenceRefinement == null)
                        {
                            if (replacement == null)
                            {
                                ReferenceRefinement = new PropertyState<ReferenceListEntryDataType[]>(this);
                            }
                            else
                            {
                                ReferenceRefinement = (PropertyState<ReferenceListEntryDataType[]>)replacement;
                            }
                        }
                    }

                    instance = ReferenceRefinement;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ReferenceListEntryDataType[]> m_referenceRefinement;
        #endregion
    }
    #endif
    #endregion
}
