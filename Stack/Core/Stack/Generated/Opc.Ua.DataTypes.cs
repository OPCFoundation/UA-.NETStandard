/* ========================================================================
 * Copyright (c) 2005-2013 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Xml;
using System.Runtime.Serialization;

namespace Opc.Ua
{
    #region Enumeration Enumeration
    #if (!OPCUA_EXCLUDE_Enumeration)
    /// <summary>
    /// Describes a value that is an enumerated DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum Enumeration
    {
    }

    #region EnumerationCollection Class
    /// <summary>
    /// A collection of Enumeration objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEnumeration", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "Enumeration")]
    public partial class EnumerationCollection : List<Enumeration>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EnumerationCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EnumerationCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EnumerationCollection(IEnumerable<Enumeration> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EnumerationCollection(Enumeration[] values)
        {
            if (values != null)
            {
                return new EnumerationCollection(values);
            }

            return new EnumerationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator Enumeration[](EnumerationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EnumerationCollection clone = new EnumerationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((Enumeration)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region NamingRuleType Enumeration
    #if (!OPCUA_EXCLUDE_NamingRuleType)
    /// <summary>
    /// Describes a value that specifies the significance of the BrowseName for an instance declaration.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum NamingRuleType
    {
        /// <summary>
        /// The BrowseName must appear in all instances of the type.
        /// </summary>
        [EnumMember(Value = "Mandatory_1")]
        Mandatory = 1,

        /// <summary>
        /// The BrowseName may appear in an instance of the type.
        /// </summary>
        [EnumMember(Value = "Optional_2")]
        Optional = 2,

        /// <summary>
        /// The modelling rule defines a constraint and the BrowseName is not used in an instance of the type.
        /// </summary>
        [EnumMember(Value = "Constraint_3")]
        Constraint = 3,
    }

    #region NamingRuleTypeCollection Class
    /// <summary>
    /// A collection of NamingRuleType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfNamingRuleType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "NamingRuleType")]
    public partial class NamingRuleTypeCollection : List<NamingRuleType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public NamingRuleTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public NamingRuleTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public NamingRuleTypeCollection(IEnumerable<NamingRuleType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator NamingRuleTypeCollection(NamingRuleType[] values)
        {
            if (values != null)
            {
                return new NamingRuleTypeCollection(values);
            }

            return new NamingRuleTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator NamingRuleType[](NamingRuleTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            NamingRuleTypeCollection clone = new NamingRuleTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((NamingRuleType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region OpenFileMode Enumeration
    #if (!OPCUA_EXCLUDE_OpenFileMode)
    /// <summary>
    /// A description for the OpenFileMode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum OpenFileMode
    {
        /// <summary>
        /// A description for the Read field.
        /// </summary>
        [EnumMember(Value = "Read_1")]
        Read = 1,

        /// <summary>
        /// A description for the Write field.
        /// </summary>
        [EnumMember(Value = "Write_2")]
        Write = 2,

        /// <summary>
        /// A description for the EraseExisiting field.
        /// </summary>
        [EnumMember(Value = "EraseExisiting_4")]
        EraseExisiting = 4,

        /// <summary>
        /// A description for the Append field.
        /// </summary>
        [EnumMember(Value = "Append_8")]
        Append = 8,
    }

    #region OpenFileModeCollection Class
    /// <summary>
    /// A collection of OpenFileMode objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfOpenFileMode", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "OpenFileMode")]
    public partial class OpenFileModeCollection : List<OpenFileMode>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public OpenFileModeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public OpenFileModeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public OpenFileModeCollection(IEnumerable<OpenFileMode> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator OpenFileModeCollection(OpenFileMode[] values)
        {
            if (values != null)
            {
                return new OpenFileModeCollection(values);
            }

            return new OpenFileModeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator OpenFileMode[](OpenFileModeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            OpenFileModeCollection clone = new OpenFileModeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((OpenFileMode)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region IdType Enumeration
    #if (!OPCUA_EXCLUDE_IdType)
    /// <summary>
    /// The type of identifier used in a node id.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum IdType
    {
        /// <summary>
        /// The identifier is a numeric value. 0 is a null value.
        /// </summary>
        [EnumMember(Value = "Numeric_0")]
        Numeric = 0,

        /// <summary>
        /// The identifier is a string value. An empty string is a null value.
        /// </summary>
        [EnumMember(Value = "String_1")]
        String = 1,

        /// <summary>
        /// The identifier is a 16 byte structure. 16 zero bytes is a null value.
        /// </summary>
        [EnumMember(Value = "Guid_2")]
        Guid = 2,

        /// <summary>
        /// The identifier is an array of bytes. A zero length array is a null value.
        /// </summary>
        [EnumMember(Value = "Opaque_3")]
        Opaque = 3,
    }

    #region IdTypeCollection Class
    /// <summary>
    /// A collection of IdType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfIdType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "IdType")]
    public partial class IdTypeCollection : List<IdType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public IdTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public IdTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public IdTypeCollection(IEnumerable<IdType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator IdTypeCollection(IdType[] values)
        {
            if (values != null)
            {
                return new IdTypeCollection(values);
            }

            return new IdTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator IdType[](IdTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            IdTypeCollection clone = new IdTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((IdType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region NodeClass Enumeration
    #if (!OPCUA_EXCLUDE_NodeClass)
    /// <summary>
    /// A mask specifying the class of the node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum NodeClass
    {
        /// <summary>
        /// No classes are selected.
        /// </summary>
        [EnumMember(Value = "Unspecified_0")]
        Unspecified = 0,

        /// <summary>
        /// The node is an object.
        /// </summary>
        [EnumMember(Value = "Object_1")]
        Object = 1,

        /// <summary>
        /// The node is a variable.
        /// </summary>
        [EnumMember(Value = "Variable_2")]
        Variable = 2,

        /// <summary>
        /// The node is a method.
        /// </summary>
        [EnumMember(Value = "Method_4")]
        Method = 4,

        /// <summary>
        /// The node is an object type.
        /// </summary>
        [EnumMember(Value = "ObjectType_8")]
        ObjectType = 8,

        /// <summary>
        /// The node is an variable type.
        /// </summary>
        [EnumMember(Value = "VariableType_16")]
        VariableType = 16,

        /// <summary>
        /// The node is a reference type.
        /// </summary>
        [EnumMember(Value = "ReferenceType_32")]
        ReferenceType = 32,

        /// <summary>
        /// The node is a data type.
        /// </summary>
        [EnumMember(Value = "DataType_64")]
        DataType = 64,

        /// <summary>
        /// The node is a view.
        /// </summary>
        [EnumMember(Value = "View_128")]
        View = 128,
    }
    #endif
    #endregion

    #region Node Class
    #if (!OPCUA_EXCLUDE_Node)
    /// <summary>
    /// Specifies the attributes which belong to all nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class Node : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public Node()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_nodeClass = NodeClass.Unspecified;
            m_browseName = null;
            m_displayName = null;
            m_description = null;
            m_writeMask = (uint)0;
            m_userWriteMask = (uint)0;
            m_references = new ReferenceNodeCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A unique identifier for the node.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// The class of the node.
        /// </summary>
        [DataMember(Name = "NodeClass", IsRequired = false, Order = 2)]
        public NodeClass NodeClass
        {
            get { return m_nodeClass;  }
            set { m_nodeClass = value; }
        }

        /// <summary>
        /// The browse name of the node.
        /// </summary>
        [DataMember(Name = "BrowseName", IsRequired = false, Order = 3)]
        public QualifiedName BrowseName
        {
            get { return m_browseName;  }
            set { m_browseName = value; }
        }

        /// <summary>
        /// The display name of the node.
        /// </summary>
        [DataMember(Name = "DisplayName", IsRequired = false, Order = 4)]
        public LocalizedText DisplayName
        {
            get { return m_displayName;  }
            set { m_displayName = value; }
        }

        /// <summary>
        /// The description of the node.
        /// </summary>
        [DataMember(Name = "Description", IsRequired = false, Order = 5)]
        public LocalizedText Description
        {
            get { return m_description;  }
            set { m_description = value; }
        }

        /// <summary>
        /// A mask indicating which attributes are writeable.
        /// </summary>
        [DataMember(Name = "WriteMask", IsRequired = false, Order = 6)]
        public uint WriteMask
        {
            get { return m_writeMask;  }
            set { m_writeMask = value; }
        }

        /// <summary>
        /// A mask indicating which attributes are writeable by the current user.
        /// </summary>
        [DataMember(Name = "UserWriteMask", IsRequired = false, Order = 7)]
        public uint UserWriteMask
        {
            get { return m_userWriteMask;  }
            set { m_userWriteMask = value; }
        }

        /// <summary>
        /// The references that belong to the node.
        /// </summary>
        [DataMember(Name = "References", IsRequired = false, Order = 8)]
        public ReferenceNodeCollection References
        {
            get
            {
                return m_references;
            }

            set
            {
                m_references = value;

                if (value == null)
                {
                    m_references = new ReferenceNodeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.Node; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.Node_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.Node_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteEnumerated("NodeClass", NodeClass);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteUInt32("WriteMask", WriteMask);
            encoder.WriteUInt32("UserWriteMask", UserWriteMask);
            encoder.WriteEncodeableArray("References", References.ToArray(), typeof(ReferenceNode));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            NodeClass = (NodeClass)decoder.ReadEnumerated("NodeClass", typeof(NodeClass));
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            WriteMask = decoder.ReadUInt32("WriteMask");
            UserWriteMask = decoder.ReadUInt32("UserWriteMask");
            References = (ReferenceNodeCollection)decoder.ReadEncodeableArray("References", typeof(ReferenceNode));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            Node value = encodeable as Node;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_nodeClass, value.m_nodeClass)) return false;
            if (!Utils.IsEqual(m_browseName, value.m_browseName)) return false;
            if (!Utils.IsEqual(m_displayName, value.m_displayName)) return false;
            if (!Utils.IsEqual(m_description, value.m_description)) return false;
            if (!Utils.IsEqual(m_writeMask, value.m_writeMask)) return false;
            if (!Utils.IsEqual(m_userWriteMask, value.m_userWriteMask)) return false;
            if (!Utils.IsEqual(m_references, value.m_references)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            Node clone = new Node();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_nodeClass = (NodeClass)Utils.Clone(this.m_nodeClass);
            clone.m_browseName = (QualifiedName)Utils.Clone(this.m_browseName);
            clone.m_displayName = (LocalizedText)Utils.Clone(this.m_displayName);
            clone.m_description = (LocalizedText)Utils.Clone(this.m_description);
            clone.m_writeMask = (uint)Utils.Clone(this.m_writeMask);
            clone.m_userWriteMask = (uint)Utils.Clone(this.m_userWriteMask);
            clone.m_references = (ReferenceNodeCollection)Utils.Clone(this.m_references);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private NodeClass m_nodeClass;
        private QualifiedName m_browseName;
        private LocalizedText m_displayName;
        private LocalizedText m_description;
        private uint m_writeMask;
        private uint m_userWriteMask;
        private ReferenceNodeCollection m_references;
        #endregion
    }

    #region NodeCollection Class
    /// <summary>
    /// A collection of Node objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfNode", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "Node")]
    public partial class NodeCollection : List<Node>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public NodeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public NodeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public NodeCollection(IEnumerable<Node> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator NodeCollection(Node[] values)
        {
            if (values != null)
            {
                return new NodeCollection(values);
            }

            return new NodeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator Node[](NodeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            NodeCollection clone = new NodeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((Node)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region InstanceNode Class
    #if (!OPCUA_EXCLUDE_InstanceNode)
    /// <summary>
    /// A description for the InstanceNode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class InstanceNode : Node
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public InstanceNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.InstanceNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.InstanceNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.InstanceNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            InstanceNode value = encodeable as InstanceNode;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TypeNode Class
    #if (!OPCUA_EXCLUDE_TypeNode)
    /// <summary>
    /// A description for the TypeNode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TypeNode : Node
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TypeNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TypeNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TypeNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TypeNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TypeNode value = encodeable as TypeNode;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ObjectNode Class
    #if (!OPCUA_EXCLUDE_ObjectNode)
    /// <summary>
    /// Specifies the attributes which belong to object nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ObjectNode : InstanceNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ObjectNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_eventNotifier = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A mask indicating whether events are produced by the object.
        /// </summary>
        [DataMember(Name = "EventNotifier", IsRequired = false, Order = 1)]
        public byte EventNotifier
        {
            get { return m_eventNotifier;  }
            set { m_eventNotifier = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ObjectNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ObjectNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ObjectNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByte("EventNotifier", EventNotifier);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EventNotifier = decoder.ReadByte("EventNotifier");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ObjectNode value = encodeable as ObjectNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_eventNotifier, value.m_eventNotifier)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ObjectNode clone = (ObjectNode)base.MemberwiseClone();

            clone.m_eventNotifier = (byte)Utils.Clone(this.m_eventNotifier);

            return clone;
        }
        #endregion

        #region Private Fields
        private byte m_eventNotifier;
        #endregion
    }
    #endif
    #endregion

    #region ObjectTypeNode Class
    #if (!OPCUA_EXCLUDE_ObjectTypeNode)
    /// <summary>
    /// Specifies the attributes which belong to object type nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ObjectTypeNode : TypeNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ObjectTypeNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ObjectTypeNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ObjectTypeNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ObjectTypeNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ObjectTypeNode value = encodeable as ObjectTypeNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ObjectTypeNode clone = (ObjectTypeNode)base.MemberwiseClone();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region VariableNode Class
    #if (!OPCUA_EXCLUDE_VariableNode)
    /// <summary>
    /// Specifies the attributes which belong to variable nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class VariableNode : InstanceNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public VariableNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = Variant.Null;
            m_dataType = null;
            m_valueRank = (int)0;
            m_arrayDimensions = new UInt32Collection();
            m_accessLevel = (byte)0;
            m_userAccessLevel = (byte)0;
            m_minimumSamplingInterval = (double)0;
            m_historizing = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The current value.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public Variant Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }

        /// <summary>
        /// The data type of the value.
        /// </summary>
        [DataMember(Name = "DataType", IsRequired = false, Order = 2)]
        public NodeId DataType
        {
            get { return m_dataType;  }
            set { m_dataType = value; }
        }

        /// <summary>
        /// Whether the value is an array type and the rank of the array if it is.
        /// </summary>
        [DataMember(Name = "ValueRank", IsRequired = false, Order = 3)]
        public int ValueRank
        {
            get { return m_valueRank;  }
            set { m_valueRank = value; }
        }

        /// <summary>
        /// The number of dimensions if the value is an array type and one or more dimensions have a fixed length.
        /// </summary>
        [DataMember(Name = "ArrayDimensions", IsRequired = false, Order = 4)]
        public UInt32Collection ArrayDimensions
        {
            get
            {
                return m_arrayDimensions;
            }

            set
            {
                m_arrayDimensions = value;

                if (value == null)
                {
                    m_arrayDimensions = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A bit mask specifying how the value may be accessed.
        /// </summary>
        [DataMember(Name = "AccessLevel", IsRequired = false, Order = 5)]
        public byte AccessLevel
        {
            get { return m_accessLevel;  }
            set { m_accessLevel = value; }
        }

        /// <summary>
        /// A bit mask specifying how the value may be accessed by the current user.
        /// </summary>
        [DataMember(Name = "UserAccessLevel", IsRequired = false, Order = 6)]
        public byte UserAccessLevel
        {
            get { return m_userAccessLevel;  }
            set { m_userAccessLevel = value; }
        }

        /// <summary>
        /// The minimum possible sampling interval for the value.
        /// </summary>
        [DataMember(Name = "MinimumSamplingInterval", IsRequired = false, Order = 7)]
        public double MinimumSamplingInterval
        {
            get { return m_minimumSamplingInterval;  }
            set { m_minimumSamplingInterval = value; }
        }

        /// <summary>
        /// TRUE if the server is current storing the history of the value.
        /// </summary>
        [DataMember(Name = "Historizing", IsRequired = false, Order = 8)]
        public bool Historizing
        {
            get { return m_historizing;  }
            set { m_historizing = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.VariableNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.VariableNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.VariableNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteByte("AccessLevel", AccessLevel);
            encoder.WriteByte("UserAccessLevel", UserAccessLevel);
            encoder.WriteDouble("MinimumSamplingInterval", MinimumSamplingInterval);
            encoder.WriteBoolean("Historizing", Historizing);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            AccessLevel = decoder.ReadByte("AccessLevel");
            UserAccessLevel = decoder.ReadByte("UserAccessLevel");
            MinimumSamplingInterval = decoder.ReadDouble("MinimumSamplingInterval");
            Historizing = decoder.ReadBoolean("Historizing");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            VariableNode value = encodeable as VariableNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;
            if (!Utils.IsEqual(m_dataType, value.m_dataType)) return false;
            if (!Utils.IsEqual(m_valueRank, value.m_valueRank)) return false;
            if (!Utils.IsEqual(m_arrayDimensions, value.m_arrayDimensions)) return false;
            if (!Utils.IsEqual(m_accessLevel, value.m_accessLevel)) return false;
            if (!Utils.IsEqual(m_userAccessLevel, value.m_userAccessLevel)) return false;
            if (!Utils.IsEqual(m_minimumSamplingInterval, value.m_minimumSamplingInterval)) return false;
            if (!Utils.IsEqual(m_historizing, value.m_historizing)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            VariableNode clone = (VariableNode)base.MemberwiseClone();

            clone.m_value = (Variant)Utils.Clone(this.m_value);
            clone.m_dataType = (NodeId)Utils.Clone(this.m_dataType);
            clone.m_valueRank = (int)Utils.Clone(this.m_valueRank);
            clone.m_arrayDimensions = (UInt32Collection)Utils.Clone(this.m_arrayDimensions);
            clone.m_accessLevel = (byte)Utils.Clone(this.m_accessLevel);
            clone.m_userAccessLevel = (byte)Utils.Clone(this.m_userAccessLevel);
            clone.m_minimumSamplingInterval = (double)Utils.Clone(this.m_minimumSamplingInterval);
            clone.m_historizing = (bool)Utils.Clone(this.m_historizing);

            return clone;
        }
        #endregion

        #region Private Fields
        private Variant m_value;
        private NodeId m_dataType;
        private int m_valueRank;
        private UInt32Collection m_arrayDimensions;
        private byte m_accessLevel;
        private byte m_userAccessLevel;
        private double m_minimumSamplingInterval;
        private bool m_historizing;
        #endregion
    }
    #endif
    #endregion

    #region VariableTypeNode Class
    #if (!OPCUA_EXCLUDE_VariableTypeNode)
    /// <summary>
    /// Specifies the attributes which belong to variable type nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class VariableTypeNode : TypeNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public VariableTypeNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = Variant.Null;
            m_dataType = null;
            m_valueRank = (int)0;
            m_arrayDimensions = new UInt32Collection();
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The default value when creating new instances.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public Variant Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }

        /// <summary>
        /// The data type of the value.
        /// </summary>
        [DataMember(Name = "DataType", IsRequired = false, Order = 2)]
        public NodeId DataType
        {
            get { return m_dataType;  }
            set { m_dataType = value; }
        }

        /// <summary>
        /// Whether the value is an array type and the rank of the array if it is.
        /// </summary>
        [DataMember(Name = "ValueRank", IsRequired = false, Order = 3)]
        public int ValueRank
        {
            get { return m_valueRank;  }
            set { m_valueRank = value; }
        }

        /// <summary>
        /// The number of dimensions if the value is an array type and one or more dimensions have a fixed length.
        /// </summary>
        [DataMember(Name = "ArrayDimensions", IsRequired = false, Order = 4)]
        public UInt32Collection ArrayDimensions
        {
            get
            {
                return m_arrayDimensions;
            }

            set
            {
                m_arrayDimensions = value;

                if (value == null)
                {
                    m_arrayDimensions = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 5)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.VariableTypeNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.VariableTypeNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.VariableTypeNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            VariableTypeNode value = encodeable as VariableTypeNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;
            if (!Utils.IsEqual(m_dataType, value.m_dataType)) return false;
            if (!Utils.IsEqual(m_valueRank, value.m_valueRank)) return false;
            if (!Utils.IsEqual(m_arrayDimensions, value.m_arrayDimensions)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            VariableTypeNode clone = (VariableTypeNode)base.MemberwiseClone();

            clone.m_value = (Variant)Utils.Clone(this.m_value);
            clone.m_dataType = (NodeId)Utils.Clone(this.m_dataType);
            clone.m_valueRank = (int)Utils.Clone(this.m_valueRank);
            clone.m_arrayDimensions = (UInt32Collection)Utils.Clone(this.m_arrayDimensions);
            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private Variant m_value;
        private NodeId m_dataType;
        private int m_valueRank;
        private UInt32Collection m_arrayDimensions;
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region ReferenceTypeNode Class
    #if (!OPCUA_EXCLUDE_ReferenceTypeNode)
    /// <summary>
    /// Specifies the attributes which belong to reference type nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReferenceTypeNode : TypeNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReferenceTypeNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
            m_symmetric = true;
            m_inverseName = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }

        /// <summary>
        /// If TRUE the reference type has the same semantics in both directions.
        /// </summary>
        [DataMember(Name = "Symmetric", IsRequired = false, Order = 2)]
        public bool Symmetric
        {
            get { return m_symmetric;  }
            set { m_symmetric = value; }
        }

        /// <summary>
        /// The display name for the reference when following it from target to source.
        /// </summary>
        [DataMember(Name = "InverseName", IsRequired = false, Order = 3)]
        public LocalizedText InverseName
        {
            get { return m_inverseName;  }
            set { m_inverseName = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReferenceTypeNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReferenceTypeNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReferenceTypeNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.WriteBoolean("Symmetric", Symmetric);
            encoder.WriteLocalizedText("InverseName", InverseName);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");
            Symmetric = decoder.ReadBoolean("Symmetric");
            InverseName = decoder.ReadLocalizedText("InverseName");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReferenceTypeNode value = encodeable as ReferenceTypeNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;
            if (!Utils.IsEqual(m_symmetric, value.m_symmetric)) return false;
            if (!Utils.IsEqual(m_inverseName, value.m_inverseName)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReferenceTypeNode clone = (ReferenceTypeNode)base.MemberwiseClone();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);
            clone.m_symmetric = (bool)Utils.Clone(this.m_symmetric);
            clone.m_inverseName = (LocalizedText)Utils.Clone(this.m_inverseName);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        private bool m_symmetric;
        private LocalizedText m_inverseName;
        #endregion
    }
    #endif
    #endregion

    #region MethodNode Class
    #if (!OPCUA_EXCLUDE_MethodNode)
    /// <summary>
    /// Specifies the attributes which belong to method nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MethodNode : InstanceNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MethodNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_executable = true;
            m_userExecutable = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the method can be called.
        /// </summary>
        [DataMember(Name = "Executable", IsRequired = false, Order = 1)]
        public bool Executable
        {
            get { return m_executable;  }
            set { m_executable = value; }
        }

        /// <summary>
        /// If TRUE the method can be called by the current user.
        /// </summary>
        [DataMember(Name = "UserExecutable", IsRequired = false, Order = 2)]
        public bool UserExecutable
        {
            get { return m_userExecutable;  }
            set { m_userExecutable = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MethodNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MethodNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MethodNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("Executable", Executable);
            encoder.WriteBoolean("UserExecutable", UserExecutable);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Executable = decoder.ReadBoolean("Executable");
            UserExecutable = decoder.ReadBoolean("UserExecutable");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MethodNode value = encodeable as MethodNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_executable, value.m_executable)) return false;
            if (!Utils.IsEqual(m_userExecutable, value.m_userExecutable)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MethodNode clone = (MethodNode)base.MemberwiseClone();

            clone.m_executable = (bool)Utils.Clone(this.m_executable);
            clone.m_userExecutable = (bool)Utils.Clone(this.m_userExecutable);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_executable;
        private bool m_userExecutable;
        #endregion
    }
    #endif
    #endregion

    #region ViewNode Class
    #if (!OPCUA_EXCLUDE_ViewNode)
    /// <summary>
    /// A description for the ViewNode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ViewNode : InstanceNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ViewNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_containsNoLoops = true;
            m_eventNotifier = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the view contains a tree of non-looping hierarchical references.
        /// </summary>
        [DataMember(Name = "ContainsNoLoops", IsRequired = false, Order = 1)]
        public bool ContainsNoLoops
        {
            get { return m_containsNoLoops;  }
            set { m_containsNoLoops = value; }
        }

        /// <summary>
        /// A mask indicating whether events are produced by the view.
        /// </summary>
        [DataMember(Name = "EventNotifier", IsRequired = false, Order = 2)]
        public byte EventNotifier
        {
            get { return m_eventNotifier;  }
            set { m_eventNotifier = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ViewNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ViewNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ViewNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("ContainsNoLoops", ContainsNoLoops);
            encoder.WriteByte("EventNotifier", EventNotifier);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ContainsNoLoops = decoder.ReadBoolean("ContainsNoLoops");
            EventNotifier = decoder.ReadByte("EventNotifier");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ViewNode value = encodeable as ViewNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_containsNoLoops, value.m_containsNoLoops)) return false;
            if (!Utils.IsEqual(m_eventNotifier, value.m_eventNotifier)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ViewNode clone = (ViewNode)base.MemberwiseClone();

            clone.m_containsNoLoops = (bool)Utils.Clone(this.m_containsNoLoops);
            clone.m_eventNotifier = (byte)Utils.Clone(this.m_eventNotifier);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_containsNoLoops;
        private byte m_eventNotifier;
        #endregion
    }
    #endif
    #endregion

    #region DataTypeNode Class
    #if (!OPCUA_EXCLUDE_DataTypeNode)
    /// <summary>
    /// A description for the DataTypeNode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DataTypeNode : TypeNode
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DataTypeNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataTypeNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataTypeNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataTypeNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataTypeNode value = encodeable as DataTypeNode;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DataTypeNode clone = (DataTypeNode)base.MemberwiseClone();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region ReferenceNode Class
    #if (!OPCUA_EXCLUDE_ReferenceNode)
    /// <summary>
    /// Specifies a reference which belongs to a node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReferenceNode : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReferenceNode()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_referenceTypeId = null;
            m_isInverse = true;
            m_targetId = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The node id of the reference type for the reference.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 1)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// The reference is an inverse reference.
        /// </summary>
        [DataMember(Name = "IsInverse", IsRequired = false, Order = 2)]
        public bool IsInverse
        {
            get { return m_isInverse;  }
            set { m_isInverse = value; }
        }

        /// <summary>
        /// The node id for the target of the reference.
        /// </summary>
        [DataMember(Name = "TargetId", IsRequired = false, Order = 3)]
        public ExpandedNodeId TargetId
        {
            get { return m_targetId;  }
            set { m_targetId = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReferenceNode; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReferenceNode_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReferenceNode_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsInverse", IsInverse);
            encoder.WriteExpandedNodeId("TargetId", TargetId);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsInverse = decoder.ReadBoolean("IsInverse");
            TargetId = decoder.ReadExpandedNodeId("TargetId");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReferenceNode value = encodeable as ReferenceNode;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isInverse, value.m_isInverse)) return false;
            if (!Utils.IsEqual(m_targetId, value.m_targetId)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReferenceNode clone = new ReferenceNode();

            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isInverse = (bool)Utils.Clone(this.m_isInverse);
            clone.m_targetId = (ExpandedNodeId)Utils.Clone(this.m_targetId);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_referenceTypeId;
        private bool m_isInverse;
        private ExpandedNodeId m_targetId;
        #endregion
    }

    #region ReferenceNodeCollection Class
    /// <summary>
    /// A collection of ReferenceNode objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfReferenceNode", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ReferenceNode")]
    public partial class ReferenceNodeCollection : List<ReferenceNode>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ReferenceNodeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ReferenceNodeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ReferenceNodeCollection(IEnumerable<ReferenceNode> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ReferenceNodeCollection(ReferenceNode[] values)
        {
            if (values != null)
            {
                return new ReferenceNodeCollection(values);
            }

            return new ReferenceNodeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ReferenceNode[](ReferenceNodeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ReferenceNodeCollection clone = new ReferenceNodeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ReferenceNode)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region Argument Class
    #if (!OPCUA_EXCLUDE_Argument)
    /// <summary>
    /// An argument for a method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class Argument : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public Argument()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_name = null;
            m_dataType = null;
            m_valueRank = (int)0;
            m_arrayDimensions = new UInt32Collection();
            m_description = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The name of the argument.
        /// </summary>
        [DataMember(Name = "Name", IsRequired = false, Order = 1)]
        public string Name
        {
            get { return m_name;  }
            set { m_name = value; }
        }

        /// <summary>
        /// The data type of the argument.
        /// </summary>
        [DataMember(Name = "DataType", IsRequired = false, Order = 2)]
        public NodeId DataType
        {
            get { return m_dataType;  }
            set { m_dataType = value; }
        }

        /// <summary>
        /// Whether the argument is an array type and the rank of the array if it is.
        /// </summary>
        [DataMember(Name = "ValueRank", IsRequired = false, Order = 3)]
        public int ValueRank
        {
            get { return m_valueRank;  }
            set { m_valueRank = value; }
        }

        /// <summary>
        /// The number of dimensions if the argument is an array type and one or more dimensions have a fixed length.
        /// </summary>
        [DataMember(Name = "ArrayDimensions", IsRequired = false, Order = 4)]
        public UInt32Collection ArrayDimensions
        {
            get
            {
                return m_arrayDimensions;
            }

            set
            {
                m_arrayDimensions = value;

                if (value == null)
                {
                    m_arrayDimensions = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// The description for the argument.
        /// </summary>
        [DataMember(Name = "Description", IsRequired = false, Order = 5)]
        public LocalizedText Description
        {
            get { return m_description;  }
            set { m_description = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.Argument; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.Argument_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.Argument_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("Name", Name);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteLocalizedText("Description", Description);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Name = decoder.ReadString("Name");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            Description = decoder.ReadLocalizedText("Description");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            Argument value = encodeable as Argument;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_name, value.m_name)) return false;
            if (!Utils.IsEqual(m_dataType, value.m_dataType)) return false;
            if (!Utils.IsEqual(m_valueRank, value.m_valueRank)) return false;
            if (!Utils.IsEqual(m_arrayDimensions, value.m_arrayDimensions)) return false;
            if (!Utils.IsEqual(m_description, value.m_description)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            Argument clone = new Argument();

            clone.m_name = (string)Utils.Clone(this.m_name);
            clone.m_dataType = (NodeId)Utils.Clone(this.m_dataType);
            clone.m_valueRank = (int)Utils.Clone(this.m_valueRank);
            clone.m_arrayDimensions = (UInt32Collection)Utils.Clone(this.m_arrayDimensions);
            clone.m_description = (LocalizedText)Utils.Clone(this.m_description);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_name;
        private NodeId m_dataType;
        private int m_valueRank;
        private UInt32Collection m_arrayDimensions;
        private LocalizedText m_description;
        #endregion
    }

    #region ArgumentCollection Class
    /// <summary>
    /// A collection of Argument objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfArgument", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "Argument")]
    public partial class ArgumentCollection : List<Argument>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ArgumentCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ArgumentCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ArgumentCollection(IEnumerable<Argument> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ArgumentCollection(Argument[] values)
        {
            if (values != null)
            {
                return new ArgumentCollection(values);
            }

            return new ArgumentCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator Argument[](ArgumentCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ArgumentCollection clone = new ArgumentCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((Argument)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region EnumValueType Class
    #if (!OPCUA_EXCLUDE_EnumValueType)
    /// <summary>
    /// A mapping between a value of an enumerated type and a name and description.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EnumValueType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EnumValueType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = (long)0;
            m_displayName = null;
            m_description = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The value of the enumeration.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public long Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }

        /// <summary>
        /// Human readable name for the value.
        /// </summary>
        [DataMember(Name = "DisplayName", IsRequired = false, Order = 2)]
        public LocalizedText DisplayName
        {
            get { return m_displayName;  }
            set { m_displayName = value; }
        }

        /// <summary>
        /// A description of the value.
        /// </summary>
        [DataMember(Name = "Description", IsRequired = false, Order = 3)]
        public LocalizedText Description
        {
            get { return m_description;  }
            set { m_description = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EnumValueType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EnumValueType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EnumValueType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteInt64("Value", Value);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadInt64("Value");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EnumValueType value = encodeable as EnumValueType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_value, value.m_value)) return false;
            if (!Utils.IsEqual(m_displayName, value.m_displayName)) return false;
            if (!Utils.IsEqual(m_description, value.m_description)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EnumValueType clone = new EnumValueType();

            clone.m_value = (long)Utils.Clone(this.m_value);
            clone.m_displayName = (LocalizedText)Utils.Clone(this.m_displayName);
            clone.m_description = (LocalizedText)Utils.Clone(this.m_description);

            return clone;
        }
        #endregion

        #region Private Fields
        private long m_value;
        private LocalizedText m_displayName;
        private LocalizedText m_description;
        #endregion
    }

    #region EnumValueTypeCollection Class
    /// <summary>
    /// A collection of EnumValueType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEnumValueType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EnumValueType")]
    public partial class EnumValueTypeCollection : List<EnumValueType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EnumValueTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EnumValueTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EnumValueTypeCollection(IEnumerable<EnumValueType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EnumValueTypeCollection(EnumValueType[] values)
        {
            if (values != null)
            {
                return new EnumValueTypeCollection(values);
            }

            return new EnumValueTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EnumValueType[](EnumValueTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EnumValueTypeCollection clone = new EnumValueTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EnumValueType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region TimeZoneDataType Class
    #if (!OPCUA_EXCLUDE_TimeZoneDataType)
    /// <summary>
    /// A description for the TimeZoneDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TimeZoneDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TimeZoneDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_offset = (short)0;
            m_daylightSavingInOffset = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Offset field.
        /// </summary>
        [DataMember(Name = "Offset", IsRequired = false, Order = 1)]
        public short Offset
        {
            get { return m_offset;  }
            set { m_offset = value; }
        }

        /// <summary>
        /// A description for the DaylightSavingInOffset field.
        /// </summary>
        [DataMember(Name = "DaylightSavingInOffset", IsRequired = false, Order = 2)]
        public bool DaylightSavingInOffset
        {
            get { return m_daylightSavingInOffset;  }
            set { m_daylightSavingInOffset = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TimeZoneDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TimeZoneDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TimeZoneDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteInt16("Offset", Offset);
            encoder.WriteBoolean("DaylightSavingInOffset", DaylightSavingInOffset);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Offset = decoder.ReadInt16("Offset");
            DaylightSavingInOffset = decoder.ReadBoolean("DaylightSavingInOffset");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TimeZoneDataType value = encodeable as TimeZoneDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_offset, value.m_offset)) return false;
            if (!Utils.IsEqual(m_daylightSavingInOffset, value.m_daylightSavingInOffset)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TimeZoneDataType clone = new TimeZoneDataType();

            clone.m_offset = (short)Utils.Clone(this.m_offset);
            clone.m_daylightSavingInOffset = (bool)Utils.Clone(this.m_daylightSavingInOffset);

            return clone;
        }
        #endregion

        #region Private Fields
        private short m_offset;
        private bool m_daylightSavingInOffset;
        #endregion
    }

    #region TimeZoneDataTypeCollection Class
    /// <summary>
    /// A collection of TimeZoneDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfTimeZoneDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "TimeZoneDataType")]
    public partial class TimeZoneDataTypeCollection : List<TimeZoneDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public TimeZoneDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public TimeZoneDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public TimeZoneDataTypeCollection(IEnumerable<TimeZoneDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator TimeZoneDataTypeCollection(TimeZoneDataType[] values)
        {
            if (values != null)
            {
                return new TimeZoneDataTypeCollection(values);
            }

            return new TimeZoneDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator TimeZoneDataType[](TimeZoneDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            TimeZoneDataTypeCollection clone = new TimeZoneDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((TimeZoneDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ApplicationType Enumeration
    #if (!OPCUA_EXCLUDE_ApplicationType)
    /// <summary>
    /// The types of applications.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum ApplicationType
    {
        /// <summary>
        /// The application is a server.
        /// </summary>
        [EnumMember(Value = "Server_0")]
        Server = 0,

        /// <summary>
        /// The application is a client.
        /// </summary>
        [EnumMember(Value = "Client_1")]
        Client = 1,

        /// <summary>
        /// The application is a client and a server.
        /// </summary>
        [EnumMember(Value = "ClientAndServer_2")]
        ClientAndServer = 2,

        /// <summary>
        /// The application is a discovery server.
        /// </summary>
        [EnumMember(Value = "DiscoveryServer_3")]
        DiscoveryServer = 3,
    }
    #endif
    #endregion

    #region ApplicationDescription Class
    #if (!OPCUA_EXCLUDE_ApplicationDescription)
    /// <summary>
    /// Describes an application and how to find it.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ApplicationDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ApplicationDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_applicationUri = null;
            m_productUri = null;
            m_applicationName = null;
            m_applicationType = ApplicationType.Server;
            m_gatewayServerUri = null;
            m_discoveryProfileUri = null;
            m_discoveryUrls = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The globally unique identifier for the application.
        /// </summary>
        [DataMember(Name = "ApplicationUri", IsRequired = false, Order = 1)]
        public string ApplicationUri
        {
            get { return m_applicationUri;  }
            set { m_applicationUri = value; }
        }

        /// <summary>
        /// The globally unique identifier for the product.
        /// </summary>
        [DataMember(Name = "ProductUri", IsRequired = false, Order = 2)]
        public string ProductUri
        {
            get { return m_productUri;  }
            set { m_productUri = value; }
        }

        /// <summary>
        /// The name of application.
        /// </summary>
        [DataMember(Name = "ApplicationName", IsRequired = false, Order = 3)]
        public LocalizedText ApplicationName
        {
            get { return m_applicationName;  }
            set { m_applicationName = value; }
        }

        /// <summary>
        /// The type of application.
        /// </summary>
        [DataMember(Name = "ApplicationType", IsRequired = false, Order = 4)]
        public ApplicationType ApplicationType
        {
            get { return m_applicationType;  }
            set { m_applicationType = value; }
        }

        /// <summary>
        /// The globally unique identifier for the server that is acting as a gateway for the server.
        /// </summary>
        [DataMember(Name = "GatewayServerUri", IsRequired = false, Order = 5)]
        public string GatewayServerUri
        {
            get { return m_gatewayServerUri;  }
            set { m_gatewayServerUri = value; }
        }

        /// <summary>
        /// The globally unique identifier for the discovery profile supported by the server.
        /// </summary>
        [DataMember(Name = "DiscoveryProfileUri", IsRequired = false, Order = 6)]
        public string DiscoveryProfileUri
        {
            get { return m_discoveryProfileUri;  }
            set { m_discoveryProfileUri = value; }
        }

        /// <summary>
        /// The URLs for the server's discovery endpoints.
        /// </summary>
        [DataMember(Name = "DiscoveryUrls", IsRequired = false, Order = 7)]
        public StringCollection DiscoveryUrls
        {
            get
            {
                return m_discoveryUrls;
            }

            set
            {
                m_discoveryUrls = value;

                if (value == null)
                {
                    m_discoveryUrls = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ApplicationDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ApplicationDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ApplicationDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ApplicationUri", ApplicationUri);
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteLocalizedText("ApplicationName", ApplicationName);
            encoder.WriteEnumerated("ApplicationType", ApplicationType);
            encoder.WriteString("GatewayServerUri", GatewayServerUri);
            encoder.WriteString("DiscoveryProfileUri", DiscoveryProfileUri);
            encoder.WriteStringArray("DiscoveryUrls", DiscoveryUrls);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ApplicationUri = decoder.ReadString("ApplicationUri");
            ProductUri = decoder.ReadString("ProductUri");
            ApplicationName = decoder.ReadLocalizedText("ApplicationName");
            ApplicationType = (ApplicationType)decoder.ReadEnumerated("ApplicationType", typeof(ApplicationType));
            GatewayServerUri = decoder.ReadString("GatewayServerUri");
            DiscoveryProfileUri = decoder.ReadString("DiscoveryProfileUri");
            DiscoveryUrls = decoder.ReadStringArray("DiscoveryUrls");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ApplicationDescription value = encodeable as ApplicationDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_applicationUri, value.m_applicationUri)) return false;
            if (!Utils.IsEqual(m_productUri, value.m_productUri)) return false;
            if (!Utils.IsEqual(m_applicationName, value.m_applicationName)) return false;
            if (!Utils.IsEqual(m_applicationType, value.m_applicationType)) return false;
            if (!Utils.IsEqual(m_gatewayServerUri, value.m_gatewayServerUri)) return false;
            if (!Utils.IsEqual(m_discoveryProfileUri, value.m_discoveryProfileUri)) return false;
            if (!Utils.IsEqual(m_discoveryUrls, value.m_discoveryUrls)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ApplicationDescription clone = new ApplicationDescription();

            clone.m_applicationUri = (string)Utils.Clone(this.m_applicationUri);
            clone.m_productUri = (string)Utils.Clone(this.m_productUri);
            clone.m_applicationName = (LocalizedText)Utils.Clone(this.m_applicationName);
            clone.m_applicationType = (ApplicationType)Utils.Clone(this.m_applicationType);
            clone.m_gatewayServerUri = (string)Utils.Clone(this.m_gatewayServerUri);
            clone.m_discoveryProfileUri = (string)Utils.Clone(this.m_discoveryProfileUri);
            clone.m_discoveryUrls = (StringCollection)Utils.Clone(this.m_discoveryUrls);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_applicationUri;
        private string m_productUri;
        private LocalizedText m_applicationName;
        private ApplicationType m_applicationType;
        private string m_gatewayServerUri;
        private string m_discoveryProfileUri;
        private StringCollection m_discoveryUrls;
        #endregion
    }

    #region ApplicationDescriptionCollection Class
    /// <summary>
    /// A collection of ApplicationDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfApplicationDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ApplicationDescription")]
    public partial class ApplicationDescriptionCollection : List<ApplicationDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ApplicationDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ApplicationDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ApplicationDescriptionCollection(IEnumerable<ApplicationDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ApplicationDescriptionCollection(ApplicationDescription[] values)
        {
            if (values != null)
            {
                return new ApplicationDescriptionCollection(values);
            }

            return new ApplicationDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ApplicationDescription[](ApplicationDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ApplicationDescriptionCollection clone = new ApplicationDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ApplicationDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region RequestHeader Class
    #if (!OPCUA_EXCLUDE_RequestHeader)
    /// <summary>
    /// The header passed with every server request.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RequestHeader : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RequestHeader()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_authenticationToken = null;
            m_timestamp = DateTime.MinValue;
            m_requestHandle = (uint)0;
            m_returnDiagnostics = (uint)0;
            m_auditEntryId = null;
            m_timeoutHint = (uint)0;
            m_additionalHeader = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The authentication token for the current session.
        /// </summary>
        [DataMember(Name = "AuthenticationToken", IsRequired = false, Order = 1)]
        public NodeId AuthenticationToken
        {
            get { return m_authenticationToken;  }
            set { m_authenticationToken = value; }
        }

        /// <summary>
        /// When the request was sent by the client.
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = false, Order = 2)]
        public DateTime Timestamp
        {
            get { return m_timestamp;  }
            set { m_timestamp = value; }
        }

        /// <summary>
        /// A handle assigned by the client to the request. It is returned in the response.
        /// </summary>
        [DataMember(Name = "RequestHandle", IsRequired = false, Order = 3)]
        public uint RequestHandle
        {
            get { return m_requestHandle;  }
            set { m_requestHandle = value; }
        }

        /// <summary>
        /// A mask indicating what diagnostic information should be returned in the response.
        /// </summary>
        [DataMember(Name = "ReturnDiagnostics", IsRequired = false, Order = 4)]
        public uint ReturnDiagnostics
        {
            get { return m_returnDiagnostics;  }
            set { m_returnDiagnostics = value; }
        }

        /// <summary>
        /// Identifies an entry in the client audit log.
        /// </summary>
        [DataMember(Name = "AuditEntryId", IsRequired = false, Order = 5)]
        public string AuditEntryId
        {
            get { return m_auditEntryId;  }
            set { m_auditEntryId = value; }
        }

        /// <summary>
        /// The timeout for the operation specified by the client.
        /// </summary>
        [DataMember(Name = "TimeoutHint", IsRequired = false, Order = 6)]
        public uint TimeoutHint
        {
            get { return m_timeoutHint;  }
            set { m_timeoutHint = value; }
        }

        /// <summary>
        /// Allows vendor specific information to be included in the header.
        /// </summary>
        [DataMember(Name = "AdditionalHeader", IsRequired = false, Order = 7)]
        public ExtensionObject AdditionalHeader
        {
            get { return m_additionalHeader;  }
            set { m_additionalHeader = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RequestHeader; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RequestHeader_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RequestHeader_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("AuthenticationToken", AuthenticationToken);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("RequestHandle", RequestHandle);
            encoder.WriteUInt32("ReturnDiagnostics", ReturnDiagnostics);
            encoder.WriteString("AuditEntryId", AuditEntryId);
            encoder.WriteUInt32("TimeoutHint", TimeoutHint);
            encoder.WriteExtensionObject("AdditionalHeader", AdditionalHeader);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            AuthenticationToken = decoder.ReadNodeId("AuthenticationToken");
            Timestamp = decoder.ReadDateTime("Timestamp");
            RequestHandle = decoder.ReadUInt32("RequestHandle");
            ReturnDiagnostics = decoder.ReadUInt32("ReturnDiagnostics");
            AuditEntryId = decoder.ReadString("AuditEntryId");
            TimeoutHint = decoder.ReadUInt32("TimeoutHint");
            AdditionalHeader = decoder.ReadExtensionObject("AdditionalHeader");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RequestHeader value = encodeable as RequestHeader;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_authenticationToken, value.m_authenticationToken)) return false;
            if (!Utils.IsEqual(m_timestamp, value.m_timestamp)) return false;
            if (!Utils.IsEqual(m_requestHandle, value.m_requestHandle)) return false;
            if (!Utils.IsEqual(m_returnDiagnostics, value.m_returnDiagnostics)) return false;
            if (!Utils.IsEqual(m_auditEntryId, value.m_auditEntryId)) return false;
            if (!Utils.IsEqual(m_timeoutHint, value.m_timeoutHint)) return false;
            if (!Utils.IsEqual(m_additionalHeader, value.m_additionalHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RequestHeader clone = new RequestHeader();

            clone.m_authenticationToken = (NodeId)Utils.Clone(this.m_authenticationToken);
            clone.m_timestamp = (DateTime)Utils.Clone(this.m_timestamp);
            clone.m_requestHandle = (uint)Utils.Clone(this.m_requestHandle);
            clone.m_returnDiagnostics = (uint)Utils.Clone(this.m_returnDiagnostics);
            clone.m_auditEntryId = (string)Utils.Clone(this.m_auditEntryId);
            clone.m_timeoutHint = (uint)Utils.Clone(this.m_timeoutHint);
            clone.m_additionalHeader = (ExtensionObject)Utils.Clone(this.m_additionalHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_authenticationToken;
        private DateTime m_timestamp;
        private uint m_requestHandle;
        private uint m_returnDiagnostics;
        private string m_auditEntryId;
        private uint m_timeoutHint;
        private ExtensionObject m_additionalHeader;
        #endregion
    }
    #endif
    #endregion

    #region ResponseHeader Class
    #if (!OPCUA_EXCLUDE_ResponseHeader)
    /// <summary>
    /// The header passed with every server response.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ResponseHeader : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ResponseHeader()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_timestamp = DateTime.MinValue;
            m_requestHandle = (uint)0;
            m_serviceResult = StatusCodes.Good;
            m_serviceDiagnostics = null;
            m_stringTable = new StringCollection();
            m_additionalHeader = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// When the response was sent by the server.
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = false, Order = 1)]
        public DateTime Timestamp
        {
            get { return m_timestamp;  }
            set { m_timestamp = value; }
        }

        /// <summary>
        /// The handle passed by the client in the request.
        /// </summary>
        [DataMember(Name = "RequestHandle", IsRequired = false, Order = 2)]
        public uint RequestHandle
        {
            get { return m_requestHandle;  }
            set { m_requestHandle = value; }
        }

        /// <summary>
        /// The result of the operation. If Bad there are no parameters returned.
        /// </summary>
        [DataMember(Name = "ServiceResult", IsRequired = false, Order = 3)]
        public StatusCode ServiceResult
        {
            get { return m_serviceResult;  }
            set { m_serviceResult = value; }
        }

        /// <summary>
        /// The diagnostics associated with the ServiceResult.
        /// </summary>
        [DataMember(Name = "ServiceDiagnostics", IsRequired = false, Order = 4)]
        public DiagnosticInfo ServiceDiagnostics
        {
            get { return m_serviceDiagnostics;  }
            set { m_serviceDiagnostics = value; }
        }

        /// <summary>
        /// A table of strings referenced by the diagnotics structures included in the request.
        /// </summary>
        [DataMember(Name = "StringTable", IsRequired = false, Order = 5)]
        public StringCollection StringTable
        {
            get
            {
                return m_stringTable;
            }

            set
            {
                m_stringTable = value;

                if (value == null)
                {
                    m_stringTable = new StringCollection();
                }
            }
        }

        /// <summary>
        /// Allows vendor specific information to be included in the header.
        /// </summary>
        [DataMember(Name = "AdditionalHeader", IsRequired = false, Order = 6)]
        public ExtensionObject AdditionalHeader
        {
            get { return m_additionalHeader;  }
            set { m_additionalHeader = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ResponseHeader; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ResponseHeader_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ResponseHeader_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("RequestHandle", RequestHandle);
            encoder.WriteStatusCode("ServiceResult", ServiceResult);
            encoder.WriteDiagnosticInfo("ServiceDiagnostics", ServiceDiagnostics);
            encoder.WriteStringArray("StringTable", StringTable);
            encoder.WriteExtensionObject("AdditionalHeader", AdditionalHeader);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Timestamp = decoder.ReadDateTime("Timestamp");
            RequestHandle = decoder.ReadUInt32("RequestHandle");
            ServiceResult = decoder.ReadStatusCode("ServiceResult");
            ServiceDiagnostics = decoder.ReadDiagnosticInfo("ServiceDiagnostics");
            StringTable = decoder.ReadStringArray("StringTable");
            AdditionalHeader = decoder.ReadExtensionObject("AdditionalHeader");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ResponseHeader value = encodeable as ResponseHeader;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_timestamp, value.m_timestamp)) return false;
            if (!Utils.IsEqual(m_requestHandle, value.m_requestHandle)) return false;
            if (!Utils.IsEqual(m_serviceResult, value.m_serviceResult)) return false;
            if (!Utils.IsEqual(m_serviceDiagnostics, value.m_serviceDiagnostics)) return false;
            if (!Utils.IsEqual(m_stringTable, value.m_stringTable)) return false;
            if (!Utils.IsEqual(m_additionalHeader, value.m_additionalHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ResponseHeader clone = new ResponseHeader();

            clone.m_timestamp = (DateTime)Utils.Clone(this.m_timestamp);
            clone.m_requestHandle = (uint)Utils.Clone(this.m_requestHandle);
            clone.m_serviceResult = (StatusCode)Utils.Clone(this.m_serviceResult);
            clone.m_serviceDiagnostics = (DiagnosticInfo)Utils.Clone(this.m_serviceDiagnostics);
            clone.m_stringTable = (StringCollection)Utils.Clone(this.m_stringTable);
            clone.m_additionalHeader = (ExtensionObject)Utils.Clone(this.m_additionalHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_timestamp;
        private uint m_requestHandle;
        private StatusCode m_serviceResult;
        private DiagnosticInfo m_serviceDiagnostics;
        private StringCollection m_stringTable;
        private ExtensionObject m_additionalHeader;
        #endregion
    }
    #endif
    #endregion

    #region ServiceFault Class
    #if (!OPCUA_EXCLUDE_ServiceFault)
    /// <summary>
    /// The response returned by all services when there is a service level error.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ServiceFault : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ServiceFault()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ServiceFault; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ServiceFault_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ServiceFault_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ServiceFault value = encodeable as ServiceFault;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ServiceFault clone = new ServiceFault();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        #endregion
    }
    #endif
    #endregion

    #region DnsServiceRecord Class
    #if (!OPCUA_EXCLUDE_DnsServiceRecord)
    /// <summary>
    /// The description of a DNS service discovered with multicast discovery.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DnsServiceRecord : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DnsServiceRecord()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_serviceName = null;
            m_serviceType = null;
            m_dnsName = null;
            m_port = (ushort)0;
            m_ipAddresses = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The name of the DNS service.
        /// </summary>
        [DataMember(Name = "ServiceName", IsRequired = false, Order = 1)]
        public string ServiceName
        {
            get { return m_serviceName;  }
            set { m_serviceName = value; }
        }

        /// <summary>
        /// The type of the DNS service.
        /// </summary>
        [DataMember(Name = "ServiceType", IsRequired = false, Order = 2)]
        public string ServiceType
        {
            get { return m_serviceType;  }
            set { m_serviceType = value; }
        }

        /// <summary>
        /// The DNS name of the host where the DNS service runs.
        /// </summary>
        [DataMember(Name = "DnsName", IsRequired = false, Order = 3)]
        public string DnsName
        {
            get { return m_dnsName;  }
            set { m_dnsName = value; }
        }

        /// <summary>
        /// The port used by the service.
        /// </summary>
        [DataMember(Name = "Port", IsRequired = false, Order = 4)]
        public ushort Port
        {
            get { return m_port;  }
            set { m_port = value; }
        }

        /// <summary>
        /// The DNS name of the host where the DNS service runs.
        /// </summary>
        [DataMember(Name = "IpAddresses", IsRequired = false, Order = 5)]
        public StringCollection IpAddresses
        {
            get
            {
                return m_ipAddresses;
            }

            set
            {
                m_ipAddresses = value;

                if (value == null)
                {
                    m_ipAddresses = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DnsServiceRecord; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DnsServiceRecord_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DnsServiceRecord_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ServiceName", ServiceName);
            encoder.WriteString("ServiceType", ServiceType);
            encoder.WriteString("DnsName", DnsName);
            encoder.WriteUInt16("Port", Port);
            encoder.WriteStringArray("IpAddresses", IpAddresses);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ServiceName = decoder.ReadString("ServiceName");
            ServiceType = decoder.ReadString("ServiceType");
            DnsName = decoder.ReadString("DnsName");
            Port = decoder.ReadUInt16("Port");
            IpAddresses = decoder.ReadStringArray("IpAddresses");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DnsServiceRecord value = encodeable as DnsServiceRecord;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_serviceName, value.m_serviceName)) return false;
            if (!Utils.IsEqual(m_serviceType, value.m_serviceType)) return false;
            if (!Utils.IsEqual(m_dnsName, value.m_dnsName)) return false;
            if (!Utils.IsEqual(m_port, value.m_port)) return false;
            if (!Utils.IsEqual(m_ipAddresses, value.m_ipAddresses)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DnsServiceRecord clone = new DnsServiceRecord();

            clone.m_serviceName = (string)Utils.Clone(this.m_serviceName);
            clone.m_serviceType = (string)Utils.Clone(this.m_serviceType);
            clone.m_dnsName = (string)Utils.Clone(this.m_dnsName);
            clone.m_port = (ushort)Utils.Clone(this.m_port);
            clone.m_ipAddresses = (StringCollection)Utils.Clone(this.m_ipAddresses);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_serviceName;
        private string m_serviceType;
        private string m_dnsName;
        private ushort m_port;
        private StringCollection m_ipAddresses;
        #endregion
    }

    #region DnsServiceRecordCollection Class
    /// <summary>
    /// A collection of DnsServiceRecord objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfDnsServiceRecord", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "DnsServiceRecord")]
    public partial class DnsServiceRecordCollection : List<DnsServiceRecord>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DnsServiceRecordCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DnsServiceRecordCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DnsServiceRecordCollection(IEnumerable<DnsServiceRecord> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DnsServiceRecordCollection(DnsServiceRecord[] values)
        {
            if (values != null)
            {
                return new DnsServiceRecordCollection(values);
            }

            return new DnsServiceRecordCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DnsServiceRecord[](DnsServiceRecordCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            DnsServiceRecordCollection clone = new DnsServiceRecordCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DnsServiceRecord)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region FindDnsServicesRequest Class
    #if (!OPCUA_EXCLUDE_FindDnsServicesRequest)
    /// <summary>
    /// Finds the DNS services known to the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class FindDnsServicesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public FindDnsServicesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_endpointUrl = null;
            m_serviceNameFilters = new StringCollection();
            m_serviceTypeFilters = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The URL used by the client to send the request.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 2)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// Return all DNS services with an instance name that matches one of the filters in this list.
        /// </summary>
        [DataMember(Name = "ServiceNameFilters", IsRequired = false, Order = 3)]
        public StringCollection ServiceNameFilters
        {
            get
            {
                return m_serviceNameFilters;
            }

            set
            {
                m_serviceNameFilters = value;

                if (value == null)
                {
                    m_serviceNameFilters = new StringCollection();
                }
            }
        }

        /// <summary>
        /// Return all DNS services with a service type that matches one of the filters in this list.
        /// </summary>
        [DataMember(Name = "ServiceTypeFilters", IsRequired = false, Order = 4)]
        public StringCollection ServiceTypeFilters
        {
            get
            {
                return m_serviceTypeFilters;
            }

            set
            {
                m_serviceTypeFilters = value;

                if (value == null)
                {
                    m_serviceTypeFilters = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.FindDnsServicesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.FindDnsServicesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.FindDnsServicesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("ServiceNameFilters", ServiceNameFilters);
            encoder.WriteStringArray("ServiceTypeFilters", ServiceTypeFilters);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            EndpointUrl = decoder.ReadString("EndpointUrl");
            ServiceNameFilters = decoder.ReadStringArray("ServiceNameFilters");
            ServiceTypeFilters = decoder.ReadStringArray("ServiceTypeFilters");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            FindDnsServicesRequest value = encodeable as FindDnsServicesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_serviceNameFilters, value.m_serviceNameFilters)) return false;
            if (!Utils.IsEqual(m_serviceTypeFilters, value.m_serviceTypeFilters)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            FindDnsServicesRequest clone = new FindDnsServicesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_serviceNameFilters = (StringCollection)Utils.Clone(this.m_serviceNameFilters);
            clone.m_serviceTypeFilters = (StringCollection)Utils.Clone(this.m_serviceTypeFilters);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private string m_endpointUrl;
        private StringCollection m_serviceNameFilters;
        private StringCollection m_serviceTypeFilters;
        #endregion
    }
    #endif
    #endregion

    #region FindDnsServicesResponse Class
    #if (!OPCUA_EXCLUDE_FindDnsServicesResponse)
    /// <summary>
    /// Finds the DNS services known to the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class FindDnsServicesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public FindDnsServicesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_services = new DnsServiceRecordCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The services that met the criteria specified in the request.
        /// </summary>
        [DataMember(Name = "Services", IsRequired = false, Order = 2)]
        public DnsServiceRecordCollection Services
        {
            get
            {
                return m_services;
            }

            set
            {
                m_services = value;

                if (value == null)
                {
                    m_services = new DnsServiceRecordCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.FindDnsServicesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.FindDnsServicesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.FindDnsServicesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Services", Services.ToArray(), typeof(DnsServiceRecord));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Services = (DnsServiceRecordCollection)decoder.ReadEncodeableArray("Services", typeof(DnsServiceRecord));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            FindDnsServicesResponse value = encodeable as FindDnsServicesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_services, value.m_services)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            FindDnsServicesResponse clone = new FindDnsServicesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_services = (DnsServiceRecordCollection)Utils.Clone(this.m_services);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private DnsServiceRecordCollection m_services;
        #endregion
    }
    #endif
    #endregion

    #region FindServersRequest Class
    #if (!OPCUA_EXCLUDE_FindServersRequest)
    /// <summary>
    /// Finds the servers known to the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class FindServersRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public FindServersRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_endpointUrl = null;
            m_localeIds = new StringCollection();
            m_serverUris = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The URL used by the client to send the request.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 2)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// The locales to use when constructing a response.
        /// </summary>
        [DataMember(Name = "LocaleIds", IsRequired = false, Order = 3)]
        public StringCollection LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                m_localeIds = value;

                if (value == null)
                {
                    m_localeIds = new StringCollection();
                }
            }
        }

        /// <summary>
        /// The URIs of the servers to return (all servers returned if none specified).
        /// </summary>
        [DataMember(Name = "ServerUris", IsRequired = false, Order = 4)]
        public StringCollection ServerUris
        {
            get
            {
                return m_serverUris;
            }

            set
            {
                m_serverUris = value;

                if (value == null)
                {
                    m_serverUris = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.FindServersRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.FindServersRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.FindServersRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteStringArray("ServerUris", ServerUris);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ServerUris = decoder.ReadStringArray("ServerUris");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            FindServersRequest value = encodeable as FindServersRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_localeIds, value.m_localeIds)) return false;
            if (!Utils.IsEqual(m_serverUris, value.m_serverUris)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            FindServersRequest clone = new FindServersRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_localeIds = (StringCollection)Utils.Clone(this.m_localeIds);
            clone.m_serverUris = (StringCollection)Utils.Clone(this.m_serverUris);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private string m_endpointUrl;
        private StringCollection m_localeIds;
        private StringCollection m_serverUris;
        #endregion
    }
    #endif
    #endregion

    #region FindServersResponse Class
    #if (!OPCUA_EXCLUDE_FindServersResponse)
    /// <summary>
    /// Finds the servers known to the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class FindServersResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public FindServersResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_servers = new ApplicationDescriptionCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The servers that met the criteria specified in the request.
        /// </summary>
        [DataMember(Name = "Servers", IsRequired = false, Order = 2)]
        public ApplicationDescriptionCollection Servers
        {
            get
            {
                return m_servers;
            }

            set
            {
                m_servers = value;

                if (value == null)
                {
                    m_servers = new ApplicationDescriptionCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.FindServersResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.FindServersResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.FindServersResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Servers", Servers.ToArray(), typeof(ApplicationDescription));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Servers = (ApplicationDescriptionCollection)decoder.ReadEncodeableArray("Servers", typeof(ApplicationDescription));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            FindServersResponse value = encodeable as FindServersResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_servers, value.m_servers)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            FindServersResponse clone = new FindServersResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_servers = (ApplicationDescriptionCollection)Utils.Clone(this.m_servers);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private ApplicationDescriptionCollection m_servers;
        #endregion
    }
    #endif
    #endregion

    #region MessageSecurityMode Enumeration
    #if (!OPCUA_EXCLUDE_MessageSecurityMode)
    /// <summary>
    /// The type of security to use on a message.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum MessageSecurityMode
    {
        /// <summary>
        /// An invalid mode.
        /// </summary>
        [EnumMember(Value = "Invalid_0")]
        Invalid = 0,

        /// <summary>
        /// No security is used.
        /// </summary>
        [EnumMember(Value = "None_1")]
        None = 1,

        /// <summary>
        /// The message is signed.
        /// </summary>
        [EnumMember(Value = "Sign_2")]
        Sign = 2,

        /// <summary>
        /// The message is signed and encrypted.
        /// </summary>
        [EnumMember(Value = "SignAndEncrypt_3")]
        SignAndEncrypt = 3,
    }
    #endif
    #endregion

    #region UserTokenType Enumeration
    #if (!OPCUA_EXCLUDE_UserTokenType)
    /// <summary>
    /// The possible user token types.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum UserTokenType
    {
        /// <summary>
        /// An anonymous user.
        /// </summary>
        [EnumMember(Value = "Anonymous_0")]
        Anonymous = 0,

        /// <summary>
        /// A user identified by a user name and password.
        /// </summary>
        [EnumMember(Value = "UserName_1")]
        UserName = 1,

        /// <summary>
        /// A user identified by an X509 certificate.
        /// </summary>
        [EnumMember(Value = "Certificate_2")]
        Certificate = 2,

        /// <summary>
        /// A user identified by WS-Security XML token.
        /// </summary>
        [EnumMember(Value = "IssuedToken_3")]
        IssuedToken = 3,
    }
    #endif
    #endregion

    #region UserTokenPolicy Class
    #if (!OPCUA_EXCLUDE_UserTokenPolicy)
    /// <summary>
    /// Describes a user token that can be used with a server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UserTokenPolicy : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UserTokenPolicy()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_policyId = null;
            m_tokenType = UserTokenType.Anonymous;
            m_issuedTokenType = null;
            m_issuerEndpointUrl = null;
            m_securityPolicyUri = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A identifier for the policy assigned by the server.
        /// </summary>
        [DataMember(Name = "PolicyId", IsRequired = false, Order = 1)]
        public string PolicyId
        {
            get { return m_policyId;  }
            set { m_policyId = value; }
        }

        /// <summary>
        /// The type of user token.
        /// </summary>
        [DataMember(Name = "TokenType", IsRequired = false, Order = 2)]
        public UserTokenType TokenType
        {
            get { return m_tokenType;  }
            set { m_tokenType = value; }
        }

        /// <summary>
        /// The type of issued token.
        /// </summary>
        [DataMember(Name = "IssuedTokenType", IsRequired = false, Order = 3)]
        public string IssuedTokenType
        {
            get { return m_issuedTokenType;  }
            set { m_issuedTokenType = value; }
        }

        /// <summary>
        /// The endpoint or any other information need to contruct an issued token URL.
        /// </summary>
        [DataMember(Name = "IssuerEndpointUrl", IsRequired = false, Order = 4)]
        public string IssuerEndpointUrl
        {
            get { return m_issuerEndpointUrl;  }
            set { m_issuerEndpointUrl = value; }
        }

        /// <summary>
        /// The security policy to use when encrypting or signing the user token.
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", IsRequired = false, Order = 5)]
        public string SecurityPolicyUri
        {
            get { return m_securityPolicyUri;  }
            set { m_securityPolicyUri = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UserTokenPolicy; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UserTokenPolicy_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UserTokenPolicy_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("PolicyId", PolicyId);
            encoder.WriteEnumerated("TokenType", TokenType);
            encoder.WriteString("IssuedTokenType", IssuedTokenType);
            encoder.WriteString("IssuerEndpointUrl", IssuerEndpointUrl);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            PolicyId = decoder.ReadString("PolicyId");
            TokenType = (UserTokenType)decoder.ReadEnumerated("TokenType", typeof(UserTokenType));
            IssuedTokenType = decoder.ReadString("IssuedTokenType");
            IssuerEndpointUrl = decoder.ReadString("IssuerEndpointUrl");
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UserTokenPolicy value = encodeable as UserTokenPolicy;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_policyId, value.m_policyId)) return false;
            if (!Utils.IsEqual(m_tokenType, value.m_tokenType)) return false;
            if (!Utils.IsEqual(m_issuedTokenType, value.m_issuedTokenType)) return false;
            if (!Utils.IsEqual(m_issuerEndpointUrl, value.m_issuerEndpointUrl)) return false;
            if (!Utils.IsEqual(m_securityPolicyUri, value.m_securityPolicyUri)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UserTokenPolicy clone = new UserTokenPolicy();

            clone.m_policyId = (string)Utils.Clone(this.m_policyId);
            clone.m_tokenType = (UserTokenType)Utils.Clone(this.m_tokenType);
            clone.m_issuedTokenType = (string)Utils.Clone(this.m_issuedTokenType);
            clone.m_issuerEndpointUrl = (string)Utils.Clone(this.m_issuerEndpointUrl);
            clone.m_securityPolicyUri = (string)Utils.Clone(this.m_securityPolicyUri);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_policyId;
        private UserTokenType m_tokenType;
        private string m_issuedTokenType;
        private string m_issuerEndpointUrl;
        private string m_securityPolicyUri;
        #endregion
    }

    #region UserTokenPolicyCollection Class
    /// <summary>
    /// A collection of UserTokenPolicy objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfUserTokenPolicy", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "UserTokenPolicy")]
    public partial class UserTokenPolicyCollection : List<UserTokenPolicy>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public UserTokenPolicyCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public UserTokenPolicyCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public UserTokenPolicyCollection(IEnumerable<UserTokenPolicy> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator UserTokenPolicyCollection(UserTokenPolicy[] values)
        {
            if (values != null)
            {
                return new UserTokenPolicyCollection(values);
            }

            return new UserTokenPolicyCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator UserTokenPolicy[](UserTokenPolicyCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            UserTokenPolicyCollection clone = new UserTokenPolicyCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((UserTokenPolicy)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region EndpointDescription Class
    #if (!OPCUA_EXCLUDE_EndpointDescription)
    /// <summary>
    /// The description of a endpoint that can be used to access a server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EndpointDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EndpointDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_endpointUrl = null;
            m_server = new ApplicationDescription();
            m_serverCertificate = null;
            m_securityMode = MessageSecurityMode.Invalid;
            m_securityPolicyUri = null;
            m_userIdentityTokens = new UserTokenPolicyCollection();
            m_transportProfileUri = null;
            m_securityLevel = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The network endpoint to use when connecting to the server.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 1)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// The description of the server.
        /// </summary>
        [DataMember(Name = "Server", IsRequired = false, Order = 2)]
        public ApplicationDescription Server
        {
            get
            {
                return m_server;
            }

            set
            {
                m_server = value;

                if (value == null)
                {
                    m_server = new ApplicationDescription();
                }
            }
        }

        /// <summary>
        /// The server's application certificate.
        /// </summary>
        [DataMember(Name = "ServerCertificate", IsRequired = false, Order = 3)]
        public byte[] ServerCertificate
        {
            get { return m_serverCertificate;  }
            set { m_serverCertificate = value; }
        }

        /// <summary>
        /// The security mode that must be used when connecting to the endpoint.
        /// </summary>
        [DataMember(Name = "SecurityMode", IsRequired = false, Order = 4)]
        public MessageSecurityMode SecurityMode
        {
            get { return m_securityMode;  }
            set { m_securityMode = value; }
        }

        /// <summary>
        /// The security policy to use when connecting to the endpoint.
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", IsRequired = false, Order = 5)]
        public string SecurityPolicyUri
        {
            get { return m_securityPolicyUri;  }
            set { m_securityPolicyUri = value; }
        }

        /// <summary>
        /// The user identity tokens that can be used with this endpoint.
        /// </summary>
        [DataMember(Name = "UserIdentityTokens", IsRequired = false, Order = 6)]
        public UserTokenPolicyCollection UserIdentityTokens
        {
            get
            {
                return m_userIdentityTokens;
            }

            set
            {
                m_userIdentityTokens = value;

                if (value == null)
                {
                    m_userIdentityTokens = new UserTokenPolicyCollection();
                }
            }
        }

        /// <summary>
        /// The transport profile to use when connecting to the endpoint.
        /// </summary>
        [DataMember(Name = "TransportProfileUri", IsRequired = false, Order = 7)]
        public string TransportProfileUri
        {
            get { return m_transportProfileUri;  }
            set { m_transportProfileUri = value; }
        }

        /// <summary>
        /// A server assigned value that indicates how secure the endpoint is relative to other server endpoints.
        /// </summary>
        [DataMember(Name = "SecurityLevel", IsRequired = false, Order = 8)]
        public byte SecurityLevel
        {
            get { return m_securityLevel;  }
            set { m_securityLevel = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EndpointDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EndpointDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EndpointDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteEncodeable("Server", Server, typeof(ApplicationDescription));
            encoder.WriteByteString("ServerCertificate", ServerCertificate);
            encoder.WriteEnumerated("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.WriteEncodeableArray("UserIdentityTokens", UserIdentityTokens.ToArray(), typeof(UserTokenPolicy));
            encoder.WriteString("TransportProfileUri", TransportProfileUri);
            encoder.WriteByte("SecurityLevel", SecurityLevel);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EndpointUrl = decoder.ReadString("EndpointUrl");
            Server = (ApplicationDescription)decoder.ReadEncodeable("Server", typeof(ApplicationDescription));
            ServerCertificate = decoder.ReadByteString("ServerCertificate");
            SecurityMode = (MessageSecurityMode)decoder.ReadEnumerated("SecurityMode", typeof(MessageSecurityMode));
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            UserIdentityTokens = (UserTokenPolicyCollection)decoder.ReadEncodeableArray("UserIdentityTokens", typeof(UserTokenPolicy));
            TransportProfileUri = decoder.ReadString("TransportProfileUri");
            SecurityLevel = decoder.ReadByte("SecurityLevel");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EndpointDescription value = encodeable as EndpointDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_server, value.m_server)) return false;
            if (!Utils.IsEqual(m_serverCertificate, value.m_serverCertificate)) return false;
            if (!Utils.IsEqual(m_securityMode, value.m_securityMode)) return false;
            if (!Utils.IsEqual(m_securityPolicyUri, value.m_securityPolicyUri)) return false;
            if (!Utils.IsEqual(m_userIdentityTokens, value.m_userIdentityTokens)) return false;
            if (!Utils.IsEqual(m_transportProfileUri, value.m_transportProfileUri)) return false;
            if (!Utils.IsEqual(m_securityLevel, value.m_securityLevel)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EndpointDescription clone = new EndpointDescription();

            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_server = (ApplicationDescription)Utils.Clone(this.m_server);
            clone.m_serverCertificate = (byte[])Utils.Clone(this.m_serverCertificate);
            clone.m_securityMode = (MessageSecurityMode)Utils.Clone(this.m_securityMode);
            clone.m_securityPolicyUri = (string)Utils.Clone(this.m_securityPolicyUri);
            clone.m_userIdentityTokens = (UserTokenPolicyCollection)Utils.Clone(this.m_userIdentityTokens);
            clone.m_transportProfileUri = (string)Utils.Clone(this.m_transportProfileUri);
            clone.m_securityLevel = (byte)Utils.Clone(this.m_securityLevel);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_endpointUrl;
        private ApplicationDescription m_server;
        private byte[] m_serverCertificate;
        private MessageSecurityMode m_securityMode;
        private string m_securityPolicyUri;
        private UserTokenPolicyCollection m_userIdentityTokens;
        private string m_transportProfileUri;
        private byte m_securityLevel;
        #endregion
    }

    #region EndpointDescriptionCollection Class
    /// <summary>
    /// A collection of EndpointDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEndpointDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EndpointDescription")]
    public partial class EndpointDescriptionCollection : List<EndpointDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EndpointDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EndpointDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EndpointDescriptionCollection(IEnumerable<EndpointDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EndpointDescriptionCollection(EndpointDescription[] values)
        {
            if (values != null)
            {
                return new EndpointDescriptionCollection(values);
            }

            return new EndpointDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EndpointDescription[](EndpointDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EndpointDescriptionCollection clone = new EndpointDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EndpointDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region GetEndpointsRequest Class
    #if (!OPCUA_EXCLUDE_GetEndpointsRequest)
    /// <summary>
    /// Gets the endpoints used by the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class GetEndpointsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public GetEndpointsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_endpointUrl = null;
            m_localeIds = new StringCollection();
            m_profileUris = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The URL used by the client to send the request.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 2)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// The locales to use when constructing a response.
        /// </summary>
        [DataMember(Name = "LocaleIds", IsRequired = false, Order = 3)]
        public StringCollection LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                m_localeIds = value;

                if (value == null)
                {
                    m_localeIds = new StringCollection();
                }
            }
        }

        /// <summary>
        /// The URIs of the transport profiles for the endpoints to return (all endpoints returned if none specified).
        /// </summary>
        [DataMember(Name = "ProfileUris", IsRequired = false, Order = 4)]
        public StringCollection ProfileUris
        {
            get
            {
                return m_profileUris;
            }

            set
            {
                m_profileUris = value;

                if (value == null)
                {
                    m_profileUris = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.GetEndpointsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.GetEndpointsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.GetEndpointsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteStringArray("ProfileUris", ProfileUris);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ProfileUris = decoder.ReadStringArray("ProfileUris");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            GetEndpointsRequest value = encodeable as GetEndpointsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_localeIds, value.m_localeIds)) return false;
            if (!Utils.IsEqual(m_profileUris, value.m_profileUris)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            GetEndpointsRequest clone = new GetEndpointsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_localeIds = (StringCollection)Utils.Clone(this.m_localeIds);
            clone.m_profileUris = (StringCollection)Utils.Clone(this.m_profileUris);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private string m_endpointUrl;
        private StringCollection m_localeIds;
        private StringCollection m_profileUris;
        #endregion
    }
    #endif
    #endregion

    #region GetEndpointsResponse Class
    #if (!OPCUA_EXCLUDE_GetEndpointsResponse)
    /// <summary>
    /// Gets the endpoints used by the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class GetEndpointsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public GetEndpointsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_endpoints = new EndpointDescriptionCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The endpoints that met the criteria specified in the request.
        /// </summary>
        [DataMember(Name = "Endpoints", IsRequired = false, Order = 2)]
        public EndpointDescriptionCollection Endpoints
        {
            get
            {
                return m_endpoints;
            }

            set
            {
                m_endpoints = value;

                if (value == null)
                {
                    m_endpoints = new EndpointDescriptionCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.GetEndpointsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.GetEndpointsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.GetEndpointsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Endpoints", Endpoints.ToArray(), typeof(EndpointDescription));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Endpoints = (EndpointDescriptionCollection)decoder.ReadEncodeableArray("Endpoints", typeof(EndpointDescription));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            GetEndpointsResponse value = encodeable as GetEndpointsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_endpoints, value.m_endpoints)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            GetEndpointsResponse clone = new GetEndpointsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_endpoints = (EndpointDescriptionCollection)Utils.Clone(this.m_endpoints);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private EndpointDescriptionCollection m_endpoints;
        #endregion
    }
    #endif
    #endregion

    #region RegisteredServer Class
    #if (!OPCUA_EXCLUDE_RegisteredServer)
    /// <summary>
    /// The information required to register a server with a discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RegisteredServer : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RegisteredServer()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_serverUri = null;
            m_productUri = null;
            m_serverNames = new LocalizedTextCollection();
            m_serverType = ApplicationType.Server;
            m_gatewayServerUri = null;
            m_discoveryUrls = new StringCollection();
            m_semaphoreFilePath = null;
            m_isOnline = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The globally unique identifier for the server.
        /// </summary>
        [DataMember(Name = "ServerUri", IsRequired = false, Order = 1)]
        public string ServerUri
        {
            get { return m_serverUri;  }
            set { m_serverUri = value; }
        }

        /// <summary>
        /// The globally unique identifier for the product.
        /// </summary>
        [DataMember(Name = "ProductUri", IsRequired = false, Order = 2)]
        public string ProductUri
        {
            get { return m_productUri;  }
            set { m_productUri = value; }
        }

        /// <summary>
        /// The name of server in multiple lcoales.
        /// </summary>
        [DataMember(Name = "ServerNames", IsRequired = false, Order = 3)]
        public LocalizedTextCollection ServerNames
        {
            get
            {
                return m_serverNames;
            }

            set
            {
                m_serverNames = value;

                if (value == null)
                {
                    m_serverNames = new LocalizedTextCollection();
                }
            }
        }

        /// <summary>
        /// The type of server.
        /// </summary>
        [DataMember(Name = "ServerType", IsRequired = false, Order = 4)]
        public ApplicationType ServerType
        {
            get { return m_serverType;  }
            set { m_serverType = value; }
        }

        /// <summary>
        /// The globally unique identifier for the server that is acting as a gateway for the server.
        /// </summary>
        [DataMember(Name = "GatewayServerUri", IsRequired = false, Order = 5)]
        public string GatewayServerUri
        {
            get { return m_gatewayServerUri;  }
            set { m_gatewayServerUri = value; }
        }

        /// <summary>
        /// The URLs for the server's discovery endpoints.
        /// </summary>
        [DataMember(Name = "DiscoveryUrls", IsRequired = false, Order = 6)]
        public StringCollection DiscoveryUrls
        {
            get
            {
                return m_discoveryUrls;
            }

            set
            {
                m_discoveryUrls = value;

                if (value == null)
                {
                    m_discoveryUrls = new StringCollection();
                }
            }
        }

        /// <summary>
        /// A path to a file that is deleted when the server is no longer accepting connections.
        /// </summary>
        [DataMember(Name = "SemaphoreFilePath", IsRequired = false, Order = 7)]
        public string SemaphoreFilePath
        {
            get { return m_semaphoreFilePath;  }
            set { m_semaphoreFilePath = value; }
        }

        /// <summary>
        /// If FALSE the server will save the registration information to a persistent datastore.
        /// </summary>
        [DataMember(Name = "IsOnline", IsRequired = false, Order = 8)]
        public bool IsOnline
        {
            get { return m_isOnline;  }
            set { m_isOnline = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RegisteredServer; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RegisteredServer_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RegisteredServer_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteLocalizedTextArray("ServerNames", ServerNames);
            encoder.WriteEnumerated("ServerType", ServerType);
            encoder.WriteString("GatewayServerUri", GatewayServerUri);
            encoder.WriteStringArray("DiscoveryUrls", DiscoveryUrls);
            encoder.WriteString("SemaphoreFilePath", SemaphoreFilePath);
            encoder.WriteBoolean("IsOnline", IsOnline);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ServerUri = decoder.ReadString("ServerUri");
            ProductUri = decoder.ReadString("ProductUri");
            ServerNames = decoder.ReadLocalizedTextArray("ServerNames");
            ServerType = (ApplicationType)decoder.ReadEnumerated("ServerType", typeof(ApplicationType));
            GatewayServerUri = decoder.ReadString("GatewayServerUri");
            DiscoveryUrls = decoder.ReadStringArray("DiscoveryUrls");
            SemaphoreFilePath = decoder.ReadString("SemaphoreFilePath");
            IsOnline = decoder.ReadBoolean("IsOnline");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RegisteredServer value = encodeable as RegisteredServer;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_serverUri, value.m_serverUri)) return false;
            if (!Utils.IsEqual(m_productUri, value.m_productUri)) return false;
            if (!Utils.IsEqual(m_serverNames, value.m_serverNames)) return false;
            if (!Utils.IsEqual(m_serverType, value.m_serverType)) return false;
            if (!Utils.IsEqual(m_gatewayServerUri, value.m_gatewayServerUri)) return false;
            if (!Utils.IsEqual(m_discoveryUrls, value.m_discoveryUrls)) return false;
            if (!Utils.IsEqual(m_semaphoreFilePath, value.m_semaphoreFilePath)) return false;
            if (!Utils.IsEqual(m_isOnline, value.m_isOnline)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RegisteredServer clone = new RegisteredServer();

            clone.m_serverUri = (string)Utils.Clone(this.m_serverUri);
            clone.m_productUri = (string)Utils.Clone(this.m_productUri);
            clone.m_serverNames = (LocalizedTextCollection)Utils.Clone(this.m_serverNames);
            clone.m_serverType = (ApplicationType)Utils.Clone(this.m_serverType);
            clone.m_gatewayServerUri = (string)Utils.Clone(this.m_gatewayServerUri);
            clone.m_discoveryUrls = (StringCollection)Utils.Clone(this.m_discoveryUrls);
            clone.m_semaphoreFilePath = (string)Utils.Clone(this.m_semaphoreFilePath);
            clone.m_isOnline = (bool)Utils.Clone(this.m_isOnline);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_serverUri;
        private string m_productUri;
        private LocalizedTextCollection m_serverNames;
        private ApplicationType m_serverType;
        private string m_gatewayServerUri;
        private StringCollection m_discoveryUrls;
        private string m_semaphoreFilePath;
        private bool m_isOnline;
        #endregion
    }

    #region RegisteredServerCollection Class
    /// <summary>
    /// A collection of RegisteredServer objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfRegisteredServer", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "RegisteredServer")]
    public partial class RegisteredServerCollection : List<RegisteredServer>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public RegisteredServerCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public RegisteredServerCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public RegisteredServerCollection(IEnumerable<RegisteredServer> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator RegisteredServerCollection(RegisteredServer[] values)
        {
            if (values != null)
            {
                return new RegisteredServerCollection(values);
            }

            return new RegisteredServerCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator RegisteredServer[](RegisteredServerCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            RegisteredServerCollection clone = new RegisteredServerCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((RegisteredServer)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region RegisterServerRequest Class
    #if (!OPCUA_EXCLUDE_RegisterServerRequest)
    /// <summary>
    /// Registers a server with the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RegisterServerRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RegisterServerRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_server = new RegisteredServer();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The server to register.
        /// </summary>
        [DataMember(Name = "Server", IsRequired = false, Order = 2)]
        public RegisteredServer Server
        {
            get
            {
                return m_server;
            }

            set
            {
                m_server = value;

                if (value == null)
                {
                    m_server = new RegisteredServer();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RegisterServerRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RegisterServerRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RegisterServerRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeable("Server", Server, typeof(RegisteredServer));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            Server = (RegisteredServer)decoder.ReadEncodeable("Server", typeof(RegisteredServer));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RegisterServerRequest value = encodeable as RegisterServerRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_server, value.m_server)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RegisterServerRequest clone = new RegisterServerRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_server = (RegisteredServer)Utils.Clone(this.m_server);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private RegisteredServer m_server;
        #endregion
    }
    #endif
    #endregion

    #region RegisterServerResponse Class
    #if (!OPCUA_EXCLUDE_RegisterServerResponse)
    /// <summary>
    /// Registers a server with the discovery server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RegisterServerResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RegisterServerResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RegisterServerResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RegisterServerResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RegisterServerResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RegisterServerResponse value = encodeable as RegisterServerResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RegisterServerResponse clone = new RegisterServerResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        #endregion
    }
    #endif
    #endregion

    #region SecurityTokenRequestType Enumeration
    #if (!OPCUA_EXCLUDE_SecurityTokenRequestType)
    /// <summary>
    /// Indicates whether a token if being created or renewed.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum SecurityTokenRequestType
    {
        /// <summary>
        /// The channel is being created.
        /// </summary>
        [EnumMember(Value = "Issue_0")]
        Issue = 0,

        /// <summary>
        /// The channel is being renewed.
        /// </summary>
        [EnumMember(Value = "Renew_1")]
        Renew = 1,
    }
    #endif
    #endregion

    #region ChannelSecurityToken Class
    #if (!OPCUA_EXCLUDE_ChannelSecurityToken)
    /// <summary>
    /// The token that identifies a set of keys for an active secure channel.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ChannelSecurityToken : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ChannelSecurityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_channelId = (uint)0;
            m_tokenId = (uint)0;
            m_createdAt = DateTime.MinValue;
            m_revisedLifetime = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A unique identifier for the channel.
        /// </summary>
        [DataMember(Name = "ChannelId", IsRequired = false, Order = 1)]
        public uint ChannelId
        {
            get { return m_channelId;  }
            set { m_channelId = value; }
        }

        /// <summary>
        /// A unique identifier for the current token.
        /// </summary>
        [DataMember(Name = "TokenId", IsRequired = false, Order = 2)]
        public uint TokenId
        {
            get { return m_tokenId;  }
            set { m_tokenId = value; }
        }

        /// <summary>
        /// When the channel was created.
        /// </summary>
        [DataMember(Name = "CreatedAt", IsRequired = false, Order = 3)]
        public DateTime CreatedAt
        {
            get { return m_createdAt;  }
            set { m_createdAt = value; }
        }

        /// <summary>
        /// When the channel will expiry.
        /// </summary>
        [DataMember(Name = "RevisedLifetime", IsRequired = false, Order = 4)]
        public uint RevisedLifetime
        {
            get { return m_revisedLifetime;  }
            set { m_revisedLifetime = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ChannelSecurityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ChannelSecurityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ChannelSecurityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("ChannelId", ChannelId);
            encoder.WriteUInt32("TokenId", TokenId);
            encoder.WriteDateTime("CreatedAt", CreatedAt);
            encoder.WriteUInt32("RevisedLifetime", RevisedLifetime);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ChannelId = decoder.ReadUInt32("ChannelId");
            TokenId = decoder.ReadUInt32("TokenId");
            CreatedAt = decoder.ReadDateTime("CreatedAt");
            RevisedLifetime = decoder.ReadUInt32("RevisedLifetime");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ChannelSecurityToken value = encodeable as ChannelSecurityToken;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_channelId, value.m_channelId)) return false;
            if (!Utils.IsEqual(m_tokenId, value.m_tokenId)) return false;
            if (!Utils.IsEqual(m_createdAt, value.m_createdAt)) return false;
            if (!Utils.IsEqual(m_revisedLifetime, value.m_revisedLifetime)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ChannelSecurityToken clone = new ChannelSecurityToken();

            clone.m_channelId = (uint)Utils.Clone(this.m_channelId);
            clone.m_tokenId = (uint)Utils.Clone(this.m_tokenId);
            clone.m_createdAt = (DateTime)Utils.Clone(this.m_createdAt);
            clone.m_revisedLifetime = (uint)Utils.Clone(this.m_revisedLifetime);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_channelId;
        private uint m_tokenId;
        private DateTime m_createdAt;
        private uint m_revisedLifetime;
        #endregion
    }
    #endif
    #endregion

    #region OpenSecureChannelRequest Class
    #if (!OPCUA_EXCLUDE_OpenSecureChannelRequest)
    /// <summary>
    /// Creates a secure channel with a server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class OpenSecureChannelRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public OpenSecureChannelRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_clientProtocolVersion = (uint)0;
            m_requestType = SecurityTokenRequestType.Issue;
            m_securityMode = MessageSecurityMode.Invalid;
            m_clientNonce = null;
            m_requestedLifetime = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The version of protocol used by the client.
        /// </summary>
        [DataMember(Name = "ClientProtocolVersion", IsRequired = false, Order = 2)]
        public uint ClientProtocolVersion
        {
            get { return m_clientProtocolVersion;  }
            set { m_clientProtocolVersion = value; }
        }

        /// <summary>
        /// Whether the channel is being created or renewed.
        /// </summary>
        [DataMember(Name = "RequestType", IsRequired = false, Order = 3)]
        public SecurityTokenRequestType RequestType
        {
            get { return m_requestType;  }
            set { m_requestType = value; }
        }

        /// <summary>
        /// The security mode to use with the channel.
        /// </summary>
        [DataMember(Name = "SecurityMode", IsRequired = false, Order = 4)]
        public MessageSecurityMode SecurityMode
        {
            get { return m_securityMode;  }
            set { m_securityMode = value; }
        }

        /// <summary>
        /// A random number generated by the client.
        /// </summary>
        [DataMember(Name = "ClientNonce", IsRequired = false, Order = 5)]
        public byte[] ClientNonce
        {
            get { return m_clientNonce;  }
            set { m_clientNonce = value; }
        }

        /// <summary>
        /// The channel lifetime in milliseconds.
        /// </summary>
        [DataMember(Name = "RequestedLifetime", IsRequired = false, Order = 6)]
        public uint RequestedLifetime
        {
            get { return m_requestedLifetime;  }
            set { m_requestedLifetime = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.OpenSecureChannelRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.OpenSecureChannelRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.OpenSecureChannelRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("ClientProtocolVersion", ClientProtocolVersion);
            encoder.WriteEnumerated("RequestType", RequestType);
            encoder.WriteEnumerated("SecurityMode", SecurityMode);
            encoder.WriteByteString("ClientNonce", ClientNonce);
            encoder.WriteUInt32("RequestedLifetime", RequestedLifetime);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ClientProtocolVersion = decoder.ReadUInt32("ClientProtocolVersion");
            RequestType = (SecurityTokenRequestType)decoder.ReadEnumerated("RequestType", typeof(SecurityTokenRequestType));
            SecurityMode = (MessageSecurityMode)decoder.ReadEnumerated("SecurityMode", typeof(MessageSecurityMode));
            ClientNonce = decoder.ReadByteString("ClientNonce");
            RequestedLifetime = decoder.ReadUInt32("RequestedLifetime");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            OpenSecureChannelRequest value = encodeable as OpenSecureChannelRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_clientProtocolVersion, value.m_clientProtocolVersion)) return false;
            if (!Utils.IsEqual(m_requestType, value.m_requestType)) return false;
            if (!Utils.IsEqual(m_securityMode, value.m_securityMode)) return false;
            if (!Utils.IsEqual(m_clientNonce, value.m_clientNonce)) return false;
            if (!Utils.IsEqual(m_requestedLifetime, value.m_requestedLifetime)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            OpenSecureChannelRequest clone = new OpenSecureChannelRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_clientProtocolVersion = (uint)Utils.Clone(this.m_clientProtocolVersion);
            clone.m_requestType = (SecurityTokenRequestType)Utils.Clone(this.m_requestType);
            clone.m_securityMode = (MessageSecurityMode)Utils.Clone(this.m_securityMode);
            clone.m_clientNonce = (byte[])Utils.Clone(this.m_clientNonce);
            clone.m_requestedLifetime = (uint)Utils.Clone(this.m_requestedLifetime);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_clientProtocolVersion;
        private SecurityTokenRequestType m_requestType;
        private MessageSecurityMode m_securityMode;
        private byte[] m_clientNonce;
        private uint m_requestedLifetime;
        #endregion
    }
    #endif
    #endregion

    #region OpenSecureChannelResponse Class
    #if (!OPCUA_EXCLUDE_OpenSecureChannelResponse)
    /// <summary>
    /// Creates a secure channel with a server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class OpenSecureChannelResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public OpenSecureChannelResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_serverProtocolVersion = (uint)0;
            m_securityToken = new ChannelSecurityToken();
            m_serverNonce = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The version of protocol used by the server.
        /// </summary>
        [DataMember(Name = "ServerProtocolVersion", IsRequired = false, Order = 2)]
        public uint ServerProtocolVersion
        {
            get { return m_serverProtocolVersion;  }
            set { m_serverProtocolVersion = value; }
        }

        /// <summary>
        /// The token that identifies the new secure channel.
        /// </summary>
        [DataMember(Name = "SecurityToken", IsRequired = false, Order = 3)]
        public ChannelSecurityToken SecurityToken
        {
            get
            {
                return m_securityToken;
            }

            set
            {
                m_securityToken = value;

                if (value == null)
                {
                    m_securityToken = new ChannelSecurityToken();
                }
            }
        }

        /// <summary>
        /// A random number generated by the server.
        /// </summary>
        [DataMember(Name = "ServerNonce", IsRequired = false, Order = 4)]
        public byte[] ServerNonce
        {
            get { return m_serverNonce;  }
            set { m_serverNonce = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.OpenSecureChannelResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.OpenSecureChannelResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.OpenSecureChannelResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteUInt32("ServerProtocolVersion", ServerProtocolVersion);
            encoder.WriteEncodeable("SecurityToken", SecurityToken, typeof(ChannelSecurityToken));
            encoder.WriteByteString("ServerNonce", ServerNonce);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            ServerProtocolVersion = decoder.ReadUInt32("ServerProtocolVersion");
            SecurityToken = (ChannelSecurityToken)decoder.ReadEncodeable("SecurityToken", typeof(ChannelSecurityToken));
            ServerNonce = decoder.ReadByteString("ServerNonce");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            OpenSecureChannelResponse value = encodeable as OpenSecureChannelResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_serverProtocolVersion, value.m_serverProtocolVersion)) return false;
            if (!Utils.IsEqual(m_securityToken, value.m_securityToken)) return false;
            if (!Utils.IsEqual(m_serverNonce, value.m_serverNonce)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            OpenSecureChannelResponse clone = new OpenSecureChannelResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_serverProtocolVersion = (uint)Utils.Clone(this.m_serverProtocolVersion);
            clone.m_securityToken = (ChannelSecurityToken)Utils.Clone(this.m_securityToken);
            clone.m_serverNonce = (byte[])Utils.Clone(this.m_serverNonce);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private uint m_serverProtocolVersion;
        private ChannelSecurityToken m_securityToken;
        private byte[] m_serverNonce;
        #endregion
    }
    #endif
    #endregion

    #region CloseSecureChannelRequest Class
    #if (!OPCUA_EXCLUDE_CloseSecureChannelRequest)
    /// <summary>
    /// Closes a secure channel.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CloseSecureChannelRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CloseSecureChannelRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CloseSecureChannelRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CloseSecureChannelRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CloseSecureChannelRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CloseSecureChannelRequest value = encodeable as CloseSecureChannelRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CloseSecureChannelRequest clone = new CloseSecureChannelRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        #endregion
    }
    #endif
    #endregion

    #region CloseSecureChannelResponse Class
    #if (!OPCUA_EXCLUDE_CloseSecureChannelResponse)
    /// <summary>
    /// Closes a secure channel.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CloseSecureChannelResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CloseSecureChannelResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CloseSecureChannelResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CloseSecureChannelResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CloseSecureChannelResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CloseSecureChannelResponse value = encodeable as CloseSecureChannelResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CloseSecureChannelResponse clone = new CloseSecureChannelResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        #endregion
    }
    #endif
    #endregion

    #region SignedSoftwareCertificate Class
    #if (!OPCUA_EXCLUDE_SignedSoftwareCertificate)
    /// <summary>
    /// A software certificate with a digital signature.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SignedSoftwareCertificate : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SignedSoftwareCertificate()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_certificateData = null;
            m_signature = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The data of the certificate.
        /// </summary>
        [DataMember(Name = "CertificateData", IsRequired = false, Order = 1)]
        public byte[] CertificateData
        {
            get { return m_certificateData;  }
            set { m_certificateData = value; }
        }

        /// <summary>
        /// The digital signature.
        /// </summary>
        [DataMember(Name = "Signature", IsRequired = false, Order = 2)]
        public byte[] Signature
        {
            get { return m_signature;  }
            set { m_signature = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SignedSoftwareCertificate; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SignedSoftwareCertificate_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SignedSoftwareCertificate_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByteString("CertificateData", CertificateData);
            encoder.WriteByteString("Signature", Signature);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            CertificateData = decoder.ReadByteString("CertificateData");
            Signature = decoder.ReadByteString("Signature");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SignedSoftwareCertificate value = encodeable as SignedSoftwareCertificate;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_certificateData, value.m_certificateData)) return false;
            if (!Utils.IsEqual(m_signature, value.m_signature)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SignedSoftwareCertificate clone = new SignedSoftwareCertificate();

            clone.m_certificateData = (byte[])Utils.Clone(this.m_certificateData);
            clone.m_signature = (byte[])Utils.Clone(this.m_signature);

            return clone;
        }
        #endregion

        #region Private Fields
        private byte[] m_certificateData;
        private byte[] m_signature;
        #endregion
    }

    #region SignedSoftwareCertificateCollection Class
    /// <summary>
    /// A collection of SignedSoftwareCertificate objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSignedSoftwareCertificate", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SignedSoftwareCertificate")]
    public partial class SignedSoftwareCertificateCollection : List<SignedSoftwareCertificate>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SignedSoftwareCertificateCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SignedSoftwareCertificateCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SignedSoftwareCertificateCollection(IEnumerable<SignedSoftwareCertificate> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SignedSoftwareCertificateCollection(SignedSoftwareCertificate[] values)
        {
            if (values != null)
            {
                return new SignedSoftwareCertificateCollection(values);
            }

            return new SignedSoftwareCertificateCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SignedSoftwareCertificate[](SignedSoftwareCertificateCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SignedSoftwareCertificateCollection clone = new SignedSoftwareCertificateCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SignedSoftwareCertificate)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region SignatureData Class
    #if (!OPCUA_EXCLUDE_SignatureData)
    /// <summary>
    /// A digital signature.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SignatureData : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SignatureData()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_algorithm = null;
            m_signature = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The cryptography algorithm used to create the signature.
        /// </summary>
        [DataMember(Name = "Algorithm", IsRequired = false, Order = 1)]
        public string Algorithm
        {
            get { return m_algorithm;  }
            set { m_algorithm = value; }
        }

        /// <summary>
        /// The signature.
        /// </summary>
        [DataMember(Name = "Signature", IsRequired = false, Order = 2)]
        public byte[] Signature
        {
            get { return m_signature;  }
            set { m_signature = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SignatureData; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SignatureData_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SignatureData_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("Algorithm", Algorithm);
            encoder.WriteByteString("Signature", Signature);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Algorithm = decoder.ReadString("Algorithm");
            Signature = decoder.ReadByteString("Signature");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SignatureData value = encodeable as SignatureData;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_algorithm, value.m_algorithm)) return false;
            if (!Utils.IsEqual(m_signature, value.m_signature)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SignatureData clone = new SignatureData();

            clone.m_algorithm = (string)Utils.Clone(this.m_algorithm);
            clone.m_signature = (byte[])Utils.Clone(this.m_signature);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_algorithm;
        private byte[] m_signature;
        #endregion
    }
    #endif
    #endregion

    #region CreateSessionRequest Class
    #if (!OPCUA_EXCLUDE_CreateSessionRequest)
    /// <summary>
    /// Creates a new session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateSessionRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateSessionRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_clientDescription = new ApplicationDescription();
            m_serverUri = null;
            m_endpointUrl = null;
            m_sessionName = null;
            m_clientNonce = null;
            m_clientCertificate = null;
            m_requestedSessionTimeout = (double)0;
            m_maxResponseMessageSize = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// Describes the client application.
        /// </summary>
        [DataMember(Name = "ClientDescription", IsRequired = false, Order = 2)]
        public ApplicationDescription ClientDescription
        {
            get
            {
                return m_clientDescription;
            }

            set
            {
                m_clientDescription = value;

                if (value == null)
                {
                    m_clientDescription = new ApplicationDescription();
                }
            }
        }

        /// <summary>
        /// The URI of the server that the client wants to create a session with.
        /// </summary>
        [DataMember(Name = "ServerUri", IsRequired = false, Order = 3)]
        public string ServerUri
        {
            get { return m_serverUri;  }
            set { m_serverUri = value; }
        }

        /// <summary>
        /// The URL that the client used to connect to the server.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 4)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// A name for the session provided by the client.
        /// </summary>
        [DataMember(Name = "SessionName", IsRequired = false, Order = 5)]
        public string SessionName
        {
            get { return m_sessionName;  }
            set { m_sessionName = value; }
        }

        /// <summary>
        /// A random number generated by the client.
        /// </summary>
        [DataMember(Name = "ClientNonce", IsRequired = false, Order = 6)]
        public byte[] ClientNonce
        {
            get { return m_clientNonce;  }
            set { m_clientNonce = value; }
        }

        /// <summary>
        /// The application certificate for the client.
        /// </summary>
        [DataMember(Name = "ClientCertificate", IsRequired = false, Order = 7)]
        public byte[] ClientCertificate
        {
            get { return m_clientCertificate;  }
            set { m_clientCertificate = value; }
        }

        /// <summary>
        /// The requested session timeout in milliseconds.
        /// </summary>
        [DataMember(Name = "RequestedSessionTimeout", IsRequired = false, Order = 8)]
        public double RequestedSessionTimeout
        {
            get { return m_requestedSessionTimeout;  }
            set { m_requestedSessionTimeout = value; }
        }

        /// <summary>
        /// The maximum message size accepted by the client.
        /// </summary>
        [DataMember(Name = "MaxResponseMessageSize", IsRequired = false, Order = 9)]
        public uint MaxResponseMessageSize
        {
            get { return m_maxResponseMessageSize;  }
            set { m_maxResponseMessageSize = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateSessionRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateSessionRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateSessionRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeable("ClientDescription", ClientDescription, typeof(ApplicationDescription));
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteString("SessionName", SessionName);
            encoder.WriteByteString("ClientNonce", ClientNonce);
            encoder.WriteByteString("ClientCertificate", ClientCertificate);
            encoder.WriteDouble("RequestedSessionTimeout", RequestedSessionTimeout);
            encoder.WriteUInt32("MaxResponseMessageSize", MaxResponseMessageSize);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ClientDescription = (ApplicationDescription)decoder.ReadEncodeable("ClientDescription", typeof(ApplicationDescription));
            ServerUri = decoder.ReadString("ServerUri");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            SessionName = decoder.ReadString("SessionName");
            ClientNonce = decoder.ReadByteString("ClientNonce");
            ClientCertificate = decoder.ReadByteString("ClientCertificate");
            RequestedSessionTimeout = decoder.ReadDouble("RequestedSessionTimeout");
            MaxResponseMessageSize = decoder.ReadUInt32("MaxResponseMessageSize");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateSessionRequest value = encodeable as CreateSessionRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_clientDescription, value.m_clientDescription)) return false;
            if (!Utils.IsEqual(m_serverUri, value.m_serverUri)) return false;
            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_sessionName, value.m_sessionName)) return false;
            if (!Utils.IsEqual(m_clientNonce, value.m_clientNonce)) return false;
            if (!Utils.IsEqual(m_clientCertificate, value.m_clientCertificate)) return false;
            if (!Utils.IsEqual(m_requestedSessionTimeout, value.m_requestedSessionTimeout)) return false;
            if (!Utils.IsEqual(m_maxResponseMessageSize, value.m_maxResponseMessageSize)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateSessionRequest clone = new CreateSessionRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_clientDescription = (ApplicationDescription)Utils.Clone(this.m_clientDescription);
            clone.m_serverUri = (string)Utils.Clone(this.m_serverUri);
            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_sessionName = (string)Utils.Clone(this.m_sessionName);
            clone.m_clientNonce = (byte[])Utils.Clone(this.m_clientNonce);
            clone.m_clientCertificate = (byte[])Utils.Clone(this.m_clientCertificate);
            clone.m_requestedSessionTimeout = (double)Utils.Clone(this.m_requestedSessionTimeout);
            clone.m_maxResponseMessageSize = (uint)Utils.Clone(this.m_maxResponseMessageSize);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private ApplicationDescription m_clientDescription;
        private string m_serverUri;
        private string m_endpointUrl;
        private string m_sessionName;
        private byte[] m_clientNonce;
        private byte[] m_clientCertificate;
        private double m_requestedSessionTimeout;
        private uint m_maxResponseMessageSize;
        #endregion
    }
    #endif
    #endregion

    #region CreateSessionResponse Class
    #if (!OPCUA_EXCLUDE_CreateSessionResponse)
    /// <summary>
    /// Creates a new session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateSessionResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateSessionResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_sessionId = null;
            m_authenticationToken = null;
            m_revisedSessionTimeout = (double)0;
            m_serverNonce = null;
            m_serverCertificate = null;
            m_serverEndpoints = new EndpointDescriptionCollection();
            m_serverSoftwareCertificates = new SignedSoftwareCertificateCollection();
            m_serverSignature = new SignatureData();
            m_maxRequestMessageSize = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A identifier which uniquely identifies the session.
        /// </summary>
        [DataMember(Name = "SessionId", IsRequired = false, Order = 2)]
        public NodeId SessionId
        {
            get { return m_sessionId;  }
            set { m_sessionId = value; }
        }

        /// <summary>
        /// The token used to authenticate the client in subsequent requests.
        /// </summary>
        [DataMember(Name = "AuthenticationToken", IsRequired = false, Order = 3)]
        public NodeId AuthenticationToken
        {
            get { return m_authenticationToken;  }
            set { m_authenticationToken = value; }
        }

        /// <summary>
        /// The session timeout in milliseconds.
        /// </summary>
        [DataMember(Name = "RevisedSessionTimeout", IsRequired = false, Order = 4)]
        public double RevisedSessionTimeout
        {
            get { return m_revisedSessionTimeout;  }
            set { m_revisedSessionTimeout = value; }
        }

        /// <summary>
        /// A random number generated by the server.
        /// </summary>
        [DataMember(Name = "ServerNonce", IsRequired = false, Order = 5)]
        public byte[] ServerNonce
        {
            get { return m_serverNonce;  }
            set { m_serverNonce = value; }
        }

        /// <summary>
        /// The application certificate for the server.
        /// </summary>
        [DataMember(Name = "ServerCertificate", IsRequired = false, Order = 6)]
        public byte[] ServerCertificate
        {
            get { return m_serverCertificate;  }
            set { m_serverCertificate = value; }
        }

        /// <summary>
        /// The endpoints provided by the server.
        /// </summary>
        [DataMember(Name = "ServerEndpoints", IsRequired = false, Order = 7)]
        public EndpointDescriptionCollection ServerEndpoints
        {
            get
            {
                return m_serverEndpoints;
            }

            set
            {
                m_serverEndpoints = value;

                if (value == null)
                {
                    m_serverEndpoints = new EndpointDescriptionCollection();
                }
            }
        }

        /// <summary>
        /// The software certificates owned by the server.
        /// </summary>
        [DataMember(Name = "ServerSoftwareCertificates", IsRequired = false, Order = 8)]
        public SignedSoftwareCertificateCollection ServerSoftwareCertificates
        {
            get
            {
                return m_serverSoftwareCertificates;
            }

            set
            {
                m_serverSoftwareCertificates = value;

                if (value == null)
                {
                    m_serverSoftwareCertificates = new SignedSoftwareCertificateCollection();
                }
            }
        }

        /// <summary>
        /// A signature created with the server certificate.
        /// </summary>
        [DataMember(Name = "ServerSignature", IsRequired = false, Order = 9)]
        public SignatureData ServerSignature
        {
            get
            {
                return m_serverSignature;
            }

            set
            {
                m_serverSignature = value;

                if (value == null)
                {
                    m_serverSignature = new SignatureData();
                }
            }
        }

        /// <summary>
        /// The maximum message size accepted by the server.
        /// </summary>
        [DataMember(Name = "MaxRequestMessageSize", IsRequired = false, Order = 10)]
        public uint MaxRequestMessageSize
        {
            get { return m_maxRequestMessageSize;  }
            set { m_maxRequestMessageSize = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateSessionResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateSessionResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateSessionResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteNodeId("AuthenticationToken", AuthenticationToken);
            encoder.WriteDouble("RevisedSessionTimeout", RevisedSessionTimeout);
            encoder.WriteByteString("ServerNonce", ServerNonce);
            encoder.WriteByteString("ServerCertificate", ServerCertificate);
            encoder.WriteEncodeableArray("ServerEndpoints", ServerEndpoints.ToArray(), typeof(EndpointDescription));
            encoder.WriteEncodeableArray("ServerSoftwareCertificates", ServerSoftwareCertificates.ToArray(), typeof(SignedSoftwareCertificate));
            encoder.WriteEncodeable("ServerSignature", ServerSignature, typeof(SignatureData));
            encoder.WriteUInt32("MaxRequestMessageSize", MaxRequestMessageSize);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            SessionId = decoder.ReadNodeId("SessionId");
            AuthenticationToken = decoder.ReadNodeId("AuthenticationToken");
            RevisedSessionTimeout = decoder.ReadDouble("RevisedSessionTimeout");
            ServerNonce = decoder.ReadByteString("ServerNonce");
            ServerCertificate = decoder.ReadByteString("ServerCertificate");
            ServerEndpoints = (EndpointDescriptionCollection)decoder.ReadEncodeableArray("ServerEndpoints", typeof(EndpointDescription));
            ServerSoftwareCertificates = (SignedSoftwareCertificateCollection)decoder.ReadEncodeableArray("ServerSoftwareCertificates", typeof(SignedSoftwareCertificate));
            ServerSignature = (SignatureData)decoder.ReadEncodeable("ServerSignature", typeof(SignatureData));
            MaxRequestMessageSize = decoder.ReadUInt32("MaxRequestMessageSize");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateSessionResponse value = encodeable as CreateSessionResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_sessionId, value.m_sessionId)) return false;
            if (!Utils.IsEqual(m_authenticationToken, value.m_authenticationToken)) return false;
            if (!Utils.IsEqual(m_revisedSessionTimeout, value.m_revisedSessionTimeout)) return false;
            if (!Utils.IsEqual(m_serverNonce, value.m_serverNonce)) return false;
            if (!Utils.IsEqual(m_serverCertificate, value.m_serverCertificate)) return false;
            if (!Utils.IsEqual(m_serverEndpoints, value.m_serverEndpoints)) return false;
            if (!Utils.IsEqual(m_serverSoftwareCertificates, value.m_serverSoftwareCertificates)) return false;
            if (!Utils.IsEqual(m_serverSignature, value.m_serverSignature)) return false;
            if (!Utils.IsEqual(m_maxRequestMessageSize, value.m_maxRequestMessageSize)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateSessionResponse clone = new CreateSessionResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_sessionId = (NodeId)Utils.Clone(this.m_sessionId);
            clone.m_authenticationToken = (NodeId)Utils.Clone(this.m_authenticationToken);
            clone.m_revisedSessionTimeout = (double)Utils.Clone(this.m_revisedSessionTimeout);
            clone.m_serverNonce = (byte[])Utils.Clone(this.m_serverNonce);
            clone.m_serverCertificate = (byte[])Utils.Clone(this.m_serverCertificate);
            clone.m_serverEndpoints = (EndpointDescriptionCollection)Utils.Clone(this.m_serverEndpoints);
            clone.m_serverSoftwareCertificates = (SignedSoftwareCertificateCollection)Utils.Clone(this.m_serverSoftwareCertificates);
            clone.m_serverSignature = (SignatureData)Utils.Clone(this.m_serverSignature);
            clone.m_maxRequestMessageSize = (uint)Utils.Clone(this.m_maxRequestMessageSize);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private NodeId m_sessionId;
        private NodeId m_authenticationToken;
        private double m_revisedSessionTimeout;
        private byte[] m_serverNonce;
        private byte[] m_serverCertificate;
        private EndpointDescriptionCollection m_serverEndpoints;
        private SignedSoftwareCertificateCollection m_serverSoftwareCertificates;
        private SignatureData m_serverSignature;
        private uint m_maxRequestMessageSize;
        #endregion
    }
    #endif
    #endregion

    #region UserIdentityToken Class
    #if (!OPCUA_EXCLUDE_UserIdentityToken)
    /// <summary>
    /// A base type for a user identity token.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UserIdentityToken : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UserIdentityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_policyId = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The policy id specified in a user token policy for the endpoint being used.
        /// </summary>
        [DataMember(Name = "PolicyId", IsRequired = false, Order = 1)]
        public string PolicyId
        {
            get { return m_policyId;  }
            set { m_policyId = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UserIdentityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UserIdentityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UserIdentityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("PolicyId", PolicyId);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            PolicyId = decoder.ReadString("PolicyId");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UserIdentityToken value = encodeable as UserIdentityToken;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_policyId, value.m_policyId)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UserIdentityToken clone = new UserIdentityToken();

            clone.m_policyId = (string)Utils.Clone(this.m_policyId);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_policyId;
        #endregion
    }
    #endif
    #endregion

    #region AnonymousIdentityToken Class
    #if (!OPCUA_EXCLUDE_AnonymousIdentityToken)
    /// <summary>
    /// A token representing an anonymous user.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AnonymousIdentityToken : UserIdentityToken
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AnonymousIdentityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AnonymousIdentityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AnonymousIdentityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AnonymousIdentityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AnonymousIdentityToken value = encodeable as AnonymousIdentityToken;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        #endregion
    }
    #endif
    #endregion

    #region UserNameIdentityToken Class
    #if (!OPCUA_EXCLUDE_UserNameIdentityToken)
    /// <summary>
    /// A token representing a user identified by a user name and password.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UserNameIdentityToken : UserIdentityToken
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UserNameIdentityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_userName = null;
            m_password = null;
            m_encryptionAlgorithm = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The user name.
        /// </summary>
        [DataMember(Name = "UserName", IsRequired = false, Order = 1)]
        public string UserName
        {
            get { return m_userName;  }
            set { m_userName = value; }
        }

        /// <summary>
        /// The password encrypted with the server certificate.
        /// </summary>
        [DataMember(Name = "Password", IsRequired = false, Order = 2)]
        public byte[] Password
        {
            get { return m_password;  }
            set { m_password = value; }
        }

        /// <summary>
        /// The algorithm used to encrypt the password.
        /// </summary>
        [DataMember(Name = "EncryptionAlgorithm", IsRequired = false, Order = 3)]
        public string EncryptionAlgorithm
        {
            get { return m_encryptionAlgorithm;  }
            set { m_encryptionAlgorithm = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UserNameIdentityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UserNameIdentityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UserNameIdentityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("UserName", UserName);
            encoder.WriteByteString("Password", Password);
            encoder.WriteString("EncryptionAlgorithm", EncryptionAlgorithm);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            UserName = decoder.ReadString("UserName");
            Password = decoder.ReadByteString("Password");
            EncryptionAlgorithm = decoder.ReadString("EncryptionAlgorithm");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UserNameIdentityToken value = encodeable as UserNameIdentityToken;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_userName, value.m_userName)) return false;
            if (!Utils.IsEqual(m_password, value.m_password)) return false;
            if (!Utils.IsEqual(m_encryptionAlgorithm, value.m_encryptionAlgorithm)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UserNameIdentityToken clone = new UserNameIdentityToken();

            clone.m_userName = (string)Utils.Clone(this.m_userName);
            clone.m_password = (byte[])Utils.Clone(this.m_password);
            clone.m_encryptionAlgorithm = (string)Utils.Clone(this.m_encryptionAlgorithm);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_userName;
        private byte[] m_password;
        private string m_encryptionAlgorithm;
        #endregion
    }
    #endif
    #endregion

    #region X509IdentityToken Class
    #if (!OPCUA_EXCLUDE_X509IdentityToken)
    /// <summary>
    /// A token representing a user identified by an X509 certificate.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class X509IdentityToken : UserIdentityToken
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public X509IdentityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_certificateData = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The certificate.
        /// </summary>
        [DataMember(Name = "CertificateData", IsRequired = false, Order = 1)]
        public byte[] CertificateData
        {
            get { return m_certificateData;  }
            set { m_certificateData = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.X509IdentityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.X509IdentityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.X509IdentityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByteString("CertificateData", CertificateData);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            CertificateData = decoder.ReadByteString("CertificateData");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            X509IdentityToken value = encodeable as X509IdentityToken;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_certificateData, value.m_certificateData)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            X509IdentityToken clone = new X509IdentityToken();

            clone.m_certificateData = (byte[])Utils.Clone(this.m_certificateData);

            return clone;
        }
        #endregion

        #region Private Fields
        private byte[] m_certificateData;
        #endregion
    }
    #endif
    #endregion

    #region IssuedIdentityToken Class
    #if (!OPCUA_EXCLUDE_IssuedIdentityToken)
    /// <summary>
    /// A token representing a user identified by a WS-Security XML token.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class IssuedIdentityToken : UserIdentityToken
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public IssuedIdentityToken()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_tokenData = null;
            m_encryptionAlgorithm = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The XML token encrypted with the server certificate.
        /// </summary>
        [DataMember(Name = "TokenData", IsRequired = false, Order = 1)]
        public byte[] TokenData
        {
            get { return m_tokenData;  }
            set { m_tokenData = value; }
        }

        /// <summary>
        /// The algorithm used to encrypt the certificate.
        /// </summary>
        [DataMember(Name = "EncryptionAlgorithm", IsRequired = false, Order = 2)]
        public string EncryptionAlgorithm
        {
            get { return m_encryptionAlgorithm;  }
            set { m_encryptionAlgorithm = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.IssuedIdentityToken; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.IssuedIdentityToken_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.IssuedIdentityToken_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByteString("TokenData", TokenData);
            encoder.WriteString("EncryptionAlgorithm", EncryptionAlgorithm);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            TokenData = decoder.ReadByteString("TokenData");
            EncryptionAlgorithm = decoder.ReadString("EncryptionAlgorithm");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            IssuedIdentityToken value = encodeable as IssuedIdentityToken;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_tokenData, value.m_tokenData)) return false;
            if (!Utils.IsEqual(m_encryptionAlgorithm, value.m_encryptionAlgorithm)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            IssuedIdentityToken clone = new IssuedIdentityToken();

            clone.m_tokenData = (byte[])Utils.Clone(this.m_tokenData);
            clone.m_encryptionAlgorithm = (string)Utils.Clone(this.m_encryptionAlgorithm);

            return clone;
        }
        #endregion

        #region Private Fields
        private byte[] m_tokenData;
        private string m_encryptionAlgorithm;
        #endregion
    }
    #endif
    #endregion

    #region ActivateSessionRequest Class
    #if (!OPCUA_EXCLUDE_ActivateSessionRequest)
    /// <summary>
    /// Activates a session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ActivateSessionRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ActivateSessionRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_clientSignature = new SignatureData();
            m_clientSoftwareCertificates = new SignedSoftwareCertificateCollection();
            m_localeIds = new StringCollection();
            m_userIdentityToken = null;
            m_userTokenSignature = new SignatureData();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A signature created with the client certificate from the last server nonce returned by the server.
        /// </summary>
        [DataMember(Name = "ClientSignature", IsRequired = false, Order = 2)]
        public SignatureData ClientSignature
        {
            get
            {
                return m_clientSignature;
            }

            set
            {
                m_clientSignature = value;

                if (value == null)
                {
                    m_clientSignature = new SignatureData();
                }
            }
        }

        /// <summary>
        /// The software certificates owned by the client.
        /// </summary>
        [DataMember(Name = "ClientSoftwareCertificates", IsRequired = false, Order = 3)]
        public SignedSoftwareCertificateCollection ClientSoftwareCertificates
        {
            get
            {
                return m_clientSoftwareCertificates;
            }

            set
            {
                m_clientSoftwareCertificates = value;

                if (value == null)
                {
                    m_clientSoftwareCertificates = new SignedSoftwareCertificateCollection();
                }
            }
        }

        /// <summary>
        /// The locales to use with the session.
        /// </summary>
        [DataMember(Name = "LocaleIds", IsRequired = false, Order = 4)]
        public StringCollection LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                m_localeIds = value;

                if (value == null)
                {
                    m_localeIds = new StringCollection();
                }
            }
        }

        /// <summary>
        /// The user identity to use with the session.
        /// </summary>
        [DataMember(Name = "UserIdentityToken", IsRequired = false, Order = 5)]
        public ExtensionObject UserIdentityToken
        {
            get { return m_userIdentityToken;  }
            set { m_userIdentityToken = value; }
        }

        /// <summary>
        /// A digital signature created with the user identity token.
        /// </summary>
        [DataMember(Name = "UserTokenSignature", IsRequired = false, Order = 6)]
        public SignatureData UserTokenSignature
        {
            get
            {
                return m_userTokenSignature;
            }

            set
            {
                m_userTokenSignature = value;

                if (value == null)
                {
                    m_userTokenSignature = new SignatureData();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ActivateSessionRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ActivateSessionRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ActivateSessionRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeable("ClientSignature", ClientSignature, typeof(SignatureData));
            encoder.WriteEncodeableArray("ClientSoftwareCertificates", ClientSoftwareCertificates.ToArray(), typeof(SignedSoftwareCertificate));
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteExtensionObject("UserIdentityToken", UserIdentityToken);
            encoder.WriteEncodeable("UserTokenSignature", UserTokenSignature, typeof(SignatureData));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ClientSignature = (SignatureData)decoder.ReadEncodeable("ClientSignature", typeof(SignatureData));
            ClientSoftwareCertificates = (SignedSoftwareCertificateCollection)decoder.ReadEncodeableArray("ClientSoftwareCertificates", typeof(SignedSoftwareCertificate));
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            UserIdentityToken = decoder.ReadExtensionObject("UserIdentityToken");
            UserTokenSignature = (SignatureData)decoder.ReadEncodeable("UserTokenSignature", typeof(SignatureData));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ActivateSessionRequest value = encodeable as ActivateSessionRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_clientSignature, value.m_clientSignature)) return false;
            if (!Utils.IsEqual(m_clientSoftwareCertificates, value.m_clientSoftwareCertificates)) return false;
            if (!Utils.IsEqual(m_localeIds, value.m_localeIds)) return false;
            if (!Utils.IsEqual(m_userIdentityToken, value.m_userIdentityToken)) return false;
            if (!Utils.IsEqual(m_userTokenSignature, value.m_userTokenSignature)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ActivateSessionRequest clone = new ActivateSessionRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_clientSignature = (SignatureData)Utils.Clone(this.m_clientSignature);
            clone.m_clientSoftwareCertificates = (SignedSoftwareCertificateCollection)Utils.Clone(this.m_clientSoftwareCertificates);
            clone.m_localeIds = (StringCollection)Utils.Clone(this.m_localeIds);
            clone.m_userIdentityToken = (ExtensionObject)Utils.Clone(this.m_userIdentityToken);
            clone.m_userTokenSignature = (SignatureData)Utils.Clone(this.m_userTokenSignature);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private SignatureData m_clientSignature;
        private SignedSoftwareCertificateCollection m_clientSoftwareCertificates;
        private StringCollection m_localeIds;
        private ExtensionObject m_userIdentityToken;
        private SignatureData m_userTokenSignature;
        #endregion
    }
    #endif
    #endregion

    #region ActivateSessionResponse Class
    #if (!OPCUA_EXCLUDE_ActivateSessionResponse)
    /// <summary>
    /// Activates a session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ActivateSessionResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ActivateSessionResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_serverNonce = null;
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A random number generated by the server.
        /// </summary>
        [DataMember(Name = "ServerNonce", IsRequired = false, Order = 2)]
        public byte[] ServerNonce
        {
            get { return m_serverNonce;  }
            set { m_serverNonce = value; }
        }

        /// <summary>
        /// Any errors during validation of the software certificates.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 3)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the software certificates results.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 4)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ActivateSessionResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ActivateSessionResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ActivateSessionResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteByteString("ServerNonce", ServerNonce);
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            ServerNonce = decoder.ReadByteString("ServerNonce");
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ActivateSessionResponse value = encodeable as ActivateSessionResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_serverNonce, value.m_serverNonce)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ActivateSessionResponse clone = new ActivateSessionResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_serverNonce = (byte[])Utils.Clone(this.m_serverNonce);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private byte[] m_serverNonce;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region CloseSessionRequest Class
    #if (!OPCUA_EXCLUDE_CloseSessionRequest)
    /// <summary>
    /// Closes a session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CloseSessionRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CloseSessionRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_deleteSubscriptions = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// If TRUE all subscriptions are deleted when the session is closed.
        /// </summary>
        [DataMember(Name = "DeleteSubscriptions", IsRequired = false, Order = 2)]
        public bool DeleteSubscriptions
        {
            get { return m_deleteSubscriptions;  }
            set { m_deleteSubscriptions = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CloseSessionRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CloseSessionRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CloseSessionRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteBoolean("DeleteSubscriptions", DeleteSubscriptions);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            DeleteSubscriptions = decoder.ReadBoolean("DeleteSubscriptions");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CloseSessionRequest value = encodeable as CloseSessionRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_deleteSubscriptions, value.m_deleteSubscriptions)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CloseSessionRequest clone = new CloseSessionRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_deleteSubscriptions = (bool)Utils.Clone(this.m_deleteSubscriptions);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private bool m_deleteSubscriptions;
        #endregion
    }
    #endif
    #endregion

    #region CloseSessionResponse Class
    #if (!OPCUA_EXCLUDE_CloseSessionResponse)
    /// <summary>
    /// Closes a session with the server.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CloseSessionResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CloseSessionResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CloseSessionResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CloseSessionResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CloseSessionResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CloseSessionResponse value = encodeable as CloseSessionResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CloseSessionResponse clone = new CloseSessionResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        #endregion
    }
    #endif
    #endregion

    #region CancelRequest Class
    #if (!OPCUA_EXCLUDE_CancelRequest)
    /// <summary>
    /// Cancels an outstanding request.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CancelRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CancelRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_requestHandle = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The handle assigned by the client to the requests being cancelled.
        /// </summary>
        [DataMember(Name = "RequestHandle", IsRequired = false, Order = 2)]
        public uint RequestHandle
        {
            get { return m_requestHandle;  }
            set { m_requestHandle = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CancelRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CancelRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CancelRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("RequestHandle", RequestHandle);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            RequestHandle = decoder.ReadUInt32("RequestHandle");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CancelRequest value = encodeable as CancelRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_requestHandle, value.m_requestHandle)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CancelRequest clone = new CancelRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_requestHandle = (uint)Utils.Clone(this.m_requestHandle);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_requestHandle;
        #endregion
    }
    #endif
    #endregion

    #region CancelResponse Class
    #if (!OPCUA_EXCLUDE_CancelResponse)
    /// <summary>
    /// Cancels an outstanding request.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CancelResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CancelResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_cancelCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The number of requests successfully cancelled.
        /// </summary>
        [DataMember(Name = "CancelCount", IsRequired = false, Order = 2)]
        public uint CancelCount
        {
            get { return m_cancelCount;  }
            set { m_cancelCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CancelResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CancelResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CancelResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteUInt32("CancelCount", CancelCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            CancelCount = decoder.ReadUInt32("CancelCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CancelResponse value = encodeable as CancelResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_cancelCount, value.m_cancelCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CancelResponse clone = new CancelResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_cancelCount = (uint)Utils.Clone(this.m_cancelCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private uint m_cancelCount;
        #endregion
    }
    #endif
    #endregion

    #region NodeAttributesMask Enumeration
    #if (!OPCUA_EXCLUDE_NodeAttributesMask)
    /// <summary>
    /// The bits used to specify default attributes for a new node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum NodeAttributesMask
    {
        /// <summary>
        /// No attribuites provided.
        /// </summary>
        [EnumMember(Value = "None_0")]
        None = 0,

        /// <summary>
        /// The access level attribute is specified.
        /// </summary>
        [EnumMember(Value = "AccessLevel_1")]
        AccessLevel = 1,

        /// <summary>
        /// The array dimensions attribute is specified.
        /// </summary>
        [EnumMember(Value = "ArrayDimensions_2")]
        ArrayDimensions = 2,

        /// <summary>
        /// The browse name attribute is specified.
        /// </summary>
        [EnumMember(Value = "BrowseName_4")]
        BrowseName = 4,

        /// <summary>
        /// The contains no loops attribute is specified.
        /// </summary>
        [EnumMember(Value = "ContainsNoLoops_8")]
        ContainsNoLoops = 8,

        /// <summary>
        /// The data type attribute is specified.
        /// </summary>
        [EnumMember(Value = "DataType_16")]
        DataType = 16,

        /// <summary>
        /// The description attribute is specified.
        /// </summary>
        [EnumMember(Value = "Description_32")]
        Description = 32,

        /// <summary>
        /// The display name attribute is specified.
        /// </summary>
        [EnumMember(Value = "DisplayName_64")]
        DisplayName = 64,

        /// <summary>
        /// The event notifier attribute is specified.
        /// </summary>
        [EnumMember(Value = "EventNotifier_128")]
        EventNotifier = 128,

        /// <summary>
        /// The executable attribute is specified.
        /// </summary>
        [EnumMember(Value = "Executable_256")]
        Executable = 256,

        /// <summary>
        /// The historizing attribute is specified.
        /// </summary>
        [EnumMember(Value = "Historizing_512")]
        Historizing = 512,

        /// <summary>
        /// The inverse name attribute is specified.
        /// </summary>
        [EnumMember(Value = "InverseName_1024")]
        InverseName = 1024,

        /// <summary>
        /// The is abstract attribute is specified.
        /// </summary>
        [EnumMember(Value = "IsAbstract_2048")]
        IsAbstract = 2048,

        /// <summary>
        /// The minimum sampling interval attribute is specified.
        /// </summary>
        [EnumMember(Value = "MinimumSamplingInterval_4096")]
        MinimumSamplingInterval = 4096,

        /// <summary>
        /// The node class attribute is specified.
        /// </summary>
        [EnumMember(Value = "NodeClass_8192")]
        NodeClass = 8192,

        /// <summary>
        /// The node id attribute is specified.
        /// </summary>
        [EnumMember(Value = "NodeId_16384")]
        NodeId = 16384,

        /// <summary>
        /// The symmetric attribute is specified.
        /// </summary>
        [EnumMember(Value = "Symmetric_32768")]
        Symmetric = 32768,

        /// <summary>
        /// The user access level attribute is specified.
        /// </summary>
        [EnumMember(Value = "UserAccessLevel_65536")]
        UserAccessLevel = 65536,

        /// <summary>
        /// The user executable attribute is specified.
        /// </summary>
        [EnumMember(Value = "UserExecutable_131072")]
        UserExecutable = 131072,

        /// <summary>
        /// The user write mask attribute is specified.
        /// </summary>
        [EnumMember(Value = "UserWriteMask_262144")]
        UserWriteMask = 262144,

        /// <summary>
        /// The value rank attribute is specified.
        /// </summary>
        [EnumMember(Value = "ValueRank_524288")]
        ValueRank = 524288,

        /// <summary>
        /// The write mask attribute is specified.
        /// </summary>
        [EnumMember(Value = "WriteMask_1048576")]
        WriteMask = 1048576,

        /// <summary>
        /// The value attribute is specified.
        /// </summary>
        [EnumMember(Value = "Value_2097152")]
        Value = 2097152,

        /// <summary>
        /// All attributes are specified.
        /// </summary>
        [EnumMember(Value = "All_4194303")]
        All = 4194303,

        /// <summary>
        /// All base attributes are specified.
        /// </summary>
        [EnumMember(Value = "BaseNode_1335396")]
        BaseNode = 1335396,

        /// <summary>
        /// All object attributes are specified.
        /// </summary>
        [EnumMember(Value = "Object_1335524")]
        Object = 1335524,

        /// <summary>
        /// All object type or data type attributes are specified.
        /// </summary>
        [EnumMember(Value = "ObjectTypeOrDataType_1337444")]
        ObjectTypeOrDataType = 1337444,

        /// <summary>
        /// All variable attributes are specified.
        /// </summary>
        [EnumMember(Value = "Variable_4026999")]
        Variable = 4026999,

        /// <summary>
        /// All variable type attributes are specified.
        /// </summary>
        [EnumMember(Value = "VariableType_3958902")]
        VariableType = 3958902,

        /// <summary>
        /// All method attributes are specified.
        /// </summary>
        [EnumMember(Value = "Method_1466724")]
        Method = 1466724,

        /// <summary>
        /// All reference type attributes are specified.
        /// </summary>
        [EnumMember(Value = "ReferenceType_1371236")]
        ReferenceType = 1371236,

        /// <summary>
        /// All view attributes are specified.
        /// </summary>
        [EnumMember(Value = "View_1335532")]
        View = 1335532,
    }
    #endif
    #endregion

    #region NodeAttributes Class
    #if (!OPCUA_EXCLUDE_NodeAttributes)
    /// <summary>
    /// The base attributes for all nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NodeAttributes : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NodeAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_specifiedAttributes = (uint)0;
            m_displayName = null;
            m_description = null;
            m_writeMask = (uint)0;
            m_userWriteMask = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A mask indicating which attributes have been provided.
        /// </summary>
        [DataMember(Name = "SpecifiedAttributes", IsRequired = false, Order = 1)]
        public uint SpecifiedAttributes
        {
            get { return m_specifiedAttributes;  }
            set { m_specifiedAttributes = value; }
        }

        /// <summary>
        /// A human readable name for the node.
        /// </summary>
        [DataMember(Name = "DisplayName", IsRequired = false, Order = 2)]
        public LocalizedText DisplayName
        {
            get { return m_displayName;  }
            set { m_displayName = value; }
        }

        /// <summary>
        /// A description for the node.
        /// </summary>
        [DataMember(Name = "Description", IsRequired = false, Order = 3)]
        public LocalizedText Description
        {
            get { return m_description;  }
            set { m_description = value; }
        }

        /// <summary>
        /// A mask which specifies which attributes are writeable.
        /// </summary>
        [DataMember(Name = "WriteMask", IsRequired = false, Order = 4)]
        public uint WriteMask
        {
            get { return m_writeMask;  }
            set { m_writeMask = value; }
        }

        /// <summary>
        /// A mask which specifies which attributes are writeable by the current user.
        /// </summary>
        [DataMember(Name = "UserWriteMask", IsRequired = false, Order = 5)]
        public uint UserWriteMask
        {
            get { return m_userWriteMask;  }
            set { m_userWriteMask = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NodeAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NodeAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NodeAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("SpecifiedAttributes", SpecifiedAttributes);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);
            encoder.WriteUInt32("WriteMask", WriteMask);
            encoder.WriteUInt32("UserWriteMask", UserWriteMask);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SpecifiedAttributes = decoder.ReadUInt32("SpecifiedAttributes");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");
            WriteMask = decoder.ReadUInt32("WriteMask");
            UserWriteMask = decoder.ReadUInt32("UserWriteMask");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NodeAttributes value = encodeable as NodeAttributes;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_specifiedAttributes, value.m_specifiedAttributes)) return false;
            if (!Utils.IsEqual(m_displayName, value.m_displayName)) return false;
            if (!Utils.IsEqual(m_description, value.m_description)) return false;
            if (!Utils.IsEqual(m_writeMask, value.m_writeMask)) return false;
            if (!Utils.IsEqual(m_userWriteMask, value.m_userWriteMask)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            NodeAttributes clone = new NodeAttributes();

            clone.m_specifiedAttributes = (uint)Utils.Clone(this.m_specifiedAttributes);
            clone.m_displayName = (LocalizedText)Utils.Clone(this.m_displayName);
            clone.m_description = (LocalizedText)Utils.Clone(this.m_description);
            clone.m_writeMask = (uint)Utils.Clone(this.m_writeMask);
            clone.m_userWriteMask = (uint)Utils.Clone(this.m_userWriteMask);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_specifiedAttributes;
        private LocalizedText m_displayName;
        private LocalizedText m_description;
        private uint m_writeMask;
        private uint m_userWriteMask;
        #endregion
    }
    #endif
    #endregion

    #region ObjectAttributes Class
    #if (!OPCUA_EXCLUDE_ObjectAttributes)
    /// <summary>
    /// The attributes for an object node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ObjectAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ObjectAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_eventNotifier = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A mask indicating what events are produced by the object.
        /// </summary>
        [DataMember(Name = "EventNotifier", IsRequired = false, Order = 1)]
        public byte EventNotifier
        {
            get { return m_eventNotifier;  }
            set { m_eventNotifier = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ObjectAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ObjectAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ObjectAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByte("EventNotifier", EventNotifier);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EventNotifier = decoder.ReadByte("EventNotifier");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ObjectAttributes value = encodeable as ObjectAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_eventNotifier, value.m_eventNotifier)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ObjectAttributes clone = new ObjectAttributes();

            clone.m_eventNotifier = (byte)Utils.Clone(this.m_eventNotifier);

            return clone;
        }
        #endregion

        #region Private Fields
        private byte m_eventNotifier;
        #endregion
    }
    #endif
    #endregion

    #region VariableAttributes Class
    #if (!OPCUA_EXCLUDE_VariableAttributes)
    /// <summary>
    /// The attributes for a variable node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class VariableAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public VariableAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = Variant.Null;
            m_dataType = null;
            m_valueRank = (int)0;
            m_arrayDimensions = new UInt32Collection();
            m_accessLevel = (byte)0;
            m_userAccessLevel = (byte)0;
            m_minimumSamplingInterval = (double)0;
            m_historizing = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The value of the variable.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public Variant Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }

        /// <summary>
        /// The data type of the value.
        /// </summary>
        [DataMember(Name = "DataType", IsRequired = false, Order = 2)]
        public NodeId DataType
        {
            get { return m_dataType;  }
            set { m_dataType = value; }
        }

        /// <summary>
        /// Whether the value is an array type and the rank of the array if it is.
        /// </summary>
        [DataMember(Name = "ValueRank", IsRequired = false, Order = 3)]
        public int ValueRank
        {
            get { return m_valueRank;  }
            set { m_valueRank = value; }
        }

        /// <summary>
        /// The number of dimensions if the value is an array type and one or more dimensions have a fixed length.
        /// </summary>
        [DataMember(Name = "ArrayDimensions", IsRequired = false, Order = 4)]
        public UInt32Collection ArrayDimensions
        {
            get
            {
                return m_arrayDimensions;
            }

            set
            {
                m_arrayDimensions = value;

                if (value == null)
                {
                    m_arrayDimensions = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A bit mask specifying how the value may be accessed.
        /// </summary>
        [DataMember(Name = "AccessLevel", IsRequired = false, Order = 5)]
        public byte AccessLevel
        {
            get { return m_accessLevel;  }
            set { m_accessLevel = value; }
        }

        /// <summary>
        /// A bit mask specifying how the value may be accessed by the current user.
        /// </summary>
        [DataMember(Name = "UserAccessLevel", IsRequired = false, Order = 6)]
        public byte UserAccessLevel
        {
            get { return m_userAccessLevel;  }
            set { m_userAccessLevel = value; }
        }

        /// <summary>
        /// The minimum possible sampling interval for the value.
        /// </summary>
        [DataMember(Name = "MinimumSamplingInterval", IsRequired = false, Order = 7)]
        public double MinimumSamplingInterval
        {
            get { return m_minimumSamplingInterval;  }
            set { m_minimumSamplingInterval = value; }
        }

        /// <summary>
        /// TRUE if the server is current storing the history of the value.
        /// </summary>
        [DataMember(Name = "Historizing", IsRequired = false, Order = 8)]
        public bool Historizing
        {
            get { return m_historizing;  }
            set { m_historizing = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.VariableAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.VariableAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.VariableAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteByte("AccessLevel", AccessLevel);
            encoder.WriteByte("UserAccessLevel", UserAccessLevel);
            encoder.WriteDouble("MinimumSamplingInterval", MinimumSamplingInterval);
            encoder.WriteBoolean("Historizing", Historizing);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            AccessLevel = decoder.ReadByte("AccessLevel");
            UserAccessLevel = decoder.ReadByte("UserAccessLevel");
            MinimumSamplingInterval = decoder.ReadDouble("MinimumSamplingInterval");
            Historizing = decoder.ReadBoolean("Historizing");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            VariableAttributes value = encodeable as VariableAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;
            if (!Utils.IsEqual(m_dataType, value.m_dataType)) return false;
            if (!Utils.IsEqual(m_valueRank, value.m_valueRank)) return false;
            if (!Utils.IsEqual(m_arrayDimensions, value.m_arrayDimensions)) return false;
            if (!Utils.IsEqual(m_accessLevel, value.m_accessLevel)) return false;
            if (!Utils.IsEqual(m_userAccessLevel, value.m_userAccessLevel)) return false;
            if (!Utils.IsEqual(m_minimumSamplingInterval, value.m_minimumSamplingInterval)) return false;
            if (!Utils.IsEqual(m_historizing, value.m_historizing)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            VariableAttributes clone = new VariableAttributes();

            clone.m_value = (Variant)Utils.Clone(this.m_value);
            clone.m_dataType = (NodeId)Utils.Clone(this.m_dataType);
            clone.m_valueRank = (int)Utils.Clone(this.m_valueRank);
            clone.m_arrayDimensions = (UInt32Collection)Utils.Clone(this.m_arrayDimensions);
            clone.m_accessLevel = (byte)Utils.Clone(this.m_accessLevel);
            clone.m_userAccessLevel = (byte)Utils.Clone(this.m_userAccessLevel);
            clone.m_minimumSamplingInterval = (double)Utils.Clone(this.m_minimumSamplingInterval);
            clone.m_historizing = (bool)Utils.Clone(this.m_historizing);

            return clone;
        }
        #endregion

        #region Private Fields
        private Variant m_value;
        private NodeId m_dataType;
        private int m_valueRank;
        private UInt32Collection m_arrayDimensions;
        private byte m_accessLevel;
        private byte m_userAccessLevel;
        private double m_minimumSamplingInterval;
        private bool m_historizing;
        #endregion
    }
    #endif
    #endregion

    #region MethodAttributes Class
    #if (!OPCUA_EXCLUDE_MethodAttributes)
    /// <summary>
    /// The attributes for a method node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MethodAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MethodAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_executable = true;
            m_userExecutable = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the method can be called.
        /// </summary>
        [DataMember(Name = "Executable", IsRequired = false, Order = 1)]
        public bool Executable
        {
            get { return m_executable;  }
            set { m_executable = value; }
        }

        /// <summary>
        /// If TRUE the method can be called by the current user.
        /// </summary>
        [DataMember(Name = "UserExecutable", IsRequired = false, Order = 2)]
        public bool UserExecutable
        {
            get { return m_userExecutable;  }
            set { m_userExecutable = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MethodAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MethodAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MethodAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("Executable", Executable);
            encoder.WriteBoolean("UserExecutable", UserExecutable);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Executable = decoder.ReadBoolean("Executable");
            UserExecutable = decoder.ReadBoolean("UserExecutable");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MethodAttributes value = encodeable as MethodAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_executable, value.m_executable)) return false;
            if (!Utils.IsEqual(m_userExecutable, value.m_userExecutable)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MethodAttributes clone = new MethodAttributes();

            clone.m_executable = (bool)Utils.Clone(this.m_executable);
            clone.m_userExecutable = (bool)Utils.Clone(this.m_userExecutable);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_executable;
        private bool m_userExecutable;
        #endregion
    }
    #endif
    #endregion

    #region ObjectTypeAttributes Class
    #if (!OPCUA_EXCLUDE_ObjectTypeAttributes)
    /// <summary>
    /// The attributes for an object type node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ObjectTypeAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ObjectTypeAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ObjectTypeAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ObjectTypeAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ObjectTypeAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ObjectTypeAttributes value = encodeable as ObjectTypeAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ObjectTypeAttributes clone = new ObjectTypeAttributes();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region VariableTypeAttributes Class
    #if (!OPCUA_EXCLUDE_VariableTypeAttributes)
    /// <summary>
    /// The attributes for a variable type node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class VariableTypeAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public VariableTypeAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = Variant.Null;
            m_dataType = null;
            m_valueRank = (int)0;
            m_arrayDimensions = new UInt32Collection();
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The default value when creating new instances.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public Variant Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }

        /// <summary>
        /// The data type of the value.
        /// </summary>
        [DataMember(Name = "DataType", IsRequired = false, Order = 2)]
        public NodeId DataType
        {
            get { return m_dataType;  }
            set { m_dataType = value; }
        }

        /// <summary>
        /// Whether the value is an array type and the rank of the array if it is.
        /// </summary>
        [DataMember(Name = "ValueRank", IsRequired = false, Order = 3)]
        public int ValueRank
        {
            get { return m_valueRank;  }
            set { m_valueRank = value; }
        }

        /// <summary>
        /// The number of dimensions if the value is an array type and one or more dimensions have a fixed length.
        /// </summary>
        [DataMember(Name = "ArrayDimensions", IsRequired = false, Order = 4)]
        public UInt32Collection ArrayDimensions
        {
            get
            {
                return m_arrayDimensions;
            }

            set
            {
                m_arrayDimensions = value;

                if (value == null)
                {
                    m_arrayDimensions = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 5)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.VariableTypeAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.VariableTypeAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.VariableTypeAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariant("Value", Value);
            encoder.WriteNodeId("DataType", DataType);
            encoder.WriteInt32("ValueRank", ValueRank);
            encoder.WriteUInt32Array("ArrayDimensions", ArrayDimensions);
            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadVariant("Value");
            DataType = decoder.ReadNodeId("DataType");
            ValueRank = decoder.ReadInt32("ValueRank");
            ArrayDimensions = decoder.ReadUInt32Array("ArrayDimensions");
            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            VariableTypeAttributes value = encodeable as VariableTypeAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;
            if (!Utils.IsEqual(m_dataType, value.m_dataType)) return false;
            if (!Utils.IsEqual(m_valueRank, value.m_valueRank)) return false;
            if (!Utils.IsEqual(m_arrayDimensions, value.m_arrayDimensions)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            VariableTypeAttributes clone = new VariableTypeAttributes();

            clone.m_value = (Variant)Utils.Clone(this.m_value);
            clone.m_dataType = (NodeId)Utils.Clone(this.m_dataType);
            clone.m_valueRank = (int)Utils.Clone(this.m_valueRank);
            clone.m_arrayDimensions = (UInt32Collection)Utils.Clone(this.m_arrayDimensions);
            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private Variant m_value;
        private NodeId m_dataType;
        private int m_valueRank;
        private UInt32Collection m_arrayDimensions;
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region ReferenceTypeAttributes Class
    #if (!OPCUA_EXCLUDE_ReferenceTypeAttributes)
    /// <summary>
    /// The attributes for a reference type node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReferenceTypeAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReferenceTypeAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
            m_symmetric = true;
            m_inverseName = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }

        /// <summary>
        /// If TRUE the reference type has the same semantics in both directions.
        /// </summary>
        [DataMember(Name = "Symmetric", IsRequired = false, Order = 2)]
        public bool Symmetric
        {
            get { return m_symmetric;  }
            set { m_symmetric = value; }
        }

        /// <summary>
        /// The display name for the reference when following it from target to source.
        /// </summary>
        [DataMember(Name = "InverseName", IsRequired = false, Order = 3)]
        public LocalizedText InverseName
        {
            get { return m_inverseName;  }
            set { m_inverseName = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReferenceTypeAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReferenceTypeAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReferenceTypeAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);
            encoder.WriteBoolean("Symmetric", Symmetric);
            encoder.WriteLocalizedText("InverseName", InverseName);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");
            Symmetric = decoder.ReadBoolean("Symmetric");
            InverseName = decoder.ReadLocalizedText("InverseName");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReferenceTypeAttributes value = encodeable as ReferenceTypeAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;
            if (!Utils.IsEqual(m_symmetric, value.m_symmetric)) return false;
            if (!Utils.IsEqual(m_inverseName, value.m_inverseName)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReferenceTypeAttributes clone = new ReferenceTypeAttributes();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);
            clone.m_symmetric = (bool)Utils.Clone(this.m_symmetric);
            clone.m_inverseName = (LocalizedText)Utils.Clone(this.m_inverseName);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        private bool m_symmetric;
        private LocalizedText m_inverseName;
        #endregion
    }
    #endif
    #endregion

    #region DataTypeAttributes Class
    #if (!OPCUA_EXCLUDE_DataTypeAttributes)
    /// <summary>
    /// The attributes for a data type node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DataTypeAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DataTypeAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isAbstract = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the type is abstract and only subtypes of it appear in the address space.
        /// </summary>
        [DataMember(Name = "IsAbstract", IsRequired = false, Order = 1)]
        public bool IsAbstract
        {
            get { return m_isAbstract;  }
            set { m_isAbstract = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataTypeAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataTypeAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataTypeAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsAbstract", IsAbstract);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsAbstract = decoder.ReadBoolean("IsAbstract");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataTypeAttributes value = encodeable as DataTypeAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isAbstract, value.m_isAbstract)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DataTypeAttributes clone = new DataTypeAttributes();

            clone.m_isAbstract = (bool)Utils.Clone(this.m_isAbstract);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isAbstract;
        #endregion
    }
    #endif
    #endregion

    #region ViewAttributes Class
    #if (!OPCUA_EXCLUDE_ViewAttributes)
    /// <summary>
    /// The attributes for a view node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ViewAttributes : NodeAttributes
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ViewAttributes()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_containsNoLoops = true;
            m_eventNotifier = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// If TRUE the view contains a tree of non-looping hierarchical references.
        /// </summary>
        [DataMember(Name = "ContainsNoLoops", IsRequired = false, Order = 1)]
        public bool ContainsNoLoops
        {
            get { return m_containsNoLoops;  }
            set { m_containsNoLoops = value; }
        }

        /// <summary>
        /// A mask indicating whether events are produced by the view.
        /// </summary>
        [DataMember(Name = "EventNotifier", IsRequired = false, Order = 2)]
        public byte EventNotifier
        {
            get { return m_eventNotifier;  }
            set { m_eventNotifier = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ViewAttributes; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ViewAttributes_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ViewAttributes_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("ContainsNoLoops", ContainsNoLoops);
            encoder.WriteByte("EventNotifier", EventNotifier);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ContainsNoLoops = decoder.ReadBoolean("ContainsNoLoops");
            EventNotifier = decoder.ReadByte("EventNotifier");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ViewAttributes value = encodeable as ViewAttributes;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_containsNoLoops, value.m_containsNoLoops)) return false;
            if (!Utils.IsEqual(m_eventNotifier, value.m_eventNotifier)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ViewAttributes clone = new ViewAttributes();

            clone.m_containsNoLoops = (bool)Utils.Clone(this.m_containsNoLoops);
            clone.m_eventNotifier = (byte)Utils.Clone(this.m_eventNotifier);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_containsNoLoops;
        private byte m_eventNotifier;
        #endregion
    }
    #endif
    #endregion

    #region AddNodesItem Class
    #if (!OPCUA_EXCLUDE_AddNodesItem)
    /// <summary>
    /// A request to add a node to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddNodesItem : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddNodesItem()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_parentNodeId = null;
            m_referenceTypeId = null;
            m_requestedNewNodeId = null;
            m_browseName = null;
            m_nodeClass = NodeClass.Unspecified;
            m_nodeAttributes = null;
            m_typeDefinition = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The node id for the parent node.
        /// </summary>
        [DataMember(Name = "ParentNodeId", IsRequired = false, Order = 1)]
        public ExpandedNodeId ParentNodeId
        {
            get { return m_parentNodeId;  }
            set { m_parentNodeId = value; }
        }

        /// <summary>
        /// The type of reference from the parent to the new node.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 2)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// The node id requested by the client. If null the server must provide one.
        /// </summary>
        [DataMember(Name = "RequestedNewNodeId", IsRequired = false, Order = 3)]
        public ExpandedNodeId RequestedNewNodeId
        {
            get { return m_requestedNewNodeId;  }
            set { m_requestedNewNodeId = value; }
        }

        /// <summary>
        /// The browse name for the new node.
        /// </summary>
        [DataMember(Name = "BrowseName", IsRequired = false, Order = 4)]
        public QualifiedName BrowseName
        {
            get { return m_browseName;  }
            set { m_browseName = value; }
        }

        /// <summary>
        /// The class of the new node.
        /// </summary>
        [DataMember(Name = "NodeClass", IsRequired = false, Order = 5)]
        public NodeClass NodeClass
        {
            get { return m_nodeClass;  }
            set { m_nodeClass = value; }
        }

        /// <summary>
        /// The default attributes for the new node.
        /// </summary>
        [DataMember(Name = "NodeAttributes", IsRequired = false, Order = 6)]
        public ExtensionObject NodeAttributes
        {
            get { return m_nodeAttributes;  }
            set { m_nodeAttributes = value; }
        }

        /// <summary>
        /// The type definition for the new node.
        /// </summary>
        [DataMember(Name = "TypeDefinition", IsRequired = false, Order = 7)]
        public ExpandedNodeId TypeDefinition
        {
            get { return m_typeDefinition;  }
            set { m_typeDefinition = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddNodesItem; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddNodesItem_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddNodesItem_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteExpandedNodeId("ParentNodeId", ParentNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteExpandedNodeId("RequestedNewNodeId", RequestedNewNodeId);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteEnumerated("NodeClass", NodeClass);
            encoder.WriteExtensionObject("NodeAttributes", NodeAttributes);
            encoder.WriteExpandedNodeId("TypeDefinition", TypeDefinition);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ParentNodeId = decoder.ReadExpandedNodeId("ParentNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            RequestedNewNodeId = decoder.ReadExpandedNodeId("RequestedNewNodeId");
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            NodeClass = (NodeClass)decoder.ReadEnumerated("NodeClass", typeof(NodeClass));
            NodeAttributes = decoder.ReadExtensionObject("NodeAttributes");
            TypeDefinition = decoder.ReadExpandedNodeId("TypeDefinition");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddNodesItem value = encodeable as AddNodesItem;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_parentNodeId, value.m_parentNodeId)) return false;
            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_requestedNewNodeId, value.m_requestedNewNodeId)) return false;
            if (!Utils.IsEqual(m_browseName, value.m_browseName)) return false;
            if (!Utils.IsEqual(m_nodeClass, value.m_nodeClass)) return false;
            if (!Utils.IsEqual(m_nodeAttributes, value.m_nodeAttributes)) return false;
            if (!Utils.IsEqual(m_typeDefinition, value.m_typeDefinition)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddNodesItem clone = new AddNodesItem();

            clone.m_parentNodeId = (ExpandedNodeId)Utils.Clone(this.m_parentNodeId);
            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_requestedNewNodeId = (ExpandedNodeId)Utils.Clone(this.m_requestedNewNodeId);
            clone.m_browseName = (QualifiedName)Utils.Clone(this.m_browseName);
            clone.m_nodeClass = (NodeClass)Utils.Clone(this.m_nodeClass);
            clone.m_nodeAttributes = (ExtensionObject)Utils.Clone(this.m_nodeAttributes);
            clone.m_typeDefinition = (ExpandedNodeId)Utils.Clone(this.m_typeDefinition);

            return clone;
        }
        #endregion

        #region Private Fields
        private ExpandedNodeId m_parentNodeId;
        private NodeId m_referenceTypeId;
        private ExpandedNodeId m_requestedNewNodeId;
        private QualifiedName m_browseName;
        private NodeClass m_nodeClass;
        private ExtensionObject m_nodeAttributes;
        private ExpandedNodeId m_typeDefinition;
        #endregion
    }

    #region AddNodesItemCollection Class
    /// <summary>
    /// A collection of AddNodesItem objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfAddNodesItem", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "AddNodesItem")]
    public partial class AddNodesItemCollection : List<AddNodesItem>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public AddNodesItemCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public AddNodesItemCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public AddNodesItemCollection(IEnumerable<AddNodesItem> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator AddNodesItemCollection(AddNodesItem[] values)
        {
            if (values != null)
            {
                return new AddNodesItemCollection(values);
            }

            return new AddNodesItemCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator AddNodesItem[](AddNodesItemCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            AddNodesItemCollection clone = new AddNodesItemCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((AddNodesItem)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region AddNodesResult Class
    #if (!OPCUA_EXCLUDE_AddNodesResult)
    /// <summary>
    /// A result of an add node operation.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddNodesResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddNodesResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_addedNodeId = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A code indicating any error during the operation.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// The id of the new node.
        /// </summary>
        [DataMember(Name = "AddedNodeId", IsRequired = false, Order = 2)]
        public NodeId AddedNodeId
        {
            get { return m_addedNodeId;  }
            set { m_addedNodeId = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddNodesResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddNodesResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddNodesResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteNodeId("AddedNodeId", AddedNodeId);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            AddedNodeId = decoder.ReadNodeId("AddedNodeId");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddNodesResult value = encodeable as AddNodesResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_addedNodeId, value.m_addedNodeId)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddNodesResult clone = new AddNodesResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_addedNodeId = (NodeId)Utils.Clone(this.m_addedNodeId);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private NodeId m_addedNodeId;
        #endregion
    }

    #region AddNodesResultCollection Class
    /// <summary>
    /// A collection of AddNodesResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfAddNodesResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "AddNodesResult")]
    public partial class AddNodesResultCollection : List<AddNodesResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public AddNodesResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public AddNodesResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public AddNodesResultCollection(IEnumerable<AddNodesResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator AddNodesResultCollection(AddNodesResult[] values)
        {
            if (values != null)
            {
                return new AddNodesResultCollection(values);
            }

            return new AddNodesResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator AddNodesResult[](AddNodesResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            AddNodesResultCollection clone = new AddNodesResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((AddNodesResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region AddNodesRequest Class
    #if (!OPCUA_EXCLUDE_AddNodesRequest)
    /// <summary>
    /// Adds one or more nodes to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddNodesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddNodesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_nodesToAdd = new AddNodesItemCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of nodes to add.
        /// </summary>
        [DataMember(Name = "NodesToAdd", IsRequired = false, Order = 2)]
        public AddNodesItemCollection NodesToAdd
        {
            get
            {
                return m_nodesToAdd;
            }

            set
            {
                m_nodesToAdd = value;

                if (value == null)
                {
                    m_nodesToAdd = new AddNodesItemCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddNodesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddNodesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddNodesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("NodesToAdd", NodesToAdd.ToArray(), typeof(AddNodesItem));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            NodesToAdd = (AddNodesItemCollection)decoder.ReadEncodeableArray("NodesToAdd", typeof(AddNodesItem));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddNodesRequest value = encodeable as AddNodesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_nodesToAdd, value.m_nodesToAdd)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddNodesRequest clone = new AddNodesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_nodesToAdd = (AddNodesItemCollection)Utils.Clone(this.m_nodesToAdd);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private AddNodesItemCollection m_nodesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AddNodesResponse Class
    #if (!OPCUA_EXCLUDE_AddNodesResponse)
    /// <summary>
    /// Adds one or more nodes to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddNodesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddNodesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new AddNodesResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the add node operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public AddNodesResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new AddNodesResultCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results returned.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddNodesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddNodesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddNodesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(AddNodesResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (AddNodesResultCollection)decoder.ReadEncodeableArray("Results", typeof(AddNodesResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddNodesResponse value = encodeable as AddNodesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddNodesResponse clone = new AddNodesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (AddNodesResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private AddNodesResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region AddReferencesItem Class
    #if (!OPCUA_EXCLUDE_AddReferencesItem)
    /// <summary>
    /// A request to add a reference to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddReferencesItem : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddReferencesItem()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sourceNodeId = null;
            m_referenceTypeId = null;
            m_isForward = true;
            m_targetServerUri = null;
            m_targetNodeId = null;
            m_targetNodeClass = NodeClass.Unspecified;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The source of the reference.
        /// </summary>
        [DataMember(Name = "SourceNodeId", IsRequired = false, Order = 1)]
        public NodeId SourceNodeId
        {
            get { return m_sourceNodeId;  }
            set { m_sourceNodeId = value; }
        }

        /// <summary>
        /// The type of reference.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 2)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// If TRUE the reference is a forward reference.
        /// </summary>
        [DataMember(Name = "IsForward", IsRequired = false, Order = 3)]
        public bool IsForward
        {
            get { return m_isForward;  }
            set { m_isForward = value; }
        }

        /// <summary>
        /// The URI of the server containing the target (if in another server).
        /// </summary>
        [DataMember(Name = "TargetServerUri", IsRequired = false, Order = 4)]
        public string TargetServerUri
        {
            get { return m_targetServerUri;  }
            set { m_targetServerUri = value; }
        }

        /// <summary>
        /// The target of the reference.
        /// </summary>
        [DataMember(Name = "TargetNodeId", IsRequired = false, Order = 5)]
        public ExpandedNodeId TargetNodeId
        {
            get { return m_targetNodeId;  }
            set { m_targetNodeId = value; }
        }

        /// <summary>
        /// The node class of the target (if known).
        /// </summary>
        [DataMember(Name = "TargetNodeClass", IsRequired = false, Order = 6)]
        public NodeClass TargetNodeClass
        {
            get { return m_targetNodeClass;  }
            set { m_targetNodeClass = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddReferencesItem; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddReferencesItem_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddReferencesItem_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("SourceNodeId", SourceNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteString("TargetServerUri", TargetServerUri);
            encoder.WriteExpandedNodeId("TargetNodeId", TargetNodeId);
            encoder.WriteEnumerated("TargetNodeClass", TargetNodeClass);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SourceNodeId = decoder.ReadNodeId("SourceNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            TargetServerUri = decoder.ReadString("TargetServerUri");
            TargetNodeId = decoder.ReadExpandedNodeId("TargetNodeId");
            TargetNodeClass = (NodeClass)decoder.ReadEnumerated("TargetNodeClass", typeof(NodeClass));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddReferencesItem value = encodeable as AddReferencesItem;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sourceNodeId, value.m_sourceNodeId)) return false;
            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isForward, value.m_isForward)) return false;
            if (!Utils.IsEqual(m_targetServerUri, value.m_targetServerUri)) return false;
            if (!Utils.IsEqual(m_targetNodeId, value.m_targetNodeId)) return false;
            if (!Utils.IsEqual(m_targetNodeClass, value.m_targetNodeClass)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddReferencesItem clone = new AddReferencesItem();

            clone.m_sourceNodeId = (NodeId)Utils.Clone(this.m_sourceNodeId);
            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isForward = (bool)Utils.Clone(this.m_isForward);
            clone.m_targetServerUri = (string)Utils.Clone(this.m_targetServerUri);
            clone.m_targetNodeId = (ExpandedNodeId)Utils.Clone(this.m_targetNodeId);
            clone.m_targetNodeClass = (NodeClass)Utils.Clone(this.m_targetNodeClass);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_sourceNodeId;
        private NodeId m_referenceTypeId;
        private bool m_isForward;
        private string m_targetServerUri;
        private ExpandedNodeId m_targetNodeId;
        private NodeClass m_targetNodeClass;
        #endregion
    }

    #region AddReferencesItemCollection Class
    /// <summary>
    /// A collection of AddReferencesItem objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfAddReferencesItem", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "AddReferencesItem")]
    public partial class AddReferencesItemCollection : List<AddReferencesItem>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public AddReferencesItemCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public AddReferencesItemCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public AddReferencesItemCollection(IEnumerable<AddReferencesItem> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator AddReferencesItemCollection(AddReferencesItem[] values)
        {
            if (values != null)
            {
                return new AddReferencesItemCollection(values);
            }

            return new AddReferencesItemCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator AddReferencesItem[](AddReferencesItemCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            AddReferencesItemCollection clone = new AddReferencesItemCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((AddReferencesItem)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region AddReferencesRequest Class
    #if (!OPCUA_EXCLUDE_AddReferencesRequest)
    /// <summary>
    /// Adds one or more references to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddReferencesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddReferencesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_referencesToAdd = new AddReferencesItemCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of references to add.
        /// </summary>
        [DataMember(Name = "ReferencesToAdd", IsRequired = false, Order = 2)]
        public AddReferencesItemCollection ReferencesToAdd
        {
            get
            {
                return m_referencesToAdd;
            }

            set
            {
                m_referencesToAdd = value;

                if (value == null)
                {
                    m_referencesToAdd = new AddReferencesItemCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddReferencesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddReferencesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddReferencesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("ReferencesToAdd", ReferencesToAdd.ToArray(), typeof(AddReferencesItem));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ReferencesToAdd = (AddReferencesItemCollection)decoder.ReadEncodeableArray("ReferencesToAdd", typeof(AddReferencesItem));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddReferencesRequest value = encodeable as AddReferencesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_referencesToAdd, value.m_referencesToAdd)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddReferencesRequest clone = new AddReferencesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_referencesToAdd = (AddReferencesItemCollection)Utils.Clone(this.m_referencesToAdd);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private AddReferencesItemCollection m_referencesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AddReferencesResponse Class
    #if (!OPCUA_EXCLUDE_AddReferencesResponse)
    /// <summary>
    /// Adds one or more references to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AddReferencesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AddReferencesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the add reference operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results returned.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AddReferencesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AddReferencesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AddReferencesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AddReferencesResponse value = encodeable as AddReferencesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AddReferencesResponse clone = new AddReferencesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region DeleteNodesItem Class
    #if (!OPCUA_EXCLUDE_DeleteNodesItem)
    /// <summary>
    /// A request to delete a node to the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteNodesItem : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteNodesItem()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_deleteTargetReferences = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The id of the node to delete.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// If TRUE all references to the are deleted as well.
        /// </summary>
        [DataMember(Name = "DeleteTargetReferences", IsRequired = false, Order = 2)]
        public bool DeleteTargetReferences
        {
            get { return m_deleteTargetReferences;  }
            set { m_deleteTargetReferences = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteNodesItem; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteNodesItem_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteNodesItem_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteBoolean("DeleteTargetReferences", DeleteTargetReferences);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            DeleteTargetReferences = decoder.ReadBoolean("DeleteTargetReferences");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteNodesItem value = encodeable as DeleteNodesItem;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_deleteTargetReferences, value.m_deleteTargetReferences)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteNodesItem clone = new DeleteNodesItem();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_deleteTargetReferences = (bool)Utils.Clone(this.m_deleteTargetReferences);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private bool m_deleteTargetReferences;
        #endregion
    }

    #region DeleteNodesItemCollection Class
    /// <summary>
    /// A collection of DeleteNodesItem objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfDeleteNodesItem", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "DeleteNodesItem")]
    public partial class DeleteNodesItemCollection : List<DeleteNodesItem>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DeleteNodesItemCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DeleteNodesItemCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DeleteNodesItemCollection(IEnumerable<DeleteNodesItem> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DeleteNodesItemCollection(DeleteNodesItem[] values)
        {
            if (values != null)
            {
                return new DeleteNodesItemCollection(values);
            }

            return new DeleteNodesItemCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DeleteNodesItem[](DeleteNodesItemCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            DeleteNodesItemCollection clone = new DeleteNodesItemCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DeleteNodesItem)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region DeleteNodesRequest Class
    #if (!OPCUA_EXCLUDE_DeleteNodesRequest)
    /// <summary>
    /// Delete one or more nodes from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteNodesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteNodesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_nodesToDelete = new DeleteNodesItemCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of nodes to delete.
        /// </summary>
        [DataMember(Name = "NodesToDelete", IsRequired = false, Order = 2)]
        public DeleteNodesItemCollection NodesToDelete
        {
            get
            {
                return m_nodesToDelete;
            }

            set
            {
                m_nodesToDelete = value;

                if (value == null)
                {
                    m_nodesToDelete = new DeleteNodesItemCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteNodesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteNodesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteNodesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("NodesToDelete", NodesToDelete.ToArray(), typeof(DeleteNodesItem));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            NodesToDelete = (DeleteNodesItemCollection)decoder.ReadEncodeableArray("NodesToDelete", typeof(DeleteNodesItem));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteNodesRequest value = encodeable as DeleteNodesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_nodesToDelete, value.m_nodesToDelete)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteNodesRequest clone = new DeleteNodesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_nodesToDelete = (DeleteNodesItemCollection)Utils.Clone(this.m_nodesToDelete);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private DeleteNodesItemCollection m_nodesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region DeleteNodesResponse Class
    #if (!OPCUA_EXCLUDE_DeleteNodesResponse)
    /// <summary>
    /// Delete one or more nodes from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteNodesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteNodesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the delete nodes operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results returned.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteNodesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteNodesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteNodesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteNodesResponse value = encodeable as DeleteNodesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteNodesResponse clone = new DeleteNodesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region DeleteReferencesItem Class
    #if (!OPCUA_EXCLUDE_DeleteReferencesItem)
    /// <summary>
    /// A request to delete a node from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteReferencesItem : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteReferencesItem()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sourceNodeId = null;
            m_referenceTypeId = null;
            m_isForward = true;
            m_targetNodeId = null;
            m_deleteBidirectional = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The source of the reference to delete.
        /// </summary>
        [DataMember(Name = "SourceNodeId", IsRequired = false, Order = 1)]
        public NodeId SourceNodeId
        {
            get { return m_sourceNodeId;  }
            set { m_sourceNodeId = value; }
        }

        /// <summary>
        /// The type of reference to delete.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 2)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// If TRUE the a forward reference is deleted.
        /// </summary>
        [DataMember(Name = "IsForward", IsRequired = false, Order = 3)]
        public bool IsForward
        {
            get { return m_isForward;  }
            set { m_isForward = value; }
        }

        /// <summary>
        /// The target of the reference to delete.
        /// </summary>
        [DataMember(Name = "TargetNodeId", IsRequired = false, Order = 4)]
        public ExpandedNodeId TargetNodeId
        {
            get { return m_targetNodeId;  }
            set { m_targetNodeId = value; }
        }

        /// <summary>
        /// If TRUE the reference is deleted in both directions.
        /// </summary>
        [DataMember(Name = "DeleteBidirectional", IsRequired = false, Order = 5)]
        public bool DeleteBidirectional
        {
            get { return m_deleteBidirectional;  }
            set { m_deleteBidirectional = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteReferencesItem; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteReferencesItem_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteReferencesItem_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("SourceNodeId", SourceNodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteExpandedNodeId("TargetNodeId", TargetNodeId);
            encoder.WriteBoolean("DeleteBidirectional", DeleteBidirectional);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SourceNodeId = decoder.ReadNodeId("SourceNodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            TargetNodeId = decoder.ReadExpandedNodeId("TargetNodeId");
            DeleteBidirectional = decoder.ReadBoolean("DeleteBidirectional");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteReferencesItem value = encodeable as DeleteReferencesItem;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sourceNodeId, value.m_sourceNodeId)) return false;
            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isForward, value.m_isForward)) return false;
            if (!Utils.IsEqual(m_targetNodeId, value.m_targetNodeId)) return false;
            if (!Utils.IsEqual(m_deleteBidirectional, value.m_deleteBidirectional)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteReferencesItem clone = new DeleteReferencesItem();

            clone.m_sourceNodeId = (NodeId)Utils.Clone(this.m_sourceNodeId);
            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isForward = (bool)Utils.Clone(this.m_isForward);
            clone.m_targetNodeId = (ExpandedNodeId)Utils.Clone(this.m_targetNodeId);
            clone.m_deleteBidirectional = (bool)Utils.Clone(this.m_deleteBidirectional);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_sourceNodeId;
        private NodeId m_referenceTypeId;
        private bool m_isForward;
        private ExpandedNodeId m_targetNodeId;
        private bool m_deleteBidirectional;
        #endregion
    }

    #region DeleteReferencesItemCollection Class
    /// <summary>
    /// A collection of DeleteReferencesItem objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfDeleteReferencesItem", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "DeleteReferencesItem")]
    public partial class DeleteReferencesItemCollection : List<DeleteReferencesItem>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public DeleteReferencesItemCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public DeleteReferencesItemCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public DeleteReferencesItemCollection(IEnumerable<DeleteReferencesItem> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator DeleteReferencesItemCollection(DeleteReferencesItem[] values)
        {
            if (values != null)
            {
                return new DeleteReferencesItemCollection(values);
            }

            return new DeleteReferencesItemCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator DeleteReferencesItem[](DeleteReferencesItemCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            DeleteReferencesItemCollection clone = new DeleteReferencesItemCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((DeleteReferencesItem)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region DeleteReferencesRequest Class
    #if (!OPCUA_EXCLUDE_DeleteReferencesRequest)
    /// <summary>
    /// Delete one or more references from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteReferencesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteReferencesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_referencesToDelete = new DeleteReferencesItemCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of references to delete.
        /// </summary>
        [DataMember(Name = "ReferencesToDelete", IsRequired = false, Order = 2)]
        public DeleteReferencesItemCollection ReferencesToDelete
        {
            get
            {
                return m_referencesToDelete;
            }

            set
            {
                m_referencesToDelete = value;

                if (value == null)
                {
                    m_referencesToDelete = new DeleteReferencesItemCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteReferencesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteReferencesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteReferencesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("ReferencesToDelete", ReferencesToDelete.ToArray(), typeof(DeleteReferencesItem));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ReferencesToDelete = (DeleteReferencesItemCollection)decoder.ReadEncodeableArray("ReferencesToDelete", typeof(DeleteReferencesItem));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteReferencesRequest value = encodeable as DeleteReferencesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_referencesToDelete, value.m_referencesToDelete)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteReferencesRequest clone = new DeleteReferencesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_referencesToDelete = (DeleteReferencesItemCollection)Utils.Clone(this.m_referencesToDelete);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private DeleteReferencesItemCollection m_referencesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region DeleteReferencesResponse Class
    #if (!OPCUA_EXCLUDE_DeleteReferencesResponse)
    /// <summary>
    /// Delete one or more references from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteReferencesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteReferencesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the delete reference operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results returned.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteReferencesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteReferencesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteReferencesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteReferencesResponse value = encodeable as DeleteReferencesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            DeleteReferencesResponse clone = new DeleteReferencesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region AttributeWriteMask Enumeration
    #if (!OPCUA_EXCLUDE_AttributeWriteMask)
    /// <summary>
    /// Define bits used to indicate which attributes are writeable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum AttributeWriteMask
    {
        /// <summary>
        /// No attributes are writeable.
        /// </summary>
        [EnumMember(Value = "None_0")]
        None = 0,

        /// <summary>
        /// The access level attribute is writeable.
        /// </summary>
        [EnumMember(Value = "AccessLevel_1")]
        AccessLevel = 1,

        /// <summary>
        /// The array dimensions attribute is writeable.
        /// </summary>
        [EnumMember(Value = "ArrayDimensions_2")]
        ArrayDimensions = 2,

        /// <summary>
        /// The browse name attribute is writeable.
        /// </summary>
        [EnumMember(Value = "BrowseName_4")]
        BrowseName = 4,

        /// <summary>
        /// The contains no loops attribute is writeable.
        /// </summary>
        [EnumMember(Value = "ContainsNoLoops_8")]
        ContainsNoLoops = 8,

        /// <summary>
        /// The data type attribute is writeable.
        /// </summary>
        [EnumMember(Value = "DataType_16")]
        DataType = 16,

        /// <summary>
        /// The description attribute is writeable.
        /// </summary>
        [EnumMember(Value = "Description_32")]
        Description = 32,

        /// <summary>
        /// The display name attribute is writeable.
        /// </summary>
        [EnumMember(Value = "DisplayName_64")]
        DisplayName = 64,

        /// <summary>
        /// The event notifier attribute is writeable.
        /// </summary>
        [EnumMember(Value = "EventNotifier_128")]
        EventNotifier = 128,

        /// <summary>
        /// The executable attribute is writeable.
        /// </summary>
        [EnumMember(Value = "Executable_256")]
        Executable = 256,

        /// <summary>
        /// The historizing attribute is writeable.
        /// </summary>
        [EnumMember(Value = "Historizing_512")]
        Historizing = 512,

        /// <summary>
        /// The inverse name attribute is writeable.
        /// </summary>
        [EnumMember(Value = "InverseName_1024")]
        InverseName = 1024,

        /// <summary>
        /// The is abstract attribute is writeable.
        /// </summary>
        [EnumMember(Value = "IsAbstract_2048")]
        IsAbstract = 2048,

        /// <summary>
        /// The minimum sampling interval attribute is writeable.
        /// </summary>
        [EnumMember(Value = "MinimumSamplingInterval_4096")]
        MinimumSamplingInterval = 4096,

        /// <summary>
        /// The node class attribute is writeable.
        /// </summary>
        [EnumMember(Value = "NodeClass_8192")]
        NodeClass = 8192,

        /// <summary>
        /// The node id attribute is writeable.
        /// </summary>
        [EnumMember(Value = "NodeId_16384")]
        NodeId = 16384,

        /// <summary>
        /// The symmetric attribute is writeable.
        /// </summary>
        [EnumMember(Value = "Symmetric_32768")]
        Symmetric = 32768,

        /// <summary>
        /// The user access level attribute is writeable.
        /// </summary>
        [EnumMember(Value = "UserAccessLevel_65536")]
        UserAccessLevel = 65536,

        /// <summary>
        /// The user executable attribute is writeable.
        /// </summary>
        [EnumMember(Value = "UserExecutable_131072")]
        UserExecutable = 131072,

        /// <summary>
        /// The user write mask attribute is writeable.
        /// </summary>
        [EnumMember(Value = "UserWriteMask_262144")]
        UserWriteMask = 262144,

        /// <summary>
        /// The value rank attribute is writeable.
        /// </summary>
        [EnumMember(Value = "ValueRank_524288")]
        ValueRank = 524288,

        /// <summary>
        /// The write mask attribute is writeable.
        /// </summary>
        [EnumMember(Value = "WriteMask_1048576")]
        WriteMask = 1048576,

        /// <summary>
        /// The value attribute is writeable.
        /// </summary>
        [EnumMember(Value = "ValueForVariableType_2097152")]
        ValueForVariableType = 2097152,
    }
    #endif
    #endregion

    #region BrowseDirection Enumeration
    #if (!OPCUA_EXCLUDE_BrowseDirection)
    /// <summary>
    /// The directions of the references to return.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum BrowseDirection
    {
        /// <summary>
        /// Return forward references.
        /// </summary>
        [EnumMember(Value = "Forward_0")]
        Forward = 0,

        /// <summary>
        /// Return inverse references.
        /// </summary>
        [EnumMember(Value = "Inverse_1")]
        Inverse = 1,

        /// <summary>
        /// Return forward and inverse references.
        /// </summary>
        [EnumMember(Value = "Both_2")]
        Both = 2,
    }
    #endif
    #endregion

    #region ViewDescription Class
    #if (!OPCUA_EXCLUDE_ViewDescription)
    /// <summary>
    /// The view to browse.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ViewDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ViewDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_viewId = null;
            m_timestamp = DateTime.MinValue;
            m_viewVersion = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The node id of the view.
        /// </summary>
        [DataMember(Name = "ViewId", IsRequired = false, Order = 1)]
        public NodeId ViewId
        {
            get { return m_viewId;  }
            set { m_viewId = value; }
        }

        /// <summary>
        /// Browses the view at or before this time.
        /// </summary>
        [DataMember(Name = "Timestamp", IsRequired = false, Order = 2)]
        public DateTime Timestamp
        {
            get { return m_timestamp;  }
            set { m_timestamp = value; }
        }

        /// <summary>
        /// Browses a specific version of the view .
        /// </summary>
        [DataMember(Name = "ViewVersion", IsRequired = false, Order = 3)]
        public uint ViewVersion
        {
            get { return m_viewVersion;  }
            set { m_viewVersion = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ViewDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ViewDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ViewDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("ViewId", ViewId);
            encoder.WriteDateTime("Timestamp", Timestamp);
            encoder.WriteUInt32("ViewVersion", ViewVersion);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ViewId = decoder.ReadNodeId("ViewId");
            Timestamp = decoder.ReadDateTime("Timestamp");
            ViewVersion = decoder.ReadUInt32("ViewVersion");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ViewDescription value = encodeable as ViewDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_viewId, value.m_viewId)) return false;
            if (!Utils.IsEqual(m_timestamp, value.m_timestamp)) return false;
            if (!Utils.IsEqual(m_viewVersion, value.m_viewVersion)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            ViewDescription clone = new ViewDescription();

            clone.m_viewId = (NodeId)Utils.Clone(this.m_viewId);
            clone.m_timestamp = (DateTime)Utils.Clone(this.m_timestamp);
            clone.m_viewVersion = (uint)Utils.Clone(this.m_viewVersion);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_viewId;
        private DateTime m_timestamp;
        private uint m_viewVersion;
        #endregion
    }
    #endif
    #endregion

    #region BrowseDescription Class
    #if (!OPCUA_EXCLUDE_BrowseDescription)
    /// <summary>
    /// A request to browse the the references from a node.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_browseDirection = BrowseDirection.Forward;
            m_referenceTypeId = null;
            m_includeSubtypes = true;
            m_nodeClassMask = (uint)0;
            m_resultMask = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The id of the node to browse.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// The direction of the references to return.
        /// </summary>
        [DataMember(Name = "BrowseDirection", IsRequired = false, Order = 2)]
        public BrowseDirection BrowseDirection
        {
            get { return m_browseDirection;  }
            set { m_browseDirection = value; }
        }

        /// <summary>
        /// The type of references to return.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 3)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// Includes subtypes of the reference type.
        /// </summary>
        [DataMember(Name = "IncludeSubtypes", IsRequired = false, Order = 4)]
        public bool IncludeSubtypes
        {
            get { return m_includeSubtypes;  }
            set { m_includeSubtypes = value; }
        }

        /// <summary>
        /// A mask indicating which node classes to return. 0 means return all nodes.
        /// </summary>
        [DataMember(Name = "NodeClassMask", IsRequired = false, Order = 5)]
        public uint NodeClassMask
        {
            get { return m_nodeClassMask;  }
            set { m_nodeClassMask = value; }
        }

        /// <summary>
        /// A mask indicating which fields should be returned in the results.
        /// </summary>
        [DataMember(Name = "ResultMask", IsRequired = false, Order = 6)]
        public uint ResultMask
        {
            get { return m_resultMask;  }
            set { m_resultMask = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteEnumerated("BrowseDirection", BrowseDirection);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IncludeSubtypes", IncludeSubtypes);
            encoder.WriteUInt32("NodeClassMask", NodeClassMask);
            encoder.WriteUInt32("ResultMask", ResultMask);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            BrowseDirection = (BrowseDirection)decoder.ReadEnumerated("BrowseDirection", typeof(BrowseDirection));
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IncludeSubtypes = decoder.ReadBoolean("IncludeSubtypes");
            NodeClassMask = decoder.ReadUInt32("NodeClassMask");
            ResultMask = decoder.ReadUInt32("ResultMask");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseDescription value = encodeable as BrowseDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_browseDirection, value.m_browseDirection)) return false;
            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_includeSubtypes, value.m_includeSubtypes)) return false;
            if (!Utils.IsEqual(m_nodeClassMask, value.m_nodeClassMask)) return false;
            if (!Utils.IsEqual(m_resultMask, value.m_resultMask)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowseDescription clone = new BrowseDescription();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_browseDirection = (BrowseDirection)Utils.Clone(this.m_browseDirection);
            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_includeSubtypes = (bool)Utils.Clone(this.m_includeSubtypes);
            clone.m_nodeClassMask = (uint)Utils.Clone(this.m_nodeClassMask);
            clone.m_resultMask = (uint)Utils.Clone(this.m_resultMask);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private BrowseDirection m_browseDirection;
        private NodeId m_referenceTypeId;
        private bool m_includeSubtypes;
        private uint m_nodeClassMask;
        private uint m_resultMask;
        #endregion
    }

    #region BrowseDescriptionCollection Class
    /// <summary>
    /// A collection of BrowseDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfBrowseDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "BrowseDescription")]
    public partial class BrowseDescriptionCollection : List<BrowseDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public BrowseDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public BrowseDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public BrowseDescriptionCollection(IEnumerable<BrowseDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator BrowseDescriptionCollection(BrowseDescription[] values)
        {
            if (values != null)
            {
                return new BrowseDescriptionCollection(values);
            }

            return new BrowseDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator BrowseDescription[](BrowseDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            BrowseDescriptionCollection clone = new BrowseDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((BrowseDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region BrowseResultMask Enumeration
    #if (!OPCUA_EXCLUDE_BrowseResultMask)
    /// <summary>
    /// A bit mask which specifies what should be returned in a browse response.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum BrowseResultMask
    {
        /// <summary>
        /// Return only the node id.
        /// </summary>
        [EnumMember(Value = "None_0")]
        None = 0,

        /// <summary>
        /// Return the reference type id.
        /// </summary>
        [EnumMember(Value = "ReferenceTypeId_1")]
        ReferenceTypeId = 1,

        /// <summary>
        /// Return the flag indicating whether the reference is a forward reference.
        /// </summary>
        [EnumMember(Value = "IsForward_2")]
        IsForward = 2,

        /// <summary>
        /// Return the node class.
        /// </summary>
        [EnumMember(Value = "NodeClass_4")]
        NodeClass = 4,

        /// <summary>
        /// Return the browse name.
        /// </summary>
        [EnumMember(Value = "BrowseName_8")]
        BrowseName = 8,

        /// <summary>
        /// Return the display name.
        /// </summary>
        [EnumMember(Value = "DisplayName_16")]
        DisplayName = 16,

        /// <summary>
        /// Return the type definition.
        /// </summary>
        [EnumMember(Value = "TypeDefinition_32")]
        TypeDefinition = 32,

        /// <summary>
        /// Return all fields.
        /// </summary>
        [EnumMember(Value = "All_63")]
        All = 63,

        /// <summary>
        /// Return the reference type information.
        /// </summary>
        [EnumMember(Value = "ReferenceTypeInfo_3")]
        ReferenceTypeInfo = 3,

        /// <summary>
        /// Return the information about the target node.
        /// </summary>
        [EnumMember(Value = "TargetInfo_60")]
        TargetInfo = 60,
    }
    #endif
    #endregion

    #region ReferenceDescription Class
    #if (!OPCUA_EXCLUDE_ReferenceDescription)
    /// <summary>
    /// The description of a reference.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReferenceDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReferenceDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_referenceTypeId = null;
            m_isForward = true;
            m_nodeId = null;
            m_browseName = null;
            m_displayName = null;
            m_nodeClass = NodeClass.Unspecified;
            m_typeDefinition = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The type of references.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 1)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// TRUE if the reference is a forward reference.
        /// </summary>
        [DataMember(Name = "IsForward", IsRequired = false, Order = 2)]
        public bool IsForward
        {
            get { return m_isForward;  }
            set { m_isForward = value; }
        }

        /// <summary>
        /// The id of the target node.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 3)]
        public ExpandedNodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// The browse name of the target node.
        /// </summary>
        [DataMember(Name = "BrowseName", IsRequired = false, Order = 4)]
        public QualifiedName BrowseName
        {
            get { return m_browseName;  }
            set { m_browseName = value; }
        }

        /// <summary>
        /// The display name of the target node.
        /// </summary>
        [DataMember(Name = "DisplayName", IsRequired = false, Order = 5)]
        public LocalizedText DisplayName
        {
            get { return m_displayName;  }
            set { m_displayName = value; }
        }

        /// <summary>
        /// The node class of the target node.
        /// </summary>
        [DataMember(Name = "NodeClass", IsRequired = false, Order = 6)]
        public NodeClass NodeClass
        {
            get { return m_nodeClass;  }
            set { m_nodeClass = value; }
        }

        /// <summary>
        /// The type definition of the target node.
        /// </summary>
        [DataMember(Name = "TypeDefinition", IsRequired = false, Order = 7)]
        public ExpandedNodeId TypeDefinition
        {
            get { return m_typeDefinition;  }
            set { m_typeDefinition = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReferenceDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReferenceDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReferenceDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteExpandedNodeId("NodeId", NodeId);
            encoder.WriteQualifiedName("BrowseName", BrowseName);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteEnumerated("NodeClass", NodeClass);
            encoder.WriteExpandedNodeId("TypeDefinition", TypeDefinition);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            NodeId = decoder.ReadExpandedNodeId("NodeId");
            BrowseName = decoder.ReadQualifiedName("BrowseName");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            NodeClass = (NodeClass)decoder.ReadEnumerated("NodeClass", typeof(NodeClass));
            TypeDefinition = decoder.ReadExpandedNodeId("TypeDefinition");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReferenceDescription value = encodeable as ReferenceDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isForward, value.m_isForward)) return false;
            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_browseName, value.m_browseName)) return false;
            if (!Utils.IsEqual(m_displayName, value.m_displayName)) return false;
            if (!Utils.IsEqual(m_nodeClass, value.m_nodeClass)) return false;
            if (!Utils.IsEqual(m_typeDefinition, value.m_typeDefinition)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReferenceDescription clone = new ReferenceDescription();

            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isForward = (bool)Utils.Clone(this.m_isForward);
            clone.m_nodeId = (ExpandedNodeId)Utils.Clone(this.m_nodeId);
            clone.m_browseName = (QualifiedName)Utils.Clone(this.m_browseName);
            clone.m_displayName = (LocalizedText)Utils.Clone(this.m_displayName);
            clone.m_nodeClass = (NodeClass)Utils.Clone(this.m_nodeClass);
            clone.m_typeDefinition = (ExpandedNodeId)Utils.Clone(this.m_typeDefinition);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_referenceTypeId;
        private bool m_isForward;
        private ExpandedNodeId m_nodeId;
        private QualifiedName m_browseName;
        private LocalizedText m_displayName;
        private NodeClass m_nodeClass;
        private ExpandedNodeId m_typeDefinition;
        #endregion
    }

    #region ReferenceDescriptionCollection Class
    /// <summary>
    /// A collection of ReferenceDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfReferenceDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ReferenceDescription")]
    public partial class ReferenceDescriptionCollection : List<ReferenceDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ReferenceDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ReferenceDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ReferenceDescriptionCollection(IEnumerable<ReferenceDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ReferenceDescriptionCollection(ReferenceDescription[] values)
        {
            if (values != null)
            {
                return new ReferenceDescriptionCollection(values);
            }

            return new ReferenceDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ReferenceDescription[](ReferenceDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ReferenceDescriptionCollection clone = new ReferenceDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ReferenceDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region BrowseResult Class
    #if (!OPCUA_EXCLUDE_BrowseResult)
    /// <summary>
    /// The result of a browse operation.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_continuationPoint = null;
            m_references = new ReferenceDescriptionCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A code indicating any error during the operation.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A value that indicates the operation is incomplete and can be continued by calling BrowseNext.
        /// </summary>
        [DataMember(Name = "ContinuationPoint", IsRequired = false, Order = 2)]
        public byte[] ContinuationPoint
        {
            get { return m_continuationPoint;  }
            set { m_continuationPoint = value; }
        }

        /// <summary>
        /// A list of references that meet the criteria specified in the request.
        /// </summary>
        [DataMember(Name = "References", IsRequired = false, Order = 3)]
        public ReferenceDescriptionCollection References
        {
            get
            {
                return m_references;
            }

            set
            {
                m_references = value;

                if (value == null)
                {
                    m_references = new ReferenceDescriptionCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteEncodeableArray("References", References.ToArray(), typeof(ReferenceDescription));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            References = (ReferenceDescriptionCollection)decoder.ReadEncodeableArray("References", typeof(ReferenceDescription));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseResult value = encodeable as BrowseResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_continuationPoint, value.m_continuationPoint)) return false;
            if (!Utils.IsEqual(m_references, value.m_references)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            BrowseResult clone = new BrowseResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_continuationPoint = (byte[])Utils.Clone(this.m_continuationPoint);
            clone.m_references = (ReferenceDescriptionCollection)Utils.Clone(this.m_references);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private byte[] m_continuationPoint;
        private ReferenceDescriptionCollection m_references;
        #endregion
    }

    #region BrowseResultCollection Class
    /// <summary>
    /// A collection of BrowseResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfBrowseResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "BrowseResult")]
    public partial class BrowseResultCollection : List<BrowseResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public BrowseResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public BrowseResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public BrowseResultCollection(IEnumerable<BrowseResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator BrowseResultCollection(BrowseResult[] values)
        {
            if (values != null)
            {
                return new BrowseResultCollection(values);
            }

            return new BrowseResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator BrowseResult[](BrowseResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            BrowseResultCollection clone = new BrowseResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((BrowseResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region BrowseRequest Class
    #if (!OPCUA_EXCLUDE_BrowseRequest)
    /// <summary>
    /// Browse the references for one or more nodes from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_view = new ViewDescription();
            m_requestedMaxReferencesPerNode = (uint)0;
            m_nodesToBrowse = new BrowseDescriptionCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The view to browse.
        /// </summary>
        [DataMember(Name = "View", IsRequired = false, Order = 2)]
        public ViewDescription View
        {
            get
            {
                return m_view;
            }

            set
            {
                m_view = value;

                if (value == null)
                {
                    m_view = new ViewDescription();
                }
            }
        }

        /// <summary>
        /// The maximum number of references to return in the response.
        /// </summary>
        [DataMember(Name = "RequestedMaxReferencesPerNode", IsRequired = false, Order = 3)]
        public uint RequestedMaxReferencesPerNode
        {
            get { return m_requestedMaxReferencesPerNode;  }
            set { m_requestedMaxReferencesPerNode = value; }
        }

        /// <summary>
        /// The list of nodes to browse.
        /// </summary>
        [DataMember(Name = "NodesToBrowse", IsRequired = false, Order = 4)]
        public BrowseDescriptionCollection NodesToBrowse
        {
            get
            {
                return m_nodesToBrowse;
            }

            set
            {
                m_nodesToBrowse = value;

                if (value == null)
                {
                    m_nodesToBrowse = new BrowseDescriptionCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeable("View", View, typeof(ViewDescription));
            encoder.WriteUInt32("RequestedMaxReferencesPerNode", RequestedMaxReferencesPerNode);
            encoder.WriteEncodeableArray("NodesToBrowse", NodesToBrowse.ToArray(), typeof(BrowseDescription));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            View = (ViewDescription)decoder.ReadEncodeable("View", typeof(ViewDescription));
            RequestedMaxReferencesPerNode = decoder.ReadUInt32("RequestedMaxReferencesPerNode");
            NodesToBrowse = (BrowseDescriptionCollection)decoder.ReadEncodeableArray("NodesToBrowse", typeof(BrowseDescription));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseRequest value = encodeable as BrowseRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_view, value.m_view)) return false;
            if (!Utils.IsEqual(m_requestedMaxReferencesPerNode, value.m_requestedMaxReferencesPerNode)) return false;
            if (!Utils.IsEqual(m_nodesToBrowse, value.m_nodesToBrowse)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowseRequest clone = new BrowseRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_view = (ViewDescription)Utils.Clone(this.m_view);
            clone.m_requestedMaxReferencesPerNode = (uint)Utils.Clone(this.m_requestedMaxReferencesPerNode);
            clone.m_nodesToBrowse = (BrowseDescriptionCollection)Utils.Clone(this.m_nodesToBrowse);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private ViewDescription m_view;
        private uint m_requestedMaxReferencesPerNode;
        private BrowseDescriptionCollection m_nodesToBrowse;
        #endregion
    }
    #endif
    #endregion

    #region BrowseResponse Class
    #if (!OPCUA_EXCLUDE_BrowseResponse)
    /// <summary>
    /// Browse the references for one or more nodes from the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new BrowseResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the browse operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public BrowseResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new BrowseResultCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(BrowseResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (BrowseResultCollection)decoder.ReadEncodeableArray("Results", typeof(BrowseResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseResponse value = encodeable as BrowseResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowseResponse clone = new BrowseResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (BrowseResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private BrowseResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region BrowseNextRequest Class
    #if (!OPCUA_EXCLUDE_BrowseNextRequest)
    /// <summary>
    /// Continues one or more browse operations.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseNextRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseNextRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_releaseContinuationPoints = true;
            m_continuationPoints = new ByteStringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// If TRUE the continuation points are released and no results are returned.
        /// </summary>
        [DataMember(Name = "ReleaseContinuationPoints", IsRequired = false, Order = 2)]
        public bool ReleaseContinuationPoints
        {
            get { return m_releaseContinuationPoints;  }
            set { m_releaseContinuationPoints = value; }
        }

        /// <summary>
        /// The contination points returned from a previous call to Browse and BrowseNext.
        /// </summary>
        [DataMember(Name = "ContinuationPoints", IsRequired = false, Order = 3)]
        public ByteStringCollection ContinuationPoints
        {
            get
            {
                return m_continuationPoints;
            }

            set
            {
                m_continuationPoints = value;

                if (value == null)
                {
                    m_continuationPoints = new ByteStringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseNextRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseNextRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseNextRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteBoolean("ReleaseContinuationPoints", ReleaseContinuationPoints);
            encoder.WriteByteStringArray("ContinuationPoints", ContinuationPoints);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ReleaseContinuationPoints = decoder.ReadBoolean("ReleaseContinuationPoints");
            ContinuationPoints = decoder.ReadByteStringArray("ContinuationPoints");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseNextRequest value = encodeable as BrowseNextRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_releaseContinuationPoints, value.m_releaseContinuationPoints)) return false;
            if (!Utils.IsEqual(m_continuationPoints, value.m_continuationPoints)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowseNextRequest clone = new BrowseNextRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_releaseContinuationPoints = (bool)Utils.Clone(this.m_releaseContinuationPoints);
            clone.m_continuationPoints = (ByteStringCollection)Utils.Clone(this.m_continuationPoints);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private bool m_releaseContinuationPoints;
        private ByteStringCollection m_continuationPoints;
        #endregion
    }
    #endif
    #endregion

    #region BrowseNextResponse Class
    #if (!OPCUA_EXCLUDE_BrowseNextResponse)
    /// <summary>
    /// Continues one or more browse operations.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowseNextResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowseNextResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new BrowseResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the browse operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public BrowseResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new BrowseResultCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowseNextResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowseNextResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowseNextResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(BrowseResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (BrowseResultCollection)decoder.ReadEncodeableArray("Results", typeof(BrowseResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowseNextResponse value = encodeable as BrowseNextResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowseNextResponse clone = new BrowseNextResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (BrowseResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private BrowseResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region RelativePathElement Class
    #if (!OPCUA_EXCLUDE_RelativePathElement)
    /// <summary>
    /// An element in a relative path.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RelativePathElement : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RelativePathElement()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_referenceTypeId = null;
            m_isInverse = true;
            m_includeSubtypes = true;
            m_targetName = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The type of reference to follow.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 1)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// If TRUE the reverse reference is followed.
        /// </summary>
        [DataMember(Name = "IsInverse", IsRequired = false, Order = 2)]
        public bool IsInverse
        {
            get { return m_isInverse;  }
            set { m_isInverse = value; }
        }

        /// <summary>
        /// If TRUE then subtypes of the reference type are followed.
        /// </summary>
        [DataMember(Name = "IncludeSubtypes", IsRequired = false, Order = 3)]
        public bool IncludeSubtypes
        {
            get { return m_includeSubtypes;  }
            set { m_includeSubtypes = value; }
        }

        /// <summary>
        /// The browse name of the target.
        /// </summary>
        [DataMember(Name = "TargetName", IsRequired = false, Order = 4)]
        public QualifiedName TargetName
        {
            get { return m_targetName;  }
            set { m_targetName = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RelativePathElement; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RelativePathElement_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RelativePathElement_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsInverse", IsInverse);
            encoder.WriteBoolean("IncludeSubtypes", IncludeSubtypes);
            encoder.WriteQualifiedName("TargetName", TargetName);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsInverse = decoder.ReadBoolean("IsInverse");
            IncludeSubtypes = decoder.ReadBoolean("IncludeSubtypes");
            TargetName = decoder.ReadQualifiedName("TargetName");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RelativePathElement value = encodeable as RelativePathElement;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isInverse, value.m_isInverse)) return false;
            if (!Utils.IsEqual(m_includeSubtypes, value.m_includeSubtypes)) return false;
            if (!Utils.IsEqual(m_targetName, value.m_targetName)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RelativePathElement clone = new RelativePathElement();

            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isInverse = (bool)Utils.Clone(this.m_isInverse);
            clone.m_includeSubtypes = (bool)Utils.Clone(this.m_includeSubtypes);
            clone.m_targetName = (QualifiedName)Utils.Clone(this.m_targetName);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_referenceTypeId;
        private bool m_isInverse;
        private bool m_includeSubtypes;
        private QualifiedName m_targetName;
        #endregion
    }

    #region RelativePathElementCollection Class
    /// <summary>
    /// A collection of RelativePathElement objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfRelativePathElement", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "RelativePathElement")]
    public partial class RelativePathElementCollection : List<RelativePathElement>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public RelativePathElementCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public RelativePathElementCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public RelativePathElementCollection(IEnumerable<RelativePathElement> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator RelativePathElementCollection(RelativePathElement[] values)
        {
            if (values != null)
            {
                return new RelativePathElementCollection(values);
            }

            return new RelativePathElementCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator RelativePathElement[](RelativePathElementCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            RelativePathElementCollection clone = new RelativePathElementCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((RelativePathElement)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region RelativePath Class
    #if (!OPCUA_EXCLUDE_RelativePath)
    /// <summary>
    /// A relative path constructed from reference types and browse names.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RelativePath : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RelativePath()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_elements = new RelativePathElementCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A list of elements in the path.
        /// </summary>
        [DataMember(Name = "Elements", IsRequired = false, Order = 1)]
        public RelativePathElementCollection Elements
        {
            get
            {
                return m_elements;
            }

            set
            {
                m_elements = value;

                if (value == null)
                {
                    m_elements = new RelativePathElementCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RelativePath; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RelativePath_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RelativePath_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("Elements", Elements.ToArray(), typeof(RelativePathElement));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Elements = (RelativePathElementCollection)decoder.ReadEncodeableArray("Elements", typeof(RelativePathElement));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RelativePath value = encodeable as RelativePath;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_elements, value.m_elements)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RelativePath clone = new RelativePath();

            clone.m_elements = (RelativePathElementCollection)Utils.Clone(this.m_elements);

            return clone;
        }
        #endregion

        #region Private Fields
        private RelativePathElementCollection m_elements;
        #endregion
    }
    #endif
    #endregion

    #region BrowsePath Class
    #if (!OPCUA_EXCLUDE_BrowsePath)
    /// <summary>
    /// A request to translate a path into a node id.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowsePath : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowsePath()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_startingNode = null;
            m_relativePath = new RelativePath();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The starting point for the search.
        /// </summary>
        [DataMember(Name = "StartingNode", IsRequired = false, Order = 1)]
        public NodeId StartingNode
        {
            get { return m_startingNode;  }
            set { m_startingNode = value; }
        }

        /// <summary>
        /// The path to follow.
        /// </summary>
        [DataMember(Name = "RelativePath", IsRequired = false, Order = 2)]
        public RelativePath RelativePath
        {
            get
            {
                return m_relativePath;
            }

            set
            {
                m_relativePath = value;

                if (value == null)
                {
                    m_relativePath = new RelativePath();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowsePath; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowsePath_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowsePath_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("StartingNode", StartingNode);
            encoder.WriteEncodeable("RelativePath", RelativePath, typeof(RelativePath));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StartingNode = decoder.ReadNodeId("StartingNode");
            RelativePath = (RelativePath)decoder.ReadEncodeable("RelativePath", typeof(RelativePath));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowsePath value = encodeable as BrowsePath;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_startingNode, value.m_startingNode)) return false;
            if (!Utils.IsEqual(m_relativePath, value.m_relativePath)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowsePath clone = new BrowsePath();

            clone.m_startingNode = (NodeId)Utils.Clone(this.m_startingNode);
            clone.m_relativePath = (RelativePath)Utils.Clone(this.m_relativePath);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_startingNode;
        private RelativePath m_relativePath;
        #endregion
    }

    #region BrowsePathCollection Class
    /// <summary>
    /// A collection of BrowsePath objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfBrowsePath", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "BrowsePath")]
    public partial class BrowsePathCollection : List<BrowsePath>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public BrowsePathCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public BrowsePathCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public BrowsePathCollection(IEnumerable<BrowsePath> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator BrowsePathCollection(BrowsePath[] values)
        {
            if (values != null)
            {
                return new BrowsePathCollection(values);
            }

            return new BrowsePathCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator BrowsePath[](BrowsePathCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            BrowsePathCollection clone = new BrowsePathCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((BrowsePath)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region BrowsePathTarget Class
    #if (!OPCUA_EXCLUDE_BrowsePathTarget)
    /// <summary>
    /// The target of the translated path.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowsePathTarget : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowsePathTarget()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_targetId = null;
            m_remainingPathIndex = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// The id of the target node.
        /// </summary>
        [DataMember(Name = "TargetId", IsRequired = false, Order = 1)]
        public ExpandedNodeId TargetId
        {
            get { return m_targetId;  }
            set { m_targetId = value; }
        }

        /// <summary>
        /// The index of the target in the relative path. UInt32.MaxValue if the entire path was processed.
        /// </summary>
        [DataMember(Name = "RemainingPathIndex", IsRequired = false, Order = 2)]
        public uint RemainingPathIndex
        {
            get { return m_remainingPathIndex;  }
            set { m_remainingPathIndex = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowsePathTarget; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowsePathTarget_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowsePathTarget_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteExpandedNodeId("TargetId", TargetId);
            encoder.WriteUInt32("RemainingPathIndex", RemainingPathIndex);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            TargetId = decoder.ReadExpandedNodeId("TargetId");
            RemainingPathIndex = decoder.ReadUInt32("RemainingPathIndex");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowsePathTarget value = encodeable as BrowsePathTarget;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_targetId, value.m_targetId)) return false;
            if (!Utils.IsEqual(m_remainingPathIndex, value.m_remainingPathIndex)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowsePathTarget clone = new BrowsePathTarget();

            clone.m_targetId = (ExpandedNodeId)Utils.Clone(this.m_targetId);
            clone.m_remainingPathIndex = (uint)Utils.Clone(this.m_remainingPathIndex);

            return clone;
        }
        #endregion

        #region Private Fields
        private ExpandedNodeId m_targetId;
        private uint m_remainingPathIndex;
        #endregion
    }

    #region BrowsePathTargetCollection Class
    /// <summary>
    /// A collection of BrowsePathTarget objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfBrowsePathTarget", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "BrowsePathTarget")]
    public partial class BrowsePathTargetCollection : List<BrowsePathTarget>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public BrowsePathTargetCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public BrowsePathTargetCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public BrowsePathTargetCollection(IEnumerable<BrowsePathTarget> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator BrowsePathTargetCollection(BrowsePathTarget[] values)
        {
            if (values != null)
            {
                return new BrowsePathTargetCollection(values);
            }

            return new BrowsePathTargetCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator BrowsePathTarget[](BrowsePathTargetCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            BrowsePathTargetCollection clone = new BrowsePathTargetCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((BrowsePathTarget)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region BrowsePathResult Class
    #if (!OPCUA_EXCLUDE_BrowsePathResult)
    /// <summary>
    /// The result of a translate opearation.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BrowsePathResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BrowsePathResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_targets = new BrowsePathTargetCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A code indicating any error during the operation.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A list of nodes found. The first element matches the type definition.
        /// </summary>
        [DataMember(Name = "Targets", IsRequired = false, Order = 2)]
        public BrowsePathTargetCollection Targets
        {
            get
            {
                return m_targets;
            }

            set
            {
                m_targets = value;

                if (value == null)
                {
                    m_targets = new BrowsePathTargetCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BrowsePathResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BrowsePathResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BrowsePathResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteEncodeableArray("Targets", Targets.ToArray(), typeof(BrowsePathTarget));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            Targets = (BrowsePathTargetCollection)decoder.ReadEncodeableArray("Targets", typeof(BrowsePathTarget));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BrowsePathResult value = encodeable as BrowsePathResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_targets, value.m_targets)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BrowsePathResult clone = new BrowsePathResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_targets = (BrowsePathTargetCollection)Utils.Clone(this.m_targets);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private BrowsePathTargetCollection m_targets;
        #endregion
    }

    #region BrowsePathResultCollection Class
    /// <summary>
    /// A collection of BrowsePathResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfBrowsePathResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "BrowsePathResult")]
    public partial class BrowsePathResultCollection : List<BrowsePathResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public BrowsePathResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public BrowsePathResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public BrowsePathResultCollection(IEnumerable<BrowsePathResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator BrowsePathResultCollection(BrowsePathResult[] values)
        {
            if (values != null)
            {
                return new BrowsePathResultCollection(values);
            }

            return new BrowsePathResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator BrowsePathResult[](BrowsePathResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            BrowsePathResultCollection clone = new BrowsePathResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((BrowsePathResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region TranslateBrowsePathsToNodeIdsRequest Class
    #if (!OPCUA_EXCLUDE_TranslateBrowsePathsToNodeIdsRequest)
    /// <summary>
    /// Translates one or more paths in the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TranslateBrowsePathsToNodeIdsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TranslateBrowsePathsToNodeIdsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_browsePaths = new BrowsePathCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of paths to translate.
        /// </summary>
        [DataMember(Name = "BrowsePaths", IsRequired = false, Order = 2)]
        public BrowsePathCollection BrowsePaths
        {
            get
            {
                return m_browsePaths;
            }

            set
            {
                m_browsePaths = value;

                if (value == null)
                {
                    m_browsePaths = new BrowsePathCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TranslateBrowsePathsToNodeIdsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TranslateBrowsePathsToNodeIdsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TranslateBrowsePathsToNodeIdsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("BrowsePaths", BrowsePaths.ToArray(), typeof(BrowsePath));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            BrowsePaths = (BrowsePathCollection)decoder.ReadEncodeableArray("BrowsePaths", typeof(BrowsePath));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TranslateBrowsePathsToNodeIdsRequest value = encodeable as TranslateBrowsePathsToNodeIdsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_browsePaths, value.m_browsePaths)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TranslateBrowsePathsToNodeIdsRequest clone = new TranslateBrowsePathsToNodeIdsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_browsePaths = (BrowsePathCollection)Utils.Clone(this.m_browsePaths);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private BrowsePathCollection m_browsePaths;
        #endregion
    }
    #endif
    #endregion

    #region TranslateBrowsePathsToNodeIdsResponse Class
    #if (!OPCUA_EXCLUDE_TranslateBrowsePathsToNodeIdsResponse)
    /// <summary>
    /// Translates one or more paths in the server address space.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TranslateBrowsePathsToNodeIdsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TranslateBrowsePathsToNodeIdsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new BrowsePathResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The results for the translate operations.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public BrowsePathResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new BrowsePathResultCollection();
                }
            }
        }

        /// <summary>
        /// The diagnostics associated with the results.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TranslateBrowsePathsToNodeIdsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TranslateBrowsePathsToNodeIdsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TranslateBrowsePathsToNodeIdsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(BrowsePathResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (BrowsePathResultCollection)decoder.ReadEncodeableArray("Results", typeof(BrowsePathResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TranslateBrowsePathsToNodeIdsResponse value = encodeable as TranslateBrowsePathsToNodeIdsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            TranslateBrowsePathsToNodeIdsResponse clone = new TranslateBrowsePathsToNodeIdsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (BrowsePathResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private BrowsePathResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region RegisterNodesRequest Class
    #if (!OPCUA_EXCLUDE_RegisterNodesRequest)
    /// <summary>
    /// Registers one or more nodes for repeated use within a session.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RegisterNodesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RegisterNodesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_nodesToRegister = new NodeIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of nodes to register.
        /// </summary>
        [DataMember(Name = "NodesToRegister", IsRequired = false, Order = 2)]
        public NodeIdCollection NodesToRegister
        {
            get
            {
                return m_nodesToRegister;
            }

            set
            {
                m_nodesToRegister = value;

                if (value == null)
                {
                    m_nodesToRegister = new NodeIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RegisterNodesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RegisterNodesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RegisterNodesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteNodeIdArray("NodesToRegister", NodesToRegister);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            NodesToRegister = decoder.ReadNodeIdArray("NodesToRegister");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RegisterNodesRequest value = encodeable as RegisterNodesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_nodesToRegister, value.m_nodesToRegister)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RegisterNodesRequest clone = new RegisterNodesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_nodesToRegister = (NodeIdCollection)Utils.Clone(this.m_nodesToRegister);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private NodeIdCollection m_nodesToRegister;
        #endregion
    }
    #endif
    #endregion

    #region RegisterNodesResponse Class
    #if (!OPCUA_EXCLUDE_RegisterNodesResponse)
    /// <summary>
    /// Registers one or more nodes for repeated use within a session.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RegisterNodesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RegisterNodesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_registeredNodeIds = new NodeIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// The list of node ids that can be used for fast access to the nodes.
        /// </summary>
        [DataMember(Name = "RegisteredNodeIds", IsRequired = false, Order = 2)]
        public NodeIdCollection RegisteredNodeIds
        {
            get
            {
                return m_registeredNodeIds;
            }

            set
            {
                m_registeredNodeIds = value;

                if (value == null)
                {
                    m_registeredNodeIds = new NodeIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RegisterNodesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RegisterNodesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RegisterNodesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteNodeIdArray("RegisteredNodeIds", RegisteredNodeIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            RegisteredNodeIds = decoder.ReadNodeIdArray("RegisteredNodeIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RegisterNodesResponse value = encodeable as RegisterNodesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_registeredNodeIds, value.m_registeredNodeIds)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            RegisterNodesResponse clone = new RegisterNodesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_registeredNodeIds = (NodeIdCollection)Utils.Clone(this.m_registeredNodeIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private NodeIdCollection m_registeredNodeIds;
        #endregion
    }
    #endif
    #endregion

    #region UnregisterNodesRequest Class
    #if (!OPCUA_EXCLUDE_UnregisterNodesRequest)
    /// <summary>
    /// Unregisters one or more previously registered nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UnregisterNodesRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UnregisterNodesRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_nodesToUnregister = new NodeIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all requests sent to a server.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// The list of nodes to unregister.
        /// </summary>
        [DataMember(Name = "NodesToUnregister", IsRequired = false, Order = 2)]
        public NodeIdCollection NodesToUnregister
        {
            get
            {
                return m_nodesToUnregister;
            }

            set
            {
                m_nodesToUnregister = value;

                if (value == null)
                {
                    m_nodesToUnregister = new NodeIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UnregisterNodesRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UnregisterNodesRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UnregisterNodesRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteNodeIdArray("NodesToUnregister", NodesToUnregister);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            NodesToUnregister = decoder.ReadNodeIdArray("NodesToUnregister");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UnregisterNodesRequest value = encodeable as UnregisterNodesRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_nodesToUnregister, value.m_nodesToUnregister)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            UnregisterNodesRequest clone = new UnregisterNodesRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_nodesToUnregister = (NodeIdCollection)Utils.Clone(this.m_nodesToUnregister);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private NodeIdCollection m_nodesToUnregister;
        #endregion
    }
    #endif
    #endregion

    #region UnregisterNodesResponse Class
    #if (!OPCUA_EXCLUDE_UnregisterNodesResponse)
    /// <summary>
    /// Unregisters one or more previously registered nodes.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UnregisterNodesResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UnregisterNodesResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A standard header included in all responses returned by servers.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UnregisterNodesResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UnregisterNodesResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UnregisterNodesResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UnregisterNodesResponse value = encodeable as UnregisterNodesResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            UnregisterNodesResponse clone = new UnregisterNodesResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        #endregion
    }
    #endif
    #endregion

    #region EndpointConfiguration Class
    #if (!OPCUA_EXCLUDE_EndpointConfiguration)
    /// <summary>
    /// A description for the EndpointConfiguration DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EndpointConfiguration : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EndpointConfiguration()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_operationTimeout = (int)0;
            m_useBinaryEncoding = true;
            m_maxStringLength = (int)0;
            m_maxByteStringLength = (int)0;
            m_maxArrayLength = (int)0;
            m_maxMessageSize = (int)0;
            m_maxBufferSize = (int)0;
            m_channelLifetime = (int)0;
            m_securityTokenLifetime = (int)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the OperationTimeout field.
        /// </summary>
        [DataMember(Name = "OperationTimeout", IsRequired = false, Order = 1)]
        public int OperationTimeout
        {
            get { return m_operationTimeout;  }
            set { m_operationTimeout = value; }
        }

        /// <summary>
        /// A description for the UseBinaryEncoding field.
        /// </summary>
        [DataMember(Name = "UseBinaryEncoding", IsRequired = false, Order = 2)]
        public bool UseBinaryEncoding
        {
            get { return m_useBinaryEncoding;  }
            set { m_useBinaryEncoding = value; }
        }

        /// <summary>
        /// A description for the MaxStringLength field.
        /// </summary>
        [DataMember(Name = "MaxStringLength", IsRequired = false, Order = 3)]
        public int MaxStringLength
        {
            get { return m_maxStringLength;  }
            set { m_maxStringLength = value; }
        }

        /// <summary>
        /// A description for the MaxByteStringLength field.
        /// </summary>
        [DataMember(Name = "MaxByteStringLength", IsRequired = false, Order = 4)]
        public int MaxByteStringLength
        {
            get { return m_maxByteStringLength;  }
            set { m_maxByteStringLength = value; }
        }

        /// <summary>
        /// A description for the MaxArrayLength field.
        /// </summary>
        [DataMember(Name = "MaxArrayLength", IsRequired = false, Order = 5)]
        public int MaxArrayLength
        {
            get { return m_maxArrayLength;  }
            set { m_maxArrayLength = value; }
        }

        /// <summary>
        /// A description for the MaxMessageSize field.
        /// </summary>
        [DataMember(Name = "MaxMessageSize", IsRequired = false, Order = 6)]
        public int MaxMessageSize
        {
            get { return m_maxMessageSize;  }
            set { m_maxMessageSize = value; }
        }

        /// <summary>
        /// A description for the MaxBufferSize field.
        /// </summary>
        [DataMember(Name = "MaxBufferSize", IsRequired = false, Order = 7)]
        public int MaxBufferSize
        {
            get { return m_maxBufferSize;  }
            set { m_maxBufferSize = value; }
        }

        /// <summary>
        /// A description for the ChannelLifetime field.
        /// </summary>
        [DataMember(Name = "ChannelLifetime", IsRequired = false, Order = 8)]
        public int ChannelLifetime
        {
            get { return m_channelLifetime;  }
            set { m_channelLifetime = value; }
        }

        /// <summary>
        /// A description for the SecurityTokenLifetime field.
        /// </summary>
        [DataMember(Name = "SecurityTokenLifetime", IsRequired = false, Order = 9)]
        public int SecurityTokenLifetime
        {
            get { return m_securityTokenLifetime;  }
            set { m_securityTokenLifetime = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EndpointConfiguration; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EndpointConfiguration_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EndpointConfiguration_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteInt32("OperationTimeout", OperationTimeout);
            encoder.WriteBoolean("UseBinaryEncoding", UseBinaryEncoding);
            encoder.WriteInt32("MaxStringLength", MaxStringLength);
            encoder.WriteInt32("MaxByteStringLength", MaxByteStringLength);
            encoder.WriteInt32("MaxArrayLength", MaxArrayLength);
            encoder.WriteInt32("MaxMessageSize", MaxMessageSize);
            encoder.WriteInt32("MaxBufferSize", MaxBufferSize);
            encoder.WriteInt32("ChannelLifetime", ChannelLifetime);
            encoder.WriteInt32("SecurityTokenLifetime", SecurityTokenLifetime);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            OperationTimeout = decoder.ReadInt32("OperationTimeout");
            UseBinaryEncoding = decoder.ReadBoolean("UseBinaryEncoding");
            MaxStringLength = decoder.ReadInt32("MaxStringLength");
            MaxByteStringLength = decoder.ReadInt32("MaxByteStringLength");
            MaxArrayLength = decoder.ReadInt32("MaxArrayLength");
            MaxMessageSize = decoder.ReadInt32("MaxMessageSize");
            MaxBufferSize = decoder.ReadInt32("MaxBufferSize");
            ChannelLifetime = decoder.ReadInt32("ChannelLifetime");
            SecurityTokenLifetime = decoder.ReadInt32("SecurityTokenLifetime");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EndpointConfiguration value = encodeable as EndpointConfiguration;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_operationTimeout, value.m_operationTimeout)) return false;
            if (!Utils.IsEqual(m_useBinaryEncoding, value.m_useBinaryEncoding)) return false;
            if (!Utils.IsEqual(m_maxStringLength, value.m_maxStringLength)) return false;
            if (!Utils.IsEqual(m_maxByteStringLength, value.m_maxByteStringLength)) return false;
            if (!Utils.IsEqual(m_maxArrayLength, value.m_maxArrayLength)) return false;
            if (!Utils.IsEqual(m_maxMessageSize, value.m_maxMessageSize)) return false;
            if (!Utils.IsEqual(m_maxBufferSize, value.m_maxBufferSize)) return false;
            if (!Utils.IsEqual(m_channelLifetime, value.m_channelLifetime)) return false;
            if (!Utils.IsEqual(m_securityTokenLifetime, value.m_securityTokenLifetime)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            EndpointConfiguration clone = new EndpointConfiguration();

            clone.m_operationTimeout = (int)Utils.Clone(this.m_operationTimeout);
            clone.m_useBinaryEncoding = (bool)Utils.Clone(this.m_useBinaryEncoding);
            clone.m_maxStringLength = (int)Utils.Clone(this.m_maxStringLength);
            clone.m_maxByteStringLength = (int)Utils.Clone(this.m_maxByteStringLength);
            clone.m_maxArrayLength = (int)Utils.Clone(this.m_maxArrayLength);
            clone.m_maxMessageSize = (int)Utils.Clone(this.m_maxMessageSize);
            clone.m_maxBufferSize = (int)Utils.Clone(this.m_maxBufferSize);
            clone.m_channelLifetime = (int)Utils.Clone(this.m_channelLifetime);
            clone.m_securityTokenLifetime = (int)Utils.Clone(this.m_securityTokenLifetime);

            return clone;
        }
        #endregion

        #region Private Fields
        private int m_operationTimeout;
        private bool m_useBinaryEncoding;
        private int m_maxStringLength;
        private int m_maxByteStringLength;
        private int m_maxArrayLength;
        private int m_maxMessageSize;
        private int m_maxBufferSize;
        private int m_channelLifetime;
        private int m_securityTokenLifetime;
        #endregion
    }

    #region EndpointConfigurationCollection Class
    /// <summary>
    /// A collection of EndpointConfiguration objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEndpointConfiguration", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EndpointConfiguration")]
    public partial class EndpointConfigurationCollection : List<EndpointConfiguration>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EndpointConfigurationCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EndpointConfigurationCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EndpointConfigurationCollection(IEnumerable<EndpointConfiguration> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EndpointConfigurationCollection(EndpointConfiguration[] values)
        {
            if (values != null)
            {
                return new EndpointConfigurationCollection(values);
            }

            return new EndpointConfigurationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EndpointConfiguration[](EndpointConfigurationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EndpointConfigurationCollection clone = new EndpointConfigurationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EndpointConfiguration)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ComplianceLevel Enumeration
    #if (!OPCUA_EXCLUDE_ComplianceLevel)
    /// <summary>
    /// A description for the ComplianceLevel DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum ComplianceLevel
    {
        /// <summary>
        /// A description for the Untested field.
        /// </summary>
        [EnumMember(Value = "Untested_0")]
        Untested = 0,

        /// <summary>
        /// A description for the Partial field.
        /// </summary>
        [EnumMember(Value = "Partial_1")]
        Partial = 1,

        /// <summary>
        /// A description for the SelfTested field.
        /// </summary>
        [EnumMember(Value = "SelfTested_2")]
        SelfTested = 2,

        /// <summary>
        /// A description for the Certified field.
        /// </summary>
        [EnumMember(Value = "Certified_3")]
        Certified = 3,
    }
    #endif
    #endregion

    #region SupportedProfile Class
    #if (!OPCUA_EXCLUDE_SupportedProfile)
    /// <summary>
    /// A description for the SupportedProfile DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SupportedProfile : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SupportedProfile()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_organizationUri = null;
            m_profileId = null;
            m_complianceTool = null;
            m_complianceDate = DateTime.MinValue;
            m_complianceLevel = ComplianceLevel.Untested;
            m_unsupportedUnitIds = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the OrganizationUri field.
        /// </summary>
        [DataMember(Name = "OrganizationUri", IsRequired = false, Order = 1)]
        public string OrganizationUri
        {
            get { return m_organizationUri;  }
            set { m_organizationUri = value; }
        }

        /// <summary>
        /// A description for the ProfileId field.
        /// </summary>
        [DataMember(Name = "ProfileId", IsRequired = false, Order = 2)]
        public string ProfileId
        {
            get { return m_profileId;  }
            set { m_profileId = value; }
        }

        /// <summary>
        /// A description for the ComplianceTool field.
        /// </summary>
        [DataMember(Name = "ComplianceTool", IsRequired = false, Order = 3)]
        public string ComplianceTool
        {
            get { return m_complianceTool;  }
            set { m_complianceTool = value; }
        }

        /// <summary>
        /// A description for the ComplianceDate field.
        /// </summary>
        [DataMember(Name = "ComplianceDate", IsRequired = false, Order = 4)]
        public DateTime ComplianceDate
        {
            get { return m_complianceDate;  }
            set { m_complianceDate = value; }
        }

        /// <summary>
        /// A description for the ComplianceLevel field.
        /// </summary>
        [DataMember(Name = "ComplianceLevel", IsRequired = false, Order = 5)]
        public ComplianceLevel ComplianceLevel
        {
            get { return m_complianceLevel;  }
            set { m_complianceLevel = value; }
        }

        /// <summary>
        /// A description for the UnsupportedUnitIds field.
        /// </summary>
        [DataMember(Name = "UnsupportedUnitIds", IsRequired = false, Order = 6)]
        public StringCollection UnsupportedUnitIds
        {
            get
            {
                return m_unsupportedUnitIds;
            }

            set
            {
                m_unsupportedUnitIds = value;

                if (value == null)
                {
                    m_unsupportedUnitIds = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SupportedProfile; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SupportedProfile_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SupportedProfile_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("OrganizationUri", OrganizationUri);
            encoder.WriteString("ProfileId", ProfileId);
            encoder.WriteString("ComplianceTool", ComplianceTool);
            encoder.WriteDateTime("ComplianceDate", ComplianceDate);
            encoder.WriteEnumerated("ComplianceLevel", ComplianceLevel);
            encoder.WriteStringArray("UnsupportedUnitIds", UnsupportedUnitIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            OrganizationUri = decoder.ReadString("OrganizationUri");
            ProfileId = decoder.ReadString("ProfileId");
            ComplianceTool = decoder.ReadString("ComplianceTool");
            ComplianceDate = decoder.ReadDateTime("ComplianceDate");
            ComplianceLevel = (ComplianceLevel)decoder.ReadEnumerated("ComplianceLevel", typeof(ComplianceLevel));
            UnsupportedUnitIds = decoder.ReadStringArray("UnsupportedUnitIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SupportedProfile value = encodeable as SupportedProfile;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_organizationUri, value.m_organizationUri)) return false;
            if (!Utils.IsEqual(m_profileId, value.m_profileId)) return false;
            if (!Utils.IsEqual(m_complianceTool, value.m_complianceTool)) return false;
            if (!Utils.IsEqual(m_complianceDate, value.m_complianceDate)) return false;
            if (!Utils.IsEqual(m_complianceLevel, value.m_complianceLevel)) return false;
            if (!Utils.IsEqual(m_unsupportedUnitIds, value.m_unsupportedUnitIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SupportedProfile clone = new SupportedProfile();

            clone.m_organizationUri = (string)Utils.Clone(this.m_organizationUri);
            clone.m_profileId = (string)Utils.Clone(this.m_profileId);
            clone.m_complianceTool = (string)Utils.Clone(this.m_complianceTool);
            clone.m_complianceDate = (DateTime)Utils.Clone(this.m_complianceDate);
            clone.m_complianceLevel = (ComplianceLevel)Utils.Clone(this.m_complianceLevel);
            clone.m_unsupportedUnitIds = (StringCollection)Utils.Clone(this.m_unsupportedUnitIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_organizationUri;
        private string m_profileId;
        private string m_complianceTool;
        private DateTime m_complianceDate;
        private ComplianceLevel m_complianceLevel;
        private StringCollection m_unsupportedUnitIds;
        #endregion
    }

    #region SupportedProfileCollection Class
    /// <summary>
    /// A collection of SupportedProfile objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSupportedProfile", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SupportedProfile")]
    public partial class SupportedProfileCollection : List<SupportedProfile>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SupportedProfileCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SupportedProfileCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SupportedProfileCollection(IEnumerable<SupportedProfile> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SupportedProfileCollection(SupportedProfile[] values)
        {
            if (values != null)
            {
                return new SupportedProfileCollection(values);
            }

            return new SupportedProfileCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SupportedProfile[](SupportedProfileCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SupportedProfileCollection clone = new SupportedProfileCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SupportedProfile)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region SoftwareCertificate Class
    #if (!OPCUA_EXCLUDE_SoftwareCertificate)
    /// <summary>
    /// A description for the SoftwareCertificate DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SoftwareCertificate : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SoftwareCertificate()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_productName = null;
            m_productUri = null;
            m_vendorName = null;
            m_vendorProductCertificate = null;
            m_softwareVersion = null;
            m_buildNumber = null;
            m_buildDate = DateTime.MinValue;
            m_issuedBy = null;
            m_issueDate = DateTime.MinValue;
            m_supportedProfiles = new SupportedProfileCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ProductName field.
        /// </summary>
        [DataMember(Name = "ProductName", IsRequired = false, Order = 1)]
        public string ProductName
        {
            get { return m_productName;  }
            set { m_productName = value; }
        }

        /// <summary>
        /// A description for the ProductUri field.
        /// </summary>
        [DataMember(Name = "ProductUri", IsRequired = false, Order = 2)]
        public string ProductUri
        {
            get { return m_productUri;  }
            set { m_productUri = value; }
        }

        /// <summary>
        /// A description for the VendorName field.
        /// </summary>
        [DataMember(Name = "VendorName", IsRequired = false, Order = 3)]
        public string VendorName
        {
            get { return m_vendorName;  }
            set { m_vendorName = value; }
        }

        /// <summary>
        /// A description for the VendorProductCertificate field.
        /// </summary>
        [DataMember(Name = "VendorProductCertificate", IsRequired = false, Order = 4)]
        public byte[] VendorProductCertificate
        {
            get { return m_vendorProductCertificate;  }
            set { m_vendorProductCertificate = value; }
        }

        /// <summary>
        /// A description for the SoftwareVersion field.
        /// </summary>
        [DataMember(Name = "SoftwareVersion", IsRequired = false, Order = 5)]
        public string SoftwareVersion
        {
            get { return m_softwareVersion;  }
            set { m_softwareVersion = value; }
        }

        /// <summary>
        /// A description for the BuildNumber field.
        /// </summary>
        [DataMember(Name = "BuildNumber", IsRequired = false, Order = 6)]
        public string BuildNumber
        {
            get { return m_buildNumber;  }
            set { m_buildNumber = value; }
        }

        /// <summary>
        /// A description for the BuildDate field.
        /// </summary>
        [DataMember(Name = "BuildDate", IsRequired = false, Order = 7)]
        public DateTime BuildDate
        {
            get { return m_buildDate;  }
            set { m_buildDate = value; }
        }

        /// <summary>
        /// A description for the IssuedBy field.
        /// </summary>
        [DataMember(Name = "IssuedBy", IsRequired = false, Order = 8)]
        public string IssuedBy
        {
            get { return m_issuedBy;  }
            set { m_issuedBy = value; }
        }

        /// <summary>
        /// A description for the IssueDate field.
        /// </summary>
        [DataMember(Name = "IssueDate", IsRequired = false, Order = 9)]
        public DateTime IssueDate
        {
            get { return m_issueDate;  }
            set { m_issueDate = value; }
        }

        /// <summary>
        /// A description for the SupportedProfiles field.
        /// </summary>
        [DataMember(Name = "SupportedProfiles", IsRequired = false, Order = 10)]
        public SupportedProfileCollection SupportedProfiles
        {
            get
            {
                return m_supportedProfiles;
            }

            set
            {
                m_supportedProfiles = value;

                if (value == null)
                {
                    m_supportedProfiles = new SupportedProfileCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SoftwareCertificate; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SoftwareCertificate_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SoftwareCertificate_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ProductName", ProductName);
            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteString("VendorName", VendorName);
            encoder.WriteByteString("VendorProductCertificate", VendorProductCertificate);
            encoder.WriteString("SoftwareVersion", SoftwareVersion);
            encoder.WriteString("BuildNumber", BuildNumber);
            encoder.WriteDateTime("BuildDate", BuildDate);
            encoder.WriteString("IssuedBy", IssuedBy);
            encoder.WriteDateTime("IssueDate", IssueDate);
            encoder.WriteEncodeableArray("SupportedProfiles", SupportedProfiles.ToArray(), typeof(SupportedProfile));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ProductName = decoder.ReadString("ProductName");
            ProductUri = decoder.ReadString("ProductUri");
            VendorName = decoder.ReadString("VendorName");
            VendorProductCertificate = decoder.ReadByteString("VendorProductCertificate");
            SoftwareVersion = decoder.ReadString("SoftwareVersion");
            BuildNumber = decoder.ReadString("BuildNumber");
            BuildDate = decoder.ReadDateTime("BuildDate");
            IssuedBy = decoder.ReadString("IssuedBy");
            IssueDate = decoder.ReadDateTime("IssueDate");
            SupportedProfiles = (SupportedProfileCollection)decoder.ReadEncodeableArray("SupportedProfiles", typeof(SupportedProfile));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SoftwareCertificate value = encodeable as SoftwareCertificate;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_productName, value.m_productName)) return false;
            if (!Utils.IsEqual(m_productUri, value.m_productUri)) return false;
            if (!Utils.IsEqual(m_vendorName, value.m_vendorName)) return false;
            if (!Utils.IsEqual(m_vendorProductCertificate, value.m_vendorProductCertificate)) return false;
            if (!Utils.IsEqual(m_softwareVersion, value.m_softwareVersion)) return false;
            if (!Utils.IsEqual(m_buildNumber, value.m_buildNumber)) return false;
            if (!Utils.IsEqual(m_buildDate, value.m_buildDate)) return false;
            if (!Utils.IsEqual(m_issuedBy, value.m_issuedBy)) return false;
            if (!Utils.IsEqual(m_issueDate, value.m_issueDate)) return false;
            if (!Utils.IsEqual(m_supportedProfiles, value.m_supportedProfiles)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SoftwareCertificate clone = new SoftwareCertificate();

            clone.m_productName = (string)Utils.Clone(this.m_productName);
            clone.m_productUri = (string)Utils.Clone(this.m_productUri);
            clone.m_vendorName = (string)Utils.Clone(this.m_vendorName);
            clone.m_vendorProductCertificate = (byte[])Utils.Clone(this.m_vendorProductCertificate);
            clone.m_softwareVersion = (string)Utils.Clone(this.m_softwareVersion);
            clone.m_buildNumber = (string)Utils.Clone(this.m_buildNumber);
            clone.m_buildDate = (DateTime)Utils.Clone(this.m_buildDate);
            clone.m_issuedBy = (string)Utils.Clone(this.m_issuedBy);
            clone.m_issueDate = (DateTime)Utils.Clone(this.m_issueDate);
            clone.m_supportedProfiles = (SupportedProfileCollection)Utils.Clone(this.m_supportedProfiles);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_productName;
        private string m_productUri;
        private string m_vendorName;
        private byte[] m_vendorProductCertificate;
        private string m_softwareVersion;
        private string m_buildNumber;
        private DateTime m_buildDate;
        private string m_issuedBy;
        private DateTime m_issueDate;
        private SupportedProfileCollection m_supportedProfiles;
        #endregion
    }
    #endif
    #endregion

    #region QueryDataDescription Class
    #if (!OPCUA_EXCLUDE_QueryDataDescription)
    /// <summary>
    /// A description for the QueryDataDescription DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryDataDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryDataDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_relativePath = new RelativePath();
            m_attributeId = (uint)0;
            m_indexRange = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RelativePath field.
        /// </summary>
        [DataMember(Name = "RelativePath", IsRequired = false, Order = 1)]
        public RelativePath RelativePath
        {
            get
            {
                return m_relativePath;
            }

            set
            {
                m_relativePath = value;

                if (value == null)
                {
                    m_relativePath = new RelativePath();
                }
            }
        }

        /// <summary>
        /// A description for the AttributeId field.
        /// </summary>
        [DataMember(Name = "AttributeId", IsRequired = false, Order = 2)]
        public uint AttributeId
        {
            get { return m_attributeId;  }
            set { m_attributeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 3)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryDataDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryDataDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryDataDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RelativePath", RelativePath, typeof(RelativePath));
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RelativePath = (RelativePath)decoder.ReadEncodeable("RelativePath", typeof(RelativePath));
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryDataDescription value = encodeable as QueryDataDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_relativePath, value.m_relativePath)) return false;
            if (!Utils.IsEqual(m_attributeId, value.m_attributeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            QueryDataDescription clone = new QueryDataDescription();

            clone.m_relativePath = (RelativePath)Utils.Clone(this.m_relativePath);
            clone.m_attributeId = (uint)Utils.Clone(this.m_attributeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);

            return clone;
        }
        #endregion

        #region Private Fields
        private RelativePath m_relativePath;
        private uint m_attributeId;
        private string m_indexRange;
        #endregion
    }

    #region QueryDataDescriptionCollection Class
    /// <summary>
    /// A collection of QueryDataDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfQueryDataDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "QueryDataDescription")]
    public partial class QueryDataDescriptionCollection : List<QueryDataDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public QueryDataDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public QueryDataDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public QueryDataDescriptionCollection(IEnumerable<QueryDataDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator QueryDataDescriptionCollection(QueryDataDescription[] values)
        {
            if (values != null)
            {
                return new QueryDataDescriptionCollection(values);
            }

            return new QueryDataDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator QueryDataDescription[](QueryDataDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            QueryDataDescriptionCollection clone = new QueryDataDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((QueryDataDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region NodeTypeDescription Class
    #if (!OPCUA_EXCLUDE_NodeTypeDescription)
    /// <summary>
    /// A description for the NodeTypeDescription DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NodeTypeDescription : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NodeTypeDescription()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_typeDefinitionNode = null;
            m_includeSubTypes = true;
            m_dataToReturn = new QueryDataDescriptionCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the TypeDefinitionNode field.
        /// </summary>
        [DataMember(Name = "TypeDefinitionNode", IsRequired = false, Order = 1)]
        public ExpandedNodeId TypeDefinitionNode
        {
            get { return m_typeDefinitionNode;  }
            set { m_typeDefinitionNode = value; }
        }

        /// <summary>
        /// A description for the IncludeSubTypes field.
        /// </summary>
        [DataMember(Name = "IncludeSubTypes", IsRequired = false, Order = 2)]
        public bool IncludeSubTypes
        {
            get { return m_includeSubTypes;  }
            set { m_includeSubTypes = value; }
        }

        /// <summary>
        /// A description for the DataToReturn field.
        /// </summary>
        [DataMember(Name = "DataToReturn", IsRequired = false, Order = 3)]
        public QueryDataDescriptionCollection DataToReturn
        {
            get
            {
                return m_dataToReturn;
            }

            set
            {
                m_dataToReturn = value;

                if (value == null)
                {
                    m_dataToReturn = new QueryDataDescriptionCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NodeTypeDescription; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NodeTypeDescription_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NodeTypeDescription_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteExpandedNodeId("TypeDefinitionNode", TypeDefinitionNode);
            encoder.WriteBoolean("IncludeSubTypes", IncludeSubTypes);
            encoder.WriteEncodeableArray("DataToReturn", DataToReturn.ToArray(), typeof(QueryDataDescription));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            TypeDefinitionNode = decoder.ReadExpandedNodeId("TypeDefinitionNode");
            IncludeSubTypes = decoder.ReadBoolean("IncludeSubTypes");
            DataToReturn = (QueryDataDescriptionCollection)decoder.ReadEncodeableArray("DataToReturn", typeof(QueryDataDescription));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NodeTypeDescription value = encodeable as NodeTypeDescription;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_typeDefinitionNode, value.m_typeDefinitionNode)) return false;
            if (!Utils.IsEqual(m_includeSubTypes, value.m_includeSubTypes)) return false;
            if (!Utils.IsEqual(m_dataToReturn, value.m_dataToReturn)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            NodeTypeDescription clone = new NodeTypeDescription();

            clone.m_typeDefinitionNode = (ExpandedNodeId)Utils.Clone(this.m_typeDefinitionNode);
            clone.m_includeSubTypes = (bool)Utils.Clone(this.m_includeSubTypes);
            clone.m_dataToReturn = (QueryDataDescriptionCollection)Utils.Clone(this.m_dataToReturn);

            return clone;
        }
        #endregion

        #region Private Fields
        private ExpandedNodeId m_typeDefinitionNode;
        private bool m_includeSubTypes;
        private QueryDataDescriptionCollection m_dataToReturn;
        #endregion
    }

    #region NodeTypeDescriptionCollection Class
    /// <summary>
    /// A collection of NodeTypeDescription objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfNodeTypeDescription", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "NodeTypeDescription")]
    public partial class NodeTypeDescriptionCollection : List<NodeTypeDescription>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public NodeTypeDescriptionCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public NodeTypeDescriptionCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public NodeTypeDescriptionCollection(IEnumerable<NodeTypeDescription> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator NodeTypeDescriptionCollection(NodeTypeDescription[] values)
        {
            if (values != null)
            {
                return new NodeTypeDescriptionCollection(values);
            }

            return new NodeTypeDescriptionCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator NodeTypeDescription[](NodeTypeDescriptionCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            NodeTypeDescriptionCollection clone = new NodeTypeDescriptionCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((NodeTypeDescription)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region FilterOperator Enumeration
    #if (!OPCUA_EXCLUDE_FilterOperator)
    /// <summary>
    /// A description for the FilterOperator DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum FilterOperator
    {
        /// <summary>
        /// A description for the Equals field.
        /// </summary>
        [EnumMember(Value = "Equals_0")]
        Equals = 0,

        /// <summary>
        /// A description for the IsNull field.
        /// </summary>
        [EnumMember(Value = "IsNull_1")]
        IsNull = 1,

        /// <summary>
        /// A description for the GreaterThan field.
        /// </summary>
        [EnumMember(Value = "GreaterThan_2")]
        GreaterThan = 2,

        /// <summary>
        /// A description for the LessThan field.
        /// </summary>
        [EnumMember(Value = "LessThan_3")]
        LessThan = 3,

        /// <summary>
        /// A description for the GreaterThanOrEqual field.
        /// </summary>
        [EnumMember(Value = "GreaterThanOrEqual_4")]
        GreaterThanOrEqual = 4,

        /// <summary>
        /// A description for the LessThanOrEqual field.
        /// </summary>
        [EnumMember(Value = "LessThanOrEqual_5")]
        LessThanOrEqual = 5,

        /// <summary>
        /// A description for the Like field.
        /// </summary>
        [EnumMember(Value = "Like_6")]
        Like = 6,

        /// <summary>
        /// A description for the Not field.
        /// </summary>
        [EnumMember(Value = "Not_7")]
        Not = 7,

        /// <summary>
        /// A description for the Between field.
        /// </summary>
        [EnumMember(Value = "Between_8")]
        Between = 8,

        /// <summary>
        /// A description for the InList field.
        /// </summary>
        [EnumMember(Value = "InList_9")]
        InList = 9,

        /// <summary>
        /// A description for the And field.
        /// </summary>
        [EnumMember(Value = "And_10")]
        And = 10,

        /// <summary>
        /// A description for the Or field.
        /// </summary>
        [EnumMember(Value = "Or_11")]
        Or = 11,

        /// <summary>
        /// A description for the Cast field.
        /// </summary>
        [EnumMember(Value = "Cast_12")]
        Cast = 12,

        /// <summary>
        /// A description for the InView field.
        /// </summary>
        [EnumMember(Value = "InView_13")]
        InView = 13,

        /// <summary>
        /// A description for the OfType field.
        /// </summary>
        [EnumMember(Value = "OfType_14")]
        OfType = 14,

        /// <summary>
        /// A description for the RelatedTo field.
        /// </summary>
        [EnumMember(Value = "RelatedTo_15")]
        RelatedTo = 15,

        /// <summary>
        /// A description for the BitwiseAnd field.
        /// </summary>
        [EnumMember(Value = "BitwiseAnd_16")]
        BitwiseAnd = 16,

        /// <summary>
        /// A description for the BitwiseOr field.
        /// </summary>
        [EnumMember(Value = "BitwiseOr_17")]
        BitwiseOr = 17,
    }
    #endif
    #endregion

    #region QueryDataSet Class
    #if (!OPCUA_EXCLUDE_QueryDataSet)
    /// <summary>
    /// A description for the QueryDataSet DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryDataSet : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryDataSet()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_typeDefinitionNode = null;
            m_values = new VariantCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public ExpandedNodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the TypeDefinitionNode field.
        /// </summary>
        [DataMember(Name = "TypeDefinitionNode", IsRequired = false, Order = 2)]
        public ExpandedNodeId TypeDefinitionNode
        {
            get { return m_typeDefinitionNode;  }
            set { m_typeDefinitionNode = value; }
        }

        /// <summary>
        /// A description for the Values field.
        /// </summary>
        [DataMember(Name = "Values", IsRequired = false, Order = 3)]
        public VariantCollection Values
        {
            get
            {
                return m_values;
            }

            set
            {
                m_values = value;

                if (value == null)
                {
                    m_values = new VariantCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryDataSet; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryDataSet_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryDataSet_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteExpandedNodeId("NodeId", NodeId);
            encoder.WriteExpandedNodeId("TypeDefinitionNode", TypeDefinitionNode);
            encoder.WriteVariantArray("Values", Values);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadExpandedNodeId("NodeId");
            TypeDefinitionNode = decoder.ReadExpandedNodeId("TypeDefinitionNode");
            Values = decoder.ReadVariantArray("Values");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryDataSet value = encodeable as QueryDataSet;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_typeDefinitionNode, value.m_typeDefinitionNode)) return false;
            if (!Utils.IsEqual(m_values, value.m_values)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            QueryDataSet clone = new QueryDataSet();

            clone.m_nodeId = (ExpandedNodeId)Utils.Clone(this.m_nodeId);
            clone.m_typeDefinitionNode = (ExpandedNodeId)Utils.Clone(this.m_typeDefinitionNode);
            clone.m_values = (VariantCollection)Utils.Clone(this.m_values);

            return clone;
        }
        #endregion

        #region Private Fields
        private ExpandedNodeId m_nodeId;
        private ExpandedNodeId m_typeDefinitionNode;
        private VariantCollection m_values;
        #endregion
    }

    #region QueryDataSetCollection Class
    /// <summary>
    /// A collection of QueryDataSet objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfQueryDataSet", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "QueryDataSet")]
    public partial class QueryDataSetCollection : List<QueryDataSet>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public QueryDataSetCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public QueryDataSetCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public QueryDataSetCollection(IEnumerable<QueryDataSet> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator QueryDataSetCollection(QueryDataSet[] values)
        {
            if (values != null)
            {
                return new QueryDataSetCollection(values);
            }

            return new QueryDataSetCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator QueryDataSet[](QueryDataSetCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            QueryDataSetCollection clone = new QueryDataSetCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((QueryDataSet)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region NodeReference Class
    #if (!OPCUA_EXCLUDE_NodeReference)
    /// <summary>
    /// A description for the NodeReference DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NodeReference : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NodeReference()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_referenceTypeId = null;
            m_isForward = true;
            m_referencedNodeIds = new NodeIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the ReferenceTypeId field.
        /// </summary>
        [DataMember(Name = "ReferenceTypeId", IsRequired = false, Order = 2)]
        public NodeId ReferenceTypeId
        {
            get { return m_referenceTypeId;  }
            set { m_referenceTypeId = value; }
        }

        /// <summary>
        /// A description for the IsForward field.
        /// </summary>
        [DataMember(Name = "IsForward", IsRequired = false, Order = 3)]
        public bool IsForward
        {
            get { return m_isForward;  }
            set { m_isForward = value; }
        }

        /// <summary>
        /// A description for the ReferencedNodeIds field.
        /// </summary>
        [DataMember(Name = "ReferencedNodeIds", IsRequired = false, Order = 4)]
        public NodeIdCollection ReferencedNodeIds
        {
            get
            {
                return m_referencedNodeIds;
            }

            set
            {
                m_referencedNodeIds = value;

                if (value == null)
                {
                    m_referencedNodeIds = new NodeIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NodeReference; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NodeReference_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NodeReference_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteNodeId("ReferenceTypeId", ReferenceTypeId);
            encoder.WriteBoolean("IsForward", IsForward);
            encoder.WriteNodeIdArray("ReferencedNodeIds", ReferencedNodeIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            ReferenceTypeId = decoder.ReadNodeId("ReferenceTypeId");
            IsForward = decoder.ReadBoolean("IsForward");
            ReferencedNodeIds = decoder.ReadNodeIdArray("ReferencedNodeIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NodeReference value = encodeable as NodeReference;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_referenceTypeId, value.m_referenceTypeId)) return false;
            if (!Utils.IsEqual(m_isForward, value.m_isForward)) return false;
            if (!Utils.IsEqual(m_referencedNodeIds, value.m_referencedNodeIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            NodeReference clone = new NodeReference();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_referenceTypeId = (NodeId)Utils.Clone(this.m_referenceTypeId);
            clone.m_isForward = (bool)Utils.Clone(this.m_isForward);
            clone.m_referencedNodeIds = (NodeIdCollection)Utils.Clone(this.m_referencedNodeIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private NodeId m_referenceTypeId;
        private bool m_isForward;
        private NodeIdCollection m_referencedNodeIds;
        #endregion
    }

    #region NodeReferenceCollection Class
    /// <summary>
    /// A collection of NodeReference objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfNodeReference", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "NodeReference")]
    public partial class NodeReferenceCollection : List<NodeReference>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public NodeReferenceCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public NodeReferenceCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public NodeReferenceCollection(IEnumerable<NodeReference> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator NodeReferenceCollection(NodeReference[] values)
        {
            if (values != null)
            {
                return new NodeReferenceCollection(values);
            }

            return new NodeReferenceCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator NodeReference[](NodeReferenceCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            NodeReferenceCollection clone = new NodeReferenceCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((NodeReference)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ContentFilterElement Class
    #if (!OPCUA_EXCLUDE_ContentFilterElement)
    /// <summary>
    /// A description for the ContentFilterElement DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ContentFilterElement : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ContentFilterElement()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_filterOperator = FilterOperator.Equals;
            m_filterOperands = new ExtensionObjectCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the FilterOperator field.
        /// </summary>
        [DataMember(Name = "FilterOperator", IsRequired = false, Order = 1)]
        public FilterOperator FilterOperator
        {
            get { return m_filterOperator;  }
            set { m_filterOperator = value; }
        }

        /// <summary>
        /// A description for the FilterOperands field.
        /// </summary>
        [DataMember(Name = "FilterOperands", IsRequired = false, Order = 2)]
        public ExtensionObjectCollection FilterOperands
        {
            get
            {
                return m_filterOperands;
            }

            set
            {
                m_filterOperands = value;

                if (value == null)
                {
                    m_filterOperands = new ExtensionObjectCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ContentFilterElement; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ContentFilterElement_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ContentFilterElement_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEnumerated("FilterOperator", FilterOperator);
            encoder.WriteExtensionObjectArray("FilterOperands", FilterOperands);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            FilterOperator = (FilterOperator)decoder.ReadEnumerated("FilterOperator", typeof(FilterOperator));
            FilterOperands = decoder.ReadExtensionObjectArray("FilterOperands");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ContentFilterElement value = encodeable as ContentFilterElement;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_filterOperator, value.m_filterOperator)) return false;
            if (!Utils.IsEqual(m_filterOperands, value.m_filterOperands)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ContentFilterElement clone = new ContentFilterElement();

            clone.m_filterOperator = (FilterOperator)Utils.Clone(this.m_filterOperator);
            clone.m_filterOperands = (ExtensionObjectCollection)Utils.Clone(this.m_filterOperands);

            return clone;
        }
        #endregion

        #region Private Fields
        private FilterOperator m_filterOperator;
        private ExtensionObjectCollection m_filterOperands;
        #endregion
    }

    #region ContentFilterElementCollection Class
    /// <summary>
    /// A collection of ContentFilterElement objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfContentFilterElement", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ContentFilterElement")]
    public partial class ContentFilterElementCollection : List<ContentFilterElement>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ContentFilterElementCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ContentFilterElementCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ContentFilterElementCollection(IEnumerable<ContentFilterElement> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ContentFilterElementCollection(ContentFilterElement[] values)
        {
            if (values != null)
            {
                return new ContentFilterElementCollection(values);
            }

            return new ContentFilterElementCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ContentFilterElement[](ContentFilterElementCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ContentFilterElementCollection clone = new ContentFilterElementCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ContentFilterElement)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ContentFilter Class
    #if (!OPCUA_EXCLUDE_ContentFilter)
    /// <summary>
    /// A description for the ContentFilter DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ContentFilter : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ContentFilter()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_elements = new ContentFilterElementCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Elements field.
        /// </summary>
        [DataMember(Name = "Elements", IsRequired = false, Order = 1)]
        public ContentFilterElementCollection Elements
        {
            get
            {
                return m_elements;
            }

            set
            {
                m_elements = value;

                if (value == null)
                {
                    m_elements = new ContentFilterElementCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ContentFilter; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ContentFilter_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ContentFilter_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("Elements", Elements.ToArray(), typeof(ContentFilterElement));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Elements = (ContentFilterElementCollection)decoder.ReadEncodeableArray("Elements", typeof(ContentFilterElement));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ContentFilter value = encodeable as ContentFilter;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_elements, value.m_elements)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ContentFilter clone = new ContentFilter();

            clone.m_elements = (ContentFilterElementCollection)Utils.Clone(this.m_elements);

            return clone;
        }
        #endregion

        #region Private Fields
        private ContentFilterElementCollection m_elements;
        #endregion
    }

    #region ContentFilterCollection Class
    /// <summary>
    /// A collection of ContentFilter objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfContentFilter", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ContentFilter")]
    public partial class ContentFilterCollection : List<ContentFilter>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ContentFilterCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ContentFilterCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ContentFilterCollection(IEnumerable<ContentFilter> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ContentFilterCollection(ContentFilter[] values)
        {
            if (values != null)
            {
                return new ContentFilterCollection(values);
            }

            return new ContentFilterCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ContentFilter[](ContentFilterCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ContentFilterCollection clone = new ContentFilterCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ContentFilter)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region FilterOperand Class
    #if (!OPCUA_EXCLUDE_FilterOperand)
    /// <summary>
    /// A description for the FilterOperand DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class FilterOperand : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public FilterOperand()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.FilterOperand; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.FilterOperand_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.FilterOperand_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            FilterOperand value = encodeable as FilterOperand;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ElementOperand Class
    #if (!OPCUA_EXCLUDE_ElementOperand)
    /// <summary>
    /// A description for the ElementOperand DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ElementOperand : FilterOperand
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ElementOperand()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_index = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Index field.
        /// </summary>
        [DataMember(Name = "Index", IsRequired = false, Order = 1)]
        public uint Index
        {
            get { return m_index;  }
            set { m_index = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ElementOperand; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ElementOperand_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ElementOperand_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("Index", Index);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Index = decoder.ReadUInt32("Index");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ElementOperand value = encodeable as ElementOperand;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_index, value.m_index)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ElementOperand clone = new ElementOperand();

            clone.m_index = (uint)Utils.Clone(this.m_index);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_index;
        #endregion
    }
    #endif
    #endregion

    #region LiteralOperand Class
    #if (!OPCUA_EXCLUDE_LiteralOperand)
    /// <summary>
    /// A description for the LiteralOperand DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class LiteralOperand : FilterOperand
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public LiteralOperand()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_value = Variant.Null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Value field.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 1)]
        public Variant Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.LiteralOperand; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.LiteralOperand_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.LiteralOperand_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariant("Value", Value);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Value = decoder.ReadVariant("Value");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            LiteralOperand value = encodeable as LiteralOperand;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            LiteralOperand clone = new LiteralOperand();

            clone.m_value = (Variant)Utils.Clone(this.m_value);

            return clone;
        }
        #endregion

        #region Private Fields
        private Variant m_value;
        #endregion
    }
    #endif
    #endregion

    #region AttributeOperand Class
    #if (!OPCUA_EXCLUDE_AttributeOperand)
    /// <summary>
    /// A description for the AttributeOperand DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AttributeOperand : FilterOperand
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AttributeOperand()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_alias = null;
            m_browsePath = new RelativePath();
            m_attributeId = (uint)0;
            m_indexRange = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the Alias field.
        /// </summary>
        [DataMember(Name = "Alias", IsRequired = false, Order = 2)]
        public string Alias
        {
            get { return m_alias;  }
            set { m_alias = value; }
        }

        /// <summary>
        /// A description for the BrowsePath field.
        /// </summary>
        [DataMember(Name = "BrowsePath", IsRequired = false, Order = 3)]
        public RelativePath BrowsePath
        {
            get
            {
                return m_browsePath;
            }

            set
            {
                m_browsePath = value;

                if (value == null)
                {
                    m_browsePath = new RelativePath();
                }
            }
        }

        /// <summary>
        /// A description for the AttributeId field.
        /// </summary>
        [DataMember(Name = "AttributeId", IsRequired = false, Order = 4)]
        public uint AttributeId
        {
            get { return m_attributeId;  }
            set { m_attributeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 5)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AttributeOperand; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AttributeOperand_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AttributeOperand_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteString("Alias", Alias);
            encoder.WriteEncodeable("BrowsePath", BrowsePath, typeof(RelativePath));
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            Alias = decoder.ReadString("Alias");
            BrowsePath = (RelativePath)decoder.ReadEncodeable("BrowsePath", typeof(RelativePath));
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AttributeOperand value = encodeable as AttributeOperand;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_alias, value.m_alias)) return false;
            if (!Utils.IsEqual(m_browsePath, value.m_browsePath)) return false;
            if (!Utils.IsEqual(m_attributeId, value.m_attributeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AttributeOperand clone = new AttributeOperand();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_alias = (string)Utils.Clone(this.m_alias);
            clone.m_browsePath = (RelativePath)Utils.Clone(this.m_browsePath);
            clone.m_attributeId = (uint)Utils.Clone(this.m_attributeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private string m_alias;
        private RelativePath m_browsePath;
        private uint m_attributeId;
        private string m_indexRange;
        #endregion
    }
    #endif
    #endregion

    #region SimpleAttributeOperand Class
    #if (!OPCUA_EXCLUDE_SimpleAttributeOperand)
    /// <summary>
    /// A description for the SimpleAttributeOperand DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SimpleAttributeOperand : FilterOperand
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SimpleAttributeOperand()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_typeDefinitionId = null;
            m_browsePath = new QualifiedNameCollection();
            m_attributeId = (uint)0;
            m_indexRange = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the TypeDefinitionId field.
        /// </summary>
        [DataMember(Name = "TypeDefinitionId", IsRequired = false, Order = 1)]
        public NodeId TypeDefinitionId
        {
            get { return m_typeDefinitionId;  }
            set { m_typeDefinitionId = value; }
        }

        /// <summary>
        /// A description for the BrowsePath field.
        /// </summary>
        [DataMember(Name = "BrowsePath", IsRequired = false, Order = 2)]
        public QualifiedNameCollection BrowsePath
        {
            get
            {
                return m_browsePath;
            }

            set
            {
                m_browsePath = value;

                if (value == null)
                {
                    m_browsePath = new QualifiedNameCollection();
                }
            }
        }

        /// <summary>
        /// A description for the AttributeId field.
        /// </summary>
        [DataMember(Name = "AttributeId", IsRequired = false, Order = 3)]
        public uint AttributeId
        {
            get { return m_attributeId;  }
            set { m_attributeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 4)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SimpleAttributeOperand; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SimpleAttributeOperand_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SimpleAttributeOperand_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("TypeDefinitionId", TypeDefinitionId);
            encoder.WriteQualifiedNameArray("BrowsePath", BrowsePath);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            TypeDefinitionId = decoder.ReadNodeId("TypeDefinitionId");
            BrowsePath = decoder.ReadQualifiedNameArray("BrowsePath");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SimpleAttributeOperand value = encodeable as SimpleAttributeOperand;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_typeDefinitionId, value.m_typeDefinitionId)) return false;
            if (!Utils.IsEqual(m_browsePath, value.m_browsePath)) return false;
            if (!Utils.IsEqual(m_attributeId, value.m_attributeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            SimpleAttributeOperand clone = new SimpleAttributeOperand();

            clone.m_typeDefinitionId = (NodeId)Utils.Clone(this.m_typeDefinitionId);
            clone.m_browsePath = (QualifiedNameCollection)Utils.Clone(this.m_browsePath);
            clone.m_attributeId = (uint)Utils.Clone(this.m_attributeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_typeDefinitionId;
        private QualifiedNameCollection m_browsePath;
        private uint m_attributeId;
        private string m_indexRange;
        #endregion
    }

    #region SimpleAttributeOperandCollection Class
    /// <summary>
    /// A collection of SimpleAttributeOperand objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSimpleAttributeOperand", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SimpleAttributeOperand")]
    public partial class SimpleAttributeOperandCollection : List<SimpleAttributeOperand>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SimpleAttributeOperandCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SimpleAttributeOperandCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SimpleAttributeOperandCollection(IEnumerable<SimpleAttributeOperand> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SimpleAttributeOperandCollection(SimpleAttributeOperand[] values)
        {
            if (values != null)
            {
                return new SimpleAttributeOperandCollection(values);
            }

            return new SimpleAttributeOperandCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SimpleAttributeOperand[](SimpleAttributeOperandCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SimpleAttributeOperandCollection clone = new SimpleAttributeOperandCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SimpleAttributeOperand)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ContentFilterElementResult Class
    #if (!OPCUA_EXCLUDE_ContentFilterElementResult)
    /// <summary>
    /// A description for the ContentFilterElementResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ContentFilterElementResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ContentFilterElementResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_operandStatusCodes = new StatusCodeCollection();
            m_operandDiagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the OperandStatusCodes field.
        /// </summary>
        [DataMember(Name = "OperandStatusCodes", IsRequired = false, Order = 2)]
        public StatusCodeCollection OperandStatusCodes
        {
            get
            {
                return m_operandStatusCodes;
            }

            set
            {
                m_operandStatusCodes = value;

                if (value == null)
                {
                    m_operandStatusCodes = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the OperandDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "OperandDiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection OperandDiagnosticInfos
        {
            get
            {
                return m_operandDiagnosticInfos;
            }

            set
            {
                m_operandDiagnosticInfos = value;

                if (value == null)
                {
                    m_operandDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ContentFilterElementResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ContentFilterElementResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ContentFilterElementResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("OperandStatusCodes", OperandStatusCodes);
            encoder.WriteDiagnosticInfoArray("OperandDiagnosticInfos", OperandDiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            OperandStatusCodes = decoder.ReadStatusCodeArray("OperandStatusCodes");
            OperandDiagnosticInfos = decoder.ReadDiagnosticInfoArray("OperandDiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ContentFilterElementResult value = encodeable as ContentFilterElementResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_operandStatusCodes, value.m_operandStatusCodes)) return false;
            if (!Utils.IsEqual(m_operandDiagnosticInfos, value.m_operandDiagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            ContentFilterElementResult clone = new ContentFilterElementResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_operandStatusCodes = (StatusCodeCollection)Utils.Clone(this.m_operandStatusCodes);
            clone.m_operandDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_operandDiagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private StatusCodeCollection m_operandStatusCodes;
        private DiagnosticInfoCollection m_operandDiagnosticInfos;
        #endregion
    }

    #region ContentFilterElementResultCollection Class
    /// <summary>
    /// A collection of ContentFilterElementResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfContentFilterElementResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ContentFilterElementResult")]
    public partial class ContentFilterElementResultCollection : List<ContentFilterElementResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ContentFilterElementResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ContentFilterElementResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ContentFilterElementResultCollection(IEnumerable<ContentFilterElementResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ContentFilterElementResultCollection(ContentFilterElementResult[] values)
        {
            if (values != null)
            {
                return new ContentFilterElementResultCollection(values);
            }

            return new ContentFilterElementResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ContentFilterElementResult[](ContentFilterElementResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ContentFilterElementResultCollection clone = new ContentFilterElementResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ContentFilterElementResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ContentFilterResult Class
    #if (!OPCUA_EXCLUDE_ContentFilterResult)
    /// <summary>
    /// A description for the ContentFilterResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ContentFilterResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ContentFilterResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_elementResults = new ContentFilterElementResultCollection();
            m_elementDiagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ElementResults field.
        /// </summary>
        [DataMember(Name = "ElementResults", IsRequired = false, Order = 1)]
        public ContentFilterElementResultCollection ElementResults
        {
            get
            {
                return m_elementResults;
            }

            set
            {
                m_elementResults = value;

                if (value == null)
                {
                    m_elementResults = new ContentFilterElementResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ElementDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "ElementDiagnosticInfos", IsRequired = false, Order = 2)]
        public DiagnosticInfoCollection ElementDiagnosticInfos
        {
            get
            {
                return m_elementDiagnosticInfos;
            }

            set
            {
                m_elementDiagnosticInfos = value;

                if (value == null)
                {
                    m_elementDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ContentFilterResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ContentFilterResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ContentFilterResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("ElementResults", ElementResults.ToArray(), typeof(ContentFilterElementResult));
            encoder.WriteDiagnosticInfoArray("ElementDiagnosticInfos", ElementDiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ElementResults = (ContentFilterElementResultCollection)decoder.ReadEncodeableArray("ElementResults", typeof(ContentFilterElementResult));
            ElementDiagnosticInfos = decoder.ReadDiagnosticInfoArray("ElementDiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ContentFilterResult value = encodeable as ContentFilterResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_elementResults, value.m_elementResults)) return false;
            if (!Utils.IsEqual(m_elementDiagnosticInfos, value.m_elementDiagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            ContentFilterResult clone = new ContentFilterResult();

            clone.m_elementResults = (ContentFilterElementResultCollection)Utils.Clone(this.m_elementResults);
            clone.m_elementDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_elementDiagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ContentFilterElementResultCollection m_elementResults;
        private DiagnosticInfoCollection m_elementDiagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region ParsingResult Class
    #if (!OPCUA_EXCLUDE_ParsingResult)
    /// <summary>
    /// A description for the ParsingResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ParsingResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ParsingResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_dataStatusCodes = new StatusCodeCollection();
            m_dataDiagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the DataStatusCodes field.
        /// </summary>
        [DataMember(Name = "DataStatusCodes", IsRequired = false, Order = 2)]
        public StatusCodeCollection DataStatusCodes
        {
            get
            {
                return m_dataStatusCodes;
            }

            set
            {
                m_dataStatusCodes = value;

                if (value == null)
                {
                    m_dataStatusCodes = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DataDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DataDiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DataDiagnosticInfos
        {
            get
            {
                return m_dataDiagnosticInfos;
            }

            set
            {
                m_dataDiagnosticInfos = value;

                if (value == null)
                {
                    m_dataDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ParsingResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ParsingResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ParsingResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("DataStatusCodes", DataStatusCodes);
            encoder.WriteDiagnosticInfoArray("DataDiagnosticInfos", DataDiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            DataStatusCodes = decoder.ReadStatusCodeArray("DataStatusCodes");
            DataDiagnosticInfos = decoder.ReadDiagnosticInfoArray("DataDiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ParsingResult value = encodeable as ParsingResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_dataStatusCodes, value.m_dataStatusCodes)) return false;
            if (!Utils.IsEqual(m_dataDiagnosticInfos, value.m_dataDiagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ParsingResult clone = new ParsingResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_dataStatusCodes = (StatusCodeCollection)Utils.Clone(this.m_dataStatusCodes);
            clone.m_dataDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_dataDiagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private StatusCodeCollection m_dataStatusCodes;
        private DiagnosticInfoCollection m_dataDiagnosticInfos;
        #endregion
    }

    #region ParsingResultCollection Class
    /// <summary>
    /// A collection of ParsingResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfParsingResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ParsingResult")]
    public partial class ParsingResultCollection : List<ParsingResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ParsingResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ParsingResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ParsingResultCollection(IEnumerable<ParsingResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ParsingResultCollection(ParsingResult[] values)
        {
            if (values != null)
            {
                return new ParsingResultCollection(values);
            }

            return new ParsingResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ParsingResult[](ParsingResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ParsingResultCollection clone = new ParsingResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ParsingResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region QueryFirstRequest Class
    #if (!OPCUA_EXCLUDE_QueryFirstRequest)
    /// <summary>
    /// A description for the QueryFirstRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryFirstRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryFirstRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_view = new ViewDescription();
            m_nodeTypes = new NodeTypeDescriptionCollection();
            m_filter = new ContentFilter();
            m_maxDataSetsToReturn = (uint)0;
            m_maxReferencesToReturn = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the View field.
        /// </summary>
        [DataMember(Name = "View", IsRequired = false, Order = 2)]
        public ViewDescription View
        {
            get
            {
                return m_view;
            }

            set
            {
                m_view = value;

                if (value == null)
                {
                    m_view = new ViewDescription();
                }
            }
        }

        /// <summary>
        /// A description for the NodeTypes field.
        /// </summary>
        [DataMember(Name = "NodeTypes", IsRequired = false, Order = 3)]
        public NodeTypeDescriptionCollection NodeTypes
        {
            get
            {
                return m_nodeTypes;
            }

            set
            {
                m_nodeTypes = value;

                if (value == null)
                {
                    m_nodeTypes = new NodeTypeDescriptionCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Filter field.
        /// </summary>
        [DataMember(Name = "Filter", IsRequired = false, Order = 4)]
        public ContentFilter Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                m_filter = value;

                if (value == null)
                {
                    m_filter = new ContentFilter();
                }
            }
        }

        /// <summary>
        /// A description for the MaxDataSetsToReturn field.
        /// </summary>
        [DataMember(Name = "MaxDataSetsToReturn", IsRequired = false, Order = 5)]
        public uint MaxDataSetsToReturn
        {
            get { return m_maxDataSetsToReturn;  }
            set { m_maxDataSetsToReturn = value; }
        }

        /// <summary>
        /// A description for the MaxReferencesToReturn field.
        /// </summary>
        [DataMember(Name = "MaxReferencesToReturn", IsRequired = false, Order = 6)]
        public uint MaxReferencesToReturn
        {
            get { return m_maxReferencesToReturn;  }
            set { m_maxReferencesToReturn = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryFirstRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryFirstRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryFirstRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeable("View", View, typeof(ViewDescription));
            encoder.WriteEncodeableArray("NodeTypes", NodeTypes.ToArray(), typeof(NodeTypeDescription));
            encoder.WriteEncodeable("Filter", Filter, typeof(ContentFilter));
            encoder.WriteUInt32("MaxDataSetsToReturn", MaxDataSetsToReturn);
            encoder.WriteUInt32("MaxReferencesToReturn", MaxReferencesToReturn);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            View = (ViewDescription)decoder.ReadEncodeable("View", typeof(ViewDescription));
            NodeTypes = (NodeTypeDescriptionCollection)decoder.ReadEncodeableArray("NodeTypes", typeof(NodeTypeDescription));
            Filter = (ContentFilter)decoder.ReadEncodeable("Filter", typeof(ContentFilter));
            MaxDataSetsToReturn = decoder.ReadUInt32("MaxDataSetsToReturn");
            MaxReferencesToReturn = decoder.ReadUInt32("MaxReferencesToReturn");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryFirstRequest value = encodeable as QueryFirstRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_view, value.m_view)) return false;
            if (!Utils.IsEqual(m_nodeTypes, value.m_nodeTypes)) return false;
            if (!Utils.IsEqual(m_filter, value.m_filter)) return false;
            if (!Utils.IsEqual(m_maxDataSetsToReturn, value.m_maxDataSetsToReturn)) return false;
            if (!Utils.IsEqual(m_maxReferencesToReturn, value.m_maxReferencesToReturn)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            QueryFirstRequest clone = new QueryFirstRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_view = (ViewDescription)Utils.Clone(this.m_view);
            clone.m_nodeTypes = (NodeTypeDescriptionCollection)Utils.Clone(this.m_nodeTypes);
            clone.m_filter = (ContentFilter)Utils.Clone(this.m_filter);
            clone.m_maxDataSetsToReturn = (uint)Utils.Clone(this.m_maxDataSetsToReturn);
            clone.m_maxReferencesToReturn = (uint)Utils.Clone(this.m_maxReferencesToReturn);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private ViewDescription m_view;
        private NodeTypeDescriptionCollection m_nodeTypes;
        private ContentFilter m_filter;
        private uint m_maxDataSetsToReturn;
        private uint m_maxReferencesToReturn;
        #endregion
    }
    #endif
    #endregion

    #region QueryFirstResponse Class
    #if (!OPCUA_EXCLUDE_QueryFirstResponse)
    /// <summary>
    /// A description for the QueryFirstResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryFirstResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryFirstResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_queryDataSets = new QueryDataSetCollection();
            m_continuationPoint = null;
            m_parsingResults = new ParsingResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
            m_filterResult = new ContentFilterResult();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the QueryDataSets field.
        /// </summary>
        [DataMember(Name = "QueryDataSets", IsRequired = false, Order = 2)]
        public QueryDataSetCollection QueryDataSets
        {
            get
            {
                return m_queryDataSets;
            }

            set
            {
                m_queryDataSets = value;

                if (value == null)
                {
                    m_queryDataSets = new QueryDataSetCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ContinuationPoint field.
        /// </summary>
        [DataMember(Name = "ContinuationPoint", IsRequired = false, Order = 3)]
        public byte[] ContinuationPoint
        {
            get { return m_continuationPoint;  }
            set { m_continuationPoint = value; }
        }

        /// <summary>
        /// A description for the ParsingResults field.
        /// </summary>
        [DataMember(Name = "ParsingResults", IsRequired = false, Order = 4)]
        public ParsingResultCollection ParsingResults
        {
            get
            {
                return m_parsingResults;
            }

            set
            {
                m_parsingResults = value;

                if (value == null)
                {
                    m_parsingResults = new ParsingResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 5)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }

        /// <summary>
        /// A description for the FilterResult field.
        /// </summary>
        [DataMember(Name = "FilterResult", IsRequired = false, Order = 6)]
        public ContentFilterResult FilterResult
        {
            get
            {
                return m_filterResult;
            }

            set
            {
                m_filterResult = value;

                if (value == null)
                {
                    m_filterResult = new ContentFilterResult();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryFirstResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryFirstResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryFirstResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("QueryDataSets", QueryDataSets.ToArray(), typeof(QueryDataSet));
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteEncodeableArray("ParsingResults", ParsingResults.ToArray(), typeof(ParsingResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.WriteEncodeable("FilterResult", FilterResult, typeof(ContentFilterResult));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            QueryDataSets = (QueryDataSetCollection)decoder.ReadEncodeableArray("QueryDataSets", typeof(QueryDataSet));
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            ParsingResults = (ParsingResultCollection)decoder.ReadEncodeableArray("ParsingResults", typeof(ParsingResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            FilterResult = (ContentFilterResult)decoder.ReadEncodeable("FilterResult", typeof(ContentFilterResult));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryFirstResponse value = encodeable as QueryFirstResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_queryDataSets, value.m_queryDataSets)) return false;
            if (!Utils.IsEqual(m_continuationPoint, value.m_continuationPoint)) return false;
            if (!Utils.IsEqual(m_parsingResults, value.m_parsingResults)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;
            if (!Utils.IsEqual(m_filterResult, value.m_filterResult)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            QueryFirstResponse clone = new QueryFirstResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_queryDataSets = (QueryDataSetCollection)Utils.Clone(this.m_queryDataSets);
            clone.m_continuationPoint = (byte[])Utils.Clone(this.m_continuationPoint);
            clone.m_parsingResults = (ParsingResultCollection)Utils.Clone(this.m_parsingResults);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);
            clone.m_filterResult = (ContentFilterResult)Utils.Clone(this.m_filterResult);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private QueryDataSetCollection m_queryDataSets;
        private byte[] m_continuationPoint;
        private ParsingResultCollection m_parsingResults;
        private DiagnosticInfoCollection m_diagnosticInfos;
        private ContentFilterResult m_filterResult;
        #endregion
    }
    #endif
    #endregion

    #region QueryNextRequest Class
    #if (!OPCUA_EXCLUDE_QueryNextRequest)
    /// <summary>
    /// A description for the QueryNextRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryNextRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryNextRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_releaseContinuationPoint = true;
            m_continuationPoint = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the ReleaseContinuationPoint field.
        /// </summary>
        [DataMember(Name = "ReleaseContinuationPoint", IsRequired = false, Order = 2)]
        public bool ReleaseContinuationPoint
        {
            get { return m_releaseContinuationPoint;  }
            set { m_releaseContinuationPoint = value; }
        }

        /// <summary>
        /// A description for the ContinuationPoint field.
        /// </summary>
        [DataMember(Name = "ContinuationPoint", IsRequired = false, Order = 3)]
        public byte[] ContinuationPoint
        {
            get { return m_continuationPoint;  }
            set { m_continuationPoint = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryNextRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryNextRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryNextRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteBoolean("ReleaseContinuationPoint", ReleaseContinuationPoint);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            ReleaseContinuationPoint = decoder.ReadBoolean("ReleaseContinuationPoint");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryNextRequest value = encodeable as QueryNextRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_releaseContinuationPoint, value.m_releaseContinuationPoint)) return false;
            if (!Utils.IsEqual(m_continuationPoint, value.m_continuationPoint)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            QueryNextRequest clone = new QueryNextRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_releaseContinuationPoint = (bool)Utils.Clone(this.m_releaseContinuationPoint);
            clone.m_continuationPoint = (byte[])Utils.Clone(this.m_continuationPoint);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private bool m_releaseContinuationPoint;
        private byte[] m_continuationPoint;
        #endregion
    }
    #endif
    #endregion

    #region QueryNextResponse Class
    #if (!OPCUA_EXCLUDE_QueryNextResponse)
    /// <summary>
    /// A description for the QueryNextResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class QueryNextResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public QueryNextResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_queryDataSets = new QueryDataSetCollection();
            m_revisedContinuationPoint = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the QueryDataSets field.
        /// </summary>
        [DataMember(Name = "QueryDataSets", IsRequired = false, Order = 2)]
        public QueryDataSetCollection QueryDataSets
        {
            get
            {
                return m_queryDataSets;
            }

            set
            {
                m_queryDataSets = value;

                if (value == null)
                {
                    m_queryDataSets = new QueryDataSetCollection();
                }
            }
        }

        /// <summary>
        /// A description for the RevisedContinuationPoint field.
        /// </summary>
        [DataMember(Name = "RevisedContinuationPoint", IsRequired = false, Order = 3)]
        public byte[] RevisedContinuationPoint
        {
            get { return m_revisedContinuationPoint;  }
            set { m_revisedContinuationPoint = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.QueryNextResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.QueryNextResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.QueryNextResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("QueryDataSets", QueryDataSets.ToArray(), typeof(QueryDataSet));
            encoder.WriteByteString("RevisedContinuationPoint", RevisedContinuationPoint);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            QueryDataSets = (QueryDataSetCollection)decoder.ReadEncodeableArray("QueryDataSets", typeof(QueryDataSet));
            RevisedContinuationPoint = decoder.ReadByteString("RevisedContinuationPoint");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            QueryNextResponse value = encodeable as QueryNextResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_queryDataSets, value.m_queryDataSets)) return false;
            if (!Utils.IsEqual(m_revisedContinuationPoint, value.m_revisedContinuationPoint)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            QueryNextResponse clone = new QueryNextResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_queryDataSets = (QueryDataSetCollection)Utils.Clone(this.m_queryDataSets);
            clone.m_revisedContinuationPoint = (byte[])Utils.Clone(this.m_revisedContinuationPoint);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private QueryDataSetCollection m_queryDataSets;
        private byte[] m_revisedContinuationPoint;
        #endregion
    }
    #endif
    #endregion

    #region TimestampsToReturn Enumeration
    #if (!OPCUA_EXCLUDE_TimestampsToReturn)
    /// <summary>
    /// A description for the TimestampsToReturn DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum TimestampsToReturn
    {
        /// <summary>
        /// A description for the Source field.
        /// </summary>
        [EnumMember(Value = "Source_0")]
        Source = 0,

        /// <summary>
        /// A description for the Server field.
        /// </summary>
        [EnumMember(Value = "Server_1")]
        Server = 1,

        /// <summary>
        /// A description for the Both field.
        /// </summary>
        [EnumMember(Value = "Both_2")]
        Both = 2,

        /// <summary>
        /// A description for the Neither field.
        /// </summary>
        [EnumMember(Value = "Neither_3")]
        Neither = 3,
    }
    #endif
    #endregion

    #region ReadValueId Class
    #if (!OPCUA_EXCLUDE_ReadValueId)
    /// <summary>
    /// A description for the ReadValueId DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadValueId : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadValueId()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_attributeId = (uint)0;
            m_indexRange = null;
            m_dataEncoding = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the AttributeId field.
        /// </summary>
        [DataMember(Name = "AttributeId", IsRequired = false, Order = 2)]
        public uint AttributeId
        {
            get { return m_attributeId;  }
            set { m_attributeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 3)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }

        /// <summary>
        /// A description for the DataEncoding field.
        /// </summary>
        [DataMember(Name = "DataEncoding", IsRequired = false, Order = 4)]
        public QualifiedName DataEncoding
        {
            get { return m_dataEncoding;  }
            set { m_dataEncoding = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadValueId; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadValueId_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadValueId_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteQualifiedName("DataEncoding", DataEncoding);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            DataEncoding = decoder.ReadQualifiedName("DataEncoding");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadValueId value = encodeable as ReadValueId;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_attributeId, value.m_attributeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;
            if (!Utils.IsEqual(m_dataEncoding, value.m_dataEncoding)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadValueId clone = new ReadValueId();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_attributeId = (uint)Utils.Clone(this.m_attributeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);
            clone.m_dataEncoding = (QualifiedName)Utils.Clone(this.m_dataEncoding);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private uint m_attributeId;
        private string m_indexRange;
        private QualifiedName m_dataEncoding;
        #endregion
    }

    #region ReadValueIdCollection Class
    /// <summary>
    /// A collection of ReadValueId objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfReadValueId", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ReadValueId")]
    public partial class ReadValueIdCollection : List<ReadValueId>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ReadValueIdCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ReadValueIdCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ReadValueIdCollection(IEnumerable<ReadValueId> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ReadValueIdCollection(ReadValueId[] values)
        {
            if (values != null)
            {
                return new ReadValueIdCollection(values);
            }

            return new ReadValueIdCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ReadValueId[](ReadValueIdCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ReadValueIdCollection clone = new ReadValueIdCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ReadValueId)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ReadRequest Class
    #if (!OPCUA_EXCLUDE_ReadRequest)
    /// <summary>
    /// A description for the ReadRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_maxAge = (double)0;
            m_timestampsToReturn = TimestampsToReturn.Source;
            m_nodesToRead = new ReadValueIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the MaxAge field.
        /// </summary>
        [DataMember(Name = "MaxAge", IsRequired = false, Order = 2)]
        public double MaxAge
        {
            get { return m_maxAge;  }
            set { m_maxAge = value; }
        }

        /// <summary>
        /// A description for the TimestampsToReturn field.
        /// </summary>
        [DataMember(Name = "TimestampsToReturn", IsRequired = false, Order = 3)]
        public TimestampsToReturn TimestampsToReturn
        {
            get { return m_timestampsToReturn;  }
            set { m_timestampsToReturn = value; }
        }

        /// <summary>
        /// A description for the NodesToRead field.
        /// </summary>
        [DataMember(Name = "NodesToRead", IsRequired = false, Order = 4)]
        public ReadValueIdCollection NodesToRead
        {
            get
            {
                return m_nodesToRead;
            }

            set
            {
                m_nodesToRead = value;

                if (value == null)
                {
                    m_nodesToRead = new ReadValueIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteDouble("MaxAge", MaxAge);
            encoder.WriteEnumerated("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodeableArray("NodesToRead", NodesToRead.ToArray(), typeof(ReadValueId));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            MaxAge = decoder.ReadDouble("MaxAge");
            TimestampsToReturn = (TimestampsToReturn)decoder.ReadEnumerated("TimestampsToReturn", typeof(TimestampsToReturn));
            NodesToRead = (ReadValueIdCollection)decoder.ReadEncodeableArray("NodesToRead", typeof(ReadValueId));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadRequest value = encodeable as ReadRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_maxAge, value.m_maxAge)) return false;
            if (!Utils.IsEqual(m_timestampsToReturn, value.m_timestampsToReturn)) return false;
            if (!Utils.IsEqual(m_nodesToRead, value.m_nodesToRead)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadRequest clone = new ReadRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_maxAge = (double)Utils.Clone(this.m_maxAge);
            clone.m_timestampsToReturn = (TimestampsToReturn)Utils.Clone(this.m_timestampsToReturn);
            clone.m_nodesToRead = (ReadValueIdCollection)Utils.Clone(this.m_nodesToRead);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private double m_maxAge;
        private TimestampsToReturn m_timestampsToReturn;
        private ReadValueIdCollection m_nodesToRead;
        #endregion
    }
    #endif
    #endregion

    #region ReadResponse Class
    #if (!OPCUA_EXCLUDE_ReadResponse)
    /// <summary>
    /// A description for the ReadResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new DataValueCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public DataValueCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new DataValueCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteDataValueArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadDataValueArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadResponse value = encodeable as ReadResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadResponse clone = new ReadResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (DataValueCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private DataValueCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region HistoryReadValueId Class
    #if (!OPCUA_EXCLUDE_HistoryReadValueId)
    /// <summary>
    /// A description for the HistoryReadValueId DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryReadValueId : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryReadValueId()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_indexRange = null;
            m_dataEncoding = null;
            m_continuationPoint = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 2)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }

        /// <summary>
        /// A description for the DataEncoding field.
        /// </summary>
        [DataMember(Name = "DataEncoding", IsRequired = false, Order = 3)]
        public QualifiedName DataEncoding
        {
            get { return m_dataEncoding;  }
            set { m_dataEncoding = value; }
        }

        /// <summary>
        /// A description for the ContinuationPoint field.
        /// </summary>
        [DataMember(Name = "ContinuationPoint", IsRequired = false, Order = 4)]
        public byte[] ContinuationPoint
        {
            get { return m_continuationPoint;  }
            set { m_continuationPoint = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryReadValueId; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryReadValueId_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryReadValueId_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteQualifiedName("DataEncoding", DataEncoding);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            IndexRange = decoder.ReadString("IndexRange");
            DataEncoding = decoder.ReadQualifiedName("DataEncoding");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryReadValueId value = encodeable as HistoryReadValueId;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;
            if (!Utils.IsEqual(m_dataEncoding, value.m_dataEncoding)) return false;
            if (!Utils.IsEqual(m_continuationPoint, value.m_continuationPoint)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryReadValueId clone = new HistoryReadValueId();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);
            clone.m_dataEncoding = (QualifiedName)Utils.Clone(this.m_dataEncoding);
            clone.m_continuationPoint = (byte[])Utils.Clone(this.m_continuationPoint);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private string m_indexRange;
        private QualifiedName m_dataEncoding;
        private byte[] m_continuationPoint;
        #endregion
    }

    #region HistoryReadValueIdCollection Class
    /// <summary>
    /// A collection of HistoryReadValueId objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfHistoryReadValueId", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "HistoryReadValueId")]
    public partial class HistoryReadValueIdCollection : List<HistoryReadValueId>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public HistoryReadValueIdCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public HistoryReadValueIdCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public HistoryReadValueIdCollection(IEnumerable<HistoryReadValueId> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator HistoryReadValueIdCollection(HistoryReadValueId[] values)
        {
            if (values != null)
            {
                return new HistoryReadValueIdCollection(values);
            }

            return new HistoryReadValueIdCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator HistoryReadValueId[](HistoryReadValueIdCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            HistoryReadValueIdCollection clone = new HistoryReadValueIdCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((HistoryReadValueId)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region HistoryReadResult Class
    #if (!OPCUA_EXCLUDE_HistoryReadResult)
    /// <summary>
    /// A description for the HistoryReadResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryReadResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryReadResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_continuationPoint = null;
            m_historyData = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the ContinuationPoint field.
        /// </summary>
        [DataMember(Name = "ContinuationPoint", IsRequired = false, Order = 2)]
        public byte[] ContinuationPoint
        {
            get { return m_continuationPoint;  }
            set { m_continuationPoint = value; }
        }

        /// <summary>
        /// A description for the HistoryData field.
        /// </summary>
        [DataMember(Name = "HistoryData", IsRequired = false, Order = 3)]
        public ExtensionObject HistoryData
        {
            get { return m_historyData;  }
            set { m_historyData = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryReadResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryReadResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryReadResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteByteString("ContinuationPoint", ContinuationPoint);
            encoder.WriteExtensionObject("HistoryData", HistoryData);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            ContinuationPoint = decoder.ReadByteString("ContinuationPoint");
            HistoryData = decoder.ReadExtensionObject("HistoryData");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryReadResult value = encodeable as HistoryReadResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_continuationPoint, value.m_continuationPoint)) return false;
            if (!Utils.IsEqual(m_historyData, value.m_historyData)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryReadResult clone = new HistoryReadResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_continuationPoint = (byte[])Utils.Clone(this.m_continuationPoint);
            clone.m_historyData = (ExtensionObject)Utils.Clone(this.m_historyData);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private byte[] m_continuationPoint;
        private ExtensionObject m_historyData;
        #endregion
    }

    #region HistoryReadResultCollection Class
    /// <summary>
    /// A collection of HistoryReadResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfHistoryReadResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "HistoryReadResult")]
    public partial class HistoryReadResultCollection : List<HistoryReadResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public HistoryReadResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public HistoryReadResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public HistoryReadResultCollection(IEnumerable<HistoryReadResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator HistoryReadResultCollection(HistoryReadResult[] values)
        {
            if (values != null)
            {
                return new HistoryReadResultCollection(values);
            }

            return new HistoryReadResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator HistoryReadResult[](HistoryReadResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            HistoryReadResultCollection clone = new HistoryReadResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((HistoryReadResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region HistoryReadDetails Class
    #if (!OPCUA_EXCLUDE_HistoryReadDetails)
    /// <summary>
    /// A description for the HistoryReadDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryReadDetails : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryReadDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryReadDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryReadDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryReadDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryReadDetails value = encodeable as HistoryReadDetails;

            if (value == null)
            {
                return false;
            }


            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryReadDetails clone = new HistoryReadDetails();


            return clone;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ReadEventDetails Class
    #if (!OPCUA_EXCLUDE_ReadEventDetails)
    /// <summary>
    /// A description for the ReadEventDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadEventDetails : HistoryReadDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadEventDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_numValuesPerNode = (uint)0;
            m_startTime = DateTime.MinValue;
            m_endTime = DateTime.MinValue;
            m_filter = new EventFilter();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NumValuesPerNode field.
        /// </summary>
        [DataMember(Name = "NumValuesPerNode", IsRequired = false, Order = 1)]
        public uint NumValuesPerNode
        {
            get { return m_numValuesPerNode;  }
            set { m_numValuesPerNode = value; }
        }

        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 2)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the EndTime field.
        /// </summary>
        [DataMember(Name = "EndTime", IsRequired = false, Order = 3)]
        public DateTime EndTime
        {
            get { return m_endTime;  }
            set { m_endTime = value; }
        }

        /// <summary>
        /// A description for the Filter field.
        /// </summary>
        [DataMember(Name = "Filter", IsRequired = false, Order = 4)]
        public EventFilter Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                m_filter = value;

                if (value == null)
                {
                    m_filter = new EventFilter();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadEventDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadEventDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadEventDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("NumValuesPerNode", NumValuesPerNode);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteEncodeable("Filter", Filter, typeof(EventFilter));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NumValuesPerNode = decoder.ReadUInt32("NumValuesPerNode");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            Filter = (EventFilter)decoder.ReadEncodeable("Filter", typeof(EventFilter));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadEventDetails value = encodeable as ReadEventDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_numValuesPerNode, value.m_numValuesPerNode)) return false;
            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_endTime, value.m_endTime)) return false;
            if (!Utils.IsEqual(m_filter, value.m_filter)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadEventDetails clone = new ReadEventDetails();

            clone.m_numValuesPerNode = (uint)Utils.Clone(this.m_numValuesPerNode);
            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_endTime = (DateTime)Utils.Clone(this.m_endTime);
            clone.m_filter = (EventFilter)Utils.Clone(this.m_filter);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_numValuesPerNode;
        private DateTime m_startTime;
        private DateTime m_endTime;
        private EventFilter m_filter;
        #endregion
    }
    #endif
    #endregion

    #region ReadRawModifiedDetails Class
    #if (!OPCUA_EXCLUDE_ReadRawModifiedDetails)
    /// <summary>
    /// A description for the ReadRawModifiedDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadRawModifiedDetails : HistoryReadDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadRawModifiedDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isReadModified = true;
            m_startTime = DateTime.MinValue;
            m_endTime = DateTime.MinValue;
            m_numValuesPerNode = (uint)0;
            m_returnBounds = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the IsReadModified field.
        /// </summary>
        [DataMember(Name = "IsReadModified", IsRequired = false, Order = 1)]
        public bool IsReadModified
        {
            get { return m_isReadModified;  }
            set { m_isReadModified = value; }
        }

        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 2)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the EndTime field.
        /// </summary>
        [DataMember(Name = "EndTime", IsRequired = false, Order = 3)]
        public DateTime EndTime
        {
            get { return m_endTime;  }
            set { m_endTime = value; }
        }

        /// <summary>
        /// A description for the NumValuesPerNode field.
        /// </summary>
        [DataMember(Name = "NumValuesPerNode", IsRequired = false, Order = 4)]
        public uint NumValuesPerNode
        {
            get { return m_numValuesPerNode;  }
            set { m_numValuesPerNode = value; }
        }

        /// <summary>
        /// A description for the ReturnBounds field.
        /// </summary>
        [DataMember(Name = "ReturnBounds", IsRequired = false, Order = 5)]
        public bool ReturnBounds
        {
            get { return m_returnBounds;  }
            set { m_returnBounds = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadRawModifiedDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadRawModifiedDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadRawModifiedDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsReadModified", IsReadModified);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteUInt32("NumValuesPerNode", NumValuesPerNode);
            encoder.WriteBoolean("ReturnBounds", ReturnBounds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsReadModified = decoder.ReadBoolean("IsReadModified");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            NumValuesPerNode = decoder.ReadUInt32("NumValuesPerNode");
            ReturnBounds = decoder.ReadBoolean("ReturnBounds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadRawModifiedDetails value = encodeable as ReadRawModifiedDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isReadModified, value.m_isReadModified)) return false;
            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_endTime, value.m_endTime)) return false;
            if (!Utils.IsEqual(m_numValuesPerNode, value.m_numValuesPerNode)) return false;
            if (!Utils.IsEqual(m_returnBounds, value.m_returnBounds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadRawModifiedDetails clone = new ReadRawModifiedDetails();

            clone.m_isReadModified = (bool)Utils.Clone(this.m_isReadModified);
            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_endTime = (DateTime)Utils.Clone(this.m_endTime);
            clone.m_numValuesPerNode = (uint)Utils.Clone(this.m_numValuesPerNode);
            clone.m_returnBounds = (bool)Utils.Clone(this.m_returnBounds);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isReadModified;
        private DateTime m_startTime;
        private DateTime m_endTime;
        private uint m_numValuesPerNode;
        private bool m_returnBounds;
        #endregion
    }
    #endif
    #endregion

    #region ReadProcessedDetails Class
    #if (!OPCUA_EXCLUDE_ReadProcessedDetails)
    /// <summary>
    /// A description for the ReadProcessedDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadProcessedDetails : HistoryReadDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadProcessedDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_startTime = DateTime.MinValue;
            m_endTime = DateTime.MinValue;
            m_processingInterval = (double)0;
            m_aggregateType = new NodeIdCollection();
            m_aggregateConfiguration = new AggregateConfiguration();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 1)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the EndTime field.
        /// </summary>
        [DataMember(Name = "EndTime", IsRequired = false, Order = 2)]
        public DateTime EndTime
        {
            get { return m_endTime;  }
            set { m_endTime = value; }
        }

        /// <summary>
        /// A description for the ProcessingInterval field.
        /// </summary>
        [DataMember(Name = "ProcessingInterval", IsRequired = false, Order = 3)]
        public double ProcessingInterval
        {
            get { return m_processingInterval;  }
            set { m_processingInterval = value; }
        }

        /// <summary>
        /// A description for the AggregateType field.
        /// </summary>
        [DataMember(Name = "AggregateType", IsRequired = false, Order = 4)]
        public NodeIdCollection AggregateType
        {
            get
            {
                return m_aggregateType;
            }

            set
            {
                m_aggregateType = value;

                if (value == null)
                {
                    m_aggregateType = new NodeIdCollection();
                }
            }
        }

        /// <summary>
        /// A description for the AggregateConfiguration field.
        /// </summary>
        [DataMember(Name = "AggregateConfiguration", IsRequired = false, Order = 5)]
        public AggregateConfiguration AggregateConfiguration
        {
            get
            {
                return m_aggregateConfiguration;
            }

            set
            {
                m_aggregateConfiguration = value;

                if (value == null)
                {
                    m_aggregateConfiguration = new AggregateConfiguration();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadProcessedDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadProcessedDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadProcessedDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);
            encoder.WriteDouble("ProcessingInterval", ProcessingInterval);
            encoder.WriteNodeIdArray("AggregateType", AggregateType);
            encoder.WriteEncodeable("AggregateConfiguration", AggregateConfiguration, typeof(AggregateConfiguration));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");
            ProcessingInterval = decoder.ReadDouble("ProcessingInterval");
            AggregateType = decoder.ReadNodeIdArray("AggregateType");
            AggregateConfiguration = (AggregateConfiguration)decoder.ReadEncodeable("AggregateConfiguration", typeof(AggregateConfiguration));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadProcessedDetails value = encodeable as ReadProcessedDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_endTime, value.m_endTime)) return false;
            if (!Utils.IsEqual(m_processingInterval, value.m_processingInterval)) return false;
            if (!Utils.IsEqual(m_aggregateType, value.m_aggregateType)) return false;
            if (!Utils.IsEqual(m_aggregateConfiguration, value.m_aggregateConfiguration)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadProcessedDetails clone = new ReadProcessedDetails();

            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_endTime = (DateTime)Utils.Clone(this.m_endTime);
            clone.m_processingInterval = (double)Utils.Clone(this.m_processingInterval);
            clone.m_aggregateType = (NodeIdCollection)Utils.Clone(this.m_aggregateType);
            clone.m_aggregateConfiguration = (AggregateConfiguration)Utils.Clone(this.m_aggregateConfiguration);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_startTime;
        private DateTime m_endTime;
        private double m_processingInterval;
        private NodeIdCollection m_aggregateType;
        private AggregateConfiguration m_aggregateConfiguration;
        #endregion
    }
    #endif
    #endregion

    #region ReadAtTimeDetails Class
    #if (!OPCUA_EXCLUDE_ReadAtTimeDetails)
    /// <summary>
    /// A description for the ReadAtTimeDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ReadAtTimeDetails : HistoryReadDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ReadAtTimeDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_reqTimes = new DateTimeCollection();
            m_useSimpleBounds = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ReqTimes field.
        /// </summary>
        [DataMember(Name = "ReqTimes", IsRequired = false, Order = 1)]
        public DateTimeCollection ReqTimes
        {
            get
            {
                return m_reqTimes;
            }

            set
            {
                m_reqTimes = value;

                if (value == null)
                {
                    m_reqTimes = new DateTimeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the UseSimpleBounds field.
        /// </summary>
        [DataMember(Name = "UseSimpleBounds", IsRequired = false, Order = 2)]
        public bool UseSimpleBounds
        {
            get { return m_useSimpleBounds;  }
            set { m_useSimpleBounds = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ReadAtTimeDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ReadAtTimeDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ReadAtTimeDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTimeArray("ReqTimes", ReqTimes);
            encoder.WriteBoolean("UseSimpleBounds", UseSimpleBounds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ReqTimes = decoder.ReadDateTimeArray("ReqTimes");
            UseSimpleBounds = decoder.ReadBoolean("UseSimpleBounds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ReadAtTimeDetails value = encodeable as ReadAtTimeDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_reqTimes, value.m_reqTimes)) return false;
            if (!Utils.IsEqual(m_useSimpleBounds, value.m_useSimpleBounds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ReadAtTimeDetails clone = new ReadAtTimeDetails();

            clone.m_reqTimes = (DateTimeCollection)Utils.Clone(this.m_reqTimes);
            clone.m_useSimpleBounds = (bool)Utils.Clone(this.m_useSimpleBounds);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTimeCollection m_reqTimes;
        private bool m_useSimpleBounds;
        #endregion
    }
    #endif
    #endregion

    #region HistoryData Class
    #if (!OPCUA_EXCLUDE_HistoryData)
    /// <summary>
    /// A description for the HistoryData DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryData : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryData()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_dataValues = new DataValueCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the DataValues field.
        /// </summary>
        [DataMember(Name = "DataValues", IsRequired = false, Order = 1)]
        public DataValueCollection DataValues
        {
            get
            {
                return m_dataValues;
            }

            set
            {
                m_dataValues = value;

                if (value == null)
                {
                    m_dataValues = new DataValueCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryData; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryData_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryData_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDataValueArray("DataValues", DataValues);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            DataValues = decoder.ReadDataValueArray("DataValues");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryData value = encodeable as HistoryData;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_dataValues, value.m_dataValues)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryData clone = new HistoryData();

            clone.m_dataValues = (DataValueCollection)Utils.Clone(this.m_dataValues);

            return clone;
        }
        #endregion

        #region Private Fields
        private DataValueCollection m_dataValues;
        #endregion
    }
    #endif
    #endregion

    #region ModificationInfo Class
    #if (!OPCUA_EXCLUDE_ModificationInfo)
    /// <summary>
    /// A description for the ModificationInfo DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModificationInfo : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModificationInfo()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_modificationTime = DateTime.MinValue;
            m_updateType = HistoryUpdateType.Insert;
            m_userName = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ModificationTime field.
        /// </summary>
        [DataMember(Name = "ModificationTime", IsRequired = false, Order = 1)]
        public DateTime ModificationTime
        {
            get { return m_modificationTime;  }
            set { m_modificationTime = value; }
        }

        /// <summary>
        /// A description for the UpdateType field.
        /// </summary>
        [DataMember(Name = "UpdateType", IsRequired = false, Order = 2)]
        public HistoryUpdateType UpdateType
        {
            get { return m_updateType;  }
            set { m_updateType = value; }
        }

        /// <summary>
        /// A description for the UserName field.
        /// </summary>
        [DataMember(Name = "UserName", IsRequired = false, Order = 3)]
        public string UserName
        {
            get { return m_userName;  }
            set { m_userName = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModificationInfo; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModificationInfo_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModificationInfo_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("ModificationTime", ModificationTime);
            encoder.WriteEnumerated("UpdateType", UpdateType);
            encoder.WriteString("UserName", UserName);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ModificationTime = decoder.ReadDateTime("ModificationTime");
            UpdateType = (HistoryUpdateType)decoder.ReadEnumerated("UpdateType", typeof(HistoryUpdateType));
            UserName = decoder.ReadString("UserName");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModificationInfo value = encodeable as ModificationInfo;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_modificationTime, value.m_modificationTime)) return false;
            if (!Utils.IsEqual(m_updateType, value.m_updateType)) return false;
            if (!Utils.IsEqual(m_userName, value.m_userName)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ModificationInfo clone = new ModificationInfo();

            clone.m_modificationTime = (DateTime)Utils.Clone(this.m_modificationTime);
            clone.m_updateType = (HistoryUpdateType)Utils.Clone(this.m_updateType);
            clone.m_userName = (string)Utils.Clone(this.m_userName);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_modificationTime;
        private HistoryUpdateType m_updateType;
        private string m_userName;
        #endregion
    }

    #region ModificationInfoCollection Class
    /// <summary>
    /// A collection of ModificationInfo objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfModificationInfo", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ModificationInfo")]
    public partial class ModificationInfoCollection : List<ModificationInfo>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ModificationInfoCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ModificationInfoCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ModificationInfoCollection(IEnumerable<ModificationInfo> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ModificationInfoCollection(ModificationInfo[] values)
        {
            if (values != null)
            {
                return new ModificationInfoCollection(values);
            }

            return new ModificationInfoCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ModificationInfo[](ModificationInfoCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ModificationInfoCollection clone = new ModificationInfoCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ModificationInfo)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region HistoryModifiedData Class
    #if (!OPCUA_EXCLUDE_HistoryModifiedData)
    /// <summary>
    /// A description for the HistoryModifiedData DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryModifiedData : HistoryData
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryModifiedData()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_modificationInfos = new ModificationInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ModificationInfos field.
        /// </summary>
        [DataMember(Name = "ModificationInfos", IsRequired = false, Order = 1)]
        public ModificationInfoCollection ModificationInfos
        {
            get
            {
                return m_modificationInfos;
            }

            set
            {
                m_modificationInfos = value;

                if (value == null)
                {
                    m_modificationInfos = new ModificationInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryModifiedData; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryModifiedData_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryModifiedData_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("ModificationInfos", ModificationInfos.ToArray(), typeof(ModificationInfo));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ModificationInfos = (ModificationInfoCollection)decoder.ReadEncodeableArray("ModificationInfos", typeof(ModificationInfo));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryModifiedData value = encodeable as HistoryModifiedData;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_modificationInfos, value.m_modificationInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryModifiedData clone = new HistoryModifiedData();

            clone.m_modificationInfos = (ModificationInfoCollection)Utils.Clone(this.m_modificationInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ModificationInfoCollection m_modificationInfos;
        #endregion
    }
    #endif
    #endregion

    #region HistoryEvent Class
    #if (!OPCUA_EXCLUDE_HistoryEvent)
    /// <summary>
    /// A description for the HistoryEvent DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryEvent : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryEvent()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_events = new HistoryEventFieldListCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Events field.
        /// </summary>
        [DataMember(Name = "Events", IsRequired = false, Order = 1)]
        public HistoryEventFieldListCollection Events
        {
            get
            {
                return m_events;
            }

            set
            {
                m_events = value;

                if (value == null)
                {
                    m_events = new HistoryEventFieldListCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryEvent; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryEvent_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryEvent_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("Events", Events.ToArray(), typeof(HistoryEventFieldList));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Events = (HistoryEventFieldListCollection)decoder.ReadEncodeableArray("Events", typeof(HistoryEventFieldList));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryEvent value = encodeable as HistoryEvent;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_events, value.m_events)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryEvent clone = new HistoryEvent();

            clone.m_events = (HistoryEventFieldListCollection)Utils.Clone(this.m_events);

            return clone;
        }
        #endregion

        #region Private Fields
        private HistoryEventFieldListCollection m_events;
        #endregion
    }
    #endif
    #endregion

    #region HistoryReadRequest Class
    #if (!OPCUA_EXCLUDE_HistoryReadRequest)
    /// <summary>
    /// A description for the HistoryReadRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryReadRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryReadRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_historyReadDetails = null;
            m_timestampsToReturn = TimestampsToReturn.Source;
            m_releaseContinuationPoints = true;
            m_nodesToRead = new HistoryReadValueIdCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the HistoryReadDetails field.
        /// </summary>
        [DataMember(Name = "HistoryReadDetails", IsRequired = false, Order = 2)]
        public ExtensionObject HistoryReadDetails
        {
            get { return m_historyReadDetails;  }
            set { m_historyReadDetails = value; }
        }

        /// <summary>
        /// A description for the TimestampsToReturn field.
        /// </summary>
        [DataMember(Name = "TimestampsToReturn", IsRequired = false, Order = 3)]
        public TimestampsToReturn TimestampsToReturn
        {
            get { return m_timestampsToReturn;  }
            set { m_timestampsToReturn = value; }
        }

        /// <summary>
        /// A description for the ReleaseContinuationPoints field.
        /// </summary>
        [DataMember(Name = "ReleaseContinuationPoints", IsRequired = false, Order = 4)]
        public bool ReleaseContinuationPoints
        {
            get { return m_releaseContinuationPoints;  }
            set { m_releaseContinuationPoints = value; }
        }

        /// <summary>
        /// A description for the NodesToRead field.
        /// </summary>
        [DataMember(Name = "NodesToRead", IsRequired = false, Order = 5)]
        public HistoryReadValueIdCollection NodesToRead
        {
            get
            {
                return m_nodesToRead;
            }

            set
            {
                m_nodesToRead = value;

                if (value == null)
                {
                    m_nodesToRead = new HistoryReadValueIdCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryReadRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryReadRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryReadRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteExtensionObject("HistoryReadDetails", HistoryReadDetails);
            encoder.WriteEnumerated("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteBoolean("ReleaseContinuationPoints", ReleaseContinuationPoints);
            encoder.WriteEncodeableArray("NodesToRead", NodesToRead.ToArray(), typeof(HistoryReadValueId));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            HistoryReadDetails = decoder.ReadExtensionObject("HistoryReadDetails");
            TimestampsToReturn = (TimestampsToReturn)decoder.ReadEnumerated("TimestampsToReturn", typeof(TimestampsToReturn));
            ReleaseContinuationPoints = decoder.ReadBoolean("ReleaseContinuationPoints");
            NodesToRead = (HistoryReadValueIdCollection)decoder.ReadEncodeableArray("NodesToRead", typeof(HistoryReadValueId));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryReadRequest value = encodeable as HistoryReadRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_historyReadDetails, value.m_historyReadDetails)) return false;
            if (!Utils.IsEqual(m_timestampsToReturn, value.m_timestampsToReturn)) return false;
            if (!Utils.IsEqual(m_releaseContinuationPoints, value.m_releaseContinuationPoints)) return false;
            if (!Utils.IsEqual(m_nodesToRead, value.m_nodesToRead)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryReadRequest clone = new HistoryReadRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_historyReadDetails = (ExtensionObject)Utils.Clone(this.m_historyReadDetails);
            clone.m_timestampsToReturn = (TimestampsToReturn)Utils.Clone(this.m_timestampsToReturn);
            clone.m_releaseContinuationPoints = (bool)Utils.Clone(this.m_releaseContinuationPoints);
            clone.m_nodesToRead = (HistoryReadValueIdCollection)Utils.Clone(this.m_nodesToRead);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private ExtensionObject m_historyReadDetails;
        private TimestampsToReturn m_timestampsToReturn;
        private bool m_releaseContinuationPoints;
        private HistoryReadValueIdCollection m_nodesToRead;
        #endregion
    }
    #endif
    #endregion

    #region HistoryReadResponse Class
    #if (!OPCUA_EXCLUDE_HistoryReadResponse)
    /// <summary>
    /// A description for the HistoryReadResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryReadResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryReadResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new HistoryReadResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public HistoryReadResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new HistoryReadResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryReadResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryReadResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryReadResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(HistoryReadResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (HistoryReadResultCollection)decoder.ReadEncodeableArray("Results", typeof(HistoryReadResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryReadResponse value = encodeable as HistoryReadResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryReadResponse clone = new HistoryReadResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (HistoryReadResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private HistoryReadResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region WriteValue Class
    #if (!OPCUA_EXCLUDE_WriteValue)
    /// <summary>
    /// A description for the WriteValue DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class WriteValue : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public WriteValue()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
            m_attributeId = (uint)0;
            m_indexRange = null;
            m_value = new DataValue();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the AttributeId field.
        /// </summary>
        [DataMember(Name = "AttributeId", IsRequired = false, Order = 2)]
        public uint AttributeId
        {
            get { return m_attributeId;  }
            set { m_attributeId = value; }
        }

        /// <summary>
        /// A description for the IndexRange field.
        /// </summary>
        [DataMember(Name = "IndexRange", IsRequired = false, Order = 3)]
        public string IndexRange
        {
            get { return m_indexRange;  }
            set { m_indexRange = value; }
        }

        /// <summary>
        /// A description for the Value field.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 4)]
        public DataValue Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.WriteValue; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.WriteValue_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.WriteValue_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteUInt32("AttributeId", AttributeId);
            encoder.WriteString("IndexRange", IndexRange);
            encoder.WriteDataValue("Value", Value);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");
            AttributeId = decoder.ReadUInt32("AttributeId");
            IndexRange = decoder.ReadString("IndexRange");
            Value = decoder.ReadDataValue("Value");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            WriteValue value = encodeable as WriteValue;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_attributeId, value.m_attributeId)) return false;
            if (!Utils.IsEqual(m_indexRange, value.m_indexRange)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            WriteValue clone = new WriteValue();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_attributeId = (uint)Utils.Clone(this.m_attributeId);
            clone.m_indexRange = (string)Utils.Clone(this.m_indexRange);
            clone.m_value = (DataValue)Utils.Clone(this.m_value);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        private uint m_attributeId;
        private string m_indexRange;
        private DataValue m_value;
        #endregion
    }

    #region WriteValueCollection Class
    /// <summary>
    /// A collection of WriteValue objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfWriteValue", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "WriteValue")]
    public partial class WriteValueCollection : List<WriteValue>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public WriteValueCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public WriteValueCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public WriteValueCollection(IEnumerable<WriteValue> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator WriteValueCollection(WriteValue[] values)
        {
            if (values != null)
            {
                return new WriteValueCollection(values);
            }

            return new WriteValueCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator WriteValue[](WriteValueCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            WriteValueCollection clone = new WriteValueCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((WriteValue)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region WriteRequest Class
    #if (!OPCUA_EXCLUDE_WriteRequest)
    /// <summary>
    /// A description for the WriteRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class WriteRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public WriteRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_nodesToWrite = new WriteValueCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the NodesToWrite field.
        /// </summary>
        [DataMember(Name = "NodesToWrite", IsRequired = false, Order = 2)]
        public WriteValueCollection NodesToWrite
        {
            get
            {
                return m_nodesToWrite;
            }

            set
            {
                m_nodesToWrite = value;

                if (value == null)
                {
                    m_nodesToWrite = new WriteValueCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.WriteRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.WriteRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.WriteRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("NodesToWrite", NodesToWrite.ToArray(), typeof(WriteValue));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            NodesToWrite = (WriteValueCollection)decoder.ReadEncodeableArray("NodesToWrite", typeof(WriteValue));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            WriteRequest value = encodeable as WriteRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_nodesToWrite, value.m_nodesToWrite)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            WriteRequest clone = new WriteRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_nodesToWrite = (WriteValueCollection)Utils.Clone(this.m_nodesToWrite);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private WriteValueCollection m_nodesToWrite;
        #endregion
    }
    #endif
    #endregion

    #region WriteResponse Class
    #if (!OPCUA_EXCLUDE_WriteResponse)
    /// <summary>
    /// A description for the WriteResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class WriteResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public WriteResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.WriteResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.WriteResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.WriteResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            WriteResponse value = encodeable as WriteResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            WriteResponse clone = new WriteResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region HistoryUpdateDetails Class
    #if (!OPCUA_EXCLUDE_HistoryUpdateDetails)
    /// <summary>
    /// A description for the HistoryUpdateDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryUpdateDetails : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryUpdateDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_nodeId = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 1)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryUpdateDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryUpdateDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryUpdateDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("NodeId", NodeId);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NodeId = decoder.ReadNodeId("NodeId");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryUpdateDetails value = encodeable as HistoryUpdateDetails;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryUpdateDetails clone = new HistoryUpdateDetails();

            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_nodeId;
        #endregion
    }
    #endif
    #endregion

    #region HistoryUpdateType Enumeration
    #if (!OPCUA_EXCLUDE_HistoryUpdateType)
    /// <summary>
    /// A description for the HistoryUpdateType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum HistoryUpdateType
    {
        /// <summary>
        /// A description for the Insert field.
        /// </summary>
        [EnumMember(Value = "Insert_1")]
        Insert = 1,

        /// <summary>
        /// A description for the Replace field.
        /// </summary>
        [EnumMember(Value = "Replace_2")]
        Replace = 2,

        /// <summary>
        /// A description for the Update field.
        /// </summary>
        [EnumMember(Value = "Update_3")]
        Update = 3,

        /// <summary>
        /// A description for the Delete field.
        /// </summary>
        [EnumMember(Value = "Delete_4")]
        Delete = 4,
    }
    #endif
    #endregion

    #region PerformUpdateType Enumeration
    #if (!OPCUA_EXCLUDE_PerformUpdateType)
    /// <summary>
    /// A description for the PerformUpdateType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum PerformUpdateType
    {
        /// <summary>
        /// A description for the Insert field.
        /// </summary>
        [EnumMember(Value = "Insert_1")]
        Insert = 1,

        /// <summary>
        /// A description for the Replace field.
        /// </summary>
        [EnumMember(Value = "Replace_2")]
        Replace = 2,

        /// <summary>
        /// A description for the Update field.
        /// </summary>
        [EnumMember(Value = "Update_3")]
        Update = 3,

        /// <summary>
        /// A description for the Remove field.
        /// </summary>
        [EnumMember(Value = "Remove_4")]
        Remove = 4,
    }
    #endif
    #endregion

    #region UpdateDataDetails Class
    #if (!OPCUA_EXCLUDE_UpdateDataDetails)
    /// <summary>
    /// A description for the UpdateDataDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UpdateDataDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UpdateDataDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_performInsertReplace = PerformUpdateType.Insert;
            m_updateValues = new DataValueCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the PerformInsertReplace field.
        /// </summary>
        [DataMember(Name = "PerformInsertReplace", IsRequired = false, Order = 1)]
        public PerformUpdateType PerformInsertReplace
        {
            get { return m_performInsertReplace;  }
            set { m_performInsertReplace = value; }
        }

        /// <summary>
        /// A description for the UpdateValues field.
        /// </summary>
        [DataMember(Name = "UpdateValues", IsRequired = false, Order = 2)]
        public DataValueCollection UpdateValues
        {
            get
            {
                return m_updateValues;
            }

            set
            {
                m_updateValues = value;

                if (value == null)
                {
                    m_updateValues = new DataValueCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UpdateDataDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UpdateDataDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UpdateDataDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEnumerated("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteDataValueArray("UpdateValues", UpdateValues);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            PerformInsertReplace = (PerformUpdateType)decoder.ReadEnumerated("PerformInsertReplace", typeof(PerformUpdateType));
            UpdateValues = decoder.ReadDataValueArray("UpdateValues");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UpdateDataDetails value = encodeable as UpdateDataDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_performInsertReplace, value.m_performInsertReplace)) return false;
            if (!Utils.IsEqual(m_updateValues, value.m_updateValues)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UpdateDataDetails clone = new UpdateDataDetails();

            clone.m_performInsertReplace = (PerformUpdateType)Utils.Clone(this.m_performInsertReplace);
            clone.m_updateValues = (DataValueCollection)Utils.Clone(this.m_updateValues);

            return clone;
        }
        #endregion

        #region Private Fields
        private PerformUpdateType m_performInsertReplace;
        private DataValueCollection m_updateValues;
        #endregion
    }
    #endif
    #endregion

    #region UpdateStructureDataDetails Class
    #if (!OPCUA_EXCLUDE_UpdateStructureDataDetails)
    /// <summary>
    /// A description for the UpdateStructureDataDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UpdateStructureDataDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UpdateStructureDataDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_performInsertReplace = PerformUpdateType.Insert;
            m_updateValues = new DataValueCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the PerformInsertReplace field.
        /// </summary>
        [DataMember(Name = "PerformInsertReplace", IsRequired = false, Order = 1)]
        public PerformUpdateType PerformInsertReplace
        {
            get { return m_performInsertReplace;  }
            set { m_performInsertReplace = value; }
        }

        /// <summary>
        /// A description for the UpdateValues field.
        /// </summary>
        [DataMember(Name = "UpdateValues", IsRequired = false, Order = 2)]
        public DataValueCollection UpdateValues
        {
            get
            {
                return m_updateValues;
            }

            set
            {
                m_updateValues = value;

                if (value == null)
                {
                    m_updateValues = new DataValueCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UpdateStructureDataDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UpdateStructureDataDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UpdateStructureDataDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEnumerated("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteDataValueArray("UpdateValues", UpdateValues);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            PerformInsertReplace = (PerformUpdateType)decoder.ReadEnumerated("PerformInsertReplace", typeof(PerformUpdateType));
            UpdateValues = decoder.ReadDataValueArray("UpdateValues");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UpdateStructureDataDetails value = encodeable as UpdateStructureDataDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_performInsertReplace, value.m_performInsertReplace)) return false;
            if (!Utils.IsEqual(m_updateValues, value.m_updateValues)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UpdateStructureDataDetails clone = new UpdateStructureDataDetails();

            clone.m_performInsertReplace = (PerformUpdateType)Utils.Clone(this.m_performInsertReplace);
            clone.m_updateValues = (DataValueCollection)Utils.Clone(this.m_updateValues);

            return clone;
        }
        #endregion

        #region Private Fields
        private PerformUpdateType m_performInsertReplace;
        private DataValueCollection m_updateValues;
        #endregion
    }
    #endif
    #endregion

    #region UpdateEventDetails Class
    #if (!OPCUA_EXCLUDE_UpdateEventDetails)
    /// <summary>
    /// A description for the UpdateEventDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class UpdateEventDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public UpdateEventDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_performInsertReplace = PerformUpdateType.Insert;
            m_filter = new EventFilter();
            m_eventData = new HistoryEventFieldListCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the PerformInsertReplace field.
        /// </summary>
        [DataMember(Name = "PerformInsertReplace", IsRequired = false, Order = 1)]
        public PerformUpdateType PerformInsertReplace
        {
            get { return m_performInsertReplace;  }
            set { m_performInsertReplace = value; }
        }

        /// <summary>
        /// A description for the Filter field.
        /// </summary>
        [DataMember(Name = "Filter", IsRequired = false, Order = 2)]
        public EventFilter Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                m_filter = value;

                if (value == null)
                {
                    m_filter = new EventFilter();
                }
            }
        }

        /// <summary>
        /// A description for the EventData field.
        /// </summary>
        [DataMember(Name = "EventData", IsRequired = false, Order = 3)]
        public HistoryEventFieldListCollection EventData
        {
            get
            {
                return m_eventData;
            }

            set
            {
                m_eventData = value;

                if (value == null)
                {
                    m_eventData = new HistoryEventFieldListCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.UpdateEventDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.UpdateEventDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.UpdateEventDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEnumerated("PerformInsertReplace", PerformInsertReplace);
            encoder.WriteEncodeable("Filter", Filter, typeof(EventFilter));
            encoder.WriteEncodeableArray("EventData", EventData.ToArray(), typeof(HistoryEventFieldList));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            PerformInsertReplace = (PerformUpdateType)decoder.ReadEnumerated("PerformInsertReplace", typeof(PerformUpdateType));
            Filter = (EventFilter)decoder.ReadEncodeable("Filter", typeof(EventFilter));
            EventData = (HistoryEventFieldListCollection)decoder.ReadEncodeableArray("EventData", typeof(HistoryEventFieldList));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            UpdateEventDetails value = encodeable as UpdateEventDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_performInsertReplace, value.m_performInsertReplace)) return false;
            if (!Utils.IsEqual(m_filter, value.m_filter)) return false;
            if (!Utils.IsEqual(m_eventData, value.m_eventData)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            UpdateEventDetails clone = new UpdateEventDetails();

            clone.m_performInsertReplace = (PerformUpdateType)Utils.Clone(this.m_performInsertReplace);
            clone.m_filter = (EventFilter)Utils.Clone(this.m_filter);
            clone.m_eventData = (HistoryEventFieldListCollection)Utils.Clone(this.m_eventData);

            return clone;
        }
        #endregion

        #region Private Fields
        private PerformUpdateType m_performInsertReplace;
        private EventFilter m_filter;
        private HistoryEventFieldListCollection m_eventData;
        #endregion
    }
    #endif
    #endregion

    #region DeleteRawModifiedDetails Class
    #if (!OPCUA_EXCLUDE_DeleteRawModifiedDetails)
    /// <summary>
    /// A description for the DeleteRawModifiedDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteRawModifiedDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteRawModifiedDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_isDeleteModified = true;
            m_startTime = DateTime.MinValue;
            m_endTime = DateTime.MinValue;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the IsDeleteModified field.
        /// </summary>
        [DataMember(Name = "IsDeleteModified", IsRequired = false, Order = 1)]
        public bool IsDeleteModified
        {
            get { return m_isDeleteModified;  }
            set { m_isDeleteModified = value; }
        }

        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 2)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the EndTime field.
        /// </summary>
        [DataMember(Name = "EndTime", IsRequired = false, Order = 3)]
        public DateTime EndTime
        {
            get { return m_endTime;  }
            set { m_endTime = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteRawModifiedDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteRawModifiedDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteRawModifiedDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("IsDeleteModified", IsDeleteModified);
            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("EndTime", EndTime);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            IsDeleteModified = decoder.ReadBoolean("IsDeleteModified");
            StartTime = decoder.ReadDateTime("StartTime");
            EndTime = decoder.ReadDateTime("EndTime");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteRawModifiedDetails value = encodeable as DeleteRawModifiedDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_isDeleteModified, value.m_isDeleteModified)) return false;
            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_endTime, value.m_endTime)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteRawModifiedDetails clone = new DeleteRawModifiedDetails();

            clone.m_isDeleteModified = (bool)Utils.Clone(this.m_isDeleteModified);
            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_endTime = (DateTime)Utils.Clone(this.m_endTime);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_isDeleteModified;
        private DateTime m_startTime;
        private DateTime m_endTime;
        #endregion
    }
    #endif
    #endregion

    #region DeleteAtTimeDetails Class
    #if (!OPCUA_EXCLUDE_DeleteAtTimeDetails)
    /// <summary>
    /// A description for the DeleteAtTimeDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteAtTimeDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteAtTimeDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_reqTimes = new DateTimeCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ReqTimes field.
        /// </summary>
        [DataMember(Name = "ReqTimes", IsRequired = false, Order = 1)]
        public DateTimeCollection ReqTimes
        {
            get
            {
                return m_reqTimes;
            }

            set
            {
                m_reqTimes = value;

                if (value == null)
                {
                    m_reqTimes = new DateTimeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteAtTimeDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteAtTimeDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteAtTimeDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTimeArray("ReqTimes", ReqTimes);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ReqTimes = decoder.ReadDateTimeArray("ReqTimes");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteAtTimeDetails value = encodeable as DeleteAtTimeDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_reqTimes, value.m_reqTimes)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            DeleteAtTimeDetails clone = new DeleteAtTimeDetails();

            clone.m_reqTimes = (DateTimeCollection)Utils.Clone(this.m_reqTimes);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTimeCollection m_reqTimes;
        #endregion
    }
    #endif
    #endregion

    #region DeleteEventDetails Class
    #if (!OPCUA_EXCLUDE_DeleteEventDetails)
    /// <summary>
    /// A description for the DeleteEventDetails DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteEventDetails : HistoryUpdateDetails
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteEventDetails()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_eventIds = new ByteStringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the EventIds field.
        /// </summary>
        [DataMember(Name = "EventIds", IsRequired = false, Order = 1)]
        public ByteStringCollection EventIds
        {
            get
            {
                return m_eventIds;
            }

            set
            {
                m_eventIds = value;

                if (value == null)
                {
                    m_eventIds = new ByteStringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteEventDetails; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteEventDetails_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteEventDetails_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteByteStringArray("EventIds", EventIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EventIds = decoder.ReadByteStringArray("EventIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteEventDetails value = encodeable as DeleteEventDetails;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_eventIds, value.m_eventIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteEventDetails clone = new DeleteEventDetails();

            clone.m_eventIds = (ByteStringCollection)Utils.Clone(this.m_eventIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private ByteStringCollection m_eventIds;
        #endregion
    }
    #endif
    #endregion

    #region HistoryUpdateResult Class
    #if (!OPCUA_EXCLUDE_HistoryUpdateResult)
    /// <summary>
    /// A description for the HistoryUpdateResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryUpdateResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryUpdateResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_operationResults = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the OperationResults field.
        /// </summary>
        [DataMember(Name = "OperationResults", IsRequired = false, Order = 2)]
        public StatusCodeCollection OperationResults
        {
            get
            {
                return m_operationResults;
            }

            set
            {
                m_operationResults = value;

                if (value == null)
                {
                    m_operationResults = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryUpdateResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryUpdateResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryUpdateResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("OperationResults", OperationResults);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            OperationResults = decoder.ReadStatusCodeArray("OperationResults");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryUpdateResult value = encodeable as HistoryUpdateResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_operationResults, value.m_operationResults)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryUpdateResult clone = new HistoryUpdateResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_operationResults = (StatusCodeCollection)Utils.Clone(this.m_operationResults);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private StatusCodeCollection m_operationResults;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }

    #region HistoryUpdateResultCollection Class
    /// <summary>
    /// A collection of HistoryUpdateResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfHistoryUpdateResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "HistoryUpdateResult")]
    public partial class HistoryUpdateResultCollection : List<HistoryUpdateResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public HistoryUpdateResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public HistoryUpdateResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public HistoryUpdateResultCollection(IEnumerable<HistoryUpdateResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator HistoryUpdateResultCollection(HistoryUpdateResult[] values)
        {
            if (values != null)
            {
                return new HistoryUpdateResultCollection(values);
            }

            return new HistoryUpdateResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator HistoryUpdateResult[](HistoryUpdateResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            HistoryUpdateResultCollection clone = new HistoryUpdateResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((HistoryUpdateResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region HistoryUpdateRequest Class
    #if (!OPCUA_EXCLUDE_HistoryUpdateRequest)
    /// <summary>
    /// A description for the HistoryUpdateRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryUpdateRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryUpdateRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_historyUpdateDetails = new ExtensionObjectCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the HistoryUpdateDetails field.
        /// </summary>
        [DataMember(Name = "HistoryUpdateDetails", IsRequired = false, Order = 2)]
        public ExtensionObjectCollection HistoryUpdateDetails
        {
            get
            {
                return m_historyUpdateDetails;
            }

            set
            {
                m_historyUpdateDetails = value;

                if (value == null)
                {
                    m_historyUpdateDetails = new ExtensionObjectCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryUpdateRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryUpdateRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryUpdateRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteExtensionObjectArray("HistoryUpdateDetails", HistoryUpdateDetails);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            HistoryUpdateDetails = decoder.ReadExtensionObjectArray("HistoryUpdateDetails");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryUpdateRequest value = encodeable as HistoryUpdateRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_historyUpdateDetails, value.m_historyUpdateDetails)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryUpdateRequest clone = new HistoryUpdateRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_historyUpdateDetails = (ExtensionObjectCollection)Utils.Clone(this.m_historyUpdateDetails);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private ExtensionObjectCollection m_historyUpdateDetails;
        #endregion
    }
    #endif
    #endregion

    #region HistoryUpdateResponse Class
    #if (!OPCUA_EXCLUDE_HistoryUpdateResponse)
    /// <summary>
    /// A description for the HistoryUpdateResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryUpdateResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryUpdateResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new HistoryUpdateResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public HistoryUpdateResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new HistoryUpdateResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryUpdateResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryUpdateResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryUpdateResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(HistoryUpdateResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (HistoryUpdateResultCollection)decoder.ReadEncodeableArray("Results", typeof(HistoryUpdateResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryUpdateResponse value = encodeable as HistoryUpdateResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryUpdateResponse clone = new HistoryUpdateResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (HistoryUpdateResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private HistoryUpdateResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region CallMethodRequest Class
    #if (!OPCUA_EXCLUDE_CallMethodRequest)
    /// <summary>
    /// A description for the CallMethodRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CallMethodRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CallMethodRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_objectId = null;
            m_methodId = null;
            m_inputArguments = new VariantCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ObjectId field.
        /// </summary>
        [DataMember(Name = "ObjectId", IsRequired = false, Order = 1)]
        public NodeId ObjectId
        {
            get { return m_objectId;  }
            set { m_objectId = value; }
        }

        /// <summary>
        /// A description for the MethodId field.
        /// </summary>
        [DataMember(Name = "MethodId", IsRequired = false, Order = 2)]
        public NodeId MethodId
        {
            get { return m_methodId;  }
            set { m_methodId = value; }
        }

        /// <summary>
        /// A description for the InputArguments field.
        /// </summary>
        [DataMember(Name = "InputArguments", IsRequired = false, Order = 3)]
        public VariantCollection InputArguments
        {
            get
            {
                return m_inputArguments;
            }

            set
            {
                m_inputArguments = value;

                if (value == null)
                {
                    m_inputArguments = new VariantCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CallMethodRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CallMethodRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CallMethodRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("ObjectId", ObjectId);
            encoder.WriteNodeId("MethodId", MethodId);
            encoder.WriteVariantArray("InputArguments", InputArguments);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ObjectId = decoder.ReadNodeId("ObjectId");
            MethodId = decoder.ReadNodeId("MethodId");
            InputArguments = decoder.ReadVariantArray("InputArguments");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CallMethodRequest value = encodeable as CallMethodRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_objectId, value.m_objectId)) return false;
            if (!Utils.IsEqual(m_methodId, value.m_methodId)) return false;
            if (!Utils.IsEqual(m_inputArguments, value.m_inputArguments)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CallMethodRequest clone = new CallMethodRequest();

            clone.m_objectId = (NodeId)Utils.Clone(this.m_objectId);
            clone.m_methodId = (NodeId)Utils.Clone(this.m_methodId);
            clone.m_inputArguments = (VariantCollection)Utils.Clone(this.m_inputArguments);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_objectId;
        private NodeId m_methodId;
        private VariantCollection m_inputArguments;
        #endregion
    }

    #region CallMethodRequestCollection Class
    /// <summary>
    /// A collection of CallMethodRequest objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfCallMethodRequest", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "CallMethodRequest")]
    public partial class CallMethodRequestCollection : List<CallMethodRequest>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public CallMethodRequestCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public CallMethodRequestCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public CallMethodRequestCollection(IEnumerable<CallMethodRequest> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator CallMethodRequestCollection(CallMethodRequest[] values)
        {
            if (values != null)
            {
                return new CallMethodRequestCollection(values);
            }

            return new CallMethodRequestCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator CallMethodRequest[](CallMethodRequestCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            CallMethodRequestCollection clone = new CallMethodRequestCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((CallMethodRequest)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region CallMethodResult Class
    #if (!OPCUA_EXCLUDE_CallMethodResult)
    /// <summary>
    /// A description for the CallMethodResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CallMethodResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CallMethodResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_inputArgumentResults = new StatusCodeCollection();
            m_inputArgumentDiagnosticInfos = new DiagnosticInfoCollection();
            m_outputArguments = new VariantCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the InputArgumentResults field.
        /// </summary>
        [DataMember(Name = "InputArgumentResults", IsRequired = false, Order = 2)]
        public StatusCodeCollection InputArgumentResults
        {
            get
            {
                return m_inputArgumentResults;
            }

            set
            {
                m_inputArgumentResults = value;

                if (value == null)
                {
                    m_inputArgumentResults = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the InputArgumentDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "InputArgumentDiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection InputArgumentDiagnosticInfos
        {
            get
            {
                return m_inputArgumentDiagnosticInfos;
            }

            set
            {
                m_inputArgumentDiagnosticInfos = value;

                if (value == null)
                {
                    m_inputArgumentDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }

        /// <summary>
        /// A description for the OutputArguments field.
        /// </summary>
        [DataMember(Name = "OutputArguments", IsRequired = false, Order = 4)]
        public VariantCollection OutputArguments
        {
            get
            {
                return m_outputArguments;
            }

            set
            {
                m_outputArguments = value;

                if (value == null)
                {
                    m_outputArguments = new VariantCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CallMethodResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CallMethodResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CallMethodResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteStatusCodeArray("InputArgumentResults", InputArgumentResults);
            encoder.WriteDiagnosticInfoArray("InputArgumentDiagnosticInfos", InputArgumentDiagnosticInfos);
            encoder.WriteVariantArray("OutputArguments", OutputArguments);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            InputArgumentResults = decoder.ReadStatusCodeArray("InputArgumentResults");
            InputArgumentDiagnosticInfos = decoder.ReadDiagnosticInfoArray("InputArgumentDiagnosticInfos");
            OutputArguments = decoder.ReadVariantArray("OutputArguments");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CallMethodResult value = encodeable as CallMethodResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_inputArgumentResults, value.m_inputArgumentResults)) return false;
            if (!Utils.IsEqual(m_inputArgumentDiagnosticInfos, value.m_inputArgumentDiagnosticInfos)) return false;
            if (!Utils.IsEqual(m_outputArguments, value.m_outputArguments)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CallMethodResult clone = new CallMethodResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_inputArgumentResults = (StatusCodeCollection)Utils.Clone(this.m_inputArgumentResults);
            clone.m_inputArgumentDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_inputArgumentDiagnosticInfos);
            clone.m_outputArguments = (VariantCollection)Utils.Clone(this.m_outputArguments);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private StatusCodeCollection m_inputArgumentResults;
        private DiagnosticInfoCollection m_inputArgumentDiagnosticInfos;
        private VariantCollection m_outputArguments;
        #endregion
    }

    #region CallMethodResultCollection Class
    /// <summary>
    /// A collection of CallMethodResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfCallMethodResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "CallMethodResult")]
    public partial class CallMethodResultCollection : List<CallMethodResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public CallMethodResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public CallMethodResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public CallMethodResultCollection(IEnumerable<CallMethodResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator CallMethodResultCollection(CallMethodResult[] values)
        {
            if (values != null)
            {
                return new CallMethodResultCollection(values);
            }

            return new CallMethodResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator CallMethodResult[](CallMethodResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            CallMethodResultCollection clone = new CallMethodResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((CallMethodResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region CallRequest Class
    #if (!OPCUA_EXCLUDE_CallRequest)
    /// <summary>
    /// A description for the CallRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CallRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CallRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_methodsToCall = new CallMethodRequestCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the MethodsToCall field.
        /// </summary>
        [DataMember(Name = "MethodsToCall", IsRequired = false, Order = 2)]
        public CallMethodRequestCollection MethodsToCall
        {
            get
            {
                return m_methodsToCall;
            }

            set
            {
                m_methodsToCall = value;

                if (value == null)
                {
                    m_methodsToCall = new CallMethodRequestCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CallRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CallRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CallRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("MethodsToCall", MethodsToCall.ToArray(), typeof(CallMethodRequest));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            MethodsToCall = (CallMethodRequestCollection)decoder.ReadEncodeableArray("MethodsToCall", typeof(CallMethodRequest));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CallRequest value = encodeable as CallRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_methodsToCall, value.m_methodsToCall)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CallRequest clone = new CallRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_methodsToCall = (CallMethodRequestCollection)Utils.Clone(this.m_methodsToCall);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private CallMethodRequestCollection m_methodsToCall;
        #endregion
    }
    #endif
    #endregion

    #region CallResponse Class
    #if (!OPCUA_EXCLUDE_CallResponse)
    /// <summary>
    /// A description for the CallResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CallResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CallResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new CallMethodResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public CallMethodResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new CallMethodResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CallResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CallResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CallResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(CallMethodResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (CallMethodResultCollection)decoder.ReadEncodeableArray("Results", typeof(CallMethodResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CallResponse value = encodeable as CallResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CallResponse clone = new CallResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (CallMethodResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private CallMethodResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region MonitoringMode Enumeration
    #if (!OPCUA_EXCLUDE_MonitoringMode)
    /// <summary>
    /// A description for the MonitoringMode DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum MonitoringMode
    {
        /// <summary>
        /// A description for the Disabled field.
        /// </summary>
        [EnumMember(Value = "Disabled_0")]
        Disabled = 0,

        /// <summary>
        /// A description for the Sampling field.
        /// </summary>
        [EnumMember(Value = "Sampling_1")]
        Sampling = 1,

        /// <summary>
        /// A description for the Reporting field.
        /// </summary>
        [EnumMember(Value = "Reporting_2")]
        Reporting = 2,
    }
    #endif
    #endregion

    #region DataChangeTrigger Enumeration
    #if (!OPCUA_EXCLUDE_DataChangeTrigger)
    /// <summary>
    /// A description for the DataChangeTrigger DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum DataChangeTrigger
    {
        /// <summary>
        /// A description for the Status field.
        /// </summary>
        [EnumMember(Value = "Status_0")]
        Status = 0,

        /// <summary>
        /// A description for the StatusValue field.
        /// </summary>
        [EnumMember(Value = "StatusValue_1")]
        StatusValue = 1,

        /// <summary>
        /// A description for the StatusValueTimestamp field.
        /// </summary>
        [EnumMember(Value = "StatusValueTimestamp_2")]
        StatusValueTimestamp = 2,
    }
    #endif
    #endregion

    #region DeadbandType Enumeration
    #if (!OPCUA_EXCLUDE_DeadbandType)
    /// <summary>
    /// A description for the DeadbandType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum DeadbandType
    {
        /// <summary>
        /// A description for the None field.
        /// </summary>
        [EnumMember(Value = "None_0")]
        None = 0,

        /// <summary>
        /// A description for the Absolute field.
        /// </summary>
        [EnumMember(Value = "Absolute_1")]
        Absolute = 1,

        /// <summary>
        /// A description for the Percent field.
        /// </summary>
        [EnumMember(Value = "Percent_2")]
        Percent = 2,
    }
    #endif
    #endregion

    #region MonitoringFilter Class
    #if (!OPCUA_EXCLUDE_MonitoringFilter)
    /// <summary>
    /// A description for the MonitoringFilter DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoringFilter : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoringFilter()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoringFilter; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoringFilter_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoringFilter_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoringFilter value = encodeable as MonitoringFilter;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataChangeFilter Class
    #if (!OPCUA_EXCLUDE_DataChangeFilter)
    /// <summary>
    /// A description for the DataChangeFilter DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DataChangeFilter : MonitoringFilter
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DataChangeFilter()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_trigger = DataChangeTrigger.Status;
            m_deadbandType = (uint)0;
            m_deadbandValue = (double)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Trigger field.
        /// </summary>
        [DataMember(Name = "Trigger", IsRequired = false, Order = 1)]
        public DataChangeTrigger Trigger
        {
            get { return m_trigger;  }
            set { m_trigger = value; }
        }

        /// <summary>
        /// A description for the DeadbandType field.
        /// </summary>
        [DataMember(Name = "DeadbandType", IsRequired = false, Order = 2)]
        public uint DeadbandType
        {
            get { return m_deadbandType;  }
            set { m_deadbandType = value; }
        }

        /// <summary>
        /// A description for the DeadbandValue field.
        /// </summary>
        [DataMember(Name = "DeadbandValue", IsRequired = false, Order = 3)]
        public double DeadbandValue
        {
            get { return m_deadbandValue;  }
            set { m_deadbandValue = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataChangeFilter; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataChangeFilter_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataChangeFilter_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEnumerated("Trigger", Trigger);
            encoder.WriteUInt32("DeadbandType", DeadbandType);
            encoder.WriteDouble("DeadbandValue", DeadbandValue);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Trigger = (DataChangeTrigger)decoder.ReadEnumerated("Trigger", typeof(DataChangeTrigger));
            DeadbandType = decoder.ReadUInt32("DeadbandType");
            DeadbandValue = decoder.ReadDouble("DeadbandValue");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataChangeFilter value = encodeable as DataChangeFilter;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_trigger, value.m_trigger)) return false;
            if (!Utils.IsEqual(m_deadbandType, value.m_deadbandType)) return false;
            if (!Utils.IsEqual(m_deadbandValue, value.m_deadbandValue)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            DataChangeFilter clone = new DataChangeFilter();

            clone.m_trigger = (DataChangeTrigger)Utils.Clone(this.m_trigger);
            clone.m_deadbandType = (uint)Utils.Clone(this.m_deadbandType);
            clone.m_deadbandValue = (double)Utils.Clone(this.m_deadbandValue);

            return clone;
        }
        #endregion

        #region Private Fields
        private DataChangeTrigger m_trigger;
        private uint m_deadbandType;
        private double m_deadbandValue;
        #endregion
    }
    #endif
    #endregion

    #region EventFilter Class
    #if (!OPCUA_EXCLUDE_EventFilter)
    /// <summary>
    /// A description for the EventFilter DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EventFilter : MonitoringFilter
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EventFilter()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_selectClauses = new SimpleAttributeOperandCollection();
            m_whereClause = new ContentFilter();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SelectClauses field.
        /// </summary>
        [DataMember(Name = "SelectClauses", IsRequired = false, Order = 1)]
        public SimpleAttributeOperandCollection SelectClauses
        {
            get
            {
                return m_selectClauses;
            }

            set
            {
                m_selectClauses = value;

                if (value == null)
                {
                    m_selectClauses = new SimpleAttributeOperandCollection();
                }
            }
        }

        /// <summary>
        /// A description for the WhereClause field.
        /// </summary>
        [DataMember(Name = "WhereClause", IsRequired = false, Order = 2)]
        public ContentFilter WhereClause
        {
            get
            {
                return m_whereClause;
            }

            set
            {
                m_whereClause = value;

                if (value == null)
                {
                    m_whereClause = new ContentFilter();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EventFilter; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EventFilter_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EventFilter_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("SelectClauses", SelectClauses.ToArray(), typeof(SimpleAttributeOperand));
            encoder.WriteEncodeable("WhereClause", WhereClause, typeof(ContentFilter));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SelectClauses = (SimpleAttributeOperandCollection)decoder.ReadEncodeableArray("SelectClauses", typeof(SimpleAttributeOperand));
            WhereClause = (ContentFilter)decoder.ReadEncodeable("WhereClause", typeof(ContentFilter));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EventFilter value = encodeable as EventFilter;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_selectClauses, value.m_selectClauses)) return false;
            if (!Utils.IsEqual(m_whereClause, value.m_whereClause)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            EventFilter clone = new EventFilter();

            clone.m_selectClauses = (SimpleAttributeOperandCollection)Utils.Clone(this.m_selectClauses);
            clone.m_whereClause = (ContentFilter)Utils.Clone(this.m_whereClause);

            return clone;
        }
        #endregion

        #region Private Fields
        private SimpleAttributeOperandCollection m_selectClauses;
        private ContentFilter m_whereClause;
        #endregion
    }
    #endif
    #endregion

    #region AggregateConfiguration Class
    #if (!OPCUA_EXCLUDE_AggregateConfiguration)
    /// <summary>
    /// A description for the AggregateConfiguration DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AggregateConfiguration : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AggregateConfiguration()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_useServerCapabilitiesDefaults = true;
            m_treatUncertainAsBad = true;
            m_percentDataBad = (byte)0;
            m_percentDataGood = (byte)0;
            m_useSlopedExtrapolation = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the UseServerCapabilitiesDefaults field.
        /// </summary>
        [DataMember(Name = "UseServerCapabilitiesDefaults", IsRequired = false, Order = 1)]
        public bool UseServerCapabilitiesDefaults
        {
            get { return m_useServerCapabilitiesDefaults;  }
            set { m_useServerCapabilitiesDefaults = value; }
        }

        /// <summary>
        /// A description for the TreatUncertainAsBad field.
        /// </summary>
        [DataMember(Name = "TreatUncertainAsBad", IsRequired = false, Order = 2)]
        public bool TreatUncertainAsBad
        {
            get { return m_treatUncertainAsBad;  }
            set { m_treatUncertainAsBad = value; }
        }

        /// <summary>
        /// A description for the PercentDataBad field.
        /// </summary>
        [DataMember(Name = "PercentDataBad", IsRequired = false, Order = 3)]
        public byte PercentDataBad
        {
            get { return m_percentDataBad;  }
            set { m_percentDataBad = value; }
        }

        /// <summary>
        /// A description for the PercentDataGood field.
        /// </summary>
        [DataMember(Name = "PercentDataGood", IsRequired = false, Order = 4)]
        public byte PercentDataGood
        {
            get { return m_percentDataGood;  }
            set { m_percentDataGood = value; }
        }

        /// <summary>
        /// A description for the UseSlopedExtrapolation field.
        /// </summary>
        [DataMember(Name = "UseSlopedExtrapolation", IsRequired = false, Order = 5)]
        public bool UseSlopedExtrapolation
        {
            get { return m_useSlopedExtrapolation;  }
            set { m_useSlopedExtrapolation = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AggregateConfiguration; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AggregateConfiguration_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AggregateConfiguration_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("UseServerCapabilitiesDefaults", UseServerCapabilitiesDefaults);
            encoder.WriteBoolean("TreatUncertainAsBad", TreatUncertainAsBad);
            encoder.WriteByte("PercentDataBad", PercentDataBad);
            encoder.WriteByte("PercentDataGood", PercentDataGood);
            encoder.WriteBoolean("UseSlopedExtrapolation", UseSlopedExtrapolation);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            UseServerCapabilitiesDefaults = decoder.ReadBoolean("UseServerCapabilitiesDefaults");
            TreatUncertainAsBad = decoder.ReadBoolean("TreatUncertainAsBad");
            PercentDataBad = decoder.ReadByte("PercentDataBad");
            PercentDataGood = decoder.ReadByte("PercentDataGood");
            UseSlopedExtrapolation = decoder.ReadBoolean("UseSlopedExtrapolation");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AggregateConfiguration value = encodeable as AggregateConfiguration;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_useServerCapabilitiesDefaults, value.m_useServerCapabilitiesDefaults)) return false;
            if (!Utils.IsEqual(m_treatUncertainAsBad, value.m_treatUncertainAsBad)) return false;
            if (!Utils.IsEqual(m_percentDataBad, value.m_percentDataBad)) return false;
            if (!Utils.IsEqual(m_percentDataGood, value.m_percentDataGood)) return false;
            if (!Utils.IsEqual(m_useSlopedExtrapolation, value.m_useSlopedExtrapolation)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            AggregateConfiguration clone = new AggregateConfiguration();

            clone.m_useServerCapabilitiesDefaults = (bool)Utils.Clone(this.m_useServerCapabilitiesDefaults);
            clone.m_treatUncertainAsBad = (bool)Utils.Clone(this.m_treatUncertainAsBad);
            clone.m_percentDataBad = (byte)Utils.Clone(this.m_percentDataBad);
            clone.m_percentDataGood = (byte)Utils.Clone(this.m_percentDataGood);
            clone.m_useSlopedExtrapolation = (bool)Utils.Clone(this.m_useSlopedExtrapolation);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_useServerCapabilitiesDefaults;
        private bool m_treatUncertainAsBad;
        private byte m_percentDataBad;
        private byte m_percentDataGood;
        private bool m_useSlopedExtrapolation;
        #endregion
    }
    #endif
    #endregion

    #region AggregateFilter Class
    #if (!OPCUA_EXCLUDE_AggregateFilter)
    /// <summary>
    /// A description for the AggregateFilter DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AggregateFilter : MonitoringFilter
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AggregateFilter()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_startTime = DateTime.MinValue;
            m_aggregateType = null;
            m_processingInterval = (double)0;
            m_aggregateConfiguration = new AggregateConfiguration();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 1)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the AggregateType field.
        /// </summary>
        [DataMember(Name = "AggregateType", IsRequired = false, Order = 2)]
        public NodeId AggregateType
        {
            get { return m_aggregateType;  }
            set { m_aggregateType = value; }
        }

        /// <summary>
        /// A description for the ProcessingInterval field.
        /// </summary>
        [DataMember(Name = "ProcessingInterval", IsRequired = false, Order = 3)]
        public double ProcessingInterval
        {
            get { return m_processingInterval;  }
            set { m_processingInterval = value; }
        }

        /// <summary>
        /// A description for the AggregateConfiguration field.
        /// </summary>
        [DataMember(Name = "AggregateConfiguration", IsRequired = false, Order = 4)]
        public AggregateConfiguration AggregateConfiguration
        {
            get
            {
                return m_aggregateConfiguration;
            }

            set
            {
                m_aggregateConfiguration = value;

                if (value == null)
                {
                    m_aggregateConfiguration = new AggregateConfiguration();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AggregateFilter; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AggregateFilter_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AggregateFilter_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteNodeId("AggregateType", AggregateType);
            encoder.WriteDouble("ProcessingInterval", ProcessingInterval);
            encoder.WriteEncodeable("AggregateConfiguration", AggregateConfiguration, typeof(AggregateConfiguration));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StartTime = decoder.ReadDateTime("StartTime");
            AggregateType = decoder.ReadNodeId("AggregateType");
            ProcessingInterval = decoder.ReadDouble("ProcessingInterval");
            AggregateConfiguration = (AggregateConfiguration)decoder.ReadEncodeable("AggregateConfiguration", typeof(AggregateConfiguration));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AggregateFilter value = encodeable as AggregateFilter;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_aggregateType, value.m_aggregateType)) return false;
            if (!Utils.IsEqual(m_processingInterval, value.m_processingInterval)) return false;
            if (!Utils.IsEqual(m_aggregateConfiguration, value.m_aggregateConfiguration)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AggregateFilter clone = new AggregateFilter();

            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_aggregateType = (NodeId)Utils.Clone(this.m_aggregateType);
            clone.m_processingInterval = (double)Utils.Clone(this.m_processingInterval);
            clone.m_aggregateConfiguration = (AggregateConfiguration)Utils.Clone(this.m_aggregateConfiguration);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_startTime;
        private NodeId m_aggregateType;
        private double m_processingInterval;
        private AggregateConfiguration m_aggregateConfiguration;
        #endregion
    }
    #endif
    #endregion

    #region MonitoringFilterResult Class
    #if (!OPCUA_EXCLUDE_MonitoringFilterResult)
    /// <summary>
    /// A description for the MonitoringFilterResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoringFilterResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoringFilterResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoringFilterResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoringFilterResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoringFilterResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoringFilterResult value = encodeable as MonitoringFilterResult;

            if (value == null)
            {
                return false;
            }


            return true;
        }
        
        public new object MemberwiseClone()
        {
            MonitoringFilterResult clone = new MonitoringFilterResult();


            return clone;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region EventFilterResult Class
    #if (!OPCUA_EXCLUDE_EventFilterResult)
    /// <summary>
    /// A description for the EventFilterResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EventFilterResult : MonitoringFilterResult
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EventFilterResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_selectClauseResults = new StatusCodeCollection();
            m_selectClauseDiagnosticInfos = new DiagnosticInfoCollection();
            m_whereClauseResult = new ContentFilterResult();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SelectClauseResults field.
        /// </summary>
        [DataMember(Name = "SelectClauseResults", IsRequired = false, Order = 1)]
        public StatusCodeCollection SelectClauseResults
        {
            get
            {
                return m_selectClauseResults;
            }

            set
            {
                m_selectClauseResults = value;

                if (value == null)
                {
                    m_selectClauseResults = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the SelectClauseDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "SelectClauseDiagnosticInfos", IsRequired = false, Order = 2)]
        public DiagnosticInfoCollection SelectClauseDiagnosticInfos
        {
            get
            {
                return m_selectClauseDiagnosticInfos;
            }

            set
            {
                m_selectClauseDiagnosticInfos = value;

                if (value == null)
                {
                    m_selectClauseDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }

        /// <summary>
        /// A description for the WhereClauseResult field.
        /// </summary>
        [DataMember(Name = "WhereClauseResult", IsRequired = false, Order = 3)]
        public ContentFilterResult WhereClauseResult
        {
            get
            {
                return m_whereClauseResult;
            }

            set
            {
                m_whereClauseResult = value;

                if (value == null)
                {
                    m_whereClauseResult = new ContentFilterResult();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EventFilterResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EventFilterResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EventFilterResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCodeArray("SelectClauseResults", SelectClauseResults);
            encoder.WriteDiagnosticInfoArray("SelectClauseDiagnosticInfos", SelectClauseDiagnosticInfos);
            encoder.WriteEncodeable("WhereClauseResult", WhereClauseResult, typeof(ContentFilterResult));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SelectClauseResults = decoder.ReadStatusCodeArray("SelectClauseResults");
            SelectClauseDiagnosticInfos = decoder.ReadDiagnosticInfoArray("SelectClauseDiagnosticInfos");
            WhereClauseResult = (ContentFilterResult)decoder.ReadEncodeable("WhereClauseResult", typeof(ContentFilterResult));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EventFilterResult value = encodeable as EventFilterResult;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_selectClauseResults, value.m_selectClauseResults)) return false;
            if (!Utils.IsEqual(m_selectClauseDiagnosticInfos, value.m_selectClauseDiagnosticInfos)) return false;
            if (!Utils.IsEqual(m_whereClauseResult, value.m_whereClauseResult)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EventFilterResult clone = new EventFilterResult();

            clone.m_selectClauseResults = (StatusCodeCollection)Utils.Clone(this.m_selectClauseResults);
            clone.m_selectClauseDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_selectClauseDiagnosticInfos);
            clone.m_whereClauseResult = (ContentFilterResult)Utils.Clone(this.m_whereClauseResult);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCodeCollection m_selectClauseResults;
        private DiagnosticInfoCollection m_selectClauseDiagnosticInfos;
        private ContentFilterResult m_whereClauseResult;
        #endregion
    }
    #endif
    #endregion

    #region AggregateFilterResult Class
    #if (!OPCUA_EXCLUDE_AggregateFilterResult)
    /// <summary>
    /// A description for the AggregateFilterResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AggregateFilterResult : MonitoringFilterResult
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AggregateFilterResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_revisedStartTime = DateTime.MinValue;
            m_revisedProcessingInterval = (double)0;
            m_revisedAggregateConfiguration = new AggregateConfiguration();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RevisedStartTime field.
        /// </summary>
        [DataMember(Name = "RevisedStartTime", IsRequired = false, Order = 1)]
        public DateTime RevisedStartTime
        {
            get { return m_revisedStartTime;  }
            set { m_revisedStartTime = value; }
        }

        /// <summary>
        /// A description for the RevisedProcessingInterval field.
        /// </summary>
        [DataMember(Name = "RevisedProcessingInterval", IsRequired = false, Order = 2)]
        public double RevisedProcessingInterval
        {
            get { return m_revisedProcessingInterval;  }
            set { m_revisedProcessingInterval = value; }
        }

        /// <summary>
        /// A description for the RevisedAggregateConfiguration field.
        /// </summary>
        [DataMember(Name = "RevisedAggregateConfiguration", IsRequired = false, Order = 3)]
        public AggregateConfiguration RevisedAggregateConfiguration
        {
            get
            {
                return m_revisedAggregateConfiguration;
            }

            set
            {
                m_revisedAggregateConfiguration = value;

                if (value == null)
                {
                    m_revisedAggregateConfiguration = new AggregateConfiguration();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AggregateFilterResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AggregateFilterResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AggregateFilterResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("RevisedStartTime", RevisedStartTime);
            encoder.WriteDouble("RevisedProcessingInterval", RevisedProcessingInterval);
            encoder.WriteEncodeable("RevisedAggregateConfiguration", RevisedAggregateConfiguration, typeof(AggregateConfiguration));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RevisedStartTime = decoder.ReadDateTime("RevisedStartTime");
            RevisedProcessingInterval = decoder.ReadDouble("RevisedProcessingInterval");
            RevisedAggregateConfiguration = (AggregateConfiguration)decoder.ReadEncodeable("RevisedAggregateConfiguration", typeof(AggregateConfiguration));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AggregateFilterResult value = encodeable as AggregateFilterResult;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_revisedStartTime, value.m_revisedStartTime)) return false;
            if (!Utils.IsEqual(m_revisedProcessingInterval, value.m_revisedProcessingInterval)) return false;
            if (!Utils.IsEqual(m_revisedAggregateConfiguration, value.m_revisedAggregateConfiguration)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            AggregateFilterResult clone = new AggregateFilterResult();

            clone.m_revisedStartTime = (DateTime)Utils.Clone(this.m_revisedStartTime);
            clone.m_revisedProcessingInterval = (double)Utils.Clone(this.m_revisedProcessingInterval);
            clone.m_revisedAggregateConfiguration = (AggregateConfiguration)Utils.Clone(this.m_revisedAggregateConfiguration);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_revisedStartTime;
        private double m_revisedProcessingInterval;
        private AggregateConfiguration m_revisedAggregateConfiguration;
        #endregion
    }
    #endif
    #endregion

    #region MonitoringParameters Class
    #if (!OPCUA_EXCLUDE_MonitoringParameters)
    /// <summary>
    /// A description for the MonitoringParameters DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoringParameters : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoringParameters()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_clientHandle = (uint)0;
            m_samplingInterval = (double)0;
            m_filter = null;
            m_queueSize = (uint)0;
            m_discardOldest = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ClientHandle field.
        /// </summary>
        [DataMember(Name = "ClientHandle", IsRequired = false, Order = 1)]
        public uint ClientHandle
        {
            get { return m_clientHandle;  }
            set { m_clientHandle = value; }
        }

        /// <summary>
        /// A description for the SamplingInterval field.
        /// </summary>
        [DataMember(Name = "SamplingInterval", IsRequired = false, Order = 2)]
        public double SamplingInterval
        {
            get { return m_samplingInterval;  }
            set { m_samplingInterval = value; }
        }

        /// <summary>
        /// A description for the Filter field.
        /// </summary>
        [DataMember(Name = "Filter", IsRequired = false, Order = 3)]
        public ExtensionObject Filter
        {
            get { return m_filter;  }
            set { m_filter = value; }
        }

        /// <summary>
        /// A description for the QueueSize field.
        /// </summary>
        [DataMember(Name = "QueueSize", IsRequired = false, Order = 4)]
        public uint QueueSize
        {
            get { return m_queueSize;  }
            set { m_queueSize = value; }
        }

        /// <summary>
        /// A description for the DiscardOldest field.
        /// </summary>
        [DataMember(Name = "DiscardOldest", IsRequired = false, Order = 5)]
        public bool DiscardOldest
        {
            get { return m_discardOldest;  }
            set { m_discardOldest = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoringParameters; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoringParameters_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoringParameters_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteDouble("SamplingInterval", SamplingInterval);
            encoder.WriteExtensionObject("Filter", Filter);
            encoder.WriteUInt32("QueueSize", QueueSize);
            encoder.WriteBoolean("DiscardOldest", DiscardOldest);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ClientHandle = decoder.ReadUInt32("ClientHandle");
            SamplingInterval = decoder.ReadDouble("SamplingInterval");
            Filter = decoder.ReadExtensionObject("Filter");
            QueueSize = decoder.ReadUInt32("QueueSize");
            DiscardOldest = decoder.ReadBoolean("DiscardOldest");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoringParameters value = encodeable as MonitoringParameters;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_clientHandle, value.m_clientHandle)) return false;
            if (!Utils.IsEqual(m_samplingInterval, value.m_samplingInterval)) return false;
            if (!Utils.IsEqual(m_filter, value.m_filter)) return false;
            if (!Utils.IsEqual(m_queueSize, value.m_queueSize)) return false;
            if (!Utils.IsEqual(m_discardOldest, value.m_discardOldest)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoringParameters clone = new MonitoringParameters();

            clone.m_clientHandle = (uint)Utils.Clone(this.m_clientHandle);
            clone.m_samplingInterval = (double)Utils.Clone(this.m_samplingInterval);
            clone.m_filter = (ExtensionObject)Utils.Clone(this.m_filter);
            clone.m_queueSize = (uint)Utils.Clone(this.m_queueSize);
            clone.m_discardOldest = (bool)Utils.Clone(this.m_discardOldest);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_clientHandle;
        private double m_samplingInterval;
        private ExtensionObject m_filter;
        private uint m_queueSize;
        private bool m_discardOldest;
        #endregion
    }
    #endif
    #endregion

    #region MonitoredItemCreateRequest Class
    #if (!OPCUA_EXCLUDE_MonitoredItemCreateRequest)
    /// <summary>
    /// A description for the MonitoredItemCreateRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoredItemCreateRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoredItemCreateRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_itemToMonitor = new ReadValueId();
            m_monitoringMode = MonitoringMode.Disabled;
            m_requestedParameters = new MonitoringParameters();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ItemToMonitor field.
        /// </summary>
        [DataMember(Name = "ItemToMonitor", IsRequired = false, Order = 1)]
        public ReadValueId ItemToMonitor
        {
            get
            {
                return m_itemToMonitor;
            }

            set
            {
                m_itemToMonitor = value;

                if (value == null)
                {
                    m_itemToMonitor = new ReadValueId();
                }
            }
        }

        /// <summary>
        /// A description for the MonitoringMode field.
        /// </summary>
        [DataMember(Name = "MonitoringMode", IsRequired = false, Order = 2)]
        public MonitoringMode MonitoringMode
        {
            get { return m_monitoringMode;  }
            set { m_monitoringMode = value; }
        }

        /// <summary>
        /// A description for the RequestedParameters field.
        /// </summary>
        [DataMember(Name = "RequestedParameters", IsRequired = false, Order = 3)]
        public MonitoringParameters RequestedParameters
        {
            get
            {
                return m_requestedParameters;
            }

            set
            {
                m_requestedParameters = value;

                if (value == null)
                {
                    m_requestedParameters = new MonitoringParameters();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoredItemCreateRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoredItemCreateRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoredItemCreateRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ItemToMonitor", ItemToMonitor, typeof(ReadValueId));
            encoder.WriteEnumerated("MonitoringMode", MonitoringMode);
            encoder.WriteEncodeable("RequestedParameters", RequestedParameters, typeof(MonitoringParameters));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ItemToMonitor = (ReadValueId)decoder.ReadEncodeable("ItemToMonitor", typeof(ReadValueId));
            MonitoringMode = (MonitoringMode)decoder.ReadEnumerated("MonitoringMode", typeof(MonitoringMode));
            RequestedParameters = (MonitoringParameters)decoder.ReadEncodeable("RequestedParameters", typeof(MonitoringParameters));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoredItemCreateRequest value = encodeable as MonitoredItemCreateRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_itemToMonitor, value.m_itemToMonitor)) return false;
            if (!Utils.IsEqual(m_monitoringMode, value.m_monitoringMode)) return false;
            if (!Utils.IsEqual(m_requestedParameters, value.m_requestedParameters)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoredItemCreateRequest clone = new MonitoredItemCreateRequest();

            clone.m_itemToMonitor = (ReadValueId)Utils.Clone(this.m_itemToMonitor);
            clone.m_monitoringMode = (MonitoringMode)Utils.Clone(this.m_monitoringMode);
            clone.m_requestedParameters = (MonitoringParameters)Utils.Clone(this.m_requestedParameters);

            return clone;
        }
        #endregion

        #region Private Fields
        private ReadValueId m_itemToMonitor;
        private MonitoringMode m_monitoringMode;
        private MonitoringParameters m_requestedParameters;
        #endregion
    }

    #region MonitoredItemCreateRequestCollection Class
    /// <summary>
    /// A collection of MonitoredItemCreateRequest objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfMonitoredItemCreateRequest", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "MonitoredItemCreateRequest")]
    public partial class MonitoredItemCreateRequestCollection : List<MonitoredItemCreateRequest>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MonitoredItemCreateRequestCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MonitoredItemCreateRequestCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MonitoredItemCreateRequestCollection(IEnumerable<MonitoredItemCreateRequest> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MonitoredItemCreateRequestCollection(MonitoredItemCreateRequest[] values)
        {
            if (values != null)
            {
                return new MonitoredItemCreateRequestCollection(values);
            }

            return new MonitoredItemCreateRequestCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MonitoredItemCreateRequest[](MonitoredItemCreateRequestCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            MonitoredItemCreateRequestCollection clone = new MonitoredItemCreateRequestCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MonitoredItemCreateRequest)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region MonitoredItemCreateResult Class
    #if (!OPCUA_EXCLUDE_MonitoredItemCreateResult)
    /// <summary>
    /// A description for the MonitoredItemCreateResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoredItemCreateResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoredItemCreateResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_monitoredItemId = (uint)0;
            m_revisedSamplingInterval = (double)0;
            m_revisedQueueSize = (uint)0;
            m_filterResult = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the MonitoredItemId field.
        /// </summary>
        [DataMember(Name = "MonitoredItemId", IsRequired = false, Order = 2)]
        public uint MonitoredItemId
        {
            get { return m_monitoredItemId;  }
            set { m_monitoredItemId = value; }
        }

        /// <summary>
        /// A description for the RevisedSamplingInterval field.
        /// </summary>
        [DataMember(Name = "RevisedSamplingInterval", IsRequired = false, Order = 3)]
        public double RevisedSamplingInterval
        {
            get { return m_revisedSamplingInterval;  }
            set { m_revisedSamplingInterval = value; }
        }

        /// <summary>
        /// A description for the RevisedQueueSize field.
        /// </summary>
        [DataMember(Name = "RevisedQueueSize", IsRequired = false, Order = 4)]
        public uint RevisedQueueSize
        {
            get { return m_revisedQueueSize;  }
            set { m_revisedQueueSize = value; }
        }

        /// <summary>
        /// A description for the FilterResult field.
        /// </summary>
        [DataMember(Name = "FilterResult", IsRequired = false, Order = 5)]
        public ExtensionObject FilterResult
        {
            get { return m_filterResult;  }
            set { m_filterResult = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoredItemCreateResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoredItemCreateResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoredItemCreateResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteUInt32("MonitoredItemId", MonitoredItemId);
            encoder.WriteDouble("RevisedSamplingInterval", RevisedSamplingInterval);
            encoder.WriteUInt32("RevisedQueueSize", RevisedQueueSize);
            encoder.WriteExtensionObject("FilterResult", FilterResult);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            MonitoredItemId = decoder.ReadUInt32("MonitoredItemId");
            RevisedSamplingInterval = decoder.ReadDouble("RevisedSamplingInterval");
            RevisedQueueSize = decoder.ReadUInt32("RevisedQueueSize");
            FilterResult = decoder.ReadExtensionObject("FilterResult");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoredItemCreateResult value = encodeable as MonitoredItemCreateResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_monitoredItemId, value.m_monitoredItemId)) return false;
            if (!Utils.IsEqual(m_revisedSamplingInterval, value.m_revisedSamplingInterval)) return false;
            if (!Utils.IsEqual(m_revisedQueueSize, value.m_revisedQueueSize)) return false;
            if (!Utils.IsEqual(m_filterResult, value.m_filterResult)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoredItemCreateResult clone = new MonitoredItemCreateResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_monitoredItemId = (uint)Utils.Clone(this.m_monitoredItemId);
            clone.m_revisedSamplingInterval = (double)Utils.Clone(this.m_revisedSamplingInterval);
            clone.m_revisedQueueSize = (uint)Utils.Clone(this.m_revisedQueueSize);
            clone.m_filterResult = (ExtensionObject)Utils.Clone(this.m_filterResult);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private uint m_monitoredItemId;
        private double m_revisedSamplingInterval;
        private uint m_revisedQueueSize;
        private ExtensionObject m_filterResult;
        #endregion
    }

    #region MonitoredItemCreateResultCollection Class
    /// <summary>
    /// A collection of MonitoredItemCreateResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfMonitoredItemCreateResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "MonitoredItemCreateResult")]
    public partial class MonitoredItemCreateResultCollection : List<MonitoredItemCreateResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MonitoredItemCreateResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MonitoredItemCreateResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MonitoredItemCreateResultCollection(IEnumerable<MonitoredItemCreateResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MonitoredItemCreateResultCollection(MonitoredItemCreateResult[] values)
        {
            if (values != null)
            {
                return new MonitoredItemCreateResultCollection(values);
            }

            return new MonitoredItemCreateResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MonitoredItemCreateResult[](MonitoredItemCreateResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            MonitoredItemCreateResultCollection clone = new MonitoredItemCreateResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MonitoredItemCreateResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region CreateMonitoredItemsRequest Class
    #if (!OPCUA_EXCLUDE_CreateMonitoredItemsRequest)
    /// <summary>
    /// A description for the CreateMonitoredItemsRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateMonitoredItemsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateMonitoredItemsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_timestampsToReturn = TimestampsToReturn.Source;
            m_itemsToCreate = new MonitoredItemCreateRequestCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the TimestampsToReturn field.
        /// </summary>
        [DataMember(Name = "TimestampsToReturn", IsRequired = false, Order = 3)]
        public TimestampsToReturn TimestampsToReturn
        {
            get { return m_timestampsToReturn;  }
            set { m_timestampsToReturn = value; }
        }

        /// <summary>
        /// A description for the ItemsToCreate field.
        /// </summary>
        [DataMember(Name = "ItemsToCreate", IsRequired = false, Order = 4)]
        public MonitoredItemCreateRequestCollection ItemsToCreate
        {
            get
            {
                return m_itemsToCreate;
            }

            set
            {
                m_itemsToCreate = value;

                if (value == null)
                {
                    m_itemsToCreate = new MonitoredItemCreateRequestCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateMonitoredItemsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateMonitoredItemsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateMonitoredItemsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumerated("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodeableArray("ItemsToCreate", ItemsToCreate.ToArray(), typeof(MonitoredItemCreateRequest));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TimestampsToReturn = (TimestampsToReturn)decoder.ReadEnumerated("TimestampsToReturn", typeof(TimestampsToReturn));
            ItemsToCreate = (MonitoredItemCreateRequestCollection)decoder.ReadEncodeableArray("ItemsToCreate", typeof(MonitoredItemCreateRequest));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateMonitoredItemsRequest value = encodeable as CreateMonitoredItemsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_timestampsToReturn, value.m_timestampsToReturn)) return false;
            if (!Utils.IsEqual(m_itemsToCreate, value.m_itemsToCreate)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateMonitoredItemsRequest clone = new CreateMonitoredItemsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_timestampsToReturn = (TimestampsToReturn)Utils.Clone(this.m_timestampsToReturn);
            clone.m_itemsToCreate = (MonitoredItemCreateRequestCollection)Utils.Clone(this.m_itemsToCreate);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private TimestampsToReturn m_timestampsToReturn;
        private MonitoredItemCreateRequestCollection m_itemsToCreate;
        #endregion
    }
    #endif
    #endregion

    #region CreateMonitoredItemsResponse Class
    #if (!OPCUA_EXCLUDE_CreateMonitoredItemsResponse)
    /// <summary>
    /// A description for the CreateMonitoredItemsResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateMonitoredItemsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateMonitoredItemsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new MonitoredItemCreateResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public MonitoredItemCreateResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new MonitoredItemCreateResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateMonitoredItemsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateMonitoredItemsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateMonitoredItemsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(MonitoredItemCreateResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (MonitoredItemCreateResultCollection)decoder.ReadEncodeableArray("Results", typeof(MonitoredItemCreateResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateMonitoredItemsResponse value = encodeable as CreateMonitoredItemsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateMonitoredItemsResponse clone = new CreateMonitoredItemsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (MonitoredItemCreateResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private MonitoredItemCreateResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region MonitoredItemModifyRequest Class
    #if (!OPCUA_EXCLUDE_MonitoredItemModifyRequest)
    /// <summary>
    /// A description for the MonitoredItemModifyRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoredItemModifyRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoredItemModifyRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_monitoredItemId = (uint)0;
            m_requestedParameters = new MonitoringParameters();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the MonitoredItemId field.
        /// </summary>
        [DataMember(Name = "MonitoredItemId", IsRequired = false, Order = 1)]
        public uint MonitoredItemId
        {
            get { return m_monitoredItemId;  }
            set { m_monitoredItemId = value; }
        }

        /// <summary>
        /// A description for the RequestedParameters field.
        /// </summary>
        [DataMember(Name = "RequestedParameters", IsRequired = false, Order = 2)]
        public MonitoringParameters RequestedParameters
        {
            get
            {
                return m_requestedParameters;
            }

            set
            {
                m_requestedParameters = value;

                if (value == null)
                {
                    m_requestedParameters = new MonitoringParameters();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoredItemModifyRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoredItemModifyRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoredItemModifyRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("MonitoredItemId", MonitoredItemId);
            encoder.WriteEncodeable("RequestedParameters", RequestedParameters, typeof(MonitoringParameters));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            MonitoredItemId = decoder.ReadUInt32("MonitoredItemId");
            RequestedParameters = (MonitoringParameters)decoder.ReadEncodeable("RequestedParameters", typeof(MonitoringParameters));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoredItemModifyRequest value = encodeable as MonitoredItemModifyRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_monitoredItemId, value.m_monitoredItemId)) return false;
            if (!Utils.IsEqual(m_requestedParameters, value.m_requestedParameters)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoredItemModifyRequest clone = new MonitoredItemModifyRequest();

            clone.m_monitoredItemId = (uint)Utils.Clone(this.m_monitoredItemId);
            clone.m_requestedParameters = (MonitoringParameters)Utils.Clone(this.m_requestedParameters);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_monitoredItemId;
        private MonitoringParameters m_requestedParameters;
        #endregion
    }

    #region MonitoredItemModifyRequestCollection Class
    /// <summary>
    /// A collection of MonitoredItemModifyRequest objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfMonitoredItemModifyRequest", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "MonitoredItemModifyRequest")]
    public partial class MonitoredItemModifyRequestCollection : List<MonitoredItemModifyRequest>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MonitoredItemModifyRequestCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MonitoredItemModifyRequestCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MonitoredItemModifyRequestCollection(IEnumerable<MonitoredItemModifyRequest> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MonitoredItemModifyRequestCollection(MonitoredItemModifyRequest[] values)
        {
            if (values != null)
            {
                return new MonitoredItemModifyRequestCollection(values);
            }

            return new MonitoredItemModifyRequestCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MonitoredItemModifyRequest[](MonitoredItemModifyRequestCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            MonitoredItemModifyRequestCollection clone = new MonitoredItemModifyRequestCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MonitoredItemModifyRequest)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region MonitoredItemModifyResult Class
    #if (!OPCUA_EXCLUDE_MonitoredItemModifyResult)
    /// <summary>
    /// A description for the MonitoredItemModifyResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoredItemModifyResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoredItemModifyResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_revisedSamplingInterval = (double)0;
            m_revisedQueueSize = (uint)0;
            m_filterResult = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the RevisedSamplingInterval field.
        /// </summary>
        [DataMember(Name = "RevisedSamplingInterval", IsRequired = false, Order = 2)]
        public double RevisedSamplingInterval
        {
            get { return m_revisedSamplingInterval;  }
            set { m_revisedSamplingInterval = value; }
        }

        /// <summary>
        /// A description for the RevisedQueueSize field.
        /// </summary>
        [DataMember(Name = "RevisedQueueSize", IsRequired = false, Order = 3)]
        public uint RevisedQueueSize
        {
            get { return m_revisedQueueSize;  }
            set { m_revisedQueueSize = value; }
        }

        /// <summary>
        /// A description for the FilterResult field.
        /// </summary>
        [DataMember(Name = "FilterResult", IsRequired = false, Order = 4)]
        public ExtensionObject FilterResult
        {
            get { return m_filterResult;  }
            set { m_filterResult = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoredItemModifyResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoredItemModifyResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoredItemModifyResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteDouble("RevisedSamplingInterval", RevisedSamplingInterval);
            encoder.WriteUInt32("RevisedQueueSize", RevisedQueueSize);
            encoder.WriteExtensionObject("FilterResult", FilterResult);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            RevisedSamplingInterval = decoder.ReadDouble("RevisedSamplingInterval");
            RevisedQueueSize = decoder.ReadUInt32("RevisedQueueSize");
            FilterResult = decoder.ReadExtensionObject("FilterResult");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoredItemModifyResult value = encodeable as MonitoredItemModifyResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_revisedSamplingInterval, value.m_revisedSamplingInterval)) return false;
            if (!Utils.IsEqual(m_revisedQueueSize, value.m_revisedQueueSize)) return false;
            if (!Utils.IsEqual(m_filterResult, value.m_filterResult)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoredItemModifyResult clone = new MonitoredItemModifyResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_revisedSamplingInterval = (double)Utils.Clone(this.m_revisedSamplingInterval);
            clone.m_revisedQueueSize = (uint)Utils.Clone(this.m_revisedQueueSize);
            clone.m_filterResult = (ExtensionObject)Utils.Clone(this.m_filterResult);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private double m_revisedSamplingInterval;
        private uint m_revisedQueueSize;
        private ExtensionObject m_filterResult;
        #endregion
    }

    #region MonitoredItemModifyResultCollection Class
    /// <summary>
    /// A collection of MonitoredItemModifyResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfMonitoredItemModifyResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "MonitoredItemModifyResult")]
    public partial class MonitoredItemModifyResultCollection : List<MonitoredItemModifyResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MonitoredItemModifyResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MonitoredItemModifyResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MonitoredItemModifyResultCollection(IEnumerable<MonitoredItemModifyResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MonitoredItemModifyResultCollection(MonitoredItemModifyResult[] values)
        {
            if (values != null)
            {
                return new MonitoredItemModifyResultCollection(values);
            }

            return new MonitoredItemModifyResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MonitoredItemModifyResult[](MonitoredItemModifyResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            MonitoredItemModifyResultCollection clone = new MonitoredItemModifyResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MonitoredItemModifyResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ModifyMonitoredItemsRequest Class
    #if (!OPCUA_EXCLUDE_ModifyMonitoredItemsRequest)
    /// <summary>
    /// A description for the ModifyMonitoredItemsRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModifyMonitoredItemsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModifyMonitoredItemsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_timestampsToReturn = TimestampsToReturn.Source;
            m_itemsToModify = new MonitoredItemModifyRequestCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the TimestampsToReturn field.
        /// </summary>
        [DataMember(Name = "TimestampsToReturn", IsRequired = false, Order = 3)]
        public TimestampsToReturn TimestampsToReturn
        {
            get { return m_timestampsToReturn;  }
            set { m_timestampsToReturn = value; }
        }

        /// <summary>
        /// A description for the ItemsToModify field.
        /// </summary>
        [DataMember(Name = "ItemsToModify", IsRequired = false, Order = 4)]
        public MonitoredItemModifyRequestCollection ItemsToModify
        {
            get
            {
                return m_itemsToModify;
            }

            set
            {
                m_itemsToModify = value;

                if (value == null)
                {
                    m_itemsToModify = new MonitoredItemModifyRequestCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModifyMonitoredItemsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModifyMonitoredItemsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModifyMonitoredItemsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumerated("TimestampsToReturn", TimestampsToReturn);
            encoder.WriteEncodeableArray("ItemsToModify", ItemsToModify.ToArray(), typeof(MonitoredItemModifyRequest));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TimestampsToReturn = (TimestampsToReturn)decoder.ReadEnumerated("TimestampsToReturn", typeof(TimestampsToReturn));
            ItemsToModify = (MonitoredItemModifyRequestCollection)decoder.ReadEncodeableArray("ItemsToModify", typeof(MonitoredItemModifyRequest));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModifyMonitoredItemsRequest value = encodeable as ModifyMonitoredItemsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_timestampsToReturn, value.m_timestampsToReturn)) return false;
            if (!Utils.IsEqual(m_itemsToModify, value.m_itemsToModify)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ModifyMonitoredItemsRequest clone = new ModifyMonitoredItemsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_timestampsToReturn = (TimestampsToReturn)Utils.Clone(this.m_timestampsToReturn);
            clone.m_itemsToModify = (MonitoredItemModifyRequestCollection)Utils.Clone(this.m_itemsToModify);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private TimestampsToReturn m_timestampsToReturn;
        private MonitoredItemModifyRequestCollection m_itemsToModify;
        #endregion
    }
    #endif
    #endregion

    #region ModifyMonitoredItemsResponse Class
    #if (!OPCUA_EXCLUDE_ModifyMonitoredItemsResponse)
    /// <summary>
    /// A description for the ModifyMonitoredItemsResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModifyMonitoredItemsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModifyMonitoredItemsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new MonitoredItemModifyResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public MonitoredItemModifyResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new MonitoredItemModifyResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModifyMonitoredItemsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModifyMonitoredItemsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModifyMonitoredItemsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(MonitoredItemModifyResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (MonitoredItemModifyResultCollection)decoder.ReadEncodeableArray("Results", typeof(MonitoredItemModifyResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModifyMonitoredItemsResponse value = encodeable as ModifyMonitoredItemsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            ModifyMonitoredItemsResponse clone = new ModifyMonitoredItemsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (MonitoredItemModifyResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private MonitoredItemModifyResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region SetMonitoringModeRequest Class
    #if (!OPCUA_EXCLUDE_SetMonitoringModeRequest)
    /// <summary>
    /// A description for the SetMonitoringModeRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetMonitoringModeRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetMonitoringModeRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_monitoringMode = MonitoringMode.Disabled;
            m_monitoredItemIds = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the MonitoringMode field.
        /// </summary>
        [DataMember(Name = "MonitoringMode", IsRequired = false, Order = 3)]
        public MonitoringMode MonitoringMode
        {
            get { return m_monitoringMode;  }
            set { m_monitoringMode = value; }
        }

        /// <summary>
        /// A description for the MonitoredItemIds field.
        /// </summary>
        [DataMember(Name = "MonitoredItemIds", IsRequired = false, Order = 4)]
        public UInt32Collection MonitoredItemIds
        {
            get
            {
                return m_monitoredItemIds;
            }

            set
            {
                m_monitoredItemIds = value;

                if (value == null)
                {
                    m_monitoredItemIds = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetMonitoringModeRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetMonitoringModeRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetMonitoringModeRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteEnumerated("MonitoringMode", MonitoringMode);
            encoder.WriteUInt32Array("MonitoredItemIds", MonitoredItemIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            MonitoringMode = (MonitoringMode)decoder.ReadEnumerated("MonitoringMode", typeof(MonitoringMode));
            MonitoredItemIds = decoder.ReadUInt32Array("MonitoredItemIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetMonitoringModeRequest value = encodeable as SetMonitoringModeRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_monitoringMode, value.m_monitoringMode)) return false;
            if (!Utils.IsEqual(m_monitoredItemIds, value.m_monitoredItemIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SetMonitoringModeRequest clone = new SetMonitoringModeRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_monitoringMode = (MonitoringMode)Utils.Clone(this.m_monitoringMode);
            clone.m_monitoredItemIds = (UInt32Collection)Utils.Clone(this.m_monitoredItemIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private MonitoringMode m_monitoringMode;
        private UInt32Collection m_monitoredItemIds;
        #endregion
    }
    #endif
    #endregion

    #region SetMonitoringModeResponse Class
    #if (!OPCUA_EXCLUDE_SetMonitoringModeResponse)
    /// <summary>
    /// A description for the SetMonitoringModeResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetMonitoringModeResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetMonitoringModeResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetMonitoringModeResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetMonitoringModeResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetMonitoringModeResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetMonitoringModeResponse value = encodeable as SetMonitoringModeResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            SetMonitoringModeResponse clone = new SetMonitoringModeResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region SetTriggeringRequest Class
    #if (!OPCUA_EXCLUDE_SetTriggeringRequest)
    /// <summary>
    /// A description for the SetTriggeringRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetTriggeringRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetTriggeringRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_triggeringItemId = (uint)0;
            m_linksToAdd = new UInt32Collection();
            m_linksToRemove = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the TriggeringItemId field.
        /// </summary>
        [DataMember(Name = "TriggeringItemId", IsRequired = false, Order = 3)]
        public uint TriggeringItemId
        {
            get { return m_triggeringItemId;  }
            set { m_triggeringItemId = value; }
        }

        /// <summary>
        /// A description for the LinksToAdd field.
        /// </summary>
        [DataMember(Name = "LinksToAdd", IsRequired = false, Order = 4)]
        public UInt32Collection LinksToAdd
        {
            get
            {
                return m_linksToAdd;
            }

            set
            {
                m_linksToAdd = value;

                if (value == null)
                {
                    m_linksToAdd = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A description for the LinksToRemove field.
        /// </summary>
        [DataMember(Name = "LinksToRemove", IsRequired = false, Order = 5)]
        public UInt32Collection LinksToRemove
        {
            get
            {
                return m_linksToRemove;
            }

            set
            {
                m_linksToRemove = value;

                if (value == null)
                {
                    m_linksToRemove = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetTriggeringRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetTriggeringRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetTriggeringRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("TriggeringItemId", TriggeringItemId);
            encoder.WriteUInt32Array("LinksToAdd", LinksToAdd);
            encoder.WriteUInt32Array("LinksToRemove", LinksToRemove);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            TriggeringItemId = decoder.ReadUInt32("TriggeringItemId");
            LinksToAdd = decoder.ReadUInt32Array("LinksToAdd");
            LinksToRemove = decoder.ReadUInt32Array("LinksToRemove");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetTriggeringRequest value = encodeable as SetTriggeringRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_triggeringItemId, value.m_triggeringItemId)) return false;
            if (!Utils.IsEqual(m_linksToAdd, value.m_linksToAdd)) return false;
            if (!Utils.IsEqual(m_linksToRemove, value.m_linksToRemove)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SetTriggeringRequest clone = new SetTriggeringRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_triggeringItemId = (uint)Utils.Clone(this.m_triggeringItemId);
            clone.m_linksToAdd = (UInt32Collection)Utils.Clone(this.m_linksToAdd);
            clone.m_linksToRemove = (UInt32Collection)Utils.Clone(this.m_linksToRemove);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private uint m_triggeringItemId;
        private UInt32Collection m_linksToAdd;
        private UInt32Collection m_linksToRemove;
        #endregion
    }
    #endif
    #endregion

    #region SetTriggeringResponse Class
    #if (!OPCUA_EXCLUDE_SetTriggeringResponse)
    /// <summary>
    /// A description for the SetTriggeringResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetTriggeringResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetTriggeringResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_addResults = new StatusCodeCollection();
            m_addDiagnosticInfos = new DiagnosticInfoCollection();
            m_removeResults = new StatusCodeCollection();
            m_removeDiagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the AddResults field.
        /// </summary>
        [DataMember(Name = "AddResults", IsRequired = false, Order = 2)]
        public StatusCodeCollection AddResults
        {
            get
            {
                return m_addResults;
            }

            set
            {
                m_addResults = value;

                if (value == null)
                {
                    m_addResults = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the AddDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "AddDiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection AddDiagnosticInfos
        {
            get
            {
                return m_addDiagnosticInfos;
            }

            set
            {
                m_addDiagnosticInfos = value;

                if (value == null)
                {
                    m_addDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }

        /// <summary>
        /// A description for the RemoveResults field.
        /// </summary>
        [DataMember(Name = "RemoveResults", IsRequired = false, Order = 4)]
        public StatusCodeCollection RemoveResults
        {
            get
            {
                return m_removeResults;
            }

            set
            {
                m_removeResults = value;

                if (value == null)
                {
                    m_removeResults = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the RemoveDiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "RemoveDiagnosticInfos", IsRequired = false, Order = 5)]
        public DiagnosticInfoCollection RemoveDiagnosticInfos
        {
            get
            {
                return m_removeDiagnosticInfos;
            }

            set
            {
                m_removeDiagnosticInfos = value;

                if (value == null)
                {
                    m_removeDiagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetTriggeringResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetTriggeringResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetTriggeringResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("AddResults", AddResults);
            encoder.WriteDiagnosticInfoArray("AddDiagnosticInfos", AddDiagnosticInfos);
            encoder.WriteStatusCodeArray("RemoveResults", RemoveResults);
            encoder.WriteDiagnosticInfoArray("RemoveDiagnosticInfos", RemoveDiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            AddResults = decoder.ReadStatusCodeArray("AddResults");
            AddDiagnosticInfos = decoder.ReadDiagnosticInfoArray("AddDiagnosticInfos");
            RemoveResults = decoder.ReadStatusCodeArray("RemoveResults");
            RemoveDiagnosticInfos = decoder.ReadDiagnosticInfoArray("RemoveDiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetTriggeringResponse value = encodeable as SetTriggeringResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_addResults, value.m_addResults)) return false;
            if (!Utils.IsEqual(m_addDiagnosticInfos, value.m_addDiagnosticInfos)) return false;
            if (!Utils.IsEqual(m_removeResults, value.m_removeResults)) return false;
            if (!Utils.IsEqual(m_removeDiagnosticInfos, value.m_removeDiagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SetTriggeringResponse clone = new SetTriggeringResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_addResults = (StatusCodeCollection)Utils.Clone(this.m_addResults);
            clone.m_addDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_addDiagnosticInfos);
            clone.m_removeResults = (StatusCodeCollection)Utils.Clone(this.m_removeResults);
            clone.m_removeDiagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_removeDiagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_addResults;
        private DiagnosticInfoCollection m_addDiagnosticInfos;
        private StatusCodeCollection m_removeResults;
        private DiagnosticInfoCollection m_removeDiagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region DeleteMonitoredItemsRequest Class
    #if (!OPCUA_EXCLUDE_DeleteMonitoredItemsRequest)
    /// <summary>
    /// A description for the DeleteMonitoredItemsRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteMonitoredItemsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteMonitoredItemsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_monitoredItemIds = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the MonitoredItemIds field.
        /// </summary>
        [DataMember(Name = "MonitoredItemIds", IsRequired = false, Order = 3)]
        public UInt32Collection MonitoredItemIds
        {
            get
            {
                return m_monitoredItemIds;
            }

            set
            {
                m_monitoredItemIds = value;

                if (value == null)
                {
                    m_monitoredItemIds = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteMonitoredItemsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteMonitoredItemsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteMonitoredItemsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32Array("MonitoredItemIds", MonitoredItemIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            MonitoredItemIds = decoder.ReadUInt32Array("MonitoredItemIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteMonitoredItemsRequest value = encodeable as DeleteMonitoredItemsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_monitoredItemIds, value.m_monitoredItemIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteMonitoredItemsRequest clone = new DeleteMonitoredItemsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_monitoredItemIds = (UInt32Collection)Utils.Clone(this.m_monitoredItemIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private UInt32Collection m_monitoredItemIds;
        #endregion
    }
    #endif
    #endregion

    #region DeleteMonitoredItemsResponse Class
    #if (!OPCUA_EXCLUDE_DeleteMonitoredItemsResponse)
    /// <summary>
    /// A description for the DeleteMonitoredItemsResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteMonitoredItemsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteMonitoredItemsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteMonitoredItemsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteMonitoredItemsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteMonitoredItemsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteMonitoredItemsResponse value = encodeable as DeleteMonitoredItemsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteMonitoredItemsResponse clone = new DeleteMonitoredItemsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region CreateSubscriptionRequest Class
    #if (!OPCUA_EXCLUDE_CreateSubscriptionRequest)
    /// <summary>
    /// A description for the CreateSubscriptionRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateSubscriptionRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateSubscriptionRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_requestedPublishingInterval = (double)0;
            m_requestedLifetimeCount = (uint)0;
            m_requestedMaxKeepAliveCount = (uint)0;
            m_maxNotificationsPerPublish = (uint)0;
            m_publishingEnabled = true;
            m_priority = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the RequestedPublishingInterval field.
        /// </summary>
        [DataMember(Name = "RequestedPublishingInterval", IsRequired = false, Order = 2)]
        public double RequestedPublishingInterval
        {
            get { return m_requestedPublishingInterval;  }
            set { m_requestedPublishingInterval = value; }
        }

        /// <summary>
        /// A description for the RequestedLifetimeCount field.
        /// </summary>
        [DataMember(Name = "RequestedLifetimeCount", IsRequired = false, Order = 3)]
        public uint RequestedLifetimeCount
        {
            get { return m_requestedLifetimeCount;  }
            set { m_requestedLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the RequestedMaxKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "RequestedMaxKeepAliveCount", IsRequired = false, Order = 4)]
        public uint RequestedMaxKeepAliveCount
        {
            get { return m_requestedMaxKeepAliveCount;  }
            set { m_requestedMaxKeepAliveCount = value; }
        }

        /// <summary>
        /// A description for the MaxNotificationsPerPublish field.
        /// </summary>
        [DataMember(Name = "MaxNotificationsPerPublish", IsRequired = false, Order = 5)]
        public uint MaxNotificationsPerPublish
        {
            get { return m_maxNotificationsPerPublish;  }
            set { m_maxNotificationsPerPublish = value; }
        }

        /// <summary>
        /// A description for the PublishingEnabled field.
        /// </summary>
        [DataMember(Name = "PublishingEnabled", IsRequired = false, Order = 6)]
        public bool PublishingEnabled
        {
            get { return m_publishingEnabled;  }
            set { m_publishingEnabled = value; }
        }

        /// <summary>
        /// A description for the Priority field.
        /// </summary>
        [DataMember(Name = "Priority", IsRequired = false, Order = 7)]
        public byte Priority
        {
            get { return m_priority;  }
            set { m_priority = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateSubscriptionRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateSubscriptionRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateSubscriptionRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteDouble("RequestedPublishingInterval", RequestedPublishingInterval);
            encoder.WriteUInt32("RequestedLifetimeCount", RequestedLifetimeCount);
            encoder.WriteUInt32("RequestedMaxKeepAliveCount", RequestedMaxKeepAliveCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteByte("Priority", Priority);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            RequestedPublishingInterval = decoder.ReadDouble("RequestedPublishingInterval");
            RequestedLifetimeCount = decoder.ReadUInt32("RequestedLifetimeCount");
            RequestedMaxKeepAliveCount = decoder.ReadUInt32("RequestedMaxKeepAliveCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            Priority = decoder.ReadByte("Priority");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateSubscriptionRequest value = encodeable as CreateSubscriptionRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_requestedPublishingInterval, value.m_requestedPublishingInterval)) return false;
            if (!Utils.IsEqual(m_requestedLifetimeCount, value.m_requestedLifetimeCount)) return false;
            if (!Utils.IsEqual(m_requestedMaxKeepAliveCount, value.m_requestedMaxKeepAliveCount)) return false;
            if (!Utils.IsEqual(m_maxNotificationsPerPublish, value.m_maxNotificationsPerPublish)) return false;
            if (!Utils.IsEqual(m_publishingEnabled, value.m_publishingEnabled)) return false;
            if (!Utils.IsEqual(m_priority, value.m_priority)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateSubscriptionRequest clone = new CreateSubscriptionRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_requestedPublishingInterval = (double)Utils.Clone(this.m_requestedPublishingInterval);
            clone.m_requestedLifetimeCount = (uint)Utils.Clone(this.m_requestedLifetimeCount);
            clone.m_requestedMaxKeepAliveCount = (uint)Utils.Clone(this.m_requestedMaxKeepAliveCount);
            clone.m_maxNotificationsPerPublish = (uint)Utils.Clone(this.m_maxNotificationsPerPublish);
            clone.m_publishingEnabled = (bool)Utils.Clone(this.m_publishingEnabled);
            clone.m_priority = (byte)Utils.Clone(this.m_priority);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private double m_requestedPublishingInterval;
        private uint m_requestedLifetimeCount;
        private uint m_requestedMaxKeepAliveCount;
        private uint m_maxNotificationsPerPublish;
        private bool m_publishingEnabled;
        private byte m_priority;
        #endregion
    }
    #endif
    #endregion

    #region CreateSubscriptionResponse Class
    #if (!OPCUA_EXCLUDE_CreateSubscriptionResponse)
    /// <summary>
    /// A description for the CreateSubscriptionResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CreateSubscriptionResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CreateSubscriptionResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_subscriptionId = (uint)0;
            m_revisedPublishingInterval = (double)0;
            m_revisedLifetimeCount = (uint)0;
            m_revisedMaxKeepAliveCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the RevisedPublishingInterval field.
        /// </summary>
        [DataMember(Name = "RevisedPublishingInterval", IsRequired = false, Order = 3)]
        public double RevisedPublishingInterval
        {
            get { return m_revisedPublishingInterval;  }
            set { m_revisedPublishingInterval = value; }
        }

        /// <summary>
        /// A description for the RevisedLifetimeCount field.
        /// </summary>
        [DataMember(Name = "RevisedLifetimeCount", IsRequired = false, Order = 4)]
        public uint RevisedLifetimeCount
        {
            get { return m_revisedLifetimeCount;  }
            set { m_revisedLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the RevisedMaxKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "RevisedMaxKeepAliveCount", IsRequired = false, Order = 5)]
        public uint RevisedMaxKeepAliveCount
        {
            get { return m_revisedMaxKeepAliveCount;  }
            set { m_revisedMaxKeepAliveCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CreateSubscriptionResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CreateSubscriptionResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CreateSubscriptionResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteDouble("RevisedPublishingInterval", RevisedPublishingInterval);
            encoder.WriteUInt32("RevisedLifetimeCount", RevisedLifetimeCount);
            encoder.WriteUInt32("RevisedMaxKeepAliveCount", RevisedMaxKeepAliveCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RevisedPublishingInterval = decoder.ReadDouble("RevisedPublishingInterval");
            RevisedLifetimeCount = decoder.ReadUInt32("RevisedLifetimeCount");
            RevisedMaxKeepAliveCount = decoder.ReadUInt32("RevisedMaxKeepAliveCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CreateSubscriptionResponse value = encodeable as CreateSubscriptionResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_revisedPublishingInterval, value.m_revisedPublishingInterval)) return false;
            if (!Utils.IsEqual(m_revisedLifetimeCount, value.m_revisedLifetimeCount)) return false;
            if (!Utils.IsEqual(m_revisedMaxKeepAliveCount, value.m_revisedMaxKeepAliveCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CreateSubscriptionResponse clone = new CreateSubscriptionResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_revisedPublishingInterval = (double)Utils.Clone(this.m_revisedPublishingInterval);
            clone.m_revisedLifetimeCount = (uint)Utils.Clone(this.m_revisedLifetimeCount);
            clone.m_revisedMaxKeepAliveCount = (uint)Utils.Clone(this.m_revisedMaxKeepAliveCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private uint m_subscriptionId;
        private double m_revisedPublishingInterval;
        private uint m_revisedLifetimeCount;
        private uint m_revisedMaxKeepAliveCount;
        #endregion
    }
    #endif
    #endregion

    #region ModifySubscriptionRequest Class
    #if (!OPCUA_EXCLUDE_ModifySubscriptionRequest)
    /// <summary>
    /// A description for the ModifySubscriptionRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModifySubscriptionRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModifySubscriptionRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_requestedPublishingInterval = (double)0;
            m_requestedLifetimeCount = (uint)0;
            m_requestedMaxKeepAliveCount = (uint)0;
            m_maxNotificationsPerPublish = (uint)0;
            m_priority = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the RequestedPublishingInterval field.
        /// </summary>
        [DataMember(Name = "RequestedPublishingInterval", IsRequired = false, Order = 3)]
        public double RequestedPublishingInterval
        {
            get { return m_requestedPublishingInterval;  }
            set { m_requestedPublishingInterval = value; }
        }

        /// <summary>
        /// A description for the RequestedLifetimeCount field.
        /// </summary>
        [DataMember(Name = "RequestedLifetimeCount", IsRequired = false, Order = 4)]
        public uint RequestedLifetimeCount
        {
            get { return m_requestedLifetimeCount;  }
            set { m_requestedLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the RequestedMaxKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "RequestedMaxKeepAliveCount", IsRequired = false, Order = 5)]
        public uint RequestedMaxKeepAliveCount
        {
            get { return m_requestedMaxKeepAliveCount;  }
            set { m_requestedMaxKeepAliveCount = value; }
        }

        /// <summary>
        /// A description for the MaxNotificationsPerPublish field.
        /// </summary>
        [DataMember(Name = "MaxNotificationsPerPublish", IsRequired = false, Order = 6)]
        public uint MaxNotificationsPerPublish
        {
            get { return m_maxNotificationsPerPublish;  }
            set { m_maxNotificationsPerPublish = value; }
        }

        /// <summary>
        /// A description for the Priority field.
        /// </summary>
        [DataMember(Name = "Priority", IsRequired = false, Order = 7)]
        public byte Priority
        {
            get { return m_priority;  }
            set { m_priority = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModifySubscriptionRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModifySubscriptionRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModifySubscriptionRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteDouble("RequestedPublishingInterval", RequestedPublishingInterval);
            encoder.WriteUInt32("RequestedLifetimeCount", RequestedLifetimeCount);
            encoder.WriteUInt32("RequestedMaxKeepAliveCount", RequestedMaxKeepAliveCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteByte("Priority", Priority);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RequestedPublishingInterval = decoder.ReadDouble("RequestedPublishingInterval");
            RequestedLifetimeCount = decoder.ReadUInt32("RequestedLifetimeCount");
            RequestedMaxKeepAliveCount = decoder.ReadUInt32("RequestedMaxKeepAliveCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            Priority = decoder.ReadByte("Priority");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModifySubscriptionRequest value = encodeable as ModifySubscriptionRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_requestedPublishingInterval, value.m_requestedPublishingInterval)) return false;
            if (!Utils.IsEqual(m_requestedLifetimeCount, value.m_requestedLifetimeCount)) return false;
            if (!Utils.IsEqual(m_requestedMaxKeepAliveCount, value.m_requestedMaxKeepAliveCount)) return false;
            if (!Utils.IsEqual(m_maxNotificationsPerPublish, value.m_maxNotificationsPerPublish)) return false;
            if (!Utils.IsEqual(m_priority, value.m_priority)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ModifySubscriptionRequest clone = new ModifySubscriptionRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_requestedPublishingInterval = (double)Utils.Clone(this.m_requestedPublishingInterval);
            clone.m_requestedLifetimeCount = (uint)Utils.Clone(this.m_requestedLifetimeCount);
            clone.m_requestedMaxKeepAliveCount = (uint)Utils.Clone(this.m_requestedMaxKeepAliveCount);
            clone.m_maxNotificationsPerPublish = (uint)Utils.Clone(this.m_maxNotificationsPerPublish);
            clone.m_priority = (byte)Utils.Clone(this.m_priority);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private double m_requestedPublishingInterval;
        private uint m_requestedLifetimeCount;
        private uint m_requestedMaxKeepAliveCount;
        private uint m_maxNotificationsPerPublish;
        private byte m_priority;
        #endregion
    }
    #endif
    #endregion

    #region ModifySubscriptionResponse Class
    #if (!OPCUA_EXCLUDE_ModifySubscriptionResponse)
    /// <summary>
    /// A description for the ModifySubscriptionResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModifySubscriptionResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModifySubscriptionResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_revisedPublishingInterval = (double)0;
            m_revisedLifetimeCount = (uint)0;
            m_revisedMaxKeepAliveCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the RevisedPublishingInterval field.
        /// </summary>
        [DataMember(Name = "RevisedPublishingInterval", IsRequired = false, Order = 2)]
        public double RevisedPublishingInterval
        {
            get { return m_revisedPublishingInterval;  }
            set { m_revisedPublishingInterval = value; }
        }

        /// <summary>
        /// A description for the RevisedLifetimeCount field.
        /// </summary>
        [DataMember(Name = "RevisedLifetimeCount", IsRequired = false, Order = 3)]
        public uint RevisedLifetimeCount
        {
            get { return m_revisedLifetimeCount;  }
            set { m_revisedLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the RevisedMaxKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "RevisedMaxKeepAliveCount", IsRequired = false, Order = 4)]
        public uint RevisedMaxKeepAliveCount
        {
            get { return m_revisedMaxKeepAliveCount;  }
            set { m_revisedMaxKeepAliveCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModifySubscriptionResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModifySubscriptionResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModifySubscriptionResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteDouble("RevisedPublishingInterval", RevisedPublishingInterval);
            encoder.WriteUInt32("RevisedLifetimeCount", RevisedLifetimeCount);
            encoder.WriteUInt32("RevisedMaxKeepAliveCount", RevisedMaxKeepAliveCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            RevisedPublishingInterval = decoder.ReadDouble("RevisedPublishingInterval");
            RevisedLifetimeCount = decoder.ReadUInt32("RevisedLifetimeCount");
            RevisedMaxKeepAliveCount = decoder.ReadUInt32("RevisedMaxKeepAliveCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModifySubscriptionResponse value = encodeable as ModifySubscriptionResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_revisedPublishingInterval, value.m_revisedPublishingInterval)) return false;
            if (!Utils.IsEqual(m_revisedLifetimeCount, value.m_revisedLifetimeCount)) return false;
            if (!Utils.IsEqual(m_revisedMaxKeepAliveCount, value.m_revisedMaxKeepAliveCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ModifySubscriptionResponse clone = new ModifySubscriptionResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_revisedPublishingInterval = (double)Utils.Clone(this.m_revisedPublishingInterval);
            clone.m_revisedLifetimeCount = (uint)Utils.Clone(this.m_revisedLifetimeCount);
            clone.m_revisedMaxKeepAliveCount = (uint)Utils.Clone(this.m_revisedMaxKeepAliveCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private double m_revisedPublishingInterval;
        private uint m_revisedLifetimeCount;
        private uint m_revisedMaxKeepAliveCount;
        #endregion
    }
    #endif
    #endregion

    #region SetPublishingModeRequest Class
    #if (!OPCUA_EXCLUDE_SetPublishingModeRequest)
    /// <summary>
    /// A description for the SetPublishingModeRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetPublishingModeRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetPublishingModeRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_publishingEnabled = true;
            m_subscriptionIds = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the PublishingEnabled field.
        /// </summary>
        [DataMember(Name = "PublishingEnabled", IsRequired = false, Order = 2)]
        public bool PublishingEnabled
        {
            get { return m_publishingEnabled;  }
            set { m_publishingEnabled = value; }
        }

        /// <summary>
        /// A description for the SubscriptionIds field.
        /// </summary>
        [DataMember(Name = "SubscriptionIds", IsRequired = false, Order = 3)]
        public UInt32Collection SubscriptionIds
        {
            get
            {
                return m_subscriptionIds;
            }

            set
            {
                m_subscriptionIds = value;

                if (value == null)
                {
                    m_subscriptionIds = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetPublishingModeRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetPublishingModeRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetPublishingModeRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetPublishingModeRequest value = encodeable as SetPublishingModeRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_publishingEnabled, value.m_publishingEnabled)) return false;
            if (!Utils.IsEqual(m_subscriptionIds, value.m_subscriptionIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SetPublishingModeRequest clone = new SetPublishingModeRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_publishingEnabled = (bool)Utils.Clone(this.m_publishingEnabled);
            clone.m_subscriptionIds = (UInt32Collection)Utils.Clone(this.m_subscriptionIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private bool m_publishingEnabled;
        private UInt32Collection m_subscriptionIds;
        #endregion
    }
    #endif
    #endregion

    #region SetPublishingModeResponse Class
    #if (!OPCUA_EXCLUDE_SetPublishingModeResponse)
    /// <summary>
    /// A description for the SetPublishingModeResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SetPublishingModeResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SetPublishingModeResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SetPublishingModeResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SetPublishingModeResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SetPublishingModeResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SetPublishingModeResponse value = encodeable as SetPublishingModeResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SetPublishingModeResponse clone = new SetPublishingModeResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region NotificationMessage Class
    #if (!OPCUA_EXCLUDE_NotificationMessage)
    /// <summary>
    /// A description for the NotificationMessage DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NotificationMessage : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NotificationMessage()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sequenceNumber = (uint)0;
            m_publishTime = DateTime.MinValue;
            m_notificationData = new ExtensionObjectCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SequenceNumber field.
        /// </summary>
        [DataMember(Name = "SequenceNumber", IsRequired = false, Order = 1)]
        public uint SequenceNumber
        {
            get { return m_sequenceNumber;  }
            set { m_sequenceNumber = value; }
        }

        /// <summary>
        /// A description for the PublishTime field.
        /// </summary>
        [DataMember(Name = "PublishTime", IsRequired = false, Order = 2)]
        public DateTime PublishTime
        {
            get { return m_publishTime;  }
            set { m_publishTime = value; }
        }

        /// <summary>
        /// A description for the NotificationData field.
        /// </summary>
        [DataMember(Name = "NotificationData", IsRequired = false, Order = 3)]
        public ExtensionObjectCollection NotificationData
        {
            get
            {
                return m_notificationData;
            }

            set
            {
                m_notificationData = value;

                if (value == null)
                {
                    m_notificationData = new ExtensionObjectCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NotificationMessage; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NotificationMessage_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NotificationMessage_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("SequenceNumber", SequenceNumber);
            encoder.WriteDateTime("PublishTime", PublishTime);
            encoder.WriteExtensionObjectArray("NotificationData", NotificationData);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SequenceNumber = decoder.ReadUInt32("SequenceNumber");
            PublishTime = decoder.ReadDateTime("PublishTime");
            NotificationData = decoder.ReadExtensionObjectArray("NotificationData");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NotificationMessage value = encodeable as NotificationMessage;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sequenceNumber, value.m_sequenceNumber)) return false;
            if (!Utils.IsEqual(m_publishTime, value.m_publishTime)) return false;
            if (!Utils.IsEqual(m_notificationData, value.m_notificationData)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            NotificationMessage clone = new NotificationMessage();

            clone.m_sequenceNumber = (uint)Utils.Clone(this.m_sequenceNumber);
            clone.m_publishTime = (DateTime)Utils.Clone(this.m_publishTime);
            clone.m_notificationData = (ExtensionObjectCollection)Utils.Clone(this.m_notificationData);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_sequenceNumber;
        private DateTime m_publishTime;
        private ExtensionObjectCollection m_notificationData;
        #endregion
    }
    #endif
    #endregion

    #region NotificationData Class
    #if (!OPCUA_EXCLUDE_NotificationData)
    /// <summary>
    /// A description for the NotificationData DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NotificationData : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NotificationData()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
        }
        #endregion

        #region Public Properties
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NotificationData; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NotificationData_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NotificationData_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);


            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NotificationData value = encodeable as NotificationData;

            if (value == null)
            {
                return false;
            }


            return true;
        }

        public new object MemberwiseClone()
        {
            NotificationData clone = new NotificationData();


            return clone;
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DataChangeNotification Class
    #if (!OPCUA_EXCLUDE_DataChangeNotification)
    /// <summary>
    /// A description for the DataChangeNotification DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DataChangeNotification : NotificationData
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DataChangeNotification()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_monitoredItems = new MonitoredItemNotificationCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the MonitoredItems field.
        /// </summary>
        [DataMember(Name = "MonitoredItems", IsRequired = false, Order = 1)]
        public MonitoredItemNotificationCollection MonitoredItems
        {
            get
            {
                return m_monitoredItems;
            }

            set
            {
                m_monitoredItems = value;

                if (value == null)
                {
                    m_monitoredItems = new MonitoredItemNotificationCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 2)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DataChangeNotification; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DataChangeNotification_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DataChangeNotification_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("MonitoredItems", MonitoredItems.ToArray(), typeof(MonitoredItemNotification));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            MonitoredItems = (MonitoredItemNotificationCollection)decoder.ReadEncodeableArray("MonitoredItems", typeof(MonitoredItemNotification));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DataChangeNotification value = encodeable as DataChangeNotification;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_monitoredItems, value.m_monitoredItems)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DataChangeNotification clone = new DataChangeNotification();

            clone.m_monitoredItems = (MonitoredItemNotificationCollection)Utils.Clone(this.m_monitoredItems);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private MonitoredItemNotificationCollection m_monitoredItems;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region MonitoredItemNotification Class
    #if (!OPCUA_EXCLUDE_MonitoredItemNotification)
    /// <summary>
    /// A description for the MonitoredItemNotification DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class MonitoredItemNotification : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public MonitoredItemNotification()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_clientHandle = (uint)0;
            m_value = new DataValue();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ClientHandle field.
        /// </summary>
        [DataMember(Name = "ClientHandle", IsRequired = false, Order = 1)]
        public uint ClientHandle
        {
            get { return m_clientHandle;  }
            set { m_clientHandle = value; }
        }

        /// <summary>
        /// A description for the Value field.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 2)]
        public DataValue Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.MonitoredItemNotification; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.MonitoredItemNotification_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.MonitoredItemNotification_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteDataValue("Value", Value);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ClientHandle = decoder.ReadUInt32("ClientHandle");
            Value = decoder.ReadDataValue("Value");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            MonitoredItemNotification value = encodeable as MonitoredItemNotification;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_clientHandle, value.m_clientHandle)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            MonitoredItemNotification clone = new MonitoredItemNotification();

            clone.m_clientHandle = (uint)Utils.Clone(this.m_clientHandle);
            clone.m_value = (DataValue)Utils.Clone(this.m_value);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_clientHandle;
        private DataValue m_value;
        #endregion
    }

    #region MonitoredItemNotificationCollection Class
    /// <summary>
    /// A collection of MonitoredItemNotification objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfMonitoredItemNotification", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "MonitoredItemNotification")]
    public partial class MonitoredItemNotificationCollection : List<MonitoredItemNotification>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public MonitoredItemNotificationCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public MonitoredItemNotificationCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public MonitoredItemNotificationCollection(IEnumerable<MonitoredItemNotification> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator MonitoredItemNotificationCollection(MonitoredItemNotification[] values)
        {
            if (values != null)
            {
                return new MonitoredItemNotificationCollection(values);
            }

            return new MonitoredItemNotificationCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator MonitoredItemNotification[](MonitoredItemNotificationCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            MonitoredItemNotificationCollection clone = new MonitoredItemNotificationCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((MonitoredItemNotification)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region EventNotificationList Class
    #if (!OPCUA_EXCLUDE_EventNotificationList)
    /// <summary>
    /// A description for the EventNotificationList DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EventNotificationList : NotificationData
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EventNotificationList()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_events = new EventFieldListCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Events field.
        /// </summary>
        [DataMember(Name = "Events", IsRequired = false, Order = 1)]
        public EventFieldListCollection Events
        {
            get
            {
                return m_events;
            }

            set
            {
                m_events = value;

                if (value == null)
                {
                    m_events = new EventFieldListCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EventNotificationList; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EventNotificationList_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EventNotificationList_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeableArray("Events", Events.ToArray(), typeof(EventFieldList));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Events = (EventFieldListCollection)decoder.ReadEncodeableArray("Events", typeof(EventFieldList));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EventNotificationList value = encodeable as EventNotificationList;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_events, value.m_events)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EventNotificationList clone = new EventNotificationList();

            clone.m_events = (EventFieldListCollection)Utils.Clone(this.m_events);

            return clone;
        }
        #endregion

        #region Private Fields
        private EventFieldListCollection m_events;
        #endregion
    }
    #endif
    #endregion

    #region EventFieldList Class
    #if (!OPCUA_EXCLUDE_EventFieldList)
    /// <summary>
    /// A description for the EventFieldList DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EventFieldList : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EventFieldList()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_clientHandle = (uint)0;
            m_eventFields = new VariantCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ClientHandle field.
        /// </summary>
        [DataMember(Name = "ClientHandle", IsRequired = false, Order = 1)]
        public uint ClientHandle
        {
            get { return m_clientHandle;  }
            set { m_clientHandle = value; }
        }

        /// <summary>
        /// A description for the EventFields field.
        /// </summary>
        [DataMember(Name = "EventFields", IsRequired = false, Order = 2)]
        public VariantCollection EventFields
        {
            get
            {
                return m_eventFields;
            }

            set
            {
                m_eventFields = value;

                if (value == null)
                {
                    m_eventFields = new VariantCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EventFieldList; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EventFieldList_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EventFieldList_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("ClientHandle", ClientHandle);
            encoder.WriteVariantArray("EventFields", EventFields);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ClientHandle = decoder.ReadUInt32("ClientHandle");
            EventFields = decoder.ReadVariantArray("EventFields");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EventFieldList value = encodeable as EventFieldList;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_clientHandle, value.m_clientHandle)) return false;
            if (!Utils.IsEqual(m_eventFields, value.m_eventFields)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EventFieldList clone = new EventFieldList();

            clone.m_clientHandle = (uint)Utils.Clone(this.m_clientHandle);
            clone.m_eventFields = (VariantCollection)Utils.Clone(this.m_eventFields);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_clientHandle;
        private VariantCollection m_eventFields;
        #endregion
    }

    #region EventFieldListCollection Class
    /// <summary>
    /// A collection of EventFieldList objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEventFieldList", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EventFieldList")]
    public partial class EventFieldListCollection : List<EventFieldList>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EventFieldListCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EventFieldListCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EventFieldListCollection(IEnumerable<EventFieldList> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EventFieldListCollection(EventFieldList[] values)
        {
            if (values != null)
            {
                return new EventFieldListCollection(values);
            }

            return new EventFieldListCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EventFieldList[](EventFieldListCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EventFieldListCollection clone = new EventFieldListCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EventFieldList)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region HistoryEventFieldList Class
    #if (!OPCUA_EXCLUDE_HistoryEventFieldList)
    /// <summary>
    /// A description for the HistoryEventFieldList DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class HistoryEventFieldList : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public HistoryEventFieldList()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_eventFields = new VariantCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the EventFields field.
        /// </summary>
        [DataMember(Name = "EventFields", IsRequired = false, Order = 1)]
        public VariantCollection EventFields
        {
            get
            {
                return m_eventFields;
            }

            set
            {
                m_eventFields = value;

                if (value == null)
                {
                    m_eventFields = new VariantCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.HistoryEventFieldList; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.HistoryEventFieldList_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.HistoryEventFieldList_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteVariantArray("EventFields", EventFields);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EventFields = decoder.ReadVariantArray("EventFields");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            HistoryEventFieldList value = encodeable as HistoryEventFieldList;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_eventFields, value.m_eventFields)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            HistoryEventFieldList clone = new HistoryEventFieldList();

            clone.m_eventFields = (VariantCollection)Utils.Clone(this.m_eventFields);

            return clone;
        }
        #endregion

        #region Private Fields
        private VariantCollection m_eventFields;
        #endregion
    }

    #region HistoryEventFieldListCollection Class
    /// <summary>
    /// A collection of HistoryEventFieldList objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfHistoryEventFieldList", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "HistoryEventFieldList")]
    public partial class HistoryEventFieldListCollection : List<HistoryEventFieldList>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public HistoryEventFieldListCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public HistoryEventFieldListCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public HistoryEventFieldListCollection(IEnumerable<HistoryEventFieldList> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator HistoryEventFieldListCollection(HistoryEventFieldList[] values)
        {
            if (values != null)
            {
                return new HistoryEventFieldListCollection(values);
            }

            return new HistoryEventFieldListCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator HistoryEventFieldList[](HistoryEventFieldListCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            HistoryEventFieldListCollection clone = new HistoryEventFieldListCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((HistoryEventFieldList)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region StatusChangeNotification Class
    #if (!OPCUA_EXCLUDE_StatusChangeNotification)
    /// <summary>
    /// A description for the StatusChangeNotification DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class StatusChangeNotification : NotificationData
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public StatusChangeNotification()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_status = StatusCodes.Good;
            m_diagnosticInfo = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Status field.
        /// </summary>
        [DataMember(Name = "Status", IsRequired = false, Order = 1)]
        public StatusCode Status
        {
            get { return m_status;  }
            set { m_status = value; }
        }

        /// <summary>
        /// A description for the DiagnosticInfo field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfo", IsRequired = false, Order = 2)]
        public DiagnosticInfo DiagnosticInfo
        {
            get { return m_diagnosticInfo;  }
            set { m_diagnosticInfo = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public override ExpandedNodeId TypeId
        {
            get { return DataTypeIds.StatusChangeNotification; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public override ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.StatusChangeNotification_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public override ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.StatusChangeNotification_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public override void Encode(IEncoder encoder)
        {
            base.Encode(encoder);

            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("Status", Status);
            encoder.WriteDiagnosticInfo("DiagnosticInfo", DiagnosticInfo);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public override void Decode(IDecoder decoder)
        {
            base.Decode(decoder);

            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Status = decoder.ReadStatusCode("Status");
            DiagnosticInfo = decoder.ReadDiagnosticInfo("DiagnosticInfo");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public override bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            StatusChangeNotification value = encodeable as StatusChangeNotification;

            if (value == null)
            {
                return false;
            }

            if (!base.IsEqual(encodeable)) return false;
            if (!Utils.IsEqual(m_status, value.m_status)) return false;
            if (!Utils.IsEqual(m_diagnosticInfo, value.m_diagnosticInfo)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            StatusChangeNotification clone = new StatusChangeNotification();

            clone.m_status = (StatusCode)Utils.Clone(this.m_status);
            clone.m_diagnosticInfo = (DiagnosticInfo)Utils.Clone(this.m_diagnosticInfo);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_status;
        private DiagnosticInfo m_diagnosticInfo;
        #endregion
    }
    #endif
    #endregion

    #region SubscriptionAcknowledgement Class
    #if (!OPCUA_EXCLUDE_SubscriptionAcknowledgement)
    /// <summary>
    /// A description for the SubscriptionAcknowledgement DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SubscriptionAcknowledgement : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SubscriptionAcknowledgement()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_subscriptionId = (uint)0;
            m_sequenceNumber = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 1)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the SequenceNumber field.
        /// </summary>
        [DataMember(Name = "SequenceNumber", IsRequired = false, Order = 2)]
        public uint SequenceNumber
        {
            get { return m_sequenceNumber;  }
            set { m_sequenceNumber = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SubscriptionAcknowledgement; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SubscriptionAcknowledgement_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SubscriptionAcknowledgement_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("SequenceNumber", SequenceNumber);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            SequenceNumber = decoder.ReadUInt32("SequenceNumber");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SubscriptionAcknowledgement value = encodeable as SubscriptionAcknowledgement;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_sequenceNumber, value.m_sequenceNumber)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SubscriptionAcknowledgement clone = new SubscriptionAcknowledgement();

            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_sequenceNumber = (uint)Utils.Clone(this.m_sequenceNumber);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_subscriptionId;
        private uint m_sequenceNumber;
        #endregion
    }

    #region SubscriptionAcknowledgementCollection Class
    /// <summary>
    /// A collection of SubscriptionAcknowledgement objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSubscriptionAcknowledgement", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SubscriptionAcknowledgement")]
    public partial class SubscriptionAcknowledgementCollection : List<SubscriptionAcknowledgement>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SubscriptionAcknowledgementCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SubscriptionAcknowledgementCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SubscriptionAcknowledgementCollection(IEnumerable<SubscriptionAcknowledgement> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SubscriptionAcknowledgementCollection(SubscriptionAcknowledgement[] values)
        {
            if (values != null)
            {
                return new SubscriptionAcknowledgementCollection(values);
            }

            return new SubscriptionAcknowledgementCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SubscriptionAcknowledgement[](SubscriptionAcknowledgementCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SubscriptionAcknowledgementCollection clone = new SubscriptionAcknowledgementCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SubscriptionAcknowledgement)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region PublishRequest Class
    #if (!OPCUA_EXCLUDE_PublishRequest)
    /// <summary>
    /// A description for the PublishRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class PublishRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public PublishRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionAcknowledgements = new SubscriptionAcknowledgementCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionAcknowledgements field.
        /// </summary>
        [DataMember(Name = "SubscriptionAcknowledgements", IsRequired = false, Order = 2)]
        public SubscriptionAcknowledgementCollection SubscriptionAcknowledgements
        {
            get
            {
                return m_subscriptionAcknowledgements;
            }

            set
            {
                m_subscriptionAcknowledgements = value;

                if (value == null)
                {
                    m_subscriptionAcknowledgements = new SubscriptionAcknowledgementCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PublishRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PublishRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PublishRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteEncodeableArray("SubscriptionAcknowledgements", SubscriptionAcknowledgements.ToArray(), typeof(SubscriptionAcknowledgement));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionAcknowledgements = (SubscriptionAcknowledgementCollection)decoder.ReadEncodeableArray("SubscriptionAcknowledgements", typeof(SubscriptionAcknowledgement));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PublishRequest value = encodeable as PublishRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionAcknowledgements, value.m_subscriptionAcknowledgements)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            PublishRequest clone = new PublishRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionAcknowledgements = (SubscriptionAcknowledgementCollection)Utils.Clone(this.m_subscriptionAcknowledgements);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private SubscriptionAcknowledgementCollection m_subscriptionAcknowledgements;
        #endregion
    }
    #endif
    #endregion

    #region PublishResponse Class
    #if (!OPCUA_EXCLUDE_PublishResponse)
    /// <summary>
    /// A description for the PublishResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class PublishResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public PublishResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_subscriptionId = (uint)0;
            m_availableSequenceNumbers = new UInt32Collection();
            m_moreNotifications = true;
            m_notificationMessage = new NotificationMessage();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the AvailableSequenceNumbers field.
        /// </summary>
        [DataMember(Name = "AvailableSequenceNumbers", IsRequired = false, Order = 3)]
        public UInt32Collection AvailableSequenceNumbers
        {
            get
            {
                return m_availableSequenceNumbers;
            }

            set
            {
                m_availableSequenceNumbers = value;

                if (value == null)
                {
                    m_availableSequenceNumbers = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A description for the MoreNotifications field.
        /// </summary>
        [DataMember(Name = "MoreNotifications", IsRequired = false, Order = 4)]
        public bool MoreNotifications
        {
            get { return m_moreNotifications;  }
            set { m_moreNotifications = value; }
        }

        /// <summary>
        /// A description for the NotificationMessage field.
        /// </summary>
        [DataMember(Name = "NotificationMessage", IsRequired = false, Order = 5)]
        public NotificationMessage NotificationMessage
        {
            get
            {
                return m_notificationMessage;
            }

            set
            {
                m_notificationMessage = value;

                if (value == null)
                {
                    m_notificationMessage = new NotificationMessage();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 6)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 7)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.PublishResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.PublishResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.PublishResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32Array("AvailableSequenceNumbers", AvailableSequenceNumbers);
            encoder.WriteBoolean("MoreNotifications", MoreNotifications);
            encoder.WriteEncodeable("NotificationMessage", NotificationMessage, typeof(NotificationMessage));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            AvailableSequenceNumbers = decoder.ReadUInt32Array("AvailableSequenceNumbers");
            MoreNotifications = decoder.ReadBoolean("MoreNotifications");
            NotificationMessage = (NotificationMessage)decoder.ReadEncodeable("NotificationMessage", typeof(NotificationMessage));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            PublishResponse value = encodeable as PublishResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_availableSequenceNumbers, value.m_availableSequenceNumbers)) return false;
            if (!Utils.IsEqual(m_moreNotifications, value.m_moreNotifications)) return false;
            if (!Utils.IsEqual(m_notificationMessage, value.m_notificationMessage)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            PublishResponse clone = new PublishResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_availableSequenceNumbers = (UInt32Collection)Utils.Clone(this.m_availableSequenceNumbers);
            clone.m_moreNotifications = (bool)Utils.Clone(this.m_moreNotifications);
            clone.m_notificationMessage = (NotificationMessage)Utils.Clone(this.m_notificationMessage);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private uint m_subscriptionId;
        private UInt32Collection m_availableSequenceNumbers;
        private bool m_moreNotifications;
        private NotificationMessage m_notificationMessage;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region RepublishRequest Class
    #if (!OPCUA_EXCLUDE_RepublishRequest)
    /// <summary>
    /// A description for the RepublishRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RepublishRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RepublishRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionId = (uint)0;
            m_retransmitSequenceNumber = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the RetransmitSequenceNumber field.
        /// </summary>
        [DataMember(Name = "RetransmitSequenceNumber", IsRequired = false, Order = 3)]
        public uint RetransmitSequenceNumber
        {
            get { return m_retransmitSequenceNumber;  }
            set { m_retransmitSequenceNumber = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RepublishRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RepublishRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RepublishRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteUInt32("RetransmitSequenceNumber", RetransmitSequenceNumber);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            RetransmitSequenceNumber = decoder.ReadUInt32("RetransmitSequenceNumber");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RepublishRequest value = encodeable as RepublishRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_retransmitSequenceNumber, value.m_retransmitSequenceNumber)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RepublishRequest clone = new RepublishRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_retransmitSequenceNumber = (uint)Utils.Clone(this.m_retransmitSequenceNumber);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_subscriptionId;
        private uint m_retransmitSequenceNumber;
        #endregion
    }
    #endif
    #endregion

    #region RepublishResponse Class
    #if (!OPCUA_EXCLUDE_RepublishResponse)
    /// <summary>
    /// A description for the RepublishResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RepublishResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RepublishResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_notificationMessage = new NotificationMessage();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the NotificationMessage field.
        /// </summary>
        [DataMember(Name = "NotificationMessage", IsRequired = false, Order = 2)]
        public NotificationMessage NotificationMessage
        {
            get
            {
                return m_notificationMessage;
            }

            set
            {
                m_notificationMessage = value;

                if (value == null)
                {
                    m_notificationMessage = new NotificationMessage();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RepublishResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RepublishResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RepublishResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeable("NotificationMessage", NotificationMessage, typeof(NotificationMessage));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            NotificationMessage = (NotificationMessage)decoder.ReadEncodeable("NotificationMessage", typeof(NotificationMessage));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RepublishResponse value = encodeable as RepublishResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_notificationMessage, value.m_notificationMessage)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RepublishResponse clone = new RepublishResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_notificationMessage = (NotificationMessage)Utils.Clone(this.m_notificationMessage);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private NotificationMessage m_notificationMessage;
        #endregion
    }
    #endif
    #endregion

    #region TransferResult Class
    #if (!OPCUA_EXCLUDE_TransferResult)
    /// <summary>
    /// A description for the TransferResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TransferResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TransferResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_availableSequenceNumbers = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the AvailableSequenceNumbers field.
        /// </summary>
        [DataMember(Name = "AvailableSequenceNumbers", IsRequired = false, Order = 2)]
        public UInt32Collection AvailableSequenceNumbers
        {
            get
            {
                return m_availableSequenceNumbers;
            }

            set
            {
                m_availableSequenceNumbers = value;

                if (value == null)
                {
                    m_availableSequenceNumbers = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TransferResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TransferResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TransferResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteUInt32Array("AvailableSequenceNumbers", AvailableSequenceNumbers);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            AvailableSequenceNumbers = decoder.ReadUInt32Array("AvailableSequenceNumbers");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TransferResult value = encodeable as TransferResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_availableSequenceNumbers, value.m_availableSequenceNumbers)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TransferResult clone = new TransferResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_availableSequenceNumbers = (UInt32Collection)Utils.Clone(this.m_availableSequenceNumbers);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private UInt32Collection m_availableSequenceNumbers;
        #endregion
    }

    #region TransferResultCollection Class
    /// <summary>
    /// A collection of TransferResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfTransferResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "TransferResult")]
    public partial class TransferResultCollection : List<TransferResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public TransferResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public TransferResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public TransferResultCollection(IEnumerable<TransferResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator TransferResultCollection(TransferResult[] values)
        {
            if (values != null)
            {
                return new TransferResultCollection(values);
            }

            return new TransferResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator TransferResult[](TransferResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            TransferResultCollection clone = new TransferResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((TransferResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region TransferSubscriptionsRequest Class
    #if (!OPCUA_EXCLUDE_TransferSubscriptionsRequest)
    /// <summary>
    /// A description for the TransferSubscriptionsRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TransferSubscriptionsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TransferSubscriptionsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionIds = new UInt32Collection();
            m_sendInitialValues = true;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionIds field.
        /// </summary>
        [DataMember(Name = "SubscriptionIds", IsRequired = false, Order = 2)]
        public UInt32Collection SubscriptionIds
        {
            get
            {
                return m_subscriptionIds;
            }

            set
            {
                m_subscriptionIds = value;

                if (value == null)
                {
                    m_subscriptionIds = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A description for the SendInitialValues field.
        /// </summary>
        [DataMember(Name = "SendInitialValues", IsRequired = false, Order = 3)]
        public bool SendInitialValues
        {
            get { return m_sendInitialValues;  }
            set { m_sendInitialValues = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TransferSubscriptionsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TransferSubscriptionsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TransferSubscriptionsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);
            encoder.WriteBoolean("SendInitialValues", SendInitialValues);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");
            SendInitialValues = decoder.ReadBoolean("SendInitialValues");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TransferSubscriptionsRequest value = encodeable as TransferSubscriptionsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionIds, value.m_subscriptionIds)) return false;
            if (!Utils.IsEqual(m_sendInitialValues, value.m_sendInitialValues)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TransferSubscriptionsRequest clone = new TransferSubscriptionsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionIds = (UInt32Collection)Utils.Clone(this.m_subscriptionIds);
            clone.m_sendInitialValues = (bool)Utils.Clone(this.m_sendInitialValues);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private UInt32Collection m_subscriptionIds;
        private bool m_sendInitialValues;
        #endregion
    }
    #endif
    #endregion

    #region TransferSubscriptionsResponse Class
    #if (!OPCUA_EXCLUDE_TransferSubscriptionsResponse)
    /// <summary>
    /// A description for the TransferSubscriptionsResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TransferSubscriptionsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TransferSubscriptionsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new TransferResultCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public TransferResultCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new TransferResultCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TransferSubscriptionsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TransferSubscriptionsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TransferSubscriptionsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeableArray("Results", Results.ToArray(), typeof(TransferResult));
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = (TransferResultCollection)decoder.ReadEncodeableArray("Results", typeof(TransferResult));
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TransferSubscriptionsResponse value = encodeable as TransferSubscriptionsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TransferSubscriptionsResponse clone = new TransferSubscriptionsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (TransferResultCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private TransferResultCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region DeleteSubscriptionsRequest Class
    #if (!OPCUA_EXCLUDE_DeleteSubscriptionsRequest)
    /// <summary>
    /// A description for the DeleteSubscriptionsRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteSubscriptionsRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteSubscriptionsRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_subscriptionIds = new UInt32Collection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the SubscriptionIds field.
        /// </summary>
        [DataMember(Name = "SubscriptionIds", IsRequired = false, Order = 2)]
        public UInt32Collection SubscriptionIds
        {
            get
            {
                return m_subscriptionIds;
            }

            set
            {
                m_subscriptionIds = value;

                if (value == null)
                {
                    m_subscriptionIds = new UInt32Collection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteSubscriptionsRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteSubscriptionsRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteSubscriptionsRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32Array("SubscriptionIds", SubscriptionIds);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            SubscriptionIds = decoder.ReadUInt32Array("SubscriptionIds");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteSubscriptionsRequest value = encodeable as DeleteSubscriptionsRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_subscriptionIds, value.m_subscriptionIds)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteSubscriptionsRequest clone = new DeleteSubscriptionsRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_subscriptionIds = (UInt32Collection)Utils.Clone(this.m_subscriptionIds);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private UInt32Collection m_subscriptionIds;
        #endregion
    }
    #endif
    #endregion

    #region DeleteSubscriptionsResponse Class
    #if (!OPCUA_EXCLUDE_DeleteSubscriptionsResponse)
    /// <summary>
    /// A description for the DeleteSubscriptionsResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DeleteSubscriptionsResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DeleteSubscriptionsResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_results = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Results field.
        /// </summary>
        [DataMember(Name = "Results", IsRequired = false, Order = 2)]
        public StatusCodeCollection Results
        {
            get
            {
                return m_results;
            }

            set
            {
                m_results = value;

                if (value == null)
                {
                    m_results = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 3)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DeleteSubscriptionsResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DeleteSubscriptionsResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DeleteSubscriptionsResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteStatusCodeArray("Results", Results);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Results = decoder.ReadStatusCodeArray("Results");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DeleteSubscriptionsResponse value = encodeable as DeleteSubscriptionsResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_results, value.m_results)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DeleteSubscriptionsResponse clone = new DeleteSubscriptionsResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_results = (StatusCodeCollection)Utils.Clone(this.m_results);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private StatusCodeCollection m_results;
        private DiagnosticInfoCollection m_diagnosticInfos;
        #endregion
    }
    #endif
    #endregion

    #region EnumeratedTestType Enumeration
    #if (!OPCUA_EXCLUDE_EnumeratedTestType)
    /// <summary>
    /// A simple enumerated type used for testing.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum EnumeratedTestType
    {
        /// <summary>
        /// Operation has halted.
        /// </summary>
        [EnumMember(Value = "Red_1")]
        Red = 1,

        /// <summary>
        /// Operation is proceeding with caution.
        /// </summary>
        [EnumMember(Value = "Yellow_4")]
        Yellow = 4,

        /// <summary>
        /// Operation is proceeding normally.
        /// </summary>
        [EnumMember(Value = "Green_5")]
        Green = 5,
    }

    #region EnumeratedTestTypeCollection Class
    /// <summary>
    /// A collection of EnumeratedTestType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEnumeratedTestType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EnumeratedTestType")]
    public partial class EnumeratedTestTypeCollection : List<EnumeratedTestType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EnumeratedTestTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EnumeratedTestTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EnumeratedTestTypeCollection(IEnumerable<EnumeratedTestType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EnumeratedTestTypeCollection(EnumeratedTestType[] values)
        {
            if (values != null)
            {
                return new EnumeratedTestTypeCollection(values);
            }

            return new EnumeratedTestTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EnumeratedTestType[](EnumeratedTestTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EnumeratedTestTypeCollection clone = new EnumeratedTestTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EnumeratedTestType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ScalarTestType Class
    #if (!OPCUA_EXCLUDE_ScalarTestType)
    /// <summary>
    /// A complex type containing all possible scalar types used for testing.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ScalarTestType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ScalarTestType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_boolean = true;
            m_sByte = (sbyte)0;
            m_byte = (byte)0;
            m_int16 = (short)0;
            m_uInt16 = (ushort)0;
            m_int32 = (int)0;
            m_uInt32 = (uint)0;
            m_int64 = (long)0;
            m_uInt64 = (ulong)0;
            m_float = (float)0;
            m_double = (double)0;
            m_string = null;
            m_dateTime = DateTime.MinValue;
            m_guid = Uuid.Empty;
            m_byteString = null;
            m_xmlElement = null;
            m_nodeId = null;
            m_expandedNodeId = null;
            m_statusCode = StatusCodes.Good;
            m_diagnosticInfo = null;
            m_qualifiedName = null;
            m_localizedText = null;
            m_extensionObject = null;
            m_dataValue = new DataValue();
            m_enumeratedValue = EnumeratedTestType.Red;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Boolean field.
        /// </summary>
        [DataMember(Name = "Boolean", IsRequired = false, Order = 1)]
        public bool Boolean
        {
            get { return m_boolean;  }
            set { m_boolean = value; }
        }

        /// <summary>
        /// A description for the SByte field.
        /// </summary>
        [DataMember(Name = "SByte", IsRequired = false, Order = 2)]
        public sbyte SByte
        {
            get { return m_sByte;  }
            set { m_sByte = value; }
        }

        /// <summary>
        /// A description for the Byte field.
        /// </summary>
        [DataMember(Name = "Byte", IsRequired = false, Order = 3)]
        public byte Byte
        {
            get { return m_byte;  }
            set { m_byte = value; }
        }

        /// <summary>
        /// A description for the Int16 field.
        /// </summary>
        [DataMember(Name = "Int16", IsRequired = false, Order = 4)]
        public short Int16
        {
            get { return m_int16;  }
            set { m_int16 = value; }
        }

        /// <summary>
        /// A description for the UInt16 field.
        /// </summary>
        [DataMember(Name = "UInt16", IsRequired = false, Order = 5)]
        public ushort UInt16
        {
            get { return m_uInt16;  }
            set { m_uInt16 = value; }
        }

        /// <summary>
        /// A description for the Int32 field.
        /// </summary>
        [DataMember(Name = "Int32", IsRequired = false, Order = 6)]
        public int Int32
        {
            get { return m_int32;  }
            set { m_int32 = value; }
        }

        /// <summary>
        /// A description for the UInt32 field.
        /// </summary>
        [DataMember(Name = "UInt32", IsRequired = false, Order = 7)]
        public uint UInt32
        {
            get { return m_uInt32;  }
            set { m_uInt32 = value; }
        }

        /// <summary>
        /// A description for the Int64 field.
        /// </summary>
        [DataMember(Name = "Int64", IsRequired = false, Order = 8)]
        public long Int64
        {
            get { return m_int64;  }
            set { m_int64 = value; }
        }

        /// <summary>
        /// A description for the UInt64 field.
        /// </summary>
        [DataMember(Name = "UInt64", IsRequired = false, Order = 9)]
        public ulong UInt64
        {
            get { return m_uInt64;  }
            set { m_uInt64 = value; }
        }

        /// <summary>
        /// A description for the Float field.
        /// </summary>
        [DataMember(Name = "Float", IsRequired = false, Order = 10)]
        public float Float
        {
            get { return m_float;  }
            set { m_float = value; }
        }

        /// <summary>
        /// A description for the Double field.
        /// </summary>
        [DataMember(Name = "Double", IsRequired = false, Order = 11)]
        public double Double
        {
            get { return m_double;  }
            set { m_double = value; }
        }

        /// <summary>
        /// A description for the String field.
        /// </summary>
        [DataMember(Name = "String", IsRequired = false, Order = 12)]
        public string String
        {
            get { return m_string;  }
            set { m_string = value; }
        }

        /// <summary>
        /// A description for the DateTime field.
        /// </summary>
        [DataMember(Name = "DateTime", IsRequired = false, Order = 13)]
        public DateTime DateTime
        {
            get { return m_dateTime;  }
            set { m_dateTime = value; }
        }

        /// <summary>
        /// A description for the Guid field.
        /// </summary>
        [DataMember(Name = "Guid", IsRequired = false, Order = 14)]
        public Uuid Guid
        {
            get { return m_guid;  }
            set { m_guid = value; }
        }

        /// <summary>
        /// A description for the ByteString field.
        /// </summary>
        [DataMember(Name = "ByteString", IsRequired = false, Order = 15)]
        public byte[] ByteString
        {
            get { return m_byteString;  }
            set { m_byteString = value; }
        }

        /// <summary>
        /// A description for the XmlElement field.
        /// </summary>
        [DataMember(Name = "XmlElement", IsRequired = false, Order = 16)]
        public XmlElement XmlElement
        {
            get { return m_xmlElement;  }
            set { m_xmlElement = value; }
        }

        /// <summary>
        /// A description for the NodeId field.
        /// </summary>
        [DataMember(Name = "NodeId", IsRequired = false, Order = 17)]
        public NodeId NodeId
        {
            get { return m_nodeId;  }
            set { m_nodeId = value; }
        }

        /// <summary>
        /// A description for the ExpandedNodeId field.
        /// </summary>
        [DataMember(Name = "ExpandedNodeId", IsRequired = false, Order = 18)]
        public ExpandedNodeId ExpandedNodeId
        {
            get { return m_expandedNodeId;  }
            set { m_expandedNodeId = value; }
        }

        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 19)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the DiagnosticInfo field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfo", IsRequired = false, Order = 20)]
        public DiagnosticInfo DiagnosticInfo
        {
            get { return m_diagnosticInfo;  }
            set { m_diagnosticInfo = value; }
        }

        /// <summary>
        /// A description for the QualifiedName field.
        /// </summary>
        [DataMember(Name = "QualifiedName", IsRequired = false, Order = 21)]
        public QualifiedName QualifiedName
        {
            get { return m_qualifiedName;  }
            set { m_qualifiedName = value; }
        }

        /// <summary>
        /// A description for the LocalizedText field.
        /// </summary>
        [DataMember(Name = "LocalizedText", IsRequired = false, Order = 22)]
        public LocalizedText LocalizedText
        {
            get { return m_localizedText;  }
            set { m_localizedText = value; }
        }

        /// <summary>
        /// A description for the ExtensionObject field.
        /// </summary>
        [DataMember(Name = "ExtensionObject", IsRequired = false, Order = 23)]
        public ExtensionObject ExtensionObject
        {
            get { return m_extensionObject;  }
            set { m_extensionObject = value; }
        }

        /// <summary>
        /// A description for the DataValue field.
        /// </summary>
        [DataMember(Name = "DataValue", IsRequired = false, Order = 24)]
        public DataValue DataValue
        {
            get { return m_dataValue;  }
            set { m_dataValue = value; }
        }

        /// <summary>
        /// A description for the EnumeratedValue field.
        /// </summary>
        [DataMember(Name = "EnumeratedValue", IsRequired = false, Order = 25)]
        public EnumeratedTestType EnumeratedValue
        {
            get { return m_enumeratedValue;  }
            set { m_enumeratedValue = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ScalarTestType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ScalarTestType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ScalarTestType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBoolean("Boolean", Boolean);
            encoder.WriteSByte("SByte", SByte);
            encoder.WriteByte("Byte", Byte);
            encoder.WriteInt16("Int16", Int16);
            encoder.WriteUInt16("UInt16", UInt16);
            encoder.WriteInt32("Int32", Int32);
            encoder.WriteUInt32("UInt32", UInt32);
            encoder.WriteInt64("Int64", Int64);
            encoder.WriteUInt64("UInt64", UInt64);
            encoder.WriteFloat("Float", Float);
            encoder.WriteDouble("Double", Double);
            encoder.WriteString("String", String);
            encoder.WriteDateTime("DateTime", DateTime);
            encoder.WriteGuid("Guid", Guid);
            encoder.WriteByteString("ByteString", ByteString);
            encoder.WriteXmlElement("XmlElement", XmlElement);
            encoder.WriteNodeId("NodeId", NodeId);
            encoder.WriteExpandedNodeId("ExpandedNodeId", ExpandedNodeId);
            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteDiagnosticInfo("DiagnosticInfo", DiagnosticInfo);
            encoder.WriteQualifiedName("QualifiedName", QualifiedName);
            encoder.WriteLocalizedText("LocalizedText", LocalizedText);
            encoder.WriteExtensionObject("ExtensionObject", ExtensionObject);
            encoder.WriteDataValue("DataValue", DataValue);
            encoder.WriteEnumerated("EnumeratedValue", EnumeratedValue);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Boolean = decoder.ReadBoolean("Boolean");
            SByte = decoder.ReadSByte("SByte");
            Byte = decoder.ReadByte("Byte");
            Int16 = decoder.ReadInt16("Int16");
            UInt16 = decoder.ReadUInt16("UInt16");
            Int32 = decoder.ReadInt32("Int32");
            UInt32 = decoder.ReadUInt32("UInt32");
            Int64 = decoder.ReadInt64("Int64");
            UInt64 = decoder.ReadUInt64("UInt64");
            Float = decoder.ReadFloat("Float");
            Double = decoder.ReadDouble("Double");
            String = decoder.ReadString("String");
            DateTime = decoder.ReadDateTime("DateTime");
            Guid = decoder.ReadGuid("Guid");
            ByteString = decoder.ReadByteString("ByteString");
            NodeId = decoder.ReadNodeId("NodeId");
            ExpandedNodeId = decoder.ReadExpandedNodeId("ExpandedNodeId");
            StatusCode = decoder.ReadStatusCode("StatusCode");
            DiagnosticInfo = decoder.ReadDiagnosticInfo("DiagnosticInfo");
            QualifiedName = decoder.ReadQualifiedName("QualifiedName");
            LocalizedText = decoder.ReadLocalizedText("LocalizedText");
            ExtensionObject = decoder.ReadExtensionObject("ExtensionObject");
            DataValue = decoder.ReadDataValue("DataValue");
            EnumeratedValue = (EnumeratedTestType)decoder.ReadEnumerated("EnumeratedValue", typeof(EnumeratedTestType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ScalarTestType value = encodeable as ScalarTestType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_boolean, value.m_boolean)) return false;
            if (!Utils.IsEqual(m_sByte, value.m_sByte)) return false;
            if (!Utils.IsEqual(m_byte, value.m_byte)) return false;
            if (!Utils.IsEqual(m_int16, value.m_int16)) return false;
            if (!Utils.IsEqual(m_uInt16, value.m_uInt16)) return false;
            if (!Utils.IsEqual(m_int32, value.m_int32)) return false;
            if (!Utils.IsEqual(m_uInt32, value.m_uInt32)) return false;
            if (!Utils.IsEqual(m_int64, value.m_int64)) return false;
            if (!Utils.IsEqual(m_uInt64, value.m_uInt64)) return false;
            if (!Utils.IsEqual(m_float, value.m_float)) return false;
            if (!Utils.IsEqual(m_double, value.m_double)) return false;
            if (!Utils.IsEqual(m_string, value.m_string)) return false;
            if (!Utils.IsEqual(m_dateTime, value.m_dateTime)) return false;
            if (!Utils.IsEqual(m_guid, value.m_guid)) return false;
            if (!Utils.IsEqual(m_byteString, value.m_byteString)) return false;
            if (!Utils.IsEqual(m_xmlElement, value.m_xmlElement)) return false;
            if (!Utils.IsEqual(m_nodeId, value.m_nodeId)) return false;
            if (!Utils.IsEqual(m_expandedNodeId, value.m_expandedNodeId)) return false;
            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_diagnosticInfo, value.m_diagnosticInfo)) return false;
            if (!Utils.IsEqual(m_qualifiedName, value.m_qualifiedName)) return false;
            if (!Utils.IsEqual(m_localizedText, value.m_localizedText)) return false;
            if (!Utils.IsEqual(m_extensionObject, value.m_extensionObject)) return false;
            if (!Utils.IsEqual(m_dataValue, value.m_dataValue)) return false;
            if (!Utils.IsEqual(m_enumeratedValue, value.m_enumeratedValue)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ScalarTestType clone = new ScalarTestType();

            clone.m_boolean = (bool)Utils.Clone(this.m_boolean);
            clone.m_sByte = (sbyte)Utils.Clone(this.m_sByte);
            clone.m_byte = (byte)Utils.Clone(this.m_byte);
            clone.m_int16 = (short)Utils.Clone(this.m_int16);
            clone.m_uInt16 = (ushort)Utils.Clone(this.m_uInt16);
            clone.m_int32 = (int)Utils.Clone(this.m_int32);
            clone.m_uInt32 = (uint)Utils.Clone(this.m_uInt32);
            clone.m_int64 = (long)Utils.Clone(this.m_int64);
            clone.m_uInt64 = (ulong)Utils.Clone(this.m_uInt64);
            clone.m_float = (float)Utils.Clone(this.m_float);
            clone.m_double = (double)Utils.Clone(this.m_double);
            clone.m_string = (string)Utils.Clone(this.m_string);
            clone.m_dateTime = (DateTime)Utils.Clone(this.m_dateTime);
            clone.m_guid = (Uuid)Utils.Clone(this.m_guid);
            clone.m_byteString = (byte[])Utils.Clone(this.m_byteString);
            clone.m_xmlElement = (XmlElement)Utils.Clone(this.m_xmlElement);
            clone.m_nodeId = (NodeId)Utils.Clone(this.m_nodeId);
            clone.m_expandedNodeId = (ExpandedNodeId)Utils.Clone(this.m_expandedNodeId);
            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_diagnosticInfo = (DiagnosticInfo)Utils.Clone(this.m_diagnosticInfo);
            clone.m_qualifiedName = (QualifiedName)Utils.Clone(this.m_qualifiedName);
            clone.m_localizedText = (LocalizedText)Utils.Clone(this.m_localizedText);
            clone.m_extensionObject = (ExtensionObject)Utils.Clone(this.m_extensionObject);
            clone.m_dataValue = (DataValue)Utils.Clone(this.m_dataValue);
            clone.m_enumeratedValue = (EnumeratedTestType)Utils.Clone(this.m_enumeratedValue);

            return clone;
        }
        #endregion

        #region Private Fields
        private bool m_boolean;
        private sbyte m_sByte;
        private byte m_byte;
        private short m_int16;
        private ushort m_uInt16;
        private int m_int32;
        private uint m_uInt32;
        private long m_int64;
        private ulong m_uInt64;
        private float m_float;
        private double m_double;
        private string m_string;
        private DateTime m_dateTime;
        private Uuid m_guid;
        private byte[] m_byteString;
        private XmlElement m_xmlElement;
        private NodeId m_nodeId;
        private ExpandedNodeId m_expandedNodeId;
        private StatusCode m_statusCode;
        private DiagnosticInfo m_diagnosticInfo;
        private QualifiedName m_qualifiedName;
        private LocalizedText m_localizedText;
        private ExtensionObject m_extensionObject;
        private DataValue m_dataValue;
        private EnumeratedTestType m_enumeratedValue;
        #endregion
    }

    #region ScalarTestTypeCollection Class
    /// <summary>
    /// A collection of ScalarTestType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfScalarTestType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ScalarTestType")]
    public partial class ScalarTestTypeCollection : List<ScalarTestType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ScalarTestTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ScalarTestTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ScalarTestTypeCollection(IEnumerable<ScalarTestType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ScalarTestTypeCollection(ScalarTestType[] values)
        {
            if (values != null)
            {
                return new ScalarTestTypeCollection(values);
            }

            return new ScalarTestTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ScalarTestType[](ScalarTestTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ScalarTestTypeCollection clone = new ScalarTestTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ScalarTestType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ArrayTestType Class
    #if (!OPCUA_EXCLUDE_ArrayTestType)
    /// <summary>
    /// A complex type containing all possible array types used for testing.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ArrayTestType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ArrayTestType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_booleans = new BooleanCollection();
            m_sBytes = new SByteCollection();
            m_int16s = new Int16Collection();
            m_uInt16s = new UInt16Collection();
            m_int32s = new Int32Collection();
            m_uInt32s = new UInt32Collection();
            m_int64s = new Int64Collection();
            m_uInt64s = new UInt64Collection();
            m_floats = new FloatCollection();
            m_doubles = new DoubleCollection();
            m_strings = new StringCollection();
            m_dateTimes = new DateTimeCollection();
            m_guids = new UuidCollection();
            m_byteStrings = new ByteStringCollection();
            m_xmlElements = new XmlElementCollection();
            m_nodeIds = new NodeIdCollection();
            m_expandedNodeIds = new ExpandedNodeIdCollection();
            m_statusCodes = new StatusCodeCollection();
            m_diagnosticInfos = new DiagnosticInfoCollection();
            m_qualifiedNames = new QualifiedNameCollection();
            m_localizedTexts = new LocalizedTextCollection();
            m_extensionObjects = new ExtensionObjectCollection();
            m_dataValues = new DataValueCollection();
            m_variants = new VariantCollection();
            m_enumeratedValues = new EnumeratedTestTypeCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Booleans field.
        /// </summary>
        [DataMember(Name = "Booleans", IsRequired = false, Order = 1)]
        public BooleanCollection Booleans
        {
            get
            {
                return m_booleans;
            }

            set
            {
                m_booleans = value;

                if (value == null)
                {
                    m_booleans = new BooleanCollection();
                }
            }
        }

        /// <summary>
        /// A description for the SBytes field.
        /// </summary>
        [DataMember(Name = "SBytes", IsRequired = false, Order = 2)]
        public SByteCollection SBytes
        {
            get
            {
                return m_sBytes;
            }

            set
            {
                m_sBytes = value;

                if (value == null)
                {
                    m_sBytes = new SByteCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Int16s field.
        /// </summary>
        [DataMember(Name = "Int16s", IsRequired = false, Order = 3)]
        public Int16Collection Int16s
        {
            get
            {
                return m_int16s;
            }

            set
            {
                m_int16s = value;

                if (value == null)
                {
                    m_int16s = new Int16Collection();
                }
            }
        }

        /// <summary>
        /// A description for the UInt16s field.
        /// </summary>
        [DataMember(Name = "UInt16s", IsRequired = false, Order = 4)]
        public UInt16Collection UInt16s
        {
            get
            {
                return m_uInt16s;
            }

            set
            {
                m_uInt16s = value;

                if (value == null)
                {
                    m_uInt16s = new UInt16Collection();
                }
            }
        }

        /// <summary>
        /// A description for the Int32s field.
        /// </summary>
        [DataMember(Name = "Int32s", IsRequired = false, Order = 5)]
        public Int32Collection Int32s
        {
            get
            {
                return m_int32s;
            }

            set
            {
                m_int32s = value;

                if (value == null)
                {
                    m_int32s = new Int32Collection();
                }
            }
        }

        /// <summary>
        /// A description for the UInt32s field.
        /// </summary>
        [DataMember(Name = "UInt32s", IsRequired = false, Order = 6)]
        public UInt32Collection UInt32s
        {
            get
            {
                return m_uInt32s;
            }

            set
            {
                m_uInt32s = value;

                if (value == null)
                {
                    m_uInt32s = new UInt32Collection();
                }
            }
        }

        /// <summary>
        /// A description for the Int64s field.
        /// </summary>
        [DataMember(Name = "Int64s", IsRequired = false, Order = 7)]
        public Int64Collection Int64s
        {
            get
            {
                return m_int64s;
            }

            set
            {
                m_int64s = value;

                if (value == null)
                {
                    m_int64s = new Int64Collection();
                }
            }
        }

        /// <summary>
        /// A description for the UInt64s field.
        /// </summary>
        [DataMember(Name = "UInt64s", IsRequired = false, Order = 8)]
        public UInt64Collection UInt64s
        {
            get
            {
                return m_uInt64s;
            }

            set
            {
                m_uInt64s = value;

                if (value == null)
                {
                    m_uInt64s = new UInt64Collection();
                }
            }
        }

        /// <summary>
        /// A description for the Floats field.
        /// </summary>
        [DataMember(Name = "Floats", IsRequired = false, Order = 9)]
        public FloatCollection Floats
        {
            get
            {
                return m_floats;
            }

            set
            {
                m_floats = value;

                if (value == null)
                {
                    m_floats = new FloatCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Doubles field.
        /// </summary>
        [DataMember(Name = "Doubles", IsRequired = false, Order = 10)]
        public DoubleCollection Doubles
        {
            get
            {
                return m_doubles;
            }

            set
            {
                m_doubles = value;

                if (value == null)
                {
                    m_doubles = new DoubleCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Strings field.
        /// </summary>
        [DataMember(Name = "Strings", IsRequired = false, Order = 11)]
        public StringCollection Strings
        {
            get
            {
                return m_strings;
            }

            set
            {
                m_strings = value;

                if (value == null)
                {
                    m_strings = new StringCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DateTimes field.
        /// </summary>
        [DataMember(Name = "DateTimes", IsRequired = false, Order = 12)]
        public DateTimeCollection DateTimes
        {
            get
            {
                return m_dateTimes;
            }

            set
            {
                m_dateTimes = value;

                if (value == null)
                {
                    m_dateTimes = new DateTimeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Guids field.
        /// </summary>
        [DataMember(Name = "Guids", IsRequired = false, Order = 13)]
        public UuidCollection Guids
        {
            get
            {
                return m_guids;
            }

            set
            {
                m_guids = value;

                if (value == null)
                {
                    m_guids = new UuidCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ByteStrings field.
        /// </summary>
        [DataMember(Name = "ByteStrings", IsRequired = false, Order = 14)]
        public ByteStringCollection ByteStrings
        {
            get
            {
                return m_byteStrings;
            }

            set
            {
                m_byteStrings = value;

                if (value == null)
                {
                    m_byteStrings = new ByteStringCollection();
                }
            }
        }

        /// <summary>
        /// A description for the XmlElements field.
        /// </summary>
        [DataMember(Name = "XmlElements", IsRequired = false, Order = 15)]
        public XmlElementCollection XmlElements
        {
            get
            {
                return m_xmlElements;
            }

            set
            {
                m_xmlElements = value;

                if (value == null)
                {
                    m_xmlElements = new XmlElementCollection();
                }
            }
        }

        /// <summary>
        /// A description for the NodeIds field.
        /// </summary>
        [DataMember(Name = "NodeIds", IsRequired = false, Order = 16)]
        public NodeIdCollection NodeIds
        {
            get
            {
                return m_nodeIds;
            }

            set
            {
                m_nodeIds = value;

                if (value == null)
                {
                    m_nodeIds = new NodeIdCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ExpandedNodeIds field.
        /// </summary>
        [DataMember(Name = "ExpandedNodeIds", IsRequired = false, Order = 17)]
        public ExpandedNodeIdCollection ExpandedNodeIds
        {
            get
            {
                return m_expandedNodeIds;
            }

            set
            {
                m_expandedNodeIds = value;

                if (value == null)
                {
                    m_expandedNodeIds = new ExpandedNodeIdCollection();
                }
            }
        }

        /// <summary>
        /// A description for the StatusCodes field.
        /// </summary>
        [DataMember(Name = "StatusCodes", IsRequired = false, Order = 18)]
        public StatusCodeCollection StatusCodes
        {
            get
            {
                return m_statusCodes;
            }

            set
            {
                m_statusCodes = value;

                if (value == null)
                {
                    m_statusCodes = new StatusCodeCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DiagnosticInfos field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfos", IsRequired = false, Order = 19)]
        public DiagnosticInfoCollection DiagnosticInfos
        {
            get
            {
                return m_diagnosticInfos;
            }

            set
            {
                m_diagnosticInfos = value;

                if (value == null)
                {
                    m_diagnosticInfos = new DiagnosticInfoCollection();
                }
            }
        }

        /// <summary>
        /// A description for the QualifiedNames field.
        /// </summary>
        [DataMember(Name = "QualifiedNames", IsRequired = false, Order = 20)]
        public QualifiedNameCollection QualifiedNames
        {
            get
            {
                return m_qualifiedNames;
            }

            set
            {
                m_qualifiedNames = value;

                if (value == null)
                {
                    m_qualifiedNames = new QualifiedNameCollection();
                }
            }
        }

        /// <summary>
        /// A description for the LocalizedTexts field.
        /// </summary>
        [DataMember(Name = "LocalizedTexts", IsRequired = false, Order = 21)]
        public LocalizedTextCollection LocalizedTexts
        {
            get
            {
                return m_localizedTexts;
            }

            set
            {
                m_localizedTexts = value;

                if (value == null)
                {
                    m_localizedTexts = new LocalizedTextCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ExtensionObjects field.
        /// </summary>
        [DataMember(Name = "ExtensionObjects", IsRequired = false, Order = 22)]
        public ExtensionObjectCollection ExtensionObjects
        {
            get
            {
                return m_extensionObjects;
            }

            set
            {
                m_extensionObjects = value;

                if (value == null)
                {
                    m_extensionObjects = new ExtensionObjectCollection();
                }
            }
        }

        /// <summary>
        /// A description for the DataValues field.
        /// </summary>
        [DataMember(Name = "DataValues", IsRequired = false, Order = 23)]
        public DataValueCollection DataValues
        {
            get
            {
                return m_dataValues;
            }

            set
            {
                m_dataValues = value;

                if (value == null)
                {
                    m_dataValues = new DataValueCollection();
                }
            }
        }

        /// <summary>
        /// A description for the Variants field.
        /// </summary>
        [DataMember(Name = "Variants", IsRequired = false, Order = 24)]
        public VariantCollection Variants
        {
            get
            {
                return m_variants;
            }

            set
            {
                m_variants = value;

                if (value == null)
                {
                    m_variants = new VariantCollection();
                }
            }
        }

        /// <summary>
        /// A description for the EnumeratedValues field.
        /// </summary>
        [DataMember(Name = "EnumeratedValues", IsRequired = false, Order = 25)]
        public EnumeratedTestTypeCollection EnumeratedValues
        {
            get
            {
                return m_enumeratedValues;
            }

            set
            {
                m_enumeratedValues = value;

                if (value == null)
                {
                    m_enumeratedValues = new EnumeratedTestTypeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ArrayTestType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ArrayTestType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ArrayTestType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteBooleanArray("Booleans", Booleans);
            encoder.WriteSByteArray("SBytes", SBytes);
            encoder.WriteInt16Array("Int16s", Int16s);
            encoder.WriteUInt16Array("UInt16s", UInt16s);
            encoder.WriteInt32Array("Int32s", Int32s);
            encoder.WriteUInt32Array("UInt32s", UInt32s);
            encoder.WriteInt64Array("Int64s", Int64s);
            encoder.WriteUInt64Array("UInt64s", UInt64s);
            encoder.WriteFloatArray("Floats", Floats);
            encoder.WriteDoubleArray("Doubles", Doubles);
            encoder.WriteStringArray("Strings", Strings);
            encoder.WriteDateTimeArray("DateTimes", DateTimes);
            encoder.WriteGuidArray("Guids", Guids);
            encoder.WriteByteStringArray("ByteStrings", ByteStrings);
            encoder.WriteXmlElementArray("XmlElements", XmlElements);
            encoder.WriteNodeIdArray("NodeIds", NodeIds);
            encoder.WriteExpandedNodeIdArray("ExpandedNodeIds", ExpandedNodeIds);
            encoder.WriteStatusCodeArray("StatusCodes", StatusCodes);
            encoder.WriteDiagnosticInfoArray("DiagnosticInfos", DiagnosticInfos);
            encoder.WriteQualifiedNameArray("QualifiedNames", QualifiedNames);
            encoder.WriteLocalizedTextArray("LocalizedTexts", LocalizedTexts);
            encoder.WriteExtensionObjectArray("ExtensionObjects", ExtensionObjects);
            encoder.WriteDataValueArray("DataValues", DataValues);
            encoder.WriteVariantArray("Variants", Variants);
            encoder.WriteEnumeratedArray("EnumeratedValues", EnumeratedValues.ToArray(), typeof(EnumeratedTestType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Booleans = decoder.ReadBooleanArray("Booleans");
            SBytes = decoder.ReadSByteArray("SBytes");
            Int16s = decoder.ReadInt16Array("Int16s");
            UInt16s = decoder.ReadUInt16Array("UInt16s");
            Int32s = decoder.ReadInt32Array("Int32s");
            UInt32s = decoder.ReadUInt32Array("UInt32s");
            Int64s = decoder.ReadInt64Array("Int64s");
            UInt64s = decoder.ReadUInt64Array("UInt64s");
            Floats = decoder.ReadFloatArray("Floats");
            Doubles = decoder.ReadDoubleArray("Doubles");
            Strings = decoder.ReadStringArray("Strings");
            DateTimes = decoder.ReadDateTimeArray("DateTimes");
            Guids = decoder.ReadGuidArray("Guids");
            ByteStrings = decoder.ReadByteStringArray("ByteStrings");
            NodeIds = decoder.ReadNodeIdArray("NodeIds");
            ExpandedNodeIds = decoder.ReadExpandedNodeIdArray("ExpandedNodeIds");
            StatusCodes = decoder.ReadStatusCodeArray("StatusCodes");
            DiagnosticInfos = decoder.ReadDiagnosticInfoArray("DiagnosticInfos");
            QualifiedNames = decoder.ReadQualifiedNameArray("QualifiedNames");
            LocalizedTexts = decoder.ReadLocalizedTextArray("LocalizedTexts");
            ExtensionObjects = decoder.ReadExtensionObjectArray("ExtensionObjects");
            DataValues = decoder.ReadDataValueArray("DataValues");
            Variants = decoder.ReadVariantArray("Variants");
            EnumeratedValues = (EnumeratedTestTypeCollection)decoder.ReadEnumeratedArray("EnumeratedValues", typeof(EnumeratedTestType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ArrayTestType value = encodeable as ArrayTestType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_booleans, value.m_booleans)) return false;
            if (!Utils.IsEqual(m_sBytes, value.m_sBytes)) return false;
            if (!Utils.IsEqual(m_int16s, value.m_int16s)) return false;
            if (!Utils.IsEqual(m_uInt16s, value.m_uInt16s)) return false;
            if (!Utils.IsEqual(m_int32s, value.m_int32s)) return false;
            if (!Utils.IsEqual(m_uInt32s, value.m_uInt32s)) return false;
            if (!Utils.IsEqual(m_int64s, value.m_int64s)) return false;
            if (!Utils.IsEqual(m_uInt64s, value.m_uInt64s)) return false;
            if (!Utils.IsEqual(m_floats, value.m_floats)) return false;
            if (!Utils.IsEqual(m_doubles, value.m_doubles)) return false;
            if (!Utils.IsEqual(m_strings, value.m_strings)) return false;
            if (!Utils.IsEqual(m_dateTimes, value.m_dateTimes)) return false;
            if (!Utils.IsEqual(m_guids, value.m_guids)) return false;
            if (!Utils.IsEqual(m_byteStrings, value.m_byteStrings)) return false;
            if (!Utils.IsEqual(m_xmlElements, value.m_xmlElements)) return false;
            if (!Utils.IsEqual(m_nodeIds, value.m_nodeIds)) return false;
            if (!Utils.IsEqual(m_expandedNodeIds, value.m_expandedNodeIds)) return false;
            if (!Utils.IsEqual(m_statusCodes, value.m_statusCodes)) return false;
            if (!Utils.IsEqual(m_diagnosticInfos, value.m_diagnosticInfos)) return false;
            if (!Utils.IsEqual(m_qualifiedNames, value.m_qualifiedNames)) return false;
            if (!Utils.IsEqual(m_localizedTexts, value.m_localizedTexts)) return false;
            if (!Utils.IsEqual(m_extensionObjects, value.m_extensionObjects)) return false;
            if (!Utils.IsEqual(m_dataValues, value.m_dataValues)) return false;
            if (!Utils.IsEqual(m_variants, value.m_variants)) return false;
            if (!Utils.IsEqual(m_enumeratedValues, value.m_enumeratedValues)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ArrayTestType clone = new ArrayTestType();

            clone.m_booleans = (BooleanCollection)Utils.Clone(this.m_booleans);
            clone.m_sBytes = (SByteCollection)Utils.Clone(this.m_sBytes);
            clone.m_int16s = (Int16Collection)Utils.Clone(this.m_int16s);
            clone.m_uInt16s = (UInt16Collection)Utils.Clone(this.m_uInt16s);
            clone.m_int32s = (Int32Collection)Utils.Clone(this.m_int32s);
            clone.m_uInt32s = (UInt32Collection)Utils.Clone(this.m_uInt32s);
            clone.m_int64s = (Int64Collection)Utils.Clone(this.m_int64s);
            clone.m_uInt64s = (UInt64Collection)Utils.Clone(this.m_uInt64s);
            clone.m_floats = (FloatCollection)Utils.Clone(this.m_floats);
            clone.m_doubles = (DoubleCollection)Utils.Clone(this.m_doubles);
            clone.m_strings = (StringCollection)Utils.Clone(this.m_strings);
            clone.m_dateTimes = (DateTimeCollection)Utils.Clone(this.m_dateTimes);
            clone.m_guids = (UuidCollection)Utils.Clone(this.m_guids);
            clone.m_byteStrings = (ByteStringCollection)Utils.Clone(this.m_byteStrings);
            clone.m_xmlElements = (XmlElementCollection)Utils.Clone(this.m_xmlElements);
            clone.m_nodeIds = (NodeIdCollection)Utils.Clone(this.m_nodeIds);
            clone.m_expandedNodeIds = (ExpandedNodeIdCollection)Utils.Clone(this.m_expandedNodeIds);
            clone.m_statusCodes = (StatusCodeCollection)Utils.Clone(this.m_statusCodes);
            clone.m_diagnosticInfos = (DiagnosticInfoCollection)Utils.Clone(this.m_diagnosticInfos);
            clone.m_qualifiedNames = (QualifiedNameCollection)Utils.Clone(this.m_qualifiedNames);
            clone.m_localizedTexts = (LocalizedTextCollection)Utils.Clone(this.m_localizedTexts);
            clone.m_extensionObjects = (ExtensionObjectCollection)Utils.Clone(this.m_extensionObjects);
            clone.m_dataValues = (DataValueCollection)Utils.Clone(this.m_dataValues);
            clone.m_variants = (VariantCollection)Utils.Clone(this.m_variants);
            clone.m_enumeratedValues = (EnumeratedTestTypeCollection)Utils.Clone(this.m_enumeratedValues);

            return clone;
        }
        #endregion

        #region Private Fields
        private BooleanCollection m_booleans;
        private SByteCollection m_sBytes;
        private Int16Collection m_int16s;
        private UInt16Collection m_uInt16s;
        private Int32Collection m_int32s;
        private UInt32Collection m_uInt32s;
        private Int64Collection m_int64s;
        private UInt64Collection m_uInt64s;
        private FloatCollection m_floats;
        private DoubleCollection m_doubles;
        private StringCollection m_strings;
        private DateTimeCollection m_dateTimes;
        private UuidCollection m_guids;
        private ByteStringCollection m_byteStrings;
        private XmlElementCollection m_xmlElements;
        private NodeIdCollection m_nodeIds;
        private ExpandedNodeIdCollection m_expandedNodeIds;
        private StatusCodeCollection m_statusCodes;
        private DiagnosticInfoCollection m_diagnosticInfos;
        private QualifiedNameCollection m_qualifiedNames;
        private LocalizedTextCollection m_localizedTexts;
        private ExtensionObjectCollection m_extensionObjects;
        private DataValueCollection m_dataValues;
        private VariantCollection m_variants;
        private EnumeratedTestTypeCollection m_enumeratedValues;
        #endregion
    }

    #region ArrayTestTypeCollection Class
    /// <summary>
    /// A collection of ArrayTestType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfArrayTestType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ArrayTestType")]
    public partial class ArrayTestTypeCollection : List<ArrayTestType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ArrayTestTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ArrayTestTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ArrayTestTypeCollection(IEnumerable<ArrayTestType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ArrayTestTypeCollection(ArrayTestType[] values)
        {
            if (values != null)
            {
                return new ArrayTestTypeCollection(values);
            }

            return new ArrayTestTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ArrayTestType[](ArrayTestTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ArrayTestTypeCollection clone = new ArrayTestTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ArrayTestType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region CompositeTestType Class
    #if (!OPCUA_EXCLUDE_CompositeTestType)
    /// <summary>
    /// A description for the CompositeTestType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class CompositeTestType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public CompositeTestType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_field1 = new ScalarTestType();
            m_field2 = new ArrayTestType();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Field1 field.
        /// </summary>
        [DataMember(Name = "Field1", IsRequired = false, Order = 1)]
        public ScalarTestType Field1
        {
            get
            {
                return m_field1;
            }

            set
            {
                m_field1 = value;

                if (value == null)
                {
                    m_field1 = new ScalarTestType();
                }
            }
        }

        /// <summary>
        /// A description for the Field2 field.
        /// </summary>
        [DataMember(Name = "Field2", IsRequired = false, Order = 2)]
        public ArrayTestType Field2
        {
            get
            {
                return m_field2;
            }

            set
            {
                m_field2 = value;

                if (value == null)
                {
                    m_field2 = new ArrayTestType();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.CompositeTestType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.CompositeTestType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.CompositeTestType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("Field1", Field1, typeof(ScalarTestType));
            encoder.WriteEncodeable("Field2", Field2, typeof(ArrayTestType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Field1 = (ScalarTestType)decoder.ReadEncodeable("Field1", typeof(ScalarTestType));
            Field2 = (ArrayTestType)decoder.ReadEncodeable("Field2", typeof(ArrayTestType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            CompositeTestType value = encodeable as CompositeTestType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_field1, value.m_field1)) return false;
            if (!Utils.IsEqual(m_field2, value.m_field2)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            CompositeTestType clone = new CompositeTestType();

            clone.m_field1 = (ScalarTestType)Utils.Clone(this.m_field1);
            clone.m_field2 = (ArrayTestType)Utils.Clone(this.m_field2);

            return clone;
        }
        #endregion

        #region Private Fields
        private ScalarTestType m_field1;
        private ArrayTestType m_field2;
        #endregion
    }
    #endif
    #endregion

    #region TestStackRequest Class
    #if (!OPCUA_EXCLUDE_TestStackRequest)
    /// <summary>
    /// A description for the TestStackRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TestStackRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TestStackRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_testId = (uint)0;
            m_iteration = (int)0;
            m_input = Variant.Null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the TestId field.
        /// </summary>
        [DataMember(Name = "TestId", IsRequired = false, Order = 2)]
        public uint TestId
        {
            get { return m_testId;  }
            set { m_testId = value; }
        }

        /// <summary>
        /// A description for the Iteration field.
        /// </summary>
        [DataMember(Name = "Iteration", IsRequired = false, Order = 3)]
        public int Iteration
        {
            get { return m_iteration;  }
            set { m_iteration = value; }
        }

        /// <summary>
        /// A description for the Input field.
        /// </summary>
        [DataMember(Name = "Input", IsRequired = false, Order = 4)]
        public Variant Input
        {
            get { return m_input;  }
            set { m_input = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TestStackRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TestStackRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TestStackRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("TestId", TestId);
            encoder.WriteInt32("Iteration", Iteration);
            encoder.WriteVariant("Input", Input);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            TestId = decoder.ReadUInt32("TestId");
            Iteration = decoder.ReadInt32("Iteration");
            Input = decoder.ReadVariant("Input");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TestStackRequest value = encodeable as TestStackRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_testId, value.m_testId)) return false;
            if (!Utils.IsEqual(m_iteration, value.m_iteration)) return false;
            if (!Utils.IsEqual(m_input, value.m_input)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            TestStackRequest clone = new TestStackRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_testId = (uint)Utils.Clone(this.m_testId);
            clone.m_iteration = (int)Utils.Clone(this.m_iteration);
            clone.m_input = (Variant)Utils.Clone(this.m_input);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_testId;
        private int m_iteration;
        private Variant m_input;
        #endregion
    }
    #endif
    #endregion

    #region TestStackResponse Class
    #if (!OPCUA_EXCLUDE_TestStackResponse)
    /// <summary>
    /// A description for the TestStackResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TestStackResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TestStackResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_output = Variant.Null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Output field.
        /// </summary>
        [DataMember(Name = "Output", IsRequired = false, Order = 2)]
        public Variant Output
        {
            get { return m_output;  }
            set { m_output = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TestStackResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TestStackResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TestStackResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteVariant("Output", Output);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Output = decoder.ReadVariant("Output");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TestStackResponse value = encodeable as TestStackResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_output, value.m_output)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TestStackResponse clone = new TestStackResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_output = (Variant)Utils.Clone(this.m_output);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private Variant m_output;
        #endregion
    }
    #endif
    #endregion

    #region TestStackExRequest Class
    #if (!OPCUA_EXCLUDE_TestStackExRequest)
    /// <summary>
    /// A description for the TestStackExRequest DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TestStackExRequest : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TestStackExRequest()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_requestHeader = new RequestHeader();
            m_testId = (uint)0;
            m_iteration = (int)0;
            m_input = new CompositeTestType();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the RequestHeader field.
        /// </summary>
        [DataMember(Name = "RequestHeader", IsRequired = false, Order = 1)]
        public RequestHeader RequestHeader
        {
            get
            {
                return m_requestHeader;
            }

            set
            {
                m_requestHeader = value;

                if (value == null)
                {
                    m_requestHeader = new RequestHeader();
                }
            }
        }

        /// <summary>
        /// A description for the TestId field.
        /// </summary>
        [DataMember(Name = "TestId", IsRequired = false, Order = 2)]
        public uint TestId
        {
            get { return m_testId;  }
            set { m_testId = value; }
        }

        /// <summary>
        /// A description for the Iteration field.
        /// </summary>
        [DataMember(Name = "Iteration", IsRequired = false, Order = 3)]
        public int Iteration
        {
            get { return m_iteration;  }
            set { m_iteration = value; }
        }

        /// <summary>
        /// A description for the Input field.
        /// </summary>
        [DataMember(Name = "Input", IsRequired = false, Order = 4)]
        public CompositeTestType Input
        {
            get
            {
                return m_input;
            }

            set
            {
                m_input = value;

                if (value == null)
                {
                    m_input = new CompositeTestType();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TestStackExRequest; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TestStackExRequest_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TestStackExRequest_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("RequestHeader", RequestHeader, typeof(RequestHeader));
            encoder.WriteUInt32("TestId", TestId);
            encoder.WriteInt32("Iteration", Iteration);
            encoder.WriteEncodeable("Input", Input, typeof(CompositeTestType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            RequestHeader = (RequestHeader)decoder.ReadEncodeable("RequestHeader", typeof(RequestHeader));
            TestId = decoder.ReadUInt32("TestId");
            Iteration = decoder.ReadInt32("Iteration");
            Input = (CompositeTestType)decoder.ReadEncodeable("Input", typeof(CompositeTestType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TestStackExRequest value = encodeable as TestStackExRequest;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_requestHeader, value.m_requestHeader)) return false;
            if (!Utils.IsEqual(m_testId, value.m_testId)) return false;
            if (!Utils.IsEqual(m_iteration, value.m_iteration)) return false;
            if (!Utils.IsEqual(m_input, value.m_input)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TestStackExRequest clone = new TestStackExRequest();

            clone.m_requestHeader = (RequestHeader)Utils.Clone(this.m_requestHeader);
            clone.m_testId = (uint)Utils.Clone(this.m_testId);
            clone.m_iteration = (int)Utils.Clone(this.m_iteration);
            clone.m_input = (CompositeTestType)Utils.Clone(this.m_input);

            return clone;
        }
        #endregion

        #region Private Fields
        private RequestHeader m_requestHeader;
        private uint m_testId;
        private int m_iteration;
        private CompositeTestType m_input;
        #endregion
    }
    #endif
    #endregion

    #region TestStackExResponse Class
    #if (!OPCUA_EXCLUDE_TestStackExResponse)
    /// <summary>
    /// A description for the TestStackExResponse DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class TestStackExResponse : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public TestStackExResponse()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_responseHeader = new ResponseHeader();
            m_output = new CompositeTestType();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ResponseHeader field.
        /// </summary>
        [DataMember(Name = "ResponseHeader", IsRequired = false, Order = 1)]
        public ResponseHeader ResponseHeader
        {
            get
            {
                return m_responseHeader;
            }

            set
            {
                m_responseHeader = value;

                if (value == null)
                {
                    m_responseHeader = new ResponseHeader();
                }
            }
        }

        /// <summary>
        /// A description for the Output field.
        /// </summary>
        [DataMember(Name = "Output", IsRequired = false, Order = 2)]
        public CompositeTestType Output
        {
            get
            {
                return m_output;
            }

            set
            {
                m_output = value;

                if (value == null)
                {
                    m_output = new CompositeTestType();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.TestStackExResponse; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.TestStackExResponse_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.TestStackExResponse_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("ResponseHeader", ResponseHeader, typeof(ResponseHeader));
            encoder.WriteEncodeable("Output", Output, typeof(CompositeTestType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ResponseHeader = (ResponseHeader)decoder.ReadEncodeable("ResponseHeader", typeof(ResponseHeader));
            Output = (CompositeTestType)decoder.ReadEncodeable("Output", typeof(CompositeTestType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            TestStackExResponse value = encodeable as TestStackExResponse;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_responseHeader, value.m_responseHeader)) return false;
            if (!Utils.IsEqual(m_output, value.m_output)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            TestStackExResponse clone = new TestStackExResponse();

            clone.m_responseHeader = (ResponseHeader)Utils.Clone(this.m_responseHeader);
            clone.m_output = (CompositeTestType)Utils.Clone(this.m_output);

            return clone;
        }
        #endregion

        #region Private Fields
        private ResponseHeader m_responseHeader;
        private CompositeTestType m_output;
        #endregion
    }
    #endif
    #endregion

    #region BuildInfo Class
    #if (!OPCUA_EXCLUDE_BuildInfo)
    /// <summary>
    /// A description for the BuildInfo DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class BuildInfo : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public BuildInfo()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_productUri = null;
            m_manufacturerName = null;
            m_productName = null;
            m_softwareVersion = null;
            m_buildNumber = null;
            m_buildDate = DateTime.MinValue;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ProductUri field.
        /// </summary>
        [DataMember(Name = "ProductUri", IsRequired = false, Order = 1)]
        public string ProductUri
        {
            get { return m_productUri;  }
            set { m_productUri = value; }
        }

        /// <summary>
        /// A description for the ManufacturerName field.
        /// </summary>
        [DataMember(Name = "ManufacturerName", IsRequired = false, Order = 2)]
        public string ManufacturerName
        {
            get { return m_manufacturerName;  }
            set { m_manufacturerName = value; }
        }

        /// <summary>
        /// A description for the ProductName field.
        /// </summary>
        [DataMember(Name = "ProductName", IsRequired = false, Order = 3)]
        public string ProductName
        {
            get { return m_productName;  }
            set { m_productName = value; }
        }

        /// <summary>
        /// A description for the SoftwareVersion field.
        /// </summary>
        [DataMember(Name = "SoftwareVersion", IsRequired = false, Order = 4)]
        public string SoftwareVersion
        {
            get { return m_softwareVersion;  }
            set { m_softwareVersion = value; }
        }

        /// <summary>
        /// A description for the BuildNumber field.
        /// </summary>
        [DataMember(Name = "BuildNumber", IsRequired = false, Order = 5)]
        public string BuildNumber
        {
            get { return m_buildNumber;  }
            set { m_buildNumber = value; }
        }

        /// <summary>
        /// A description for the BuildDate field.
        /// </summary>
        [DataMember(Name = "BuildDate", IsRequired = false, Order = 6)]
        public DateTime BuildDate
        {
            get { return m_buildDate;  }
            set { m_buildDate = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.BuildInfo; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.BuildInfo_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.BuildInfo_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ProductUri", ProductUri);
            encoder.WriteString("ManufacturerName", ManufacturerName);
            encoder.WriteString("ProductName", ProductName);
            encoder.WriteString("SoftwareVersion", SoftwareVersion);
            encoder.WriteString("BuildNumber", BuildNumber);
            encoder.WriteDateTime("BuildDate", BuildDate);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ProductUri = decoder.ReadString("ProductUri");
            ManufacturerName = decoder.ReadString("ManufacturerName");
            ProductName = decoder.ReadString("ProductName");
            SoftwareVersion = decoder.ReadString("SoftwareVersion");
            BuildNumber = decoder.ReadString("BuildNumber");
            BuildDate = decoder.ReadDateTime("BuildDate");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            BuildInfo value = encodeable as BuildInfo;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_productUri, value.m_productUri)) return false;
            if (!Utils.IsEqual(m_manufacturerName, value.m_manufacturerName)) return false;
            if (!Utils.IsEqual(m_productName, value.m_productName)) return false;
            if (!Utils.IsEqual(m_softwareVersion, value.m_softwareVersion)) return false;
            if (!Utils.IsEqual(m_buildNumber, value.m_buildNumber)) return false;
            if (!Utils.IsEqual(m_buildDate, value.m_buildDate)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            BuildInfo clone = new BuildInfo();

            clone.m_productUri = (string)Utils.Clone(this.m_productUri);
            clone.m_manufacturerName = (string)Utils.Clone(this.m_manufacturerName);
            clone.m_productName = (string)Utils.Clone(this.m_productName);
            clone.m_softwareVersion = (string)Utils.Clone(this.m_softwareVersion);
            clone.m_buildNumber = (string)Utils.Clone(this.m_buildNumber);
            clone.m_buildDate = (DateTime)Utils.Clone(this.m_buildDate);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_productUri;
        private string m_manufacturerName;
        private string m_productName;
        private string m_softwareVersion;
        private string m_buildNumber;
        private DateTime m_buildDate;
        #endregion
    }
    #endif
    #endregion

    #region RedundancySupport Enumeration
    #if (!OPCUA_EXCLUDE_RedundancySupport)
    /// <summary>
    /// A description for the RedundancySupport DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum RedundancySupport
    {
        /// <summary>
        /// A description for the None field.
        /// </summary>
        [EnumMember(Value = "None_0")]
        None = 0,

        /// <summary>
        /// A description for the Cold field.
        /// </summary>
        [EnumMember(Value = "Cold_1")]
        Cold = 1,

        /// <summary>
        /// A description for the Warm field.
        /// </summary>
        [EnumMember(Value = "Warm_2")]
        Warm = 2,

        /// <summary>
        /// A description for the Hot field.
        /// </summary>
        [EnumMember(Value = "Hot_3")]
        Hot = 3,

        /// <summary>
        /// A description for the Transparent field.
        /// </summary>
        [EnumMember(Value = "Transparent_4")]
        Transparent = 4,

        /// <summary>
        /// A description for the HotAndMirrored field.
        /// </summary>
        [EnumMember(Value = "HotAndMirrored_5")]
        HotAndMirrored = 5,
    }
    #endif
    #endregion

    #region ServerState Enumeration
    #if (!OPCUA_EXCLUDE_ServerState)
    /// <summary>
    /// A description for the ServerState DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum ServerState
    {
        /// <summary>
        /// A description for the Running field.
        /// </summary>
        [EnumMember(Value = "Running_0")]
        Running = 0,

        /// <summary>
        /// A description for the Failed field.
        /// </summary>
        [EnumMember(Value = "Failed_1")]
        Failed = 1,

        /// <summary>
        /// A description for the NoConfiguration field.
        /// </summary>
        [EnumMember(Value = "NoConfiguration_2")]
        NoConfiguration = 2,

        /// <summary>
        /// A description for the Suspended field.
        /// </summary>
        [EnumMember(Value = "Suspended_3")]
        Suspended = 3,

        /// <summary>
        /// A description for the Shutdown field.
        /// </summary>
        [EnumMember(Value = "Shutdown_4")]
        Shutdown = 4,

        /// <summary>
        /// A description for the Test field.
        /// </summary>
        [EnumMember(Value = "Test_5")]
        Test = 5,

        /// <summary>
        /// A description for the CommunicationFault field.
        /// </summary>
        [EnumMember(Value = "CommunicationFault_6")]
        CommunicationFault = 6,

        /// <summary>
        /// A description for the Unknown field.
        /// </summary>
        [EnumMember(Value = "Unknown_7")]
        Unknown = 7,
    }
    #endif
    #endregion

    #region RedundantServerDataType Class
    #if (!OPCUA_EXCLUDE_RedundantServerDataType)
    /// <summary>
    /// A description for the RedundantServerDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class RedundantServerDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public RedundantServerDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_serverId = null;
            m_serviceLevel = (byte)0;
            m_serverState = ServerState.Running;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ServerId field.
        /// </summary>
        [DataMember(Name = "ServerId", IsRequired = false, Order = 1)]
        public string ServerId
        {
            get { return m_serverId;  }
            set { m_serverId = value; }
        }

        /// <summary>
        /// A description for the ServiceLevel field.
        /// </summary>
        [DataMember(Name = "ServiceLevel", IsRequired = false, Order = 2)]
        public byte ServiceLevel
        {
            get { return m_serviceLevel;  }
            set { m_serviceLevel = value; }
        }

        /// <summary>
        /// A description for the ServerState field.
        /// </summary>
        [DataMember(Name = "ServerState", IsRequired = false, Order = 3)]
        public ServerState ServerState
        {
            get { return m_serverState;  }
            set { m_serverState = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.RedundantServerDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.RedundantServerDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.RedundantServerDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ServerId", ServerId);
            encoder.WriteByte("ServiceLevel", ServiceLevel);
            encoder.WriteEnumerated("ServerState", ServerState);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ServerId = decoder.ReadString("ServerId");
            ServiceLevel = decoder.ReadByte("ServiceLevel");
            ServerState = (ServerState)decoder.ReadEnumerated("ServerState", typeof(ServerState));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            RedundantServerDataType value = encodeable as RedundantServerDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_serverId, value.m_serverId)) return false;
            if (!Utils.IsEqual(m_serviceLevel, value.m_serviceLevel)) return false;
            if (!Utils.IsEqual(m_serverState, value.m_serverState)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            RedundantServerDataType clone = new RedundantServerDataType();

            clone.m_serverId = (string)Utils.Clone(this.m_serverId);
            clone.m_serviceLevel = (byte)Utils.Clone(this.m_serviceLevel);
            clone.m_serverState = (ServerState)Utils.Clone(this.m_serverState);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_serverId;
        private byte m_serviceLevel;
        private ServerState m_serverState;
        #endregion
    }

    #region RedundantServerDataTypeCollection Class
    /// <summary>
    /// A collection of RedundantServerDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfRedundantServerDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "RedundantServerDataType")]
    public partial class RedundantServerDataTypeCollection : List<RedundantServerDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public RedundantServerDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public RedundantServerDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public RedundantServerDataTypeCollection(IEnumerable<RedundantServerDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator RedundantServerDataTypeCollection(RedundantServerDataType[] values)
        {
            if (values != null)
            {
                return new RedundantServerDataTypeCollection(values);
            }

            return new RedundantServerDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator RedundantServerDataType[](RedundantServerDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            RedundantServerDataTypeCollection clone = new RedundantServerDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((RedundantServerDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region EndpointUrlListDataType Class
    #if (!OPCUA_EXCLUDE_EndpointUrlListDataType)
    /// <summary>
    /// A description for the EndpointUrlListDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EndpointUrlListDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EndpointUrlListDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_endpointUrlList = new StringCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the EndpointUrlList field.
        /// </summary>
        [DataMember(Name = "EndpointUrlList", IsRequired = false, Order = 1)]
        public StringCollection EndpointUrlList
        {
            get
            {
                return m_endpointUrlList;
            }

            set
            {
                m_endpointUrlList = value;

                if (value == null)
                {
                    m_endpointUrlList = new StringCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EndpointUrlListDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EndpointUrlListDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EndpointUrlListDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStringArray("EndpointUrlList", EndpointUrlList);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EndpointUrlList = decoder.ReadStringArray("EndpointUrlList");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EndpointUrlListDataType value = encodeable as EndpointUrlListDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_endpointUrlList, value.m_endpointUrlList)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EndpointUrlListDataType clone = new EndpointUrlListDataType();

            clone.m_endpointUrlList = (StringCollection)Utils.Clone(this.m_endpointUrlList);

            return clone;
        }
        #endregion

        #region Private Fields
        private StringCollection m_endpointUrlList;
        #endregion
    }

    #region EndpointUrlListDataTypeCollection Class
    /// <summary>
    /// A collection of EndpointUrlListDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfEndpointUrlListDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "EndpointUrlListDataType")]
    public partial class EndpointUrlListDataTypeCollection : List<EndpointUrlListDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public EndpointUrlListDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public EndpointUrlListDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public EndpointUrlListDataTypeCollection(IEnumerable<EndpointUrlListDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator EndpointUrlListDataTypeCollection(EndpointUrlListDataType[] values)
        {
            if (values != null)
            {
                return new EndpointUrlListDataTypeCollection(values);
            }

            return new EndpointUrlListDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator EndpointUrlListDataType[](EndpointUrlListDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            EndpointUrlListDataTypeCollection clone = new EndpointUrlListDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((EndpointUrlListDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region NetworkGroupDataType Class
    #if (!OPCUA_EXCLUDE_NetworkGroupDataType)
    /// <summary>
    /// A description for the NetworkGroupDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class NetworkGroupDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public NetworkGroupDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_serverUri = null;
            m_networkPaths = new EndpointUrlListDataTypeCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ServerUri field.
        /// </summary>
        [DataMember(Name = "ServerUri", IsRequired = false, Order = 1)]
        public string ServerUri
        {
            get { return m_serverUri;  }
            set { m_serverUri = value; }
        }

        /// <summary>
        /// A description for the NetworkPaths field.
        /// </summary>
        [DataMember(Name = "NetworkPaths", IsRequired = false, Order = 2)]
        public EndpointUrlListDataTypeCollection NetworkPaths
        {
            get
            {
                return m_networkPaths;
            }

            set
            {
                m_networkPaths = value;

                if (value == null)
                {
                    m_networkPaths = new EndpointUrlListDataTypeCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.NetworkGroupDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.NetworkGroupDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.NetworkGroupDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteEncodeableArray("NetworkPaths", NetworkPaths.ToArray(), typeof(EndpointUrlListDataType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ServerUri = decoder.ReadString("ServerUri");
            NetworkPaths = (EndpointUrlListDataTypeCollection)decoder.ReadEncodeableArray("NetworkPaths", typeof(EndpointUrlListDataType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            NetworkGroupDataType value = encodeable as NetworkGroupDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_serverUri, value.m_serverUri)) return false;
            if (!Utils.IsEqual(m_networkPaths, value.m_networkPaths)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            NetworkGroupDataType clone = new NetworkGroupDataType();

            clone.m_serverUri = (string)Utils.Clone(this.m_serverUri);
            clone.m_networkPaths = (EndpointUrlListDataTypeCollection)Utils.Clone(this.m_networkPaths);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_serverUri;
        private EndpointUrlListDataTypeCollection m_networkPaths;
        #endregion
    }

    #region NetworkGroupDataTypeCollection Class
    /// <summary>
    /// A collection of NetworkGroupDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfNetworkGroupDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "NetworkGroupDataType")]
    public partial class NetworkGroupDataTypeCollection : List<NetworkGroupDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public NetworkGroupDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public NetworkGroupDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public NetworkGroupDataTypeCollection(IEnumerable<NetworkGroupDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator NetworkGroupDataTypeCollection(NetworkGroupDataType[] values)
        {
            if (values != null)
            {
                return new NetworkGroupDataTypeCollection(values);
            }

            return new NetworkGroupDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator NetworkGroupDataType[](NetworkGroupDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            NetworkGroupDataTypeCollection clone = new NetworkGroupDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((NetworkGroupDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsDataType Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsDataType)
    /// <summary>
    /// A description for the SamplingIntervalDiagnosticsDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SamplingIntervalDiagnosticsDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SamplingIntervalDiagnosticsDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_samplingInterval = (double)0;
            m_monitoredItemCount = (uint)0;
            m_maxMonitoredItemCount = (uint)0;
            m_disabledMonitoredItemCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SamplingInterval field.
        /// </summary>
        [DataMember(Name = "SamplingInterval", IsRequired = false, Order = 1)]
        public double SamplingInterval
        {
            get { return m_samplingInterval;  }
            set { m_samplingInterval = value; }
        }

        /// <summary>
        /// A description for the MonitoredItemCount field.
        /// </summary>
        [DataMember(Name = "MonitoredItemCount", IsRequired = false, Order = 2)]
        public uint MonitoredItemCount
        {
            get { return m_monitoredItemCount;  }
            set { m_monitoredItemCount = value; }
        }

        /// <summary>
        /// A description for the MaxMonitoredItemCount field.
        /// </summary>
        [DataMember(Name = "MaxMonitoredItemCount", IsRequired = false, Order = 3)]
        public uint MaxMonitoredItemCount
        {
            get { return m_maxMonitoredItemCount;  }
            set { m_maxMonitoredItemCount = value; }
        }

        /// <summary>
        /// A description for the DisabledMonitoredItemCount field.
        /// </summary>
        [DataMember(Name = "DisabledMonitoredItemCount", IsRequired = false, Order = 4)]
        public uint DisabledMonitoredItemCount
        {
            get { return m_disabledMonitoredItemCount;  }
            set { m_disabledMonitoredItemCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SamplingIntervalDiagnosticsDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SamplingIntervalDiagnosticsDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SamplingIntervalDiagnosticsDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDouble("SamplingInterval", SamplingInterval);
            encoder.WriteUInt32("MonitoredItemCount", MonitoredItemCount);
            encoder.WriteUInt32("MaxMonitoredItemCount", MaxMonitoredItemCount);
            encoder.WriteUInt32("DisabledMonitoredItemCount", DisabledMonitoredItemCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SamplingInterval = decoder.ReadDouble("SamplingInterval");
            MonitoredItemCount = decoder.ReadUInt32("MonitoredItemCount");
            MaxMonitoredItemCount = decoder.ReadUInt32("MaxMonitoredItemCount");
            DisabledMonitoredItemCount = decoder.ReadUInt32("DisabledMonitoredItemCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SamplingIntervalDiagnosticsDataType value = encodeable as SamplingIntervalDiagnosticsDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_samplingInterval, value.m_samplingInterval)) return false;
            if (!Utils.IsEqual(m_monitoredItemCount, value.m_monitoredItemCount)) return false;
            if (!Utils.IsEqual(m_maxMonitoredItemCount, value.m_maxMonitoredItemCount)) return false;
            if (!Utils.IsEqual(m_disabledMonitoredItemCount, value.m_disabledMonitoredItemCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SamplingIntervalDiagnosticsDataType clone = new SamplingIntervalDiagnosticsDataType();

            clone.m_samplingInterval = (double)Utils.Clone(this.m_samplingInterval);
            clone.m_monitoredItemCount = (uint)Utils.Clone(this.m_monitoredItemCount);
            clone.m_maxMonitoredItemCount = (uint)Utils.Clone(this.m_maxMonitoredItemCount);
            clone.m_disabledMonitoredItemCount = (uint)Utils.Clone(this.m_disabledMonitoredItemCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private double m_samplingInterval;
        private uint m_monitoredItemCount;
        private uint m_maxMonitoredItemCount;
        private uint m_disabledMonitoredItemCount;
        #endregion
    }

    #region SamplingIntervalDiagnosticsDataTypeCollection Class
    /// <summary>
    /// A collection of SamplingIntervalDiagnosticsDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSamplingIntervalDiagnosticsDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SamplingIntervalDiagnosticsDataType")]
    public partial class SamplingIntervalDiagnosticsDataTypeCollection : List<SamplingIntervalDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SamplingIntervalDiagnosticsDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SamplingIntervalDiagnosticsDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SamplingIntervalDiagnosticsDataTypeCollection(IEnumerable<SamplingIntervalDiagnosticsDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SamplingIntervalDiagnosticsDataTypeCollection(SamplingIntervalDiagnosticsDataType[] values)
        {
            if (values != null)
            {
                return new SamplingIntervalDiagnosticsDataTypeCollection(values);
            }

            return new SamplingIntervalDiagnosticsDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SamplingIntervalDiagnosticsDataType[](SamplingIntervalDiagnosticsDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SamplingIntervalDiagnosticsDataTypeCollection clone = new SamplingIntervalDiagnosticsDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SamplingIntervalDiagnosticsDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ServerDiagnosticsSummaryDataType Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsSummaryDataType)
    /// <summary>
    /// A description for the ServerDiagnosticsSummaryDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ServerDiagnosticsSummaryDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ServerDiagnosticsSummaryDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_serverViewCount = (uint)0;
            m_currentSessionCount = (uint)0;
            m_cumulatedSessionCount = (uint)0;
            m_securityRejectedSessionCount = (uint)0;
            m_rejectedSessionCount = (uint)0;
            m_sessionTimeoutCount = (uint)0;
            m_sessionAbortCount = (uint)0;
            m_currentSubscriptionCount = (uint)0;
            m_cumulatedSubscriptionCount = (uint)0;
            m_publishingIntervalCount = (uint)0;
            m_securityRejectedRequestsCount = (uint)0;
            m_rejectedRequestsCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the ServerViewCount field.
        /// </summary>
        [DataMember(Name = "ServerViewCount", IsRequired = false, Order = 1)]
        public uint ServerViewCount
        {
            get { return m_serverViewCount;  }
            set { m_serverViewCount = value; }
        }

        /// <summary>
        /// A description for the CurrentSessionCount field.
        /// </summary>
        [DataMember(Name = "CurrentSessionCount", IsRequired = false, Order = 2)]
        public uint CurrentSessionCount
        {
            get { return m_currentSessionCount;  }
            set { m_currentSessionCount = value; }
        }

        /// <summary>
        /// A description for the CumulatedSessionCount field.
        /// </summary>
        [DataMember(Name = "CumulatedSessionCount", IsRequired = false, Order = 3)]
        public uint CumulatedSessionCount
        {
            get { return m_cumulatedSessionCount;  }
            set { m_cumulatedSessionCount = value; }
        }

        /// <summary>
        /// A description for the SecurityRejectedSessionCount field.
        /// </summary>
        [DataMember(Name = "SecurityRejectedSessionCount", IsRequired = false, Order = 4)]
        public uint SecurityRejectedSessionCount
        {
            get { return m_securityRejectedSessionCount;  }
            set { m_securityRejectedSessionCount = value; }
        }

        /// <summary>
        /// A description for the RejectedSessionCount field.
        /// </summary>
        [DataMember(Name = "RejectedSessionCount", IsRequired = false, Order = 5)]
        public uint RejectedSessionCount
        {
            get { return m_rejectedSessionCount;  }
            set { m_rejectedSessionCount = value; }
        }

        /// <summary>
        /// A description for the SessionTimeoutCount field.
        /// </summary>
        [DataMember(Name = "SessionTimeoutCount", IsRequired = false, Order = 6)]
        public uint SessionTimeoutCount
        {
            get { return m_sessionTimeoutCount;  }
            set { m_sessionTimeoutCount = value; }
        }

        /// <summary>
        /// A description for the SessionAbortCount field.
        /// </summary>
        [DataMember(Name = "SessionAbortCount", IsRequired = false, Order = 7)]
        public uint SessionAbortCount
        {
            get { return m_sessionAbortCount;  }
            set { m_sessionAbortCount = value; }
        }

        /// <summary>
        /// A description for the CurrentSubscriptionCount field.
        /// </summary>
        [DataMember(Name = "CurrentSubscriptionCount", IsRequired = false, Order = 8)]
        public uint CurrentSubscriptionCount
        {
            get { return m_currentSubscriptionCount;  }
            set { m_currentSubscriptionCount = value; }
        }

        /// <summary>
        /// A description for the CumulatedSubscriptionCount field.
        /// </summary>
        [DataMember(Name = "CumulatedSubscriptionCount", IsRequired = false, Order = 9)]
        public uint CumulatedSubscriptionCount
        {
            get { return m_cumulatedSubscriptionCount;  }
            set { m_cumulatedSubscriptionCount = value; }
        }

        /// <summary>
        /// A description for the PublishingIntervalCount field.
        /// </summary>
        [DataMember(Name = "PublishingIntervalCount", IsRequired = false, Order = 10)]
        public uint PublishingIntervalCount
        {
            get { return m_publishingIntervalCount;  }
            set { m_publishingIntervalCount = value; }
        }

        /// <summary>
        /// A description for the SecurityRejectedRequestsCount field.
        /// </summary>
        [DataMember(Name = "SecurityRejectedRequestsCount", IsRequired = false, Order = 11)]
        public uint SecurityRejectedRequestsCount
        {
            get { return m_securityRejectedRequestsCount;  }
            set { m_securityRejectedRequestsCount = value; }
        }

        /// <summary>
        /// A description for the RejectedRequestsCount field.
        /// </summary>
        [DataMember(Name = "RejectedRequestsCount", IsRequired = false, Order = 12)]
        public uint RejectedRequestsCount
        {
            get { return m_rejectedRequestsCount;  }
            set { m_rejectedRequestsCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ServerDiagnosticsSummaryDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ServerDiagnosticsSummaryDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ServerDiagnosticsSummaryDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("ServerViewCount", ServerViewCount);
            encoder.WriteUInt32("CurrentSessionCount", CurrentSessionCount);
            encoder.WriteUInt32("CumulatedSessionCount", CumulatedSessionCount);
            encoder.WriteUInt32("SecurityRejectedSessionCount", SecurityRejectedSessionCount);
            encoder.WriteUInt32("RejectedSessionCount", RejectedSessionCount);
            encoder.WriteUInt32("SessionTimeoutCount", SessionTimeoutCount);
            encoder.WriteUInt32("SessionAbortCount", SessionAbortCount);
            encoder.WriteUInt32("CurrentSubscriptionCount", CurrentSubscriptionCount);
            encoder.WriteUInt32("CumulatedSubscriptionCount", CumulatedSubscriptionCount);
            encoder.WriteUInt32("PublishingIntervalCount", PublishingIntervalCount);
            encoder.WriteUInt32("SecurityRejectedRequestsCount", SecurityRejectedRequestsCount);
            encoder.WriteUInt32("RejectedRequestsCount", RejectedRequestsCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            ServerViewCount = decoder.ReadUInt32("ServerViewCount");
            CurrentSessionCount = decoder.ReadUInt32("CurrentSessionCount");
            CumulatedSessionCount = decoder.ReadUInt32("CumulatedSessionCount");
            SecurityRejectedSessionCount = decoder.ReadUInt32("SecurityRejectedSessionCount");
            RejectedSessionCount = decoder.ReadUInt32("RejectedSessionCount");
            SessionTimeoutCount = decoder.ReadUInt32("SessionTimeoutCount");
            SessionAbortCount = decoder.ReadUInt32("SessionAbortCount");
            CurrentSubscriptionCount = decoder.ReadUInt32("CurrentSubscriptionCount");
            CumulatedSubscriptionCount = decoder.ReadUInt32("CumulatedSubscriptionCount");
            PublishingIntervalCount = decoder.ReadUInt32("PublishingIntervalCount");
            SecurityRejectedRequestsCount = decoder.ReadUInt32("SecurityRejectedRequestsCount");
            RejectedRequestsCount = decoder.ReadUInt32("RejectedRequestsCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ServerDiagnosticsSummaryDataType value = encodeable as ServerDiagnosticsSummaryDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_serverViewCount, value.m_serverViewCount)) return false;
            if (!Utils.IsEqual(m_currentSessionCount, value.m_currentSessionCount)) return false;
            if (!Utils.IsEqual(m_cumulatedSessionCount, value.m_cumulatedSessionCount)) return false;
            if (!Utils.IsEqual(m_securityRejectedSessionCount, value.m_securityRejectedSessionCount)) return false;
            if (!Utils.IsEqual(m_rejectedSessionCount, value.m_rejectedSessionCount)) return false;
            if (!Utils.IsEqual(m_sessionTimeoutCount, value.m_sessionTimeoutCount)) return false;
            if (!Utils.IsEqual(m_sessionAbortCount, value.m_sessionAbortCount)) return false;
            if (!Utils.IsEqual(m_currentSubscriptionCount, value.m_currentSubscriptionCount)) return false;
            if (!Utils.IsEqual(m_cumulatedSubscriptionCount, value.m_cumulatedSubscriptionCount)) return false;
            if (!Utils.IsEqual(m_publishingIntervalCount, value.m_publishingIntervalCount)) return false;
            if (!Utils.IsEqual(m_securityRejectedRequestsCount, value.m_securityRejectedRequestsCount)) return false;
            if (!Utils.IsEqual(m_rejectedRequestsCount, value.m_rejectedRequestsCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ServerDiagnosticsSummaryDataType clone = new ServerDiagnosticsSummaryDataType();

            clone.m_serverViewCount = (uint)Utils.Clone(this.m_serverViewCount);
            clone.m_currentSessionCount = (uint)Utils.Clone(this.m_currentSessionCount);
            clone.m_cumulatedSessionCount = (uint)Utils.Clone(this.m_cumulatedSessionCount);
            clone.m_securityRejectedSessionCount = (uint)Utils.Clone(this.m_securityRejectedSessionCount);
            clone.m_rejectedSessionCount = (uint)Utils.Clone(this.m_rejectedSessionCount);
            clone.m_sessionTimeoutCount = (uint)Utils.Clone(this.m_sessionTimeoutCount);
            clone.m_sessionAbortCount = (uint)Utils.Clone(this.m_sessionAbortCount);
            clone.m_currentSubscriptionCount = (uint)Utils.Clone(this.m_currentSubscriptionCount);
            clone.m_cumulatedSubscriptionCount = (uint)Utils.Clone(this.m_cumulatedSubscriptionCount);
            clone.m_publishingIntervalCount = (uint)Utils.Clone(this.m_publishingIntervalCount);
            clone.m_securityRejectedRequestsCount = (uint)Utils.Clone(this.m_securityRejectedRequestsCount);
            clone.m_rejectedRequestsCount = (uint)Utils.Clone(this.m_rejectedRequestsCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_serverViewCount;
        private uint m_currentSessionCount;
        private uint m_cumulatedSessionCount;
        private uint m_securityRejectedSessionCount;
        private uint m_rejectedSessionCount;
        private uint m_sessionTimeoutCount;
        private uint m_sessionAbortCount;
        private uint m_currentSubscriptionCount;
        private uint m_cumulatedSubscriptionCount;
        private uint m_publishingIntervalCount;
        private uint m_securityRejectedRequestsCount;
        private uint m_rejectedRequestsCount;
        #endregion
    }
    #endif
    #endregion

    #region ServerStatusDataType Class
    #if (!OPCUA_EXCLUDE_ServerStatusDataType)
    /// <summary>
    /// A description for the ServerStatusDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ServerStatusDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ServerStatusDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_startTime = DateTime.MinValue;
            m_currentTime = DateTime.MinValue;
            m_state = ServerState.Running;
            m_buildInfo = new BuildInfo();
            m_secondsTillShutdown = (uint)0;
            m_shutdownReason = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StartTime field.
        /// </summary>
        [DataMember(Name = "StartTime", IsRequired = false, Order = 1)]
        public DateTime StartTime
        {
            get { return m_startTime;  }
            set { m_startTime = value; }
        }

        /// <summary>
        /// A description for the CurrentTime field.
        /// </summary>
        [DataMember(Name = "CurrentTime", IsRequired = false, Order = 2)]
        public DateTime CurrentTime
        {
            get { return m_currentTime;  }
            set { m_currentTime = value; }
        }

        /// <summary>
        /// A description for the State field.
        /// </summary>
        [DataMember(Name = "State", IsRequired = false, Order = 3)]
        public ServerState State
        {
            get { return m_state;  }
            set { m_state = value; }
        }

        /// <summary>
        /// A description for the BuildInfo field.
        /// </summary>
        [DataMember(Name = "BuildInfo", IsRequired = false, Order = 4)]
        public BuildInfo BuildInfo
        {
            get
            {
                return m_buildInfo;
            }

            set
            {
                m_buildInfo = value;

                if (value == null)
                {
                    m_buildInfo = new BuildInfo();
                }
            }
        }

        /// <summary>
        /// A description for the SecondsTillShutdown field.
        /// </summary>
        [DataMember(Name = "SecondsTillShutdown", IsRequired = false, Order = 5)]
        public uint SecondsTillShutdown
        {
            get { return m_secondsTillShutdown;  }
            set { m_secondsTillShutdown = value; }
        }

        /// <summary>
        /// A description for the ShutdownReason field.
        /// </summary>
        [DataMember(Name = "ShutdownReason", IsRequired = false, Order = 6)]
        public LocalizedText ShutdownReason
        {
            get { return m_shutdownReason;  }
            set { m_shutdownReason = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ServerStatusDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ServerStatusDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ServerStatusDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDateTime("StartTime", StartTime);
            encoder.WriteDateTime("CurrentTime", CurrentTime);
            encoder.WriteEnumerated("State", State);
            encoder.WriteEncodeable("BuildInfo", BuildInfo, typeof(BuildInfo));
            encoder.WriteUInt32("SecondsTillShutdown", SecondsTillShutdown);
            encoder.WriteLocalizedText("ShutdownReason", ShutdownReason);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StartTime = decoder.ReadDateTime("StartTime");
            CurrentTime = decoder.ReadDateTime("CurrentTime");
            State = (ServerState)decoder.ReadEnumerated("State", typeof(ServerState));
            BuildInfo = (BuildInfo)decoder.ReadEncodeable("BuildInfo", typeof(BuildInfo));
            SecondsTillShutdown = decoder.ReadUInt32("SecondsTillShutdown");
            ShutdownReason = decoder.ReadLocalizedText("ShutdownReason");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ServerStatusDataType value = encodeable as ServerStatusDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_startTime, value.m_startTime)) return false;
            if (!Utils.IsEqual(m_currentTime, value.m_currentTime)) return false;
            if (!Utils.IsEqual(m_state, value.m_state)) return false;
            if (!Utils.IsEqual(m_buildInfo, value.m_buildInfo)) return false;
            if (!Utils.IsEqual(m_secondsTillShutdown, value.m_secondsTillShutdown)) return false;
            if (!Utils.IsEqual(m_shutdownReason, value.m_shutdownReason)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ServerStatusDataType clone = new ServerStatusDataType();

            clone.m_startTime = (DateTime)Utils.Clone(this.m_startTime);
            clone.m_currentTime = (DateTime)Utils.Clone(this.m_currentTime);
            clone.m_state = (ServerState)Utils.Clone(this.m_state);
            clone.m_buildInfo = (BuildInfo)Utils.Clone(this.m_buildInfo);
            clone.m_secondsTillShutdown = (uint)Utils.Clone(this.m_secondsTillShutdown);
            clone.m_shutdownReason = (LocalizedText)Utils.Clone(this.m_shutdownReason);

            return clone;
        }
        #endregion

        #region Private Fields
        private DateTime m_startTime;
        private DateTime m_currentTime;
        private ServerState m_state;
        private BuildInfo m_buildInfo;
        private uint m_secondsTillShutdown;
        private LocalizedText m_shutdownReason;
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsDataType Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsDataType)
    /// <summary>
    /// A description for the SessionDiagnosticsDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SessionDiagnosticsDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SessionDiagnosticsDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sessionId = null;
            m_sessionName = null;
            m_clientDescription = new ApplicationDescription();
            m_serverUri = null;
            m_endpointUrl = null;
            m_localeIds = new StringCollection();
            m_actualSessionTimeout = (double)0;
            m_maxResponseMessageSize = (uint)0;
            m_clientConnectionTime = DateTime.MinValue;
            m_clientLastContactTime = DateTime.MinValue;
            m_currentSubscriptionsCount = (uint)0;
            m_currentMonitoredItemsCount = (uint)0;
            m_currentPublishRequestsInQueue = (uint)0;
            m_totalRequestCount = new ServiceCounterDataType();
            m_unauthorizedRequestCount = (uint)0;
            m_readCount = new ServiceCounterDataType();
            m_historyReadCount = new ServiceCounterDataType();
            m_writeCount = new ServiceCounterDataType();
            m_historyUpdateCount = new ServiceCounterDataType();
            m_callCount = new ServiceCounterDataType();
            m_createMonitoredItemsCount = new ServiceCounterDataType();
            m_modifyMonitoredItemsCount = new ServiceCounterDataType();
            m_setMonitoringModeCount = new ServiceCounterDataType();
            m_setTriggeringCount = new ServiceCounterDataType();
            m_deleteMonitoredItemsCount = new ServiceCounterDataType();
            m_createSubscriptionCount = new ServiceCounterDataType();
            m_modifySubscriptionCount = new ServiceCounterDataType();
            m_setPublishingModeCount = new ServiceCounterDataType();
            m_publishCount = new ServiceCounterDataType();
            m_republishCount = new ServiceCounterDataType();
            m_transferSubscriptionsCount = new ServiceCounterDataType();
            m_deleteSubscriptionsCount = new ServiceCounterDataType();
            m_addNodesCount = new ServiceCounterDataType();
            m_addReferencesCount = new ServiceCounterDataType();
            m_deleteNodesCount = new ServiceCounterDataType();
            m_deleteReferencesCount = new ServiceCounterDataType();
            m_browseCount = new ServiceCounterDataType();
            m_browseNextCount = new ServiceCounterDataType();
            m_translateBrowsePathsToNodeIdsCount = new ServiceCounterDataType();
            m_queryFirstCount = new ServiceCounterDataType();
            m_queryNextCount = new ServiceCounterDataType();
            m_registerNodesCount = new ServiceCounterDataType();
            m_unregisterNodesCount = new ServiceCounterDataType();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SessionId field.
        /// </summary>
        [DataMember(Name = "SessionId", IsRequired = false, Order = 1)]
        public NodeId SessionId
        {
            get { return m_sessionId;  }
            set { m_sessionId = value; }
        }

        /// <summary>
        /// A description for the SessionName field.
        /// </summary>
        [DataMember(Name = "SessionName", IsRequired = false, Order = 2)]
        public string SessionName
        {
            get { return m_sessionName;  }
            set { m_sessionName = value; }
        }

        /// <summary>
        /// A description for the ClientDescription field.
        /// </summary>
        [DataMember(Name = "ClientDescription", IsRequired = false, Order = 3)]
        public ApplicationDescription ClientDescription
        {
            get
            {
                return m_clientDescription;
            }

            set
            {
                m_clientDescription = value;

                if (value == null)
                {
                    m_clientDescription = new ApplicationDescription();
                }
            }
        }

        /// <summary>
        /// A description for the ServerUri field.
        /// </summary>
        [DataMember(Name = "ServerUri", IsRequired = false, Order = 4)]
        public string ServerUri
        {
            get { return m_serverUri;  }
            set { m_serverUri = value; }
        }

        /// <summary>
        /// A description for the EndpointUrl field.
        /// </summary>
        [DataMember(Name = "EndpointUrl", IsRequired = false, Order = 5)]
        public string EndpointUrl
        {
            get { return m_endpointUrl;  }
            set { m_endpointUrl = value; }
        }

        /// <summary>
        /// A description for the LocaleIds field.
        /// </summary>
        [DataMember(Name = "LocaleIds", IsRequired = false, Order = 6)]
        public StringCollection LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                m_localeIds = value;

                if (value == null)
                {
                    m_localeIds = new StringCollection();
                }
            }
        }

        /// <summary>
        /// A description for the ActualSessionTimeout field.
        /// </summary>
        [DataMember(Name = "ActualSessionTimeout", IsRequired = false, Order = 7)]
        public double ActualSessionTimeout
        {
            get { return m_actualSessionTimeout;  }
            set { m_actualSessionTimeout = value; }
        }

        /// <summary>
        /// A description for the MaxResponseMessageSize field.
        /// </summary>
        [DataMember(Name = "MaxResponseMessageSize", IsRequired = false, Order = 8)]
        public uint MaxResponseMessageSize
        {
            get { return m_maxResponseMessageSize;  }
            set { m_maxResponseMessageSize = value; }
        }

        /// <summary>
        /// A description for the ClientConnectionTime field.
        /// </summary>
        [DataMember(Name = "ClientConnectionTime", IsRequired = false, Order = 9)]
        public DateTime ClientConnectionTime
        {
            get { return m_clientConnectionTime;  }
            set { m_clientConnectionTime = value; }
        }

        /// <summary>
        /// A description for the ClientLastContactTime field.
        /// </summary>
        [DataMember(Name = "ClientLastContactTime", IsRequired = false, Order = 10)]
        public DateTime ClientLastContactTime
        {
            get { return m_clientLastContactTime;  }
            set { m_clientLastContactTime = value; }
        }

        /// <summary>
        /// A description for the CurrentSubscriptionsCount field.
        /// </summary>
        [DataMember(Name = "CurrentSubscriptionsCount", IsRequired = false, Order = 11)]
        public uint CurrentSubscriptionsCount
        {
            get { return m_currentSubscriptionsCount;  }
            set { m_currentSubscriptionsCount = value; }
        }

        /// <summary>
        /// A description for the CurrentMonitoredItemsCount field.
        /// </summary>
        [DataMember(Name = "CurrentMonitoredItemsCount", IsRequired = false, Order = 12)]
        public uint CurrentMonitoredItemsCount
        {
            get { return m_currentMonitoredItemsCount;  }
            set { m_currentMonitoredItemsCount = value; }
        }

        /// <summary>
        /// A description for the CurrentPublishRequestsInQueue field.
        /// </summary>
        [DataMember(Name = "CurrentPublishRequestsInQueue", IsRequired = false, Order = 13)]
        public uint CurrentPublishRequestsInQueue
        {
            get { return m_currentPublishRequestsInQueue;  }
            set { m_currentPublishRequestsInQueue = value; }
        }

        /// <summary>
        /// A description for the TotalRequestCount field.
        /// </summary>
        [DataMember(Name = "TotalRequestCount", IsRequired = false, Order = 14)]
        public ServiceCounterDataType TotalRequestCount
        {
            get
            {
                return m_totalRequestCount;
            }

            set
            {
                m_totalRequestCount = value;

                if (value == null)
                {
                    m_totalRequestCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the UnauthorizedRequestCount field.
        /// </summary>
        [DataMember(Name = "UnauthorizedRequestCount", IsRequired = false, Order = 15)]
        public uint UnauthorizedRequestCount
        {
            get { return m_unauthorizedRequestCount;  }
            set { m_unauthorizedRequestCount = value; }
        }

        /// <summary>
        /// A description for the ReadCount field.
        /// </summary>
        [DataMember(Name = "ReadCount", IsRequired = false, Order = 16)]
        public ServiceCounterDataType ReadCount
        {
            get
            {
                return m_readCount;
            }

            set
            {
                m_readCount = value;

                if (value == null)
                {
                    m_readCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the HistoryReadCount field.
        /// </summary>
        [DataMember(Name = "HistoryReadCount", IsRequired = false, Order = 17)]
        public ServiceCounterDataType HistoryReadCount
        {
            get
            {
                return m_historyReadCount;
            }

            set
            {
                m_historyReadCount = value;

                if (value == null)
                {
                    m_historyReadCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the WriteCount field.
        /// </summary>
        [DataMember(Name = "WriteCount", IsRequired = false, Order = 18)]
        public ServiceCounterDataType WriteCount
        {
            get
            {
                return m_writeCount;
            }

            set
            {
                m_writeCount = value;

                if (value == null)
                {
                    m_writeCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the HistoryUpdateCount field.
        /// </summary>
        [DataMember(Name = "HistoryUpdateCount", IsRequired = false, Order = 19)]
        public ServiceCounterDataType HistoryUpdateCount
        {
            get
            {
                return m_historyUpdateCount;
            }

            set
            {
                m_historyUpdateCount = value;

                if (value == null)
                {
                    m_historyUpdateCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the CallCount field.
        /// </summary>
        [DataMember(Name = "CallCount", IsRequired = false, Order = 20)]
        public ServiceCounterDataType CallCount
        {
            get
            {
                return m_callCount;
            }

            set
            {
                m_callCount = value;

                if (value == null)
                {
                    m_callCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the CreateMonitoredItemsCount field.
        /// </summary>
        [DataMember(Name = "CreateMonitoredItemsCount", IsRequired = false, Order = 21)]
        public ServiceCounterDataType CreateMonitoredItemsCount
        {
            get
            {
                return m_createMonitoredItemsCount;
            }

            set
            {
                m_createMonitoredItemsCount = value;

                if (value == null)
                {
                    m_createMonitoredItemsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the ModifyMonitoredItemsCount field.
        /// </summary>
        [DataMember(Name = "ModifyMonitoredItemsCount", IsRequired = false, Order = 22)]
        public ServiceCounterDataType ModifyMonitoredItemsCount
        {
            get
            {
                return m_modifyMonitoredItemsCount;
            }

            set
            {
                m_modifyMonitoredItemsCount = value;

                if (value == null)
                {
                    m_modifyMonitoredItemsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the SetMonitoringModeCount field.
        /// </summary>
        [DataMember(Name = "SetMonitoringModeCount", IsRequired = false, Order = 23)]
        public ServiceCounterDataType SetMonitoringModeCount
        {
            get
            {
                return m_setMonitoringModeCount;
            }

            set
            {
                m_setMonitoringModeCount = value;

                if (value == null)
                {
                    m_setMonitoringModeCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the SetTriggeringCount field.
        /// </summary>
        [DataMember(Name = "SetTriggeringCount", IsRequired = false, Order = 24)]
        public ServiceCounterDataType SetTriggeringCount
        {
            get
            {
                return m_setTriggeringCount;
            }

            set
            {
                m_setTriggeringCount = value;

                if (value == null)
                {
                    m_setTriggeringCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the DeleteMonitoredItemsCount field.
        /// </summary>
        [DataMember(Name = "DeleteMonitoredItemsCount", IsRequired = false, Order = 25)]
        public ServiceCounterDataType DeleteMonitoredItemsCount
        {
            get
            {
                return m_deleteMonitoredItemsCount;
            }

            set
            {
                m_deleteMonitoredItemsCount = value;

                if (value == null)
                {
                    m_deleteMonitoredItemsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the CreateSubscriptionCount field.
        /// </summary>
        [DataMember(Name = "CreateSubscriptionCount", IsRequired = false, Order = 26)]
        public ServiceCounterDataType CreateSubscriptionCount
        {
            get
            {
                return m_createSubscriptionCount;
            }

            set
            {
                m_createSubscriptionCount = value;

                if (value == null)
                {
                    m_createSubscriptionCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the ModifySubscriptionCount field.
        /// </summary>
        [DataMember(Name = "ModifySubscriptionCount", IsRequired = false, Order = 27)]
        public ServiceCounterDataType ModifySubscriptionCount
        {
            get
            {
                return m_modifySubscriptionCount;
            }

            set
            {
                m_modifySubscriptionCount = value;

                if (value == null)
                {
                    m_modifySubscriptionCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the SetPublishingModeCount field.
        /// </summary>
        [DataMember(Name = "SetPublishingModeCount", IsRequired = false, Order = 28)]
        public ServiceCounterDataType SetPublishingModeCount
        {
            get
            {
                return m_setPublishingModeCount;
            }

            set
            {
                m_setPublishingModeCount = value;

                if (value == null)
                {
                    m_setPublishingModeCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the PublishCount field.
        /// </summary>
        [DataMember(Name = "PublishCount", IsRequired = false, Order = 29)]
        public ServiceCounterDataType PublishCount
        {
            get
            {
                return m_publishCount;
            }

            set
            {
                m_publishCount = value;

                if (value == null)
                {
                    m_publishCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the RepublishCount field.
        /// </summary>
        [DataMember(Name = "RepublishCount", IsRequired = false, Order = 30)]
        public ServiceCounterDataType RepublishCount
        {
            get
            {
                return m_republishCount;
            }

            set
            {
                m_republishCount = value;

                if (value == null)
                {
                    m_republishCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the TransferSubscriptionsCount field.
        /// </summary>
        [DataMember(Name = "TransferSubscriptionsCount", IsRequired = false, Order = 31)]
        public ServiceCounterDataType TransferSubscriptionsCount
        {
            get
            {
                return m_transferSubscriptionsCount;
            }

            set
            {
                m_transferSubscriptionsCount = value;

                if (value == null)
                {
                    m_transferSubscriptionsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the DeleteSubscriptionsCount field.
        /// </summary>
        [DataMember(Name = "DeleteSubscriptionsCount", IsRequired = false, Order = 32)]
        public ServiceCounterDataType DeleteSubscriptionsCount
        {
            get
            {
                return m_deleteSubscriptionsCount;
            }

            set
            {
                m_deleteSubscriptionsCount = value;

                if (value == null)
                {
                    m_deleteSubscriptionsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the AddNodesCount field.
        /// </summary>
        [DataMember(Name = "AddNodesCount", IsRequired = false, Order = 33)]
        public ServiceCounterDataType AddNodesCount
        {
            get
            {
                return m_addNodesCount;
            }

            set
            {
                m_addNodesCount = value;

                if (value == null)
                {
                    m_addNodesCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the AddReferencesCount field.
        /// </summary>
        [DataMember(Name = "AddReferencesCount", IsRequired = false, Order = 34)]
        public ServiceCounterDataType AddReferencesCount
        {
            get
            {
                return m_addReferencesCount;
            }

            set
            {
                m_addReferencesCount = value;

                if (value == null)
                {
                    m_addReferencesCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the DeleteNodesCount field.
        /// </summary>
        [DataMember(Name = "DeleteNodesCount", IsRequired = false, Order = 35)]
        public ServiceCounterDataType DeleteNodesCount
        {
            get
            {
                return m_deleteNodesCount;
            }

            set
            {
                m_deleteNodesCount = value;

                if (value == null)
                {
                    m_deleteNodesCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the DeleteReferencesCount field.
        /// </summary>
        [DataMember(Name = "DeleteReferencesCount", IsRequired = false, Order = 36)]
        public ServiceCounterDataType DeleteReferencesCount
        {
            get
            {
                return m_deleteReferencesCount;
            }

            set
            {
                m_deleteReferencesCount = value;

                if (value == null)
                {
                    m_deleteReferencesCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the BrowseCount field.
        /// </summary>
        [DataMember(Name = "BrowseCount", IsRequired = false, Order = 37)]
        public ServiceCounterDataType BrowseCount
        {
            get
            {
                return m_browseCount;
            }

            set
            {
                m_browseCount = value;

                if (value == null)
                {
                    m_browseCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the BrowseNextCount field.
        /// </summary>
        [DataMember(Name = "BrowseNextCount", IsRequired = false, Order = 38)]
        public ServiceCounterDataType BrowseNextCount
        {
            get
            {
                return m_browseNextCount;
            }

            set
            {
                m_browseNextCount = value;

                if (value == null)
                {
                    m_browseNextCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the TranslateBrowsePathsToNodeIdsCount field.
        /// </summary>
        [DataMember(Name = "TranslateBrowsePathsToNodeIdsCount", IsRequired = false, Order = 39)]
        public ServiceCounterDataType TranslateBrowsePathsToNodeIdsCount
        {
            get
            {
                return m_translateBrowsePathsToNodeIdsCount;
            }

            set
            {
                m_translateBrowsePathsToNodeIdsCount = value;

                if (value == null)
                {
                    m_translateBrowsePathsToNodeIdsCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the QueryFirstCount field.
        /// </summary>
        [DataMember(Name = "QueryFirstCount", IsRequired = false, Order = 40)]
        public ServiceCounterDataType QueryFirstCount
        {
            get
            {
                return m_queryFirstCount;
            }

            set
            {
                m_queryFirstCount = value;

                if (value == null)
                {
                    m_queryFirstCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the QueryNextCount field.
        /// </summary>
        [DataMember(Name = "QueryNextCount", IsRequired = false, Order = 41)]
        public ServiceCounterDataType QueryNextCount
        {
            get
            {
                return m_queryNextCount;
            }

            set
            {
                m_queryNextCount = value;

                if (value == null)
                {
                    m_queryNextCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the RegisterNodesCount field.
        /// </summary>
        [DataMember(Name = "RegisterNodesCount", IsRequired = false, Order = 42)]
        public ServiceCounterDataType RegisterNodesCount
        {
            get
            {
                return m_registerNodesCount;
            }

            set
            {
                m_registerNodesCount = value;

                if (value == null)
                {
                    m_registerNodesCount = new ServiceCounterDataType();
                }
            }
        }

        /// <summary>
        /// A description for the UnregisterNodesCount field.
        /// </summary>
        [DataMember(Name = "UnregisterNodesCount", IsRequired = false, Order = 43)]
        public ServiceCounterDataType UnregisterNodesCount
        {
            get
            {
                return m_unregisterNodesCount;
            }

            set
            {
                m_unregisterNodesCount = value;

                if (value == null)
                {
                    m_unregisterNodesCount = new ServiceCounterDataType();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SessionDiagnosticsDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SessionDiagnosticsDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SessionDiagnosticsDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteString("SessionName", SessionName);
            encoder.WriteEncodeable("ClientDescription", ClientDescription, typeof(ApplicationDescription));
            encoder.WriteString("ServerUri", ServerUri);
            encoder.WriteString("EndpointUrl", EndpointUrl);
            encoder.WriteStringArray("LocaleIds", LocaleIds);
            encoder.WriteDouble("ActualSessionTimeout", ActualSessionTimeout);
            encoder.WriteUInt32("MaxResponseMessageSize", MaxResponseMessageSize);
            encoder.WriteDateTime("ClientConnectionTime", ClientConnectionTime);
            encoder.WriteDateTime("ClientLastContactTime", ClientLastContactTime);
            encoder.WriteUInt32("CurrentSubscriptionsCount", CurrentSubscriptionsCount);
            encoder.WriteUInt32("CurrentMonitoredItemsCount", CurrentMonitoredItemsCount);
            encoder.WriteUInt32("CurrentPublishRequestsInQueue", CurrentPublishRequestsInQueue);
            encoder.WriteEncodeable("TotalRequestCount", TotalRequestCount, typeof(ServiceCounterDataType));
            encoder.WriteUInt32("UnauthorizedRequestCount", UnauthorizedRequestCount);
            encoder.WriteEncodeable("ReadCount", ReadCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("HistoryReadCount", HistoryReadCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("WriteCount", WriteCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("HistoryUpdateCount", HistoryUpdateCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("CallCount", CallCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("CreateMonitoredItemsCount", CreateMonitoredItemsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("ModifyMonitoredItemsCount", ModifyMonitoredItemsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("SetMonitoringModeCount", SetMonitoringModeCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("SetTriggeringCount", SetTriggeringCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("DeleteMonitoredItemsCount", DeleteMonitoredItemsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("CreateSubscriptionCount", CreateSubscriptionCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("ModifySubscriptionCount", ModifySubscriptionCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("SetPublishingModeCount", SetPublishingModeCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("PublishCount", PublishCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("RepublishCount", RepublishCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("TransferSubscriptionsCount", TransferSubscriptionsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("DeleteSubscriptionsCount", DeleteSubscriptionsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("AddNodesCount", AddNodesCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("AddReferencesCount", AddReferencesCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("DeleteNodesCount", DeleteNodesCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("DeleteReferencesCount", DeleteReferencesCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("BrowseCount", BrowseCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("BrowseNextCount", BrowseNextCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("TranslateBrowsePathsToNodeIdsCount", TranslateBrowsePathsToNodeIdsCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("QueryFirstCount", QueryFirstCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("QueryNextCount", QueryNextCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("RegisterNodesCount", RegisterNodesCount, typeof(ServiceCounterDataType));
            encoder.WriteEncodeable("UnregisterNodesCount", UnregisterNodesCount, typeof(ServiceCounterDataType));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SessionId = decoder.ReadNodeId("SessionId");
            SessionName = decoder.ReadString("SessionName");
            ClientDescription = (ApplicationDescription)decoder.ReadEncodeable("ClientDescription", typeof(ApplicationDescription));
            ServerUri = decoder.ReadString("ServerUri");
            EndpointUrl = decoder.ReadString("EndpointUrl");
            LocaleIds = decoder.ReadStringArray("LocaleIds");
            ActualSessionTimeout = decoder.ReadDouble("ActualSessionTimeout");
            MaxResponseMessageSize = decoder.ReadUInt32("MaxResponseMessageSize");
            ClientConnectionTime = decoder.ReadDateTime("ClientConnectionTime");
            ClientLastContactTime = decoder.ReadDateTime("ClientLastContactTime");
            CurrentSubscriptionsCount = decoder.ReadUInt32("CurrentSubscriptionsCount");
            CurrentMonitoredItemsCount = decoder.ReadUInt32("CurrentMonitoredItemsCount");
            CurrentPublishRequestsInQueue = decoder.ReadUInt32("CurrentPublishRequestsInQueue");
            TotalRequestCount = (ServiceCounterDataType)decoder.ReadEncodeable("TotalRequestCount", typeof(ServiceCounterDataType));
            UnauthorizedRequestCount = decoder.ReadUInt32("UnauthorizedRequestCount");
            ReadCount = (ServiceCounterDataType)decoder.ReadEncodeable("ReadCount", typeof(ServiceCounterDataType));
            HistoryReadCount = (ServiceCounterDataType)decoder.ReadEncodeable("HistoryReadCount", typeof(ServiceCounterDataType));
            WriteCount = (ServiceCounterDataType)decoder.ReadEncodeable("WriteCount", typeof(ServiceCounterDataType));
            HistoryUpdateCount = (ServiceCounterDataType)decoder.ReadEncodeable("HistoryUpdateCount", typeof(ServiceCounterDataType));
            CallCount = (ServiceCounterDataType)decoder.ReadEncodeable("CallCount", typeof(ServiceCounterDataType));
            CreateMonitoredItemsCount = (ServiceCounterDataType)decoder.ReadEncodeable("CreateMonitoredItemsCount", typeof(ServiceCounterDataType));
            ModifyMonitoredItemsCount = (ServiceCounterDataType)decoder.ReadEncodeable("ModifyMonitoredItemsCount", typeof(ServiceCounterDataType));
            SetMonitoringModeCount = (ServiceCounterDataType)decoder.ReadEncodeable("SetMonitoringModeCount", typeof(ServiceCounterDataType));
            SetTriggeringCount = (ServiceCounterDataType)decoder.ReadEncodeable("SetTriggeringCount", typeof(ServiceCounterDataType));
            DeleteMonitoredItemsCount = (ServiceCounterDataType)decoder.ReadEncodeable("DeleteMonitoredItemsCount", typeof(ServiceCounterDataType));
            CreateSubscriptionCount = (ServiceCounterDataType)decoder.ReadEncodeable("CreateSubscriptionCount", typeof(ServiceCounterDataType));
            ModifySubscriptionCount = (ServiceCounterDataType)decoder.ReadEncodeable("ModifySubscriptionCount", typeof(ServiceCounterDataType));
            SetPublishingModeCount = (ServiceCounterDataType)decoder.ReadEncodeable("SetPublishingModeCount", typeof(ServiceCounterDataType));
            PublishCount = (ServiceCounterDataType)decoder.ReadEncodeable("PublishCount", typeof(ServiceCounterDataType));
            RepublishCount = (ServiceCounterDataType)decoder.ReadEncodeable("RepublishCount", typeof(ServiceCounterDataType));
            TransferSubscriptionsCount = (ServiceCounterDataType)decoder.ReadEncodeable("TransferSubscriptionsCount", typeof(ServiceCounterDataType));
            DeleteSubscriptionsCount = (ServiceCounterDataType)decoder.ReadEncodeable("DeleteSubscriptionsCount", typeof(ServiceCounterDataType));
            AddNodesCount = (ServiceCounterDataType)decoder.ReadEncodeable("AddNodesCount", typeof(ServiceCounterDataType));
            AddReferencesCount = (ServiceCounterDataType)decoder.ReadEncodeable("AddReferencesCount", typeof(ServiceCounterDataType));
            DeleteNodesCount = (ServiceCounterDataType)decoder.ReadEncodeable("DeleteNodesCount", typeof(ServiceCounterDataType));
            DeleteReferencesCount = (ServiceCounterDataType)decoder.ReadEncodeable("DeleteReferencesCount", typeof(ServiceCounterDataType));
            BrowseCount = (ServiceCounterDataType)decoder.ReadEncodeable("BrowseCount", typeof(ServiceCounterDataType));
            BrowseNextCount = (ServiceCounterDataType)decoder.ReadEncodeable("BrowseNextCount", typeof(ServiceCounterDataType));
            TranslateBrowsePathsToNodeIdsCount = (ServiceCounterDataType)decoder.ReadEncodeable("TranslateBrowsePathsToNodeIdsCount", typeof(ServiceCounterDataType));
            QueryFirstCount = (ServiceCounterDataType)decoder.ReadEncodeable("QueryFirstCount", typeof(ServiceCounterDataType));
            QueryNextCount = (ServiceCounterDataType)decoder.ReadEncodeable("QueryNextCount", typeof(ServiceCounterDataType));
            RegisterNodesCount = (ServiceCounterDataType)decoder.ReadEncodeable("RegisterNodesCount", typeof(ServiceCounterDataType));
            UnregisterNodesCount = (ServiceCounterDataType)decoder.ReadEncodeable("UnregisterNodesCount", typeof(ServiceCounterDataType));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SessionDiagnosticsDataType value = encodeable as SessionDiagnosticsDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sessionId, value.m_sessionId)) return false;
            if (!Utils.IsEqual(m_sessionName, value.m_sessionName)) return false;
            if (!Utils.IsEqual(m_clientDescription, value.m_clientDescription)) return false;
            if (!Utils.IsEqual(m_serverUri, value.m_serverUri)) return false;
            if (!Utils.IsEqual(m_endpointUrl, value.m_endpointUrl)) return false;
            if (!Utils.IsEqual(m_localeIds, value.m_localeIds)) return false;
            if (!Utils.IsEqual(m_actualSessionTimeout, value.m_actualSessionTimeout)) return false;
            if (!Utils.IsEqual(m_maxResponseMessageSize, value.m_maxResponseMessageSize)) return false;
            if (!Utils.IsEqual(m_clientConnectionTime, value.m_clientConnectionTime)) return false;
            if (!Utils.IsEqual(m_clientLastContactTime, value.m_clientLastContactTime)) return false;
            if (!Utils.IsEqual(m_currentSubscriptionsCount, value.m_currentSubscriptionsCount)) return false;
            if (!Utils.IsEqual(m_currentMonitoredItemsCount, value.m_currentMonitoredItemsCount)) return false;
            if (!Utils.IsEqual(m_currentPublishRequestsInQueue, value.m_currentPublishRequestsInQueue)) return false;
            if (!Utils.IsEqual(m_totalRequestCount, value.m_totalRequestCount)) return false;
            if (!Utils.IsEqual(m_unauthorizedRequestCount, value.m_unauthorizedRequestCount)) return false;
            if (!Utils.IsEqual(m_readCount, value.m_readCount)) return false;
            if (!Utils.IsEqual(m_historyReadCount, value.m_historyReadCount)) return false;
            if (!Utils.IsEqual(m_writeCount, value.m_writeCount)) return false;
            if (!Utils.IsEqual(m_historyUpdateCount, value.m_historyUpdateCount)) return false;
            if (!Utils.IsEqual(m_callCount, value.m_callCount)) return false;
            if (!Utils.IsEqual(m_createMonitoredItemsCount, value.m_createMonitoredItemsCount)) return false;
            if (!Utils.IsEqual(m_modifyMonitoredItemsCount, value.m_modifyMonitoredItemsCount)) return false;
            if (!Utils.IsEqual(m_setMonitoringModeCount, value.m_setMonitoringModeCount)) return false;
            if (!Utils.IsEqual(m_setTriggeringCount, value.m_setTriggeringCount)) return false;
            if (!Utils.IsEqual(m_deleteMonitoredItemsCount, value.m_deleteMonitoredItemsCount)) return false;
            if (!Utils.IsEqual(m_createSubscriptionCount, value.m_createSubscriptionCount)) return false;
            if (!Utils.IsEqual(m_modifySubscriptionCount, value.m_modifySubscriptionCount)) return false;
            if (!Utils.IsEqual(m_setPublishingModeCount, value.m_setPublishingModeCount)) return false;
            if (!Utils.IsEqual(m_publishCount, value.m_publishCount)) return false;
            if (!Utils.IsEqual(m_republishCount, value.m_republishCount)) return false;
            if (!Utils.IsEqual(m_transferSubscriptionsCount, value.m_transferSubscriptionsCount)) return false;
            if (!Utils.IsEqual(m_deleteSubscriptionsCount, value.m_deleteSubscriptionsCount)) return false;
            if (!Utils.IsEqual(m_addNodesCount, value.m_addNodesCount)) return false;
            if (!Utils.IsEqual(m_addReferencesCount, value.m_addReferencesCount)) return false;
            if (!Utils.IsEqual(m_deleteNodesCount, value.m_deleteNodesCount)) return false;
            if (!Utils.IsEqual(m_deleteReferencesCount, value.m_deleteReferencesCount)) return false;
            if (!Utils.IsEqual(m_browseCount, value.m_browseCount)) return false;
            if (!Utils.IsEqual(m_browseNextCount, value.m_browseNextCount)) return false;
            if (!Utils.IsEqual(m_translateBrowsePathsToNodeIdsCount, value.m_translateBrowsePathsToNodeIdsCount)) return false;
            if (!Utils.IsEqual(m_queryFirstCount, value.m_queryFirstCount)) return false;
            if (!Utils.IsEqual(m_queryNextCount, value.m_queryNextCount)) return false;
            if (!Utils.IsEqual(m_registerNodesCount, value.m_registerNodesCount)) return false;
            if (!Utils.IsEqual(m_unregisterNodesCount, value.m_unregisterNodesCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SessionDiagnosticsDataType clone = new SessionDiagnosticsDataType();

            clone.m_sessionId = (NodeId)Utils.Clone(this.m_sessionId);
            clone.m_sessionName = (string)Utils.Clone(this.m_sessionName);
            clone.m_clientDescription = (ApplicationDescription)Utils.Clone(this.m_clientDescription);
            clone.m_serverUri = (string)Utils.Clone(this.m_serverUri);
            clone.m_endpointUrl = (string)Utils.Clone(this.m_endpointUrl);
            clone.m_localeIds = (StringCollection)Utils.Clone(this.m_localeIds);
            clone.m_actualSessionTimeout = (double)Utils.Clone(this.m_actualSessionTimeout);
            clone.m_maxResponseMessageSize = (uint)Utils.Clone(this.m_maxResponseMessageSize);
            clone.m_clientConnectionTime = (DateTime)Utils.Clone(this.m_clientConnectionTime);
            clone.m_clientLastContactTime = (DateTime)Utils.Clone(this.m_clientLastContactTime);
            clone.m_currentSubscriptionsCount = (uint)Utils.Clone(this.m_currentSubscriptionsCount);
            clone.m_currentMonitoredItemsCount = (uint)Utils.Clone(this.m_currentMonitoredItemsCount);
            clone.m_currentPublishRequestsInQueue = (uint)Utils.Clone(this.m_currentPublishRequestsInQueue);
            clone.m_totalRequestCount = (ServiceCounterDataType)Utils.Clone(this.m_totalRequestCount);
            clone.m_unauthorizedRequestCount = (uint)Utils.Clone(this.m_unauthorizedRequestCount);
            clone.m_readCount = (ServiceCounterDataType)Utils.Clone(this.m_readCount);
            clone.m_historyReadCount = (ServiceCounterDataType)Utils.Clone(this.m_historyReadCount);
            clone.m_writeCount = (ServiceCounterDataType)Utils.Clone(this.m_writeCount);
            clone.m_historyUpdateCount = (ServiceCounterDataType)Utils.Clone(this.m_historyUpdateCount);
            clone.m_callCount = (ServiceCounterDataType)Utils.Clone(this.m_callCount);
            clone.m_createMonitoredItemsCount = (ServiceCounterDataType)Utils.Clone(this.m_createMonitoredItemsCount);
            clone.m_modifyMonitoredItemsCount = (ServiceCounterDataType)Utils.Clone(this.m_modifyMonitoredItemsCount);
            clone.m_setMonitoringModeCount = (ServiceCounterDataType)Utils.Clone(this.m_setMonitoringModeCount);
            clone.m_setTriggeringCount = (ServiceCounterDataType)Utils.Clone(this.m_setTriggeringCount);
            clone.m_deleteMonitoredItemsCount = (ServiceCounterDataType)Utils.Clone(this.m_deleteMonitoredItemsCount);
            clone.m_createSubscriptionCount = (ServiceCounterDataType)Utils.Clone(this.m_createSubscriptionCount);
            clone.m_modifySubscriptionCount = (ServiceCounterDataType)Utils.Clone(this.m_modifySubscriptionCount);
            clone.m_setPublishingModeCount = (ServiceCounterDataType)Utils.Clone(this.m_setPublishingModeCount);
            clone.m_publishCount = (ServiceCounterDataType)Utils.Clone(this.m_publishCount);
            clone.m_republishCount = (ServiceCounterDataType)Utils.Clone(this.m_republishCount);
            clone.m_transferSubscriptionsCount = (ServiceCounterDataType)Utils.Clone(this.m_transferSubscriptionsCount);
            clone.m_deleteSubscriptionsCount = (ServiceCounterDataType)Utils.Clone(this.m_deleteSubscriptionsCount);
            clone.m_addNodesCount = (ServiceCounterDataType)Utils.Clone(this.m_addNodesCount);
            clone.m_addReferencesCount = (ServiceCounterDataType)Utils.Clone(this.m_addReferencesCount);
            clone.m_deleteNodesCount = (ServiceCounterDataType)Utils.Clone(this.m_deleteNodesCount);
            clone.m_deleteReferencesCount = (ServiceCounterDataType)Utils.Clone(this.m_deleteReferencesCount);
            clone.m_browseCount = (ServiceCounterDataType)Utils.Clone(this.m_browseCount);
            clone.m_browseNextCount = (ServiceCounterDataType)Utils.Clone(this.m_browseNextCount);
            clone.m_translateBrowsePathsToNodeIdsCount = (ServiceCounterDataType)Utils.Clone(this.m_translateBrowsePathsToNodeIdsCount);
            clone.m_queryFirstCount = (ServiceCounterDataType)Utils.Clone(this.m_queryFirstCount);
            clone.m_queryNextCount = (ServiceCounterDataType)Utils.Clone(this.m_queryNextCount);
            clone.m_registerNodesCount = (ServiceCounterDataType)Utils.Clone(this.m_registerNodesCount);
            clone.m_unregisterNodesCount = (ServiceCounterDataType)Utils.Clone(this.m_unregisterNodesCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_sessionId;
        private string m_sessionName;
        private ApplicationDescription m_clientDescription;
        private string m_serverUri;
        private string m_endpointUrl;
        private StringCollection m_localeIds;
        private double m_actualSessionTimeout;
        private uint m_maxResponseMessageSize;
        private DateTime m_clientConnectionTime;
        private DateTime m_clientLastContactTime;
        private uint m_currentSubscriptionsCount;
        private uint m_currentMonitoredItemsCount;
        private uint m_currentPublishRequestsInQueue;
        private ServiceCounterDataType m_totalRequestCount;
        private uint m_unauthorizedRequestCount;
        private ServiceCounterDataType m_readCount;
        private ServiceCounterDataType m_historyReadCount;
        private ServiceCounterDataType m_writeCount;
        private ServiceCounterDataType m_historyUpdateCount;
        private ServiceCounterDataType m_callCount;
        private ServiceCounterDataType m_createMonitoredItemsCount;
        private ServiceCounterDataType m_modifyMonitoredItemsCount;
        private ServiceCounterDataType m_setMonitoringModeCount;
        private ServiceCounterDataType m_setTriggeringCount;
        private ServiceCounterDataType m_deleteMonitoredItemsCount;
        private ServiceCounterDataType m_createSubscriptionCount;
        private ServiceCounterDataType m_modifySubscriptionCount;
        private ServiceCounterDataType m_setPublishingModeCount;
        private ServiceCounterDataType m_publishCount;
        private ServiceCounterDataType m_republishCount;
        private ServiceCounterDataType m_transferSubscriptionsCount;
        private ServiceCounterDataType m_deleteSubscriptionsCount;
        private ServiceCounterDataType m_addNodesCount;
        private ServiceCounterDataType m_addReferencesCount;
        private ServiceCounterDataType m_deleteNodesCount;
        private ServiceCounterDataType m_deleteReferencesCount;
        private ServiceCounterDataType m_browseCount;
        private ServiceCounterDataType m_browseNextCount;
        private ServiceCounterDataType m_translateBrowsePathsToNodeIdsCount;
        private ServiceCounterDataType m_queryFirstCount;
        private ServiceCounterDataType m_queryNextCount;
        private ServiceCounterDataType m_registerNodesCount;
        private ServiceCounterDataType m_unregisterNodesCount;
        #endregion
    }

    #region SessionDiagnosticsDataTypeCollection Class
    /// <summary>
    /// A collection of SessionDiagnosticsDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSessionDiagnosticsDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SessionDiagnosticsDataType")]
    public partial class SessionDiagnosticsDataTypeCollection : List<SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SessionDiagnosticsDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SessionDiagnosticsDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SessionDiagnosticsDataTypeCollection(IEnumerable<SessionDiagnosticsDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SessionDiagnosticsDataTypeCollection(SessionDiagnosticsDataType[] values)
        {
            if (values != null)
            {
                return new SessionDiagnosticsDataTypeCollection(values);
            }

            return new SessionDiagnosticsDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SessionDiagnosticsDataType[](SessionDiagnosticsDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SessionDiagnosticsDataTypeCollection clone = new SessionDiagnosticsDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SessionDiagnosticsDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region SessionSecurityDiagnosticsDataType Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsDataType)
    /// <summary>
    /// A description for the SessionSecurityDiagnosticsDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SessionSecurityDiagnosticsDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SessionSecurityDiagnosticsDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sessionId = null;
            m_clientUserIdOfSession = null;
            m_clientUserIdHistory = new StringCollection();
            m_authenticationMechanism = null;
            m_encoding = null;
            m_transportProtocol = null;
            m_securityMode = MessageSecurityMode.Invalid;
            m_securityPolicyUri = null;
            m_clientCertificate = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SessionId field.
        /// </summary>
        [DataMember(Name = "SessionId", IsRequired = false, Order = 1)]
        public NodeId SessionId
        {
            get { return m_sessionId;  }
            set { m_sessionId = value; }
        }

        /// <summary>
        /// A description for the ClientUserIdOfSession field.
        /// </summary>
        [DataMember(Name = "ClientUserIdOfSession", IsRequired = false, Order = 2)]
        public string ClientUserIdOfSession
        {
            get { return m_clientUserIdOfSession;  }
            set { m_clientUserIdOfSession = value; }
        }

        /// <summary>
        /// A description for the ClientUserIdHistory field.
        /// </summary>
        [DataMember(Name = "ClientUserIdHistory", IsRequired = false, Order = 3)]
        public StringCollection ClientUserIdHistory
        {
            get
            {
                return m_clientUserIdHistory;
            }

            set
            {
                m_clientUserIdHistory = value;

                if (value == null)
                {
                    m_clientUserIdHistory = new StringCollection();
                }
            }
        }

        /// <summary>
        /// A description for the AuthenticationMechanism field.
        /// </summary>
        [DataMember(Name = "AuthenticationMechanism", IsRequired = false, Order = 4)]
        public string AuthenticationMechanism
        {
            get { return m_authenticationMechanism;  }
            set { m_authenticationMechanism = value; }
        }

        /// <summary>
        /// A description for the Encoding field.
        /// </summary>
        [DataMember(Name = "Encoding", IsRequired = false, Order = 5)]
        public string Encoding
        {
            get { return m_encoding;  }
            set { m_encoding = value; }
        }

        /// <summary>
        /// A description for the TransportProtocol field.
        /// </summary>
        [DataMember(Name = "TransportProtocol", IsRequired = false, Order = 6)]
        public string TransportProtocol
        {
            get { return m_transportProtocol;  }
            set { m_transportProtocol = value; }
        }

        /// <summary>
        /// A description for the SecurityMode field.
        /// </summary>
        [DataMember(Name = "SecurityMode", IsRequired = false, Order = 7)]
        public MessageSecurityMode SecurityMode
        {
            get { return m_securityMode;  }
            set { m_securityMode = value; }
        }

        /// <summary>
        /// A description for the SecurityPolicyUri field.
        /// </summary>
        [DataMember(Name = "SecurityPolicyUri", IsRequired = false, Order = 8)]
        public string SecurityPolicyUri
        {
            get { return m_securityPolicyUri;  }
            set { m_securityPolicyUri = value; }
        }

        /// <summary>
        /// A description for the ClientCertificate field.
        /// </summary>
        [DataMember(Name = "ClientCertificate", IsRequired = false, Order = 9)]
        public byte[] ClientCertificate
        {
            get { return m_clientCertificate;  }
            set { m_clientCertificate = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SessionSecurityDiagnosticsDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SessionSecurityDiagnosticsDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SessionSecurityDiagnosticsDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteString("ClientUserIdOfSession", ClientUserIdOfSession);
            encoder.WriteStringArray("ClientUserIdHistory", ClientUserIdHistory);
            encoder.WriteString("AuthenticationMechanism", AuthenticationMechanism);
            encoder.WriteString("Encoding", Encoding);
            encoder.WriteString("TransportProtocol", TransportProtocol);
            encoder.WriteEnumerated("SecurityMode", SecurityMode);
            encoder.WriteString("SecurityPolicyUri", SecurityPolicyUri);
            encoder.WriteByteString("ClientCertificate", ClientCertificate);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SessionId = decoder.ReadNodeId("SessionId");
            ClientUserIdOfSession = decoder.ReadString("ClientUserIdOfSession");
            ClientUserIdHistory = decoder.ReadStringArray("ClientUserIdHistory");
            AuthenticationMechanism = decoder.ReadString("AuthenticationMechanism");
            Encoding = decoder.ReadString("Encoding");
            TransportProtocol = decoder.ReadString("TransportProtocol");
            SecurityMode = (MessageSecurityMode)decoder.ReadEnumerated("SecurityMode", typeof(MessageSecurityMode));
            SecurityPolicyUri = decoder.ReadString("SecurityPolicyUri");
            ClientCertificate = decoder.ReadByteString("ClientCertificate");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SessionSecurityDiagnosticsDataType value = encodeable as SessionSecurityDiagnosticsDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sessionId, value.m_sessionId)) return false;
            if (!Utils.IsEqual(m_clientUserIdOfSession, value.m_clientUserIdOfSession)) return false;
            if (!Utils.IsEqual(m_clientUserIdHistory, value.m_clientUserIdHistory)) return false;
            if (!Utils.IsEqual(m_authenticationMechanism, value.m_authenticationMechanism)) return false;
            if (!Utils.IsEqual(m_encoding, value.m_encoding)) return false;
            if (!Utils.IsEqual(m_transportProtocol, value.m_transportProtocol)) return false;
            if (!Utils.IsEqual(m_securityMode, value.m_securityMode)) return false;
            if (!Utils.IsEqual(m_securityPolicyUri, value.m_securityPolicyUri)) return false;
            if (!Utils.IsEqual(m_clientCertificate, value.m_clientCertificate)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SessionSecurityDiagnosticsDataType clone = new SessionSecurityDiagnosticsDataType();

            clone.m_sessionId = (NodeId)Utils.Clone(this.m_sessionId);
            clone.m_clientUserIdOfSession = (string)Utils.Clone(this.m_clientUserIdOfSession);
            clone.m_clientUserIdHistory = (StringCollection)Utils.Clone(this.m_clientUserIdHistory);
            clone.m_authenticationMechanism = (string)Utils.Clone(this.m_authenticationMechanism);
            clone.m_encoding = (string)Utils.Clone(this.m_encoding);
            clone.m_transportProtocol = (string)Utils.Clone(this.m_transportProtocol);
            clone.m_securityMode = (MessageSecurityMode)Utils.Clone(this.m_securityMode);
            clone.m_securityPolicyUri = (string)Utils.Clone(this.m_securityPolicyUri);
            clone.m_clientCertificate = (byte[])Utils.Clone(this.m_clientCertificate);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_sessionId;
        private string m_clientUserIdOfSession;
        private StringCollection m_clientUserIdHistory;
        private string m_authenticationMechanism;
        private string m_encoding;
        private string m_transportProtocol;
        private MessageSecurityMode m_securityMode;
        private string m_securityPolicyUri;
        private byte[] m_clientCertificate;
        #endregion
    }

    #region SessionSecurityDiagnosticsDataTypeCollection Class
    /// <summary>
    /// A collection of SessionSecurityDiagnosticsDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSessionSecurityDiagnosticsDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SessionSecurityDiagnosticsDataType")]
    public partial class SessionSecurityDiagnosticsDataTypeCollection : List<SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SessionSecurityDiagnosticsDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SessionSecurityDiagnosticsDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SessionSecurityDiagnosticsDataTypeCollection(IEnumerable<SessionSecurityDiagnosticsDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SessionSecurityDiagnosticsDataTypeCollection(SessionSecurityDiagnosticsDataType[] values)
        {
            if (values != null)
            {
                return new SessionSecurityDiagnosticsDataTypeCollection(values);
            }

            return new SessionSecurityDiagnosticsDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SessionSecurityDiagnosticsDataType[](SessionSecurityDiagnosticsDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SessionSecurityDiagnosticsDataTypeCollection clone = new SessionSecurityDiagnosticsDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SessionSecurityDiagnosticsDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region ServiceCounterDataType Class
    #if (!OPCUA_EXCLUDE_ServiceCounterDataType)
    /// <summary>
    /// A description for the ServiceCounterDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ServiceCounterDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ServiceCounterDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_totalCount = (uint)0;
            m_errorCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the TotalCount field.
        /// </summary>
        [DataMember(Name = "TotalCount", IsRequired = false, Order = 1)]
        public uint TotalCount
        {
            get { return m_totalCount;  }
            set { m_totalCount = value; }
        }

        /// <summary>
        /// A description for the ErrorCount field.
        /// </summary>
        [DataMember(Name = "ErrorCount", IsRequired = false, Order = 2)]
        public uint ErrorCount
        {
            get { return m_errorCount;  }
            set { m_errorCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ServiceCounterDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ServiceCounterDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ServiceCounterDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteUInt32("TotalCount", TotalCount);
            encoder.WriteUInt32("ErrorCount", ErrorCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            TotalCount = decoder.ReadUInt32("TotalCount");
            ErrorCount = decoder.ReadUInt32("ErrorCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ServiceCounterDataType value = encodeable as ServiceCounterDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_totalCount, value.m_totalCount)) return false;
            if (!Utils.IsEqual(m_errorCount, value.m_errorCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ServiceCounterDataType clone = new ServiceCounterDataType();

            clone.m_totalCount = (uint)Utils.Clone(this.m_totalCount);
            clone.m_errorCount = (uint)Utils.Clone(this.m_errorCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private uint m_totalCount;
        private uint m_errorCount;
        #endregion
    }
    #endif
    #endregion

    #region StatusResult Class
    #if (!OPCUA_EXCLUDE_StatusResult)
    /// <summary>
    /// A description for the StatusResult DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class StatusResult : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public StatusResult()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_statusCode = StatusCodes.Good;
            m_diagnosticInfo = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the StatusCode field.
        /// </summary>
        [DataMember(Name = "StatusCode", IsRequired = false, Order = 1)]
        public StatusCode StatusCode
        {
            get { return m_statusCode;  }
            set { m_statusCode = value; }
        }

        /// <summary>
        /// A description for the DiagnosticInfo field.
        /// </summary>
        [DataMember(Name = "DiagnosticInfo", IsRequired = false, Order = 2)]
        public DiagnosticInfo DiagnosticInfo
        {
            get { return m_diagnosticInfo;  }
            set { m_diagnosticInfo = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.StatusResult; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.StatusResult_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.StatusResult_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteStatusCode("StatusCode", StatusCode);
            encoder.WriteDiagnosticInfo("DiagnosticInfo", DiagnosticInfo);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            StatusCode = decoder.ReadStatusCode("StatusCode");
            DiagnosticInfo = decoder.ReadDiagnosticInfo("DiagnosticInfo");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            StatusResult value = encodeable as StatusResult;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_statusCode, value.m_statusCode)) return false;
            if (!Utils.IsEqual(m_diagnosticInfo, value.m_diagnosticInfo)) return false;

            return true;
        }
        
        public new object MemberwiseClone()
        {
            StatusResult clone = new StatusResult();

            clone.m_statusCode = (StatusCode)Utils.Clone(this.m_statusCode);
            clone.m_diagnosticInfo = (DiagnosticInfo)Utils.Clone(this.m_diagnosticInfo);

            return clone;
        }
        #endregion

        #region Private Fields
        private StatusCode m_statusCode;
        private DiagnosticInfo m_diagnosticInfo;
        #endregion
    }

    #region StatusResultCollection Class
    /// <summary>
    /// A collection of StatusResult objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfStatusResult", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "StatusResult")]
    public partial class StatusResultCollection : List<StatusResult>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public StatusResultCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public StatusResultCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public StatusResultCollection(IEnumerable<StatusResult> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator StatusResultCollection(StatusResult[] values)
        {
            if (values != null)
            {
                return new StatusResultCollection(values);
            }

            return new StatusResultCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator StatusResult[](StatusResultCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            StatusResultCollection clone = new StatusResultCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((StatusResult)Utils.Clone(this[ii]));
            }

            return clone;
        }
        #endregion
    }
    #endif
    #endregion

    #region SubscriptionDiagnosticsDataType Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsDataType)
    /// <summary>
    /// A description for the SubscriptionDiagnosticsDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SubscriptionDiagnosticsDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SubscriptionDiagnosticsDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_sessionId = null;
            m_subscriptionId = (uint)0;
            m_priority = (byte)0;
            m_publishingInterval = (double)0;
            m_maxKeepAliveCount = (uint)0;
            m_maxLifetimeCount = (uint)0;
            m_maxNotificationsPerPublish = (uint)0;
            m_publishingEnabled = true;
            m_modifyCount = (uint)0;
            m_enableCount = (uint)0;
            m_disableCount = (uint)0;
            m_republishRequestCount = (uint)0;
            m_republishMessageRequestCount = (uint)0;
            m_republishMessageCount = (uint)0;
            m_transferRequestCount = (uint)0;
            m_transferredToAltClientCount = (uint)0;
            m_transferredToSameClientCount = (uint)0;
            m_publishRequestCount = (uint)0;
            m_dataChangeNotificationsCount = (uint)0;
            m_eventNotificationsCount = (uint)0;
            m_notificationsCount = (uint)0;
            m_latePublishRequestCount = (uint)0;
            m_currentKeepAliveCount = (uint)0;
            m_currentLifetimeCount = (uint)0;
            m_unacknowledgedMessageCount = (uint)0;
            m_discardedMessageCount = (uint)0;
            m_monitoredItemCount = (uint)0;
            m_disabledMonitoredItemCount = (uint)0;
            m_monitoringQueueOverflowCount = (uint)0;
            m_nextSequenceNumber = (uint)0;
            m_eventQueueOverFlowCount = (uint)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the SessionId field.
        /// </summary>
        [DataMember(Name = "SessionId", IsRequired = false, Order = 1)]
        public NodeId SessionId
        {
            get { return m_sessionId;  }
            set { m_sessionId = value; }
        }

        /// <summary>
        /// A description for the SubscriptionId field.
        /// </summary>
        [DataMember(Name = "SubscriptionId", IsRequired = false, Order = 2)]
        public uint SubscriptionId
        {
            get { return m_subscriptionId;  }
            set { m_subscriptionId = value; }
        }

        /// <summary>
        /// A description for the Priority field.
        /// </summary>
        [DataMember(Name = "Priority", IsRequired = false, Order = 3)]
        public byte Priority
        {
            get { return m_priority;  }
            set { m_priority = value; }
        }

        /// <summary>
        /// A description for the PublishingInterval field.
        /// </summary>
        [DataMember(Name = "PublishingInterval", IsRequired = false, Order = 4)]
        public double PublishingInterval
        {
            get { return m_publishingInterval;  }
            set { m_publishingInterval = value; }
        }

        /// <summary>
        /// A description for the MaxKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "MaxKeepAliveCount", IsRequired = false, Order = 5)]
        public uint MaxKeepAliveCount
        {
            get { return m_maxKeepAliveCount;  }
            set { m_maxKeepAliveCount = value; }
        }

        /// <summary>
        /// A description for the MaxLifetimeCount field.
        /// </summary>
        [DataMember(Name = "MaxLifetimeCount", IsRequired = false, Order = 6)]
        public uint MaxLifetimeCount
        {
            get { return m_maxLifetimeCount;  }
            set { m_maxLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the MaxNotificationsPerPublish field.
        /// </summary>
        [DataMember(Name = "MaxNotificationsPerPublish", IsRequired = false, Order = 7)]
        public uint MaxNotificationsPerPublish
        {
            get { return m_maxNotificationsPerPublish;  }
            set { m_maxNotificationsPerPublish = value; }
        }

        /// <summary>
        /// A description for the PublishingEnabled field.
        /// </summary>
        [DataMember(Name = "PublishingEnabled", IsRequired = false, Order = 8)]
        public bool PublishingEnabled
        {
            get { return m_publishingEnabled;  }
            set { m_publishingEnabled = value; }
        }

        /// <summary>
        /// A description for the ModifyCount field.
        /// </summary>
        [DataMember(Name = "ModifyCount", IsRequired = false, Order = 9)]
        public uint ModifyCount
        {
            get { return m_modifyCount;  }
            set { m_modifyCount = value; }
        }

        /// <summary>
        /// A description for the EnableCount field.
        /// </summary>
        [DataMember(Name = "EnableCount", IsRequired = false, Order = 10)]
        public uint EnableCount
        {
            get { return m_enableCount;  }
            set { m_enableCount = value; }
        }

        /// <summary>
        /// A description for the DisableCount field.
        /// </summary>
        [DataMember(Name = "DisableCount", IsRequired = false, Order = 11)]
        public uint DisableCount
        {
            get { return m_disableCount;  }
            set { m_disableCount = value; }
        }

        /// <summary>
        /// A description for the RepublishRequestCount field.
        /// </summary>
        [DataMember(Name = "RepublishRequestCount", IsRequired = false, Order = 12)]
        public uint RepublishRequestCount
        {
            get { return m_republishRequestCount;  }
            set { m_republishRequestCount = value; }
        }

        /// <summary>
        /// A description for the RepublishMessageRequestCount field.
        /// </summary>
        [DataMember(Name = "RepublishMessageRequestCount", IsRequired = false, Order = 13)]
        public uint RepublishMessageRequestCount
        {
            get { return m_republishMessageRequestCount;  }
            set { m_republishMessageRequestCount = value; }
        }

        /// <summary>
        /// A description for the RepublishMessageCount field.
        /// </summary>
        [DataMember(Name = "RepublishMessageCount", IsRequired = false, Order = 14)]
        public uint RepublishMessageCount
        {
            get { return m_republishMessageCount;  }
            set { m_republishMessageCount = value; }
        }

        /// <summary>
        /// A description for the TransferRequestCount field.
        /// </summary>
        [DataMember(Name = "TransferRequestCount", IsRequired = false, Order = 15)]
        public uint TransferRequestCount
        {
            get { return m_transferRequestCount;  }
            set { m_transferRequestCount = value; }
        }

        /// <summary>
        /// A description for the TransferredToAltClientCount field.
        /// </summary>
        [DataMember(Name = "TransferredToAltClientCount", IsRequired = false, Order = 16)]
        public uint TransferredToAltClientCount
        {
            get { return m_transferredToAltClientCount;  }
            set { m_transferredToAltClientCount = value; }
        }

        /// <summary>
        /// A description for the TransferredToSameClientCount field.
        /// </summary>
        [DataMember(Name = "TransferredToSameClientCount", IsRequired = false, Order = 17)]
        public uint TransferredToSameClientCount
        {
            get { return m_transferredToSameClientCount;  }
            set { m_transferredToSameClientCount = value; }
        }

        /// <summary>
        /// A description for the PublishRequestCount field.
        /// </summary>
        [DataMember(Name = "PublishRequestCount", IsRequired = false, Order = 18)]
        public uint PublishRequestCount
        {
            get { return m_publishRequestCount;  }
            set { m_publishRequestCount = value; }
        }

        /// <summary>
        /// A description for the DataChangeNotificationsCount field.
        /// </summary>
        [DataMember(Name = "DataChangeNotificationsCount", IsRequired = false, Order = 19)]
        public uint DataChangeNotificationsCount
        {
            get { return m_dataChangeNotificationsCount;  }
            set { m_dataChangeNotificationsCount = value; }
        }

        /// <summary>
        /// A description for the EventNotificationsCount field.
        /// </summary>
        [DataMember(Name = "EventNotificationsCount", IsRequired = false, Order = 20)]
        public uint EventNotificationsCount
        {
            get { return m_eventNotificationsCount;  }
            set { m_eventNotificationsCount = value; }
        }

        /// <summary>
        /// A description for the NotificationsCount field.
        /// </summary>
        [DataMember(Name = "NotificationsCount", IsRequired = false, Order = 21)]
        public uint NotificationsCount
        {
            get { return m_notificationsCount;  }
            set { m_notificationsCount = value; }
        }

        /// <summary>
        /// A description for the LatePublishRequestCount field.
        /// </summary>
        [DataMember(Name = "LatePublishRequestCount", IsRequired = false, Order = 22)]
        public uint LatePublishRequestCount
        {
            get { return m_latePublishRequestCount;  }
            set { m_latePublishRequestCount = value; }
        }

        /// <summary>
        /// A description for the CurrentKeepAliveCount field.
        /// </summary>
        [DataMember(Name = "CurrentKeepAliveCount", IsRequired = false, Order = 23)]
        public uint CurrentKeepAliveCount
        {
            get { return m_currentKeepAliveCount;  }
            set { m_currentKeepAliveCount = value; }
        }

        /// <summary>
        /// A description for the CurrentLifetimeCount field.
        /// </summary>
        [DataMember(Name = "CurrentLifetimeCount", IsRequired = false, Order = 24)]
        public uint CurrentLifetimeCount
        {
            get { return m_currentLifetimeCount;  }
            set { m_currentLifetimeCount = value; }
        }

        /// <summary>
        /// A description for the UnacknowledgedMessageCount field.
        /// </summary>
        [DataMember(Name = "UnacknowledgedMessageCount", IsRequired = false, Order = 25)]
        public uint UnacknowledgedMessageCount
        {
            get { return m_unacknowledgedMessageCount;  }
            set { m_unacknowledgedMessageCount = value; }
        }

        /// <summary>
        /// A description for the DiscardedMessageCount field.
        /// </summary>
        [DataMember(Name = "DiscardedMessageCount", IsRequired = false, Order = 26)]
        public uint DiscardedMessageCount
        {
            get { return m_discardedMessageCount;  }
            set { m_discardedMessageCount = value; }
        }

        /// <summary>
        /// A description for the MonitoredItemCount field.
        /// </summary>
        [DataMember(Name = "MonitoredItemCount", IsRequired = false, Order = 27)]
        public uint MonitoredItemCount
        {
            get { return m_monitoredItemCount;  }
            set { m_monitoredItemCount = value; }
        }

        /// <summary>
        /// A description for the DisabledMonitoredItemCount field.
        /// </summary>
        [DataMember(Name = "DisabledMonitoredItemCount", IsRequired = false, Order = 28)]
        public uint DisabledMonitoredItemCount
        {
            get { return m_disabledMonitoredItemCount;  }
            set { m_disabledMonitoredItemCount = value; }
        }

        /// <summary>
        /// A description for the MonitoringQueueOverflowCount field.
        /// </summary>
        [DataMember(Name = "MonitoringQueueOverflowCount", IsRequired = false, Order = 29)]
        public uint MonitoringQueueOverflowCount
        {
            get { return m_monitoringQueueOverflowCount;  }
            set { m_monitoringQueueOverflowCount = value; }
        }

        /// <summary>
        /// A description for the NextSequenceNumber field.
        /// </summary>
        [DataMember(Name = "NextSequenceNumber", IsRequired = false, Order = 30)]
        public uint NextSequenceNumber
        {
            get { return m_nextSequenceNumber;  }
            set { m_nextSequenceNumber = value; }
        }

        /// <summary>
        /// A description for the EventQueueOverFlowCount field.
        /// </summary>
        [DataMember(Name = "EventQueueOverFlowCount", IsRequired = false, Order = 31)]
        public uint EventQueueOverFlowCount
        {
            get { return m_eventQueueOverFlowCount;  }
            set { m_eventQueueOverFlowCount = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SubscriptionDiagnosticsDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SubscriptionDiagnosticsDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SubscriptionDiagnosticsDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("SessionId", SessionId);
            encoder.WriteUInt32("SubscriptionId", SubscriptionId);
            encoder.WriteByte("Priority", Priority);
            encoder.WriteDouble("PublishingInterval", PublishingInterval);
            encoder.WriteUInt32("MaxKeepAliveCount", MaxKeepAliveCount);
            encoder.WriteUInt32("MaxLifetimeCount", MaxLifetimeCount);
            encoder.WriteUInt32("MaxNotificationsPerPublish", MaxNotificationsPerPublish);
            encoder.WriteBoolean("PublishingEnabled", PublishingEnabled);
            encoder.WriteUInt32("ModifyCount", ModifyCount);
            encoder.WriteUInt32("EnableCount", EnableCount);
            encoder.WriteUInt32("DisableCount", DisableCount);
            encoder.WriteUInt32("RepublishRequestCount", RepublishRequestCount);
            encoder.WriteUInt32("RepublishMessageRequestCount", RepublishMessageRequestCount);
            encoder.WriteUInt32("RepublishMessageCount", RepublishMessageCount);
            encoder.WriteUInt32("TransferRequestCount", TransferRequestCount);
            encoder.WriteUInt32("TransferredToAltClientCount", TransferredToAltClientCount);
            encoder.WriteUInt32("TransferredToSameClientCount", TransferredToSameClientCount);
            encoder.WriteUInt32("PublishRequestCount", PublishRequestCount);
            encoder.WriteUInt32("DataChangeNotificationsCount", DataChangeNotificationsCount);
            encoder.WriteUInt32("EventNotificationsCount", EventNotificationsCount);
            encoder.WriteUInt32("NotificationsCount", NotificationsCount);
            encoder.WriteUInt32("LatePublishRequestCount", LatePublishRequestCount);
            encoder.WriteUInt32("CurrentKeepAliveCount", CurrentKeepAliveCount);
            encoder.WriteUInt32("CurrentLifetimeCount", CurrentLifetimeCount);
            encoder.WriteUInt32("UnacknowledgedMessageCount", UnacknowledgedMessageCount);
            encoder.WriteUInt32("DiscardedMessageCount", DiscardedMessageCount);
            encoder.WriteUInt32("MonitoredItemCount", MonitoredItemCount);
            encoder.WriteUInt32("DisabledMonitoredItemCount", DisabledMonitoredItemCount);
            encoder.WriteUInt32("MonitoringQueueOverflowCount", MonitoringQueueOverflowCount);
            encoder.WriteUInt32("NextSequenceNumber", NextSequenceNumber);
            encoder.WriteUInt32("EventQueueOverFlowCount", EventQueueOverFlowCount);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            SessionId = decoder.ReadNodeId("SessionId");
            SubscriptionId = decoder.ReadUInt32("SubscriptionId");
            Priority = decoder.ReadByte("Priority");
            PublishingInterval = decoder.ReadDouble("PublishingInterval");
            MaxKeepAliveCount = decoder.ReadUInt32("MaxKeepAliveCount");
            MaxLifetimeCount = decoder.ReadUInt32("MaxLifetimeCount");
            MaxNotificationsPerPublish = decoder.ReadUInt32("MaxNotificationsPerPublish");
            PublishingEnabled = decoder.ReadBoolean("PublishingEnabled");
            ModifyCount = decoder.ReadUInt32("ModifyCount");
            EnableCount = decoder.ReadUInt32("EnableCount");
            DisableCount = decoder.ReadUInt32("DisableCount");
            RepublishRequestCount = decoder.ReadUInt32("RepublishRequestCount");
            RepublishMessageRequestCount = decoder.ReadUInt32("RepublishMessageRequestCount");
            RepublishMessageCount = decoder.ReadUInt32("RepublishMessageCount");
            TransferRequestCount = decoder.ReadUInt32("TransferRequestCount");
            TransferredToAltClientCount = decoder.ReadUInt32("TransferredToAltClientCount");
            TransferredToSameClientCount = decoder.ReadUInt32("TransferredToSameClientCount");
            PublishRequestCount = decoder.ReadUInt32("PublishRequestCount");
            DataChangeNotificationsCount = decoder.ReadUInt32("DataChangeNotificationsCount");
            EventNotificationsCount = decoder.ReadUInt32("EventNotificationsCount");
            NotificationsCount = decoder.ReadUInt32("NotificationsCount");
            LatePublishRequestCount = decoder.ReadUInt32("LatePublishRequestCount");
            CurrentKeepAliveCount = decoder.ReadUInt32("CurrentKeepAliveCount");
            CurrentLifetimeCount = decoder.ReadUInt32("CurrentLifetimeCount");
            UnacknowledgedMessageCount = decoder.ReadUInt32("UnacknowledgedMessageCount");
            DiscardedMessageCount = decoder.ReadUInt32("DiscardedMessageCount");
            MonitoredItemCount = decoder.ReadUInt32("MonitoredItemCount");
            DisabledMonitoredItemCount = decoder.ReadUInt32("DisabledMonitoredItemCount");
            MonitoringQueueOverflowCount = decoder.ReadUInt32("MonitoringQueueOverflowCount");
            NextSequenceNumber = decoder.ReadUInt32("NextSequenceNumber");
            EventQueueOverFlowCount = decoder.ReadUInt32("EventQueueOverFlowCount");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SubscriptionDiagnosticsDataType value = encodeable as SubscriptionDiagnosticsDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_sessionId, value.m_sessionId)) return false;
            if (!Utils.IsEqual(m_subscriptionId, value.m_subscriptionId)) return false;
            if (!Utils.IsEqual(m_priority, value.m_priority)) return false;
            if (!Utils.IsEqual(m_publishingInterval, value.m_publishingInterval)) return false;
            if (!Utils.IsEqual(m_maxKeepAliveCount, value.m_maxKeepAliveCount)) return false;
            if (!Utils.IsEqual(m_maxLifetimeCount, value.m_maxLifetimeCount)) return false;
            if (!Utils.IsEqual(m_maxNotificationsPerPublish, value.m_maxNotificationsPerPublish)) return false;
            if (!Utils.IsEqual(m_publishingEnabled, value.m_publishingEnabled)) return false;
            if (!Utils.IsEqual(m_modifyCount, value.m_modifyCount)) return false;
            if (!Utils.IsEqual(m_enableCount, value.m_enableCount)) return false;
            if (!Utils.IsEqual(m_disableCount, value.m_disableCount)) return false;
            if (!Utils.IsEqual(m_republishRequestCount, value.m_republishRequestCount)) return false;
            if (!Utils.IsEqual(m_republishMessageRequestCount, value.m_republishMessageRequestCount)) return false;
            if (!Utils.IsEqual(m_republishMessageCount, value.m_republishMessageCount)) return false;
            if (!Utils.IsEqual(m_transferRequestCount, value.m_transferRequestCount)) return false;
            if (!Utils.IsEqual(m_transferredToAltClientCount, value.m_transferredToAltClientCount)) return false;
            if (!Utils.IsEqual(m_transferredToSameClientCount, value.m_transferredToSameClientCount)) return false;
            if (!Utils.IsEqual(m_publishRequestCount, value.m_publishRequestCount)) return false;
            if (!Utils.IsEqual(m_dataChangeNotificationsCount, value.m_dataChangeNotificationsCount)) return false;
            if (!Utils.IsEqual(m_eventNotificationsCount, value.m_eventNotificationsCount)) return false;
            if (!Utils.IsEqual(m_notificationsCount, value.m_notificationsCount)) return false;
            if (!Utils.IsEqual(m_latePublishRequestCount, value.m_latePublishRequestCount)) return false;
            if (!Utils.IsEqual(m_currentKeepAliveCount, value.m_currentKeepAliveCount)) return false;
            if (!Utils.IsEqual(m_currentLifetimeCount, value.m_currentLifetimeCount)) return false;
            if (!Utils.IsEqual(m_unacknowledgedMessageCount, value.m_unacknowledgedMessageCount)) return false;
            if (!Utils.IsEqual(m_discardedMessageCount, value.m_discardedMessageCount)) return false;
            if (!Utils.IsEqual(m_monitoredItemCount, value.m_monitoredItemCount)) return false;
            if (!Utils.IsEqual(m_disabledMonitoredItemCount, value.m_disabledMonitoredItemCount)) return false;
            if (!Utils.IsEqual(m_monitoringQueueOverflowCount, value.m_monitoringQueueOverflowCount)) return false;
            if (!Utils.IsEqual(m_nextSequenceNumber, value.m_nextSequenceNumber)) return false;
            if (!Utils.IsEqual(m_eventQueueOverFlowCount, value.m_eventQueueOverFlowCount)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SubscriptionDiagnosticsDataType clone = new SubscriptionDiagnosticsDataType();

            clone.m_sessionId = (NodeId)Utils.Clone(this.m_sessionId);
            clone.m_subscriptionId = (uint)Utils.Clone(this.m_subscriptionId);
            clone.m_priority = (byte)Utils.Clone(this.m_priority);
            clone.m_publishingInterval = (double)Utils.Clone(this.m_publishingInterval);
            clone.m_maxKeepAliveCount = (uint)Utils.Clone(this.m_maxKeepAliveCount);
            clone.m_maxLifetimeCount = (uint)Utils.Clone(this.m_maxLifetimeCount);
            clone.m_maxNotificationsPerPublish = (uint)Utils.Clone(this.m_maxNotificationsPerPublish);
            clone.m_publishingEnabled = (bool)Utils.Clone(this.m_publishingEnabled);
            clone.m_modifyCount = (uint)Utils.Clone(this.m_modifyCount);
            clone.m_enableCount = (uint)Utils.Clone(this.m_enableCount);
            clone.m_disableCount = (uint)Utils.Clone(this.m_disableCount);
            clone.m_republishRequestCount = (uint)Utils.Clone(this.m_republishRequestCount);
            clone.m_republishMessageRequestCount = (uint)Utils.Clone(this.m_republishMessageRequestCount);
            clone.m_republishMessageCount = (uint)Utils.Clone(this.m_republishMessageCount);
            clone.m_transferRequestCount = (uint)Utils.Clone(this.m_transferRequestCount);
            clone.m_transferredToAltClientCount = (uint)Utils.Clone(this.m_transferredToAltClientCount);
            clone.m_transferredToSameClientCount = (uint)Utils.Clone(this.m_transferredToSameClientCount);
            clone.m_publishRequestCount = (uint)Utils.Clone(this.m_publishRequestCount);
            clone.m_dataChangeNotificationsCount = (uint)Utils.Clone(this.m_dataChangeNotificationsCount);
            clone.m_eventNotificationsCount = (uint)Utils.Clone(this.m_eventNotificationsCount);
            clone.m_notificationsCount = (uint)Utils.Clone(this.m_notificationsCount);
            clone.m_latePublishRequestCount = (uint)Utils.Clone(this.m_latePublishRequestCount);
            clone.m_currentKeepAliveCount = (uint)Utils.Clone(this.m_currentKeepAliveCount);
            clone.m_currentLifetimeCount = (uint)Utils.Clone(this.m_currentLifetimeCount);
            clone.m_unacknowledgedMessageCount = (uint)Utils.Clone(this.m_unacknowledgedMessageCount);
            clone.m_discardedMessageCount = (uint)Utils.Clone(this.m_discardedMessageCount);
            clone.m_monitoredItemCount = (uint)Utils.Clone(this.m_monitoredItemCount);
            clone.m_disabledMonitoredItemCount = (uint)Utils.Clone(this.m_disabledMonitoredItemCount);
            clone.m_monitoringQueueOverflowCount = (uint)Utils.Clone(this.m_monitoringQueueOverflowCount);
            clone.m_nextSequenceNumber = (uint)Utils.Clone(this.m_nextSequenceNumber);
            clone.m_eventQueueOverFlowCount = (uint)Utils.Clone(this.m_eventQueueOverFlowCount);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_sessionId;
        private uint m_subscriptionId;
        private byte m_priority;
        private double m_publishingInterval;
        private uint m_maxKeepAliveCount;
        private uint m_maxLifetimeCount;
        private uint m_maxNotificationsPerPublish;
        private bool m_publishingEnabled;
        private uint m_modifyCount;
        private uint m_enableCount;
        private uint m_disableCount;
        private uint m_republishRequestCount;
        private uint m_republishMessageRequestCount;
        private uint m_republishMessageCount;
        private uint m_transferRequestCount;
        private uint m_transferredToAltClientCount;
        private uint m_transferredToSameClientCount;
        private uint m_publishRequestCount;
        private uint m_dataChangeNotificationsCount;
        private uint m_eventNotificationsCount;
        private uint m_notificationsCount;
        private uint m_latePublishRequestCount;
        private uint m_currentKeepAliveCount;
        private uint m_currentLifetimeCount;
        private uint m_unacknowledgedMessageCount;
        private uint m_discardedMessageCount;
        private uint m_monitoredItemCount;
        private uint m_disabledMonitoredItemCount;
        private uint m_monitoringQueueOverflowCount;
        private uint m_nextSequenceNumber;
        private uint m_eventQueueOverFlowCount;
        #endregion
    }

    #region SubscriptionDiagnosticsDataTypeCollection Class
    /// <summary>
    /// A collection of SubscriptionDiagnosticsDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSubscriptionDiagnosticsDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SubscriptionDiagnosticsDataType")]
    public partial class SubscriptionDiagnosticsDataTypeCollection : List<SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SubscriptionDiagnosticsDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SubscriptionDiagnosticsDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SubscriptionDiagnosticsDataTypeCollection(IEnumerable<SubscriptionDiagnosticsDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SubscriptionDiagnosticsDataTypeCollection(SubscriptionDiagnosticsDataType[] values)
        {
            if (values != null)
            {
                return new SubscriptionDiagnosticsDataTypeCollection(values);
            }

            return new SubscriptionDiagnosticsDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SubscriptionDiagnosticsDataType[](SubscriptionDiagnosticsDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SubscriptionDiagnosticsDataTypeCollection clone = new SubscriptionDiagnosticsDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SubscriptionDiagnosticsDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region ModelChangeStructureVerbMask Enumeration
    #if (!OPCUA_EXCLUDE_ModelChangeStructureVerbMask)
    /// <summary>
    /// A description for the ModelChangeStructureVerbMask DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum ModelChangeStructureVerbMask
    {
        /// <summary>
        /// A description for the NodeAdded field.
        /// </summary>
        [EnumMember(Value = "NodeAdded_1")]
        NodeAdded = 1,

        /// <summary>
        /// A description for the NodeDeleted field.
        /// </summary>
        [EnumMember(Value = "NodeDeleted_2")]
        NodeDeleted = 2,

        /// <summary>
        /// A description for the ReferenceAdded field.
        /// </summary>
        [EnumMember(Value = "ReferenceAdded_4")]
        ReferenceAdded = 4,

        /// <summary>
        /// A description for the ReferenceDeleted field.
        /// </summary>
        [EnumMember(Value = "ReferenceDeleted_8")]
        ReferenceDeleted = 8,

        /// <summary>
        /// A description for the DataTypeChanged field.
        /// </summary>
        [EnumMember(Value = "DataTypeChanged_16")]
        DataTypeChanged = 16,
    }
    #endif
    #endregion

    #region ModelChangeStructureDataType Class
    #if (!OPCUA_EXCLUDE_ModelChangeStructureDataType)
    /// <summary>
    /// A description for the ModelChangeStructureDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ModelChangeStructureDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ModelChangeStructureDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_affected = null;
            m_affectedType = null;
            m_verb = (byte)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Affected field.
        /// </summary>
        [DataMember(Name = "Affected", IsRequired = false, Order = 1)]
        public NodeId Affected
        {
            get { return m_affected;  }
            set { m_affected = value; }
        }

        /// <summary>
        /// A description for the AffectedType field.
        /// </summary>
        [DataMember(Name = "AffectedType", IsRequired = false, Order = 2)]
        public NodeId AffectedType
        {
            get { return m_affectedType;  }
            set { m_affectedType = value; }
        }

        /// <summary>
        /// A description for the Verb field.
        /// </summary>
        [DataMember(Name = "Verb", IsRequired = false, Order = 3)]
        public byte Verb
        {
            get { return m_verb;  }
            set { m_verb = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ModelChangeStructureDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ModelChangeStructureDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ModelChangeStructureDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("Affected", Affected);
            encoder.WriteNodeId("AffectedType", AffectedType);
            encoder.WriteByte("Verb", Verb);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Affected = decoder.ReadNodeId("Affected");
            AffectedType = decoder.ReadNodeId("AffectedType");
            Verb = decoder.ReadByte("Verb");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ModelChangeStructureDataType value = encodeable as ModelChangeStructureDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_affected, value.m_affected)) return false;
            if (!Utils.IsEqual(m_affectedType, value.m_affectedType)) return false;
            if (!Utils.IsEqual(m_verb, value.m_verb)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ModelChangeStructureDataType clone = new ModelChangeStructureDataType();

            clone.m_affected = (NodeId)Utils.Clone(this.m_affected);
            clone.m_affectedType = (NodeId)Utils.Clone(this.m_affectedType);
            clone.m_verb = (byte)Utils.Clone(this.m_verb);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_affected;
        private NodeId m_affectedType;
        private byte m_verb;
        #endregion
    }

    #region ModelChangeStructureDataTypeCollection Class
    /// <summary>
    /// A collection of ModelChangeStructureDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfModelChangeStructureDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "ModelChangeStructureDataType")]
    public partial class ModelChangeStructureDataTypeCollection : List<ModelChangeStructureDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public ModelChangeStructureDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public ModelChangeStructureDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public ModelChangeStructureDataTypeCollection(IEnumerable<ModelChangeStructureDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator ModelChangeStructureDataTypeCollection(ModelChangeStructureDataType[] values)
        {
            if (values != null)
            {
                return new ModelChangeStructureDataTypeCollection(values);
            }

            return new ModelChangeStructureDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator ModelChangeStructureDataType[](ModelChangeStructureDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            ModelChangeStructureDataTypeCollection clone = new ModelChangeStructureDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((ModelChangeStructureDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region SemanticChangeStructureDataType Class
    #if (!OPCUA_EXCLUDE_SemanticChangeStructureDataType)
    /// <summary>
    /// A description for the SemanticChangeStructureDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class SemanticChangeStructureDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public SemanticChangeStructureDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_affected = null;
            m_affectedType = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Affected field.
        /// </summary>
        [DataMember(Name = "Affected", IsRequired = false, Order = 1)]
        public NodeId Affected
        {
            get { return m_affected;  }
            set { m_affected = value; }
        }

        /// <summary>
        /// A description for the AffectedType field.
        /// </summary>
        [DataMember(Name = "AffectedType", IsRequired = false, Order = 2)]
        public NodeId AffectedType
        {
            get { return m_affectedType;  }
            set { m_affectedType = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.SemanticChangeStructureDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.SemanticChangeStructureDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.SemanticChangeStructureDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("Affected", Affected);
            encoder.WriteNodeId("AffectedType", AffectedType);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Affected = decoder.ReadNodeId("Affected");
            AffectedType = decoder.ReadNodeId("AffectedType");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            SemanticChangeStructureDataType value = encodeable as SemanticChangeStructureDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_affected, value.m_affected)) return false;
            if (!Utils.IsEqual(m_affectedType, value.m_affectedType)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            SemanticChangeStructureDataType clone = new SemanticChangeStructureDataType();

            clone.m_affected = (NodeId)Utils.Clone(this.m_affected);
            clone.m_affectedType = (NodeId)Utils.Clone(this.m_affectedType);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_affected;
        private NodeId m_affectedType;
        #endregion
    }

    #region SemanticChangeStructureDataTypeCollection Class
    /// <summary>
    /// A collection of SemanticChangeStructureDataType objects.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [CollectionDataContract(Name = "ListOfSemanticChangeStructureDataType", Namespace = Opc.Ua.Namespaces.OpcUaXsd, ItemName = "SemanticChangeStructureDataType")]
    public partial class SemanticChangeStructureDataTypeCollection : List<SemanticChangeStructureDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the collection with default values.
        /// </summary>
        public SemanticChangeStructureDataTypeCollection() {}

        /// <summary>
        /// Initializes the collection with an initial capacity.
        /// </summary>
        public SemanticChangeStructureDataTypeCollection(int capacity) : base(capacity) {}

        /// <summary>
        /// Initializes the collection with another collection.
        /// </summary>
        public SemanticChangeStructureDataTypeCollection(IEnumerable<SemanticChangeStructureDataType> collection) : base(collection) {}
        #endregion

        #region Static Operators
        /// <summary>
        /// Converts an array to a collection.
        /// </summary>
        public static implicit operator SemanticChangeStructureDataTypeCollection(SemanticChangeStructureDataType[] values)
        {
            if (values != null)
            {
                return new SemanticChangeStructureDataTypeCollection(values);
            }

            return new SemanticChangeStructureDataTypeCollection();
        }

        /// <summary>
        /// Converts a collection to an array.
        /// </summary>
        public static explicit operator SemanticChangeStructureDataType[](SemanticChangeStructureDataTypeCollection values)
        {
            if (values != null)
            {
                return values.ToArray();
            }

            return null;
        }
        #endregion

        /// <summary>
        /// Creates a deep copy of the collection.
        /// </summary>
        public new object MemberwiseClone()
        {
            SemanticChangeStructureDataTypeCollection clone = new SemanticChangeStructureDataTypeCollection(this.Count);

            for (int ii = 0; ii < this.Count; ii++)
            {
                clone.Add((SemanticChangeStructureDataType)Utils.Clone(this[ii]));
            }

            return clone;
        }
    }
    #endregion
    #endif
    #endregion

    #region Range Class
    #if (!OPCUA_EXCLUDE_Range)
    /// <summary>
    /// A description for the Range DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class Range : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public Range()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_low = (double)0;
            m_high = (double)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Low field.
        /// </summary>
        [DataMember(Name = "Low", IsRequired = false, Order = 1)]
        public double Low
        {
            get { return m_low;  }
            set { m_low = value; }
        }

        /// <summary>
        /// A description for the High field.
        /// </summary>
        [DataMember(Name = "High", IsRequired = false, Order = 2)]
        public double High
        {
            get { return m_high;  }
            set { m_high = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.Range; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.Range_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.Range_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDouble("Low", Low);
            encoder.WriteDouble("High", High);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Low = decoder.ReadDouble("Low");
            High = decoder.ReadDouble("High");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            Range value = encodeable as Range;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_low, value.m_low)) return false;
            if (!Utils.IsEqual(m_high, value.m_high)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            Range clone = new Range();

            clone.m_low = (double)Utils.Clone(this.m_low);
            clone.m_high = (double)Utils.Clone(this.m_high);

            return clone;
        }
        #endregion

        #region Private Fields
        private double m_low;
        private double m_high;
        #endregion
    }
    #endif
    #endregion

    #region EUInformation Class
    #if (!OPCUA_EXCLUDE_EUInformation)
    /// <summary>
    /// A description for the EUInformation DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class EUInformation : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public EUInformation()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_namespaceUri = null;
            m_unitId = (int)0;
            m_displayName = null;
            m_description = null;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the NamespaceUri field.
        /// </summary>
        [DataMember(Name = "NamespaceUri", IsRequired = false, Order = 1)]
        public string NamespaceUri
        {
            get { return m_namespaceUri;  }
            set { m_namespaceUri = value; }
        }

        /// <summary>
        /// A description for the UnitId field.
        /// </summary>
        [DataMember(Name = "UnitId", IsRequired = false, Order = 2)]
        public int UnitId
        {
            get { return m_unitId;  }
            set { m_unitId = value; }
        }

        /// <summary>
        /// A description for the DisplayName field.
        /// </summary>
        [DataMember(Name = "DisplayName", IsRequired = false, Order = 3)]
        public LocalizedText DisplayName
        {
            get { return m_displayName;  }
            set { m_displayName = value; }
        }

        /// <summary>
        /// A description for the Description field.
        /// </summary>
        [DataMember(Name = "Description", IsRequired = false, Order = 4)]
        public LocalizedText Description
        {
            get { return m_description;  }
            set { m_description = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.EUInformation; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.EUInformation_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.EUInformation_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("NamespaceUri", NamespaceUri);
            encoder.WriteInt32("UnitId", UnitId);
            encoder.WriteLocalizedText("DisplayName", DisplayName);
            encoder.WriteLocalizedText("Description", Description);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            NamespaceUri = decoder.ReadString("NamespaceUri");
            UnitId = decoder.ReadInt32("UnitId");
            DisplayName = decoder.ReadLocalizedText("DisplayName");
            Description = decoder.ReadLocalizedText("Description");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            EUInformation value = encodeable as EUInformation;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_namespaceUri, value.m_namespaceUri)) return false;
            if (!Utils.IsEqual(m_unitId, value.m_unitId)) return false;
            if (!Utils.IsEqual(m_displayName, value.m_displayName)) return false;
            if (!Utils.IsEqual(m_description, value.m_description)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            EUInformation clone = new EUInformation();

            clone.m_namespaceUri = (string)Utils.Clone(this.m_namespaceUri);
            clone.m_unitId = (int)Utils.Clone(this.m_unitId);
            clone.m_displayName = (LocalizedText)Utils.Clone(this.m_displayName);
            clone.m_description = (LocalizedText)Utils.Clone(this.m_description);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_namespaceUri;
        private int m_unitId;
        private LocalizedText m_displayName;
        private LocalizedText m_description;
        #endregion
    }
    #endif
    #endregion

    #region AxisScaleEnumeration Enumeration
    #if (!OPCUA_EXCLUDE_AxisScaleEnumeration)
    /// <summary>
    /// A description for the AxisScaleEnumeration DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum AxisScaleEnumeration
    {
        /// <summary>
        /// A description for the Linear field.
        /// </summary>
        [EnumMember(Value = "Linear_0")]
        Linear = 0,

        /// <summary>
        /// A description for the Log field.
        /// </summary>
        [EnumMember(Value = "Log_1")]
        Log = 1,

        /// <summary>
        /// A description for the Ln field.
        /// </summary>
        [EnumMember(Value = "Ln_2")]
        Ln = 2,
    }
    #endif
    #endregion

    #region ComplexNumberType Class
    #if (!OPCUA_EXCLUDE_ComplexNumberType)
    /// <summary>
    /// A description for the ComplexNumberType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ComplexNumberType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ComplexNumberType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_real = (float)0;
            m_imaginary = (float)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Real field.
        /// </summary>
        [DataMember(Name = "Real", IsRequired = false, Order = 1)]
        public float Real
        {
            get { return m_real;  }
            set { m_real = value; }
        }

        /// <summary>
        /// A description for the Imaginary field.
        /// </summary>
        [DataMember(Name = "Imaginary", IsRequired = false, Order = 2)]
        public float Imaginary
        {
            get { return m_imaginary;  }
            set { m_imaginary = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ComplexNumberType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ComplexNumberType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ComplexNumberType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteFloat("Real", Real);
            encoder.WriteFloat("Imaginary", Imaginary);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Real = decoder.ReadFloat("Real");
            Imaginary = decoder.ReadFloat("Imaginary");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ComplexNumberType value = encodeable as ComplexNumberType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_real, value.m_real)) return false;
            if (!Utils.IsEqual(m_imaginary, value.m_imaginary)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ComplexNumberType clone = new ComplexNumberType();

            clone.m_real = (float)Utils.Clone(this.m_real);
            clone.m_imaginary = (float)Utils.Clone(this.m_imaginary);

            return clone;
        }
        #endregion

        #region Private Fields
        private float m_real;
        private float m_imaginary;
        #endregion
    }
    #endif
    #endregion

    #region DoubleComplexNumberType Class
    #if (!OPCUA_EXCLUDE_DoubleComplexNumberType)
    /// <summary>
    /// A description for the DoubleComplexNumberType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class DoubleComplexNumberType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public DoubleComplexNumberType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_real = (double)0;
            m_imaginary = (double)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Real field.
        /// </summary>
        [DataMember(Name = "Real", IsRequired = false, Order = 1)]
        public double Real
        {
            get { return m_real;  }
            set { m_real = value; }
        }

        /// <summary>
        /// A description for the Imaginary field.
        /// </summary>
        [DataMember(Name = "Imaginary", IsRequired = false, Order = 2)]
        public double Imaginary
        {
            get { return m_imaginary;  }
            set { m_imaginary = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.DoubleComplexNumberType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.DoubleComplexNumberType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.DoubleComplexNumberType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDouble("Real", Real);
            encoder.WriteDouble("Imaginary", Imaginary);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Real = decoder.ReadDouble("Real");
            Imaginary = decoder.ReadDouble("Imaginary");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            DoubleComplexNumberType value = encodeable as DoubleComplexNumberType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_real, value.m_real)) return false;
            if (!Utils.IsEqual(m_imaginary, value.m_imaginary)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            DoubleComplexNumberType clone = new DoubleComplexNumberType();

            clone.m_real = (double)Utils.Clone(this.m_real);
            clone.m_imaginary = (double)Utils.Clone(this.m_imaginary);

            return clone;
        }
        #endregion

        #region Private Fields
        private double m_real;
        private double m_imaginary;
        #endregion
    }
    #endif
    #endregion

    #region AxisInformation Class
    #if (!OPCUA_EXCLUDE_AxisInformation)
    /// <summary>
    /// A description for the AxisInformation DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class AxisInformation : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public AxisInformation()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_engineeringUnits = new EUInformation();
            m_eURange = new Range();
            m_title = null;
            m_axisScaleType = AxisScaleEnumeration.Linear;
            m_axisSteps = new DoubleCollection();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the EngineeringUnits field.
        /// </summary>
        [DataMember(Name = "EngineeringUnits", IsRequired = false, Order = 1)]
        public EUInformation EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                m_engineeringUnits = value;

                if (value == null)
                {
                    m_engineeringUnits = new EUInformation();
                }
            }
        }

        /// <summary>
        /// A description for the EURange field.
        /// </summary>
        [DataMember(Name = "EURange", IsRequired = false, Order = 2)]
        public Range EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                m_eURange = value;

                if (value == null)
                {
                    m_eURange = new Range();
                }
            }
        }

        /// <summary>
        /// A description for the Title field.
        /// </summary>
        [DataMember(Name = "Title", IsRequired = false, Order = 3)]
        public LocalizedText Title
        {
            get { return m_title;  }
            set { m_title = value; }
        }

        /// <summary>
        /// A description for the AxisScaleType field.
        /// </summary>
        [DataMember(Name = "AxisScaleType", IsRequired = false, Order = 4)]
        public AxisScaleEnumeration AxisScaleType
        {
            get { return m_axisScaleType;  }
            set { m_axisScaleType = value; }
        }

        /// <summary>
        /// A description for the AxisSteps field.
        /// </summary>
        [DataMember(Name = "AxisSteps", IsRequired = false, Order = 5)]
        public DoubleCollection AxisSteps
        {
            get
            {
                return m_axisSteps;
            }

            set
            {
                m_axisSteps = value;

                if (value == null)
                {
                    m_axisSteps = new DoubleCollection();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.AxisInformation; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.AxisInformation_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.AxisInformation_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteEncodeable("EngineeringUnits", EngineeringUnits, typeof(EUInformation));
            encoder.WriteEncodeable("EURange", EURange, typeof(Range));
            encoder.WriteLocalizedText("Title", Title);
            encoder.WriteEnumerated("AxisScaleType", AxisScaleType);
            encoder.WriteDoubleArray("AxisSteps", AxisSteps);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            EngineeringUnits = (EUInformation)decoder.ReadEncodeable("EngineeringUnits", typeof(EUInformation));
            EURange = (Range)decoder.ReadEncodeable("EURange", typeof(Range));
            Title = decoder.ReadLocalizedText("Title");
            AxisScaleType = (AxisScaleEnumeration)decoder.ReadEnumerated("AxisScaleType", typeof(AxisScaleEnumeration));
            AxisSteps = decoder.ReadDoubleArray("AxisSteps");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            AxisInformation value = encodeable as AxisInformation;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_engineeringUnits, value.m_engineeringUnits)) return false;
            if (!Utils.IsEqual(m_eURange, value.m_eURange)) return false;
            if (!Utils.IsEqual(m_title, value.m_title)) return false;
            if (!Utils.IsEqual(m_axisScaleType, value.m_axisScaleType)) return false;
            if (!Utils.IsEqual(m_axisSteps, value.m_axisSteps)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            AxisInformation clone = new AxisInformation();

            clone.m_engineeringUnits = (EUInformation)Utils.Clone(this.m_engineeringUnits);
            clone.m_eURange = (Range)Utils.Clone(this.m_eURange);
            clone.m_title = (LocalizedText)Utils.Clone(this.m_title);
            clone.m_axisScaleType = (AxisScaleEnumeration)Utils.Clone(this.m_axisScaleType);
            clone.m_axisSteps = (DoubleCollection)Utils.Clone(this.m_axisSteps);

            return clone;
        }
        #endregion

        #region Private Fields
        private EUInformation m_engineeringUnits;
        private Range m_eURange;
        private LocalizedText m_title;
        private AxisScaleEnumeration m_axisScaleType;
        private DoubleCollection m_axisSteps;
        #endregion
    }
    #endif
    #endregion

    #region XVType Class
    #if (!OPCUA_EXCLUDE_XVType)
    /// <summary>
    /// A description for the XVType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class XVType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public XVType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_x = (double)0;
            m_value = (float)0;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the X field.
        /// </summary>
        [DataMember(Name = "X", IsRequired = false, Order = 1)]
        public double X
        {
            get { return m_x;  }
            set { m_x = value; }
        }

        /// <summary>
        /// A description for the Value field.
        /// </summary>
        [DataMember(Name = "Value", IsRequired = false, Order = 2)]
        public float Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.XVType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.XVType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.XVType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteDouble("X", X);
            encoder.WriteFloat("Value", Value);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            X = decoder.ReadDouble("X");
            Value = decoder.ReadFloat("Value");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            XVType value = encodeable as XVType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_x, value.m_x)) return false;
            if (!Utils.IsEqual(m_value, value.m_value)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            XVType clone = new XVType();

            clone.m_x = (double)Utils.Clone(this.m_x);
            clone.m_value = (float)Utils.Clone(this.m_value);

            return clone;
        }
        #endregion

        #region Private Fields
        private double m_x;
        private float m_value;
        #endregion
    }
    #endif
    #endregion

    #region ProgramDiagnosticDataType Class
    #if (!OPCUA_EXCLUDE_ProgramDiagnosticDataType)
    /// <summary>
    /// A description for the ProgramDiagnosticDataType DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class ProgramDiagnosticDataType : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public ProgramDiagnosticDataType()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_createSessionId = null;
            m_createClientName = null;
            m_invocationCreationTime = DateTime.MinValue;
            m_lastTransitionTime = DateTime.MinValue;
            m_lastMethodCall = null;
            m_lastMethodSessionId = null;
            m_lastMethodInputArguments = new ArgumentCollection();
            m_lastMethodOutputArguments = new ArgumentCollection();
            m_lastMethodCallTime = DateTime.MinValue;
            m_lastMethodReturnStatus = new StatusResult();
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the CreateSessionId field.
        /// </summary>
        [DataMember(Name = "CreateSessionId", IsRequired = false, Order = 1)]
        public NodeId CreateSessionId
        {
            get { return m_createSessionId;  }
            set { m_createSessionId = value; }
        }

        /// <summary>
        /// A description for the CreateClientName field.
        /// </summary>
        [DataMember(Name = "CreateClientName", IsRequired = false, Order = 2)]
        public string CreateClientName
        {
            get { return m_createClientName;  }
            set { m_createClientName = value; }
        }

        /// <summary>
        /// A description for the InvocationCreationTime field.
        /// </summary>
        [DataMember(Name = "InvocationCreationTime", IsRequired = false, Order = 3)]
        public DateTime InvocationCreationTime
        {
            get { return m_invocationCreationTime;  }
            set { m_invocationCreationTime = value; }
        }

        /// <summary>
        /// A description for the LastTransitionTime field.
        /// </summary>
        [DataMember(Name = "LastTransitionTime", IsRequired = false, Order = 4)]
        public DateTime LastTransitionTime
        {
            get { return m_lastTransitionTime;  }
            set { m_lastTransitionTime = value; }
        }

        /// <summary>
        /// A description for the LastMethodCall field.
        /// </summary>
        [DataMember(Name = "LastMethodCall", IsRequired = false, Order = 5)]
        public string LastMethodCall
        {
            get { return m_lastMethodCall;  }
            set { m_lastMethodCall = value; }
        }

        /// <summary>
        /// A description for the LastMethodSessionId field.
        /// </summary>
        [DataMember(Name = "LastMethodSessionId", IsRequired = false, Order = 6)]
        public NodeId LastMethodSessionId
        {
            get { return m_lastMethodSessionId;  }
            set { m_lastMethodSessionId = value; }
        }

        /// <summary>
        /// A description for the LastMethodInputArguments field.
        /// </summary>
        [DataMember(Name = "LastMethodInputArguments", IsRequired = false, Order = 7)]
        public ArgumentCollection LastMethodInputArguments
        {
            get
            {
                return m_lastMethodInputArguments;
            }

            set
            {
                m_lastMethodInputArguments = value;

                if (value == null)
                {
                    m_lastMethodInputArguments = new ArgumentCollection();
                }
            }
        }

        /// <summary>
        /// A description for the LastMethodOutputArguments field.
        /// </summary>
        [DataMember(Name = "LastMethodOutputArguments", IsRequired = false, Order = 8)]
        public ArgumentCollection LastMethodOutputArguments
        {
            get
            {
                return m_lastMethodOutputArguments;
            }

            set
            {
                m_lastMethodOutputArguments = value;

                if (value == null)
                {
                    m_lastMethodOutputArguments = new ArgumentCollection();
                }
            }
        }

        /// <summary>
        /// A description for the LastMethodCallTime field.
        /// </summary>
        [DataMember(Name = "LastMethodCallTime", IsRequired = false, Order = 9)]
        public DateTime LastMethodCallTime
        {
            get { return m_lastMethodCallTime;  }
            set { m_lastMethodCallTime = value; }
        }

        /// <summary>
        /// A description for the LastMethodReturnStatus field.
        /// </summary>
        [DataMember(Name = "LastMethodReturnStatus", IsRequired = false, Order = 10)]
        public StatusResult LastMethodReturnStatus
        {
            get
            {
                return m_lastMethodReturnStatus;
            }

            set
            {
                m_lastMethodReturnStatus = value;

                if (value == null)
                {
                    m_lastMethodReturnStatus = new StatusResult();
                }
            }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.ProgramDiagnosticDataType; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.ProgramDiagnosticDataType_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.ProgramDiagnosticDataType_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteNodeId("CreateSessionId", CreateSessionId);
            encoder.WriteString("CreateClientName", CreateClientName);
            encoder.WriteDateTime("InvocationCreationTime", InvocationCreationTime);
            encoder.WriteDateTime("LastTransitionTime", LastTransitionTime);
            encoder.WriteString("LastMethodCall", LastMethodCall);
            encoder.WriteNodeId("LastMethodSessionId", LastMethodSessionId);
            encoder.WriteEncodeableArray("LastMethodInputArguments", LastMethodInputArguments.ToArray(), typeof(Argument));
            encoder.WriteEncodeableArray("LastMethodOutputArguments", LastMethodOutputArguments.ToArray(), typeof(Argument));
            encoder.WriteDateTime("LastMethodCallTime", LastMethodCallTime);
            encoder.WriteEncodeable("LastMethodReturnStatus", LastMethodReturnStatus, typeof(StatusResult));

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            CreateSessionId = decoder.ReadNodeId("CreateSessionId");
            CreateClientName = decoder.ReadString("CreateClientName");
            InvocationCreationTime = decoder.ReadDateTime("InvocationCreationTime");
            LastTransitionTime = decoder.ReadDateTime("LastTransitionTime");
            LastMethodCall = decoder.ReadString("LastMethodCall");
            LastMethodSessionId = decoder.ReadNodeId("LastMethodSessionId");
            LastMethodInputArguments = (ArgumentCollection)decoder.ReadEncodeableArray("LastMethodInputArguments", typeof(Argument));
            LastMethodOutputArguments = (ArgumentCollection)decoder.ReadEncodeableArray("LastMethodOutputArguments", typeof(Argument));
            LastMethodCallTime = decoder.ReadDateTime("LastMethodCallTime");
            LastMethodReturnStatus = (StatusResult)decoder.ReadEncodeable("LastMethodReturnStatus", typeof(StatusResult));

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            ProgramDiagnosticDataType value = encodeable as ProgramDiagnosticDataType;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_createSessionId, value.m_createSessionId)) return false;
            if (!Utils.IsEqual(m_createClientName, value.m_createClientName)) return false;
            if (!Utils.IsEqual(m_invocationCreationTime, value.m_invocationCreationTime)) return false;
            if (!Utils.IsEqual(m_lastTransitionTime, value.m_lastTransitionTime)) return false;
            if (!Utils.IsEqual(m_lastMethodCall, value.m_lastMethodCall)) return false;
            if (!Utils.IsEqual(m_lastMethodSessionId, value.m_lastMethodSessionId)) return false;
            if (!Utils.IsEqual(m_lastMethodInputArguments, value.m_lastMethodInputArguments)) return false;
            if (!Utils.IsEqual(m_lastMethodOutputArguments, value.m_lastMethodOutputArguments)) return false;
            if (!Utils.IsEqual(m_lastMethodCallTime, value.m_lastMethodCallTime)) return false;
            if (!Utils.IsEqual(m_lastMethodReturnStatus, value.m_lastMethodReturnStatus)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            ProgramDiagnosticDataType clone = new ProgramDiagnosticDataType();

            clone.m_createSessionId = (NodeId)Utils.Clone(this.m_createSessionId);
            clone.m_createClientName = (string)Utils.Clone(this.m_createClientName);
            clone.m_invocationCreationTime = (DateTime)Utils.Clone(this.m_invocationCreationTime);
            clone.m_lastTransitionTime = (DateTime)Utils.Clone(this.m_lastTransitionTime);
            clone.m_lastMethodCall = (string)Utils.Clone(this.m_lastMethodCall);
            clone.m_lastMethodSessionId = (NodeId)Utils.Clone(this.m_lastMethodSessionId);
            clone.m_lastMethodInputArguments = (ArgumentCollection)Utils.Clone(this.m_lastMethodInputArguments);
            clone.m_lastMethodOutputArguments = (ArgumentCollection)Utils.Clone(this.m_lastMethodOutputArguments);
            clone.m_lastMethodCallTime = (DateTime)Utils.Clone(this.m_lastMethodCallTime);
            clone.m_lastMethodReturnStatus = (StatusResult)Utils.Clone(this.m_lastMethodReturnStatus);

            return clone;
        }
        #endregion

        #region Private Fields
        private NodeId m_createSessionId;
        private string m_createClientName;
        private DateTime m_invocationCreationTime;
        private DateTime m_lastTransitionTime;
        private string m_lastMethodCall;
        private NodeId m_lastMethodSessionId;
        private ArgumentCollection m_lastMethodInputArguments;
        private ArgumentCollection m_lastMethodOutputArguments;
        private DateTime m_lastMethodCallTime;
        private StatusResult m_lastMethodReturnStatus;
        #endregion
    }
    #endif
    #endregion

    #region Annotation Class
    #if (!OPCUA_EXCLUDE_Annotation)
    /// <summary>
    /// A description for the Annotation DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public partial class Annotation : IEncodeable
    {
        #region Constructors
        /// <summary>
        /// The default constructor.
        /// </summary>
        public Annotation()
        {
            Initialize();
        }

        /// <summary>
        /// Called by the .NET framework during deserialization.
        /// </summary>
        [OnDeserializing]
        private void Initialize(StreamingContext context)
        {
            Initialize();
        }

        /// <summary>
        /// Sets private members to default values.
        /// </summary>
        private void Initialize()
        {
            m_message = null;
            m_userName = null;
            m_annotationTime = DateTime.MinValue;
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// A description for the Message field.
        /// </summary>
        [DataMember(Name = "Message", IsRequired = false, Order = 1)]
        public string Message
        {
            get { return m_message;  }
            set { m_message = value; }
        }

        /// <summary>
        /// A description for the UserName field.
        /// </summary>
        [DataMember(Name = "UserName", IsRequired = false, Order = 2)]
        public string UserName
        {
            get { return m_userName;  }
            set { m_userName = value; }
        }

        /// <summary>
        /// A description for the AnnotationTime field.
        /// </summary>
        [DataMember(Name = "AnnotationTime", IsRequired = false, Order = 3)]
        public DateTime AnnotationTime
        {
            get { return m_annotationTime;  }
            set { m_annotationTime = value; }
        }
        #endregion

        #region IEncodeable Members
        /// <summary cref="IEncodeable.TypeId" />
        public virtual ExpandedNodeId TypeId
        {
            get { return DataTypeIds.Annotation; }
        }

        /// <summary cref="IEncodeable.BinaryEncodingId" />
        public virtual ExpandedNodeId BinaryEncodingId
        {
            get { return ObjectIds.Annotation_Encoding_DefaultBinary; }
        }

        /// <summary cref="IEncodeable.XmlEncodingId" />
        public virtual ExpandedNodeId XmlEncodingId
        {
            get { return ObjectIds.Annotation_Encoding_DefaultXml; }
        }

        /// <summary cref="IEncodeable.Encode(IEncoder)" />
        public virtual void Encode(IEncoder encoder)
        {
            encoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            encoder.WriteString("Message", Message);
            encoder.WriteString("UserName", UserName);
            encoder.WriteDateTime("AnnotationTime", AnnotationTime);

            encoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.Decode(IDecoder)" />
        public virtual void Decode(IDecoder decoder)
        {
            decoder.PushNamespace(Opc.Ua.Namespaces.OpcUaXsd);

            Message = decoder.ReadString("Message");
            UserName = decoder.ReadString("UserName");
            AnnotationTime = decoder.ReadDateTime("AnnotationTime");

            decoder.PopNamespace();
        }

        /// <summary cref="IEncodeable.IsEqual(IEncodeable)" />
        public virtual bool IsEqual(IEncodeable encodeable)
        {
            if (Object.ReferenceEquals(this, encodeable))
            {
                return true;
            }

            Annotation value = encodeable as Annotation;

            if (value == null)
            {
                return false;
            }

            if (!Utils.IsEqual(m_message, value.m_message)) return false;
            if (!Utils.IsEqual(m_userName, value.m_userName)) return false;
            if (!Utils.IsEqual(m_annotationTime, value.m_annotationTime)) return false;

            return true;
        }

        public new object MemberwiseClone()
        {
            Annotation clone = new Annotation();

            clone.m_message = (string)Utils.Clone(this.m_message);
            clone.m_userName = (string)Utils.Clone(this.m_userName);
            clone.m_annotationTime = (DateTime)Utils.Clone(this.m_annotationTime);

            return clone;
        }
        #endregion

        #region Private Fields
        private string m_message;
        private string m_userName;
        private DateTime m_annotationTime;
        #endregion
    }
    #endif
    #endregion

    #region ExceptionDeviationFormat Enumeration
    #if (!OPCUA_EXCLUDE_ExceptionDeviationFormat)
    /// <summary>
    /// A description for the ExceptionDeviationFormat DataType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    [DataContract(Namespace = Opc.Ua.Namespaces.OpcUaXsd)]
    public enum ExceptionDeviationFormat
    {
        /// <summary>
        /// A description for the AbsoluteValue field.
        /// </summary>
        [EnumMember(Value = "AbsoluteValue_0")]
        AbsoluteValue = 0,

        /// <summary>
        /// A description for the PercentOfValue field.
        /// </summary>
        [EnumMember(Value = "PercentOfValue_1")]
        PercentOfValue = 1,

        /// <summary>
        /// A description for the PercentOfRange field.
        /// </summary>
        [EnumMember(Value = "PercentOfRange_2")]
        PercentOfRange = 2,

        /// <summary>
        /// A description for the PercentOfEURange field.
        /// </summary>
        [EnumMember(Value = "PercentOfEURange_3")]
        PercentOfEURange = 3,

        /// <summary>
        /// A description for the Unknown field.
        /// </summary>
        [EnumMember(Value = "Unknown_4")]
        Unknown = 4,
    }
    #endif
    #endregion
}