#
# Test .Net Core projects with code coverage
#
parameters:
  configuration: 'Release'
  framework: 'netcoreapp3.1'
  agent: 'linux'
  poolImage: 'ubuntu-18.04'
  jobnamesuffix: 'netcore31'
jobs:
- job: testcc${{ parameters.jobnamesuffix }}
  displayName: Coverage ${{ parameters.agent }} ${{ parameters.configuration }}
  variables:
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    disable.coverage.autogenerate: true
  pool:
    vmImage: ${{ parameters.poolImage }}
  steps:
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '>=5.8.x'
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./.azurepipelines/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Restore ${{ parameters.framework }}
    inputs:
      command: restore
      projects: 'UA Core Library.sln'
      arguments: '--framework ${{ parameters.framework }} --configuration ${{ parameters.configuration }}'
  - task: DotNetCoreCLI@2
    displayName: Test ${{ parameters.framework }}
    timeoutInMinutes: 20
    inputs:
      command: test
      projects: 'UA Core Library.sln'
      # note: /p:CollectCoverage=true is only used to disable deterministc builds
      arguments: '--no-restore --framework ${{ parameters.framework }} --configuration ${{ parameters.configuration }} /p:CollectCoverage=true --collect:"XPlat Code Coverage" --settings ./Tests/coverlet.runsettings.xml --results-directory $(Agent.TempDirectory)'
      publishTestResults: false
  - script: |
      bash <(curl -s https://codecov.io/bash) -s $(Agent.TempDirectory)

    continueOnError: true
    condition: ne( variables['CODECOV_TOKEN'], '')
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
    displayName: 'Upload to codecov.io'
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path tools dotnet-reportgenerator-globaltool 
    displayName: Install ReportGenerator tool
  - script: |
      tools/reportgenerator -reports:$(Agent.TempDirectory)/**/????????-*/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:Cobertura;HtmlSummary" "-title:UA .Net Standard Test Coverage" "-assemblyfilters:-*.Tests"
      mv $(Build.SourcesDirectory)/CodeCoverage/summary.htm $(Build.SourcesDirectory)/CodeCoverage/index.htm 

    displayName: Create Code Coverage Report
    continueOnError: true
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

    continueOnError: true
  - task: BuildQualityChecks@7
    displayName: 'Check build quality'
    inputs:
    # ===== Warnings Policy Inputs =====
    #checkWarnings: false # Optional
    #warningFailOption: build # Optional; Valid values: build, fixed
    #warningThreshold: '0' # Optional
    #forceFewerWarnings: false # Optional
    #allowWarningVariance: false # Optional
    #warningVariance: # Required if allowWarningVariance = true
    #showStatistics: false # Optional
    #evaluateTaskWarnings: true # Optional
    #warningTaskFilters: '/^((vs|ms)build|ant(\\s+.+)?|gradle(w)?(\\s+.+)?|grunt|gulp|maven(\\s+.+)?|xamarin(android|ios)|xcode(\\s+.+)?|cmake|build\\s+.+)$/i' # Optional
    #warningFilters: # Optional
    #inclusiveFiltering: false # Optional
    #evaluateFileWarnings: false # Optional
    #warningFilesFolder: # Optional
    #warningFiles: # Required if evaluateFileWarnings = true
    #warningFileFilters: # Required if evaluateFileWarnings = true
    #warningFilesArtifact: # Required if evaluateFileWarnings = true and (warningFailOption = build or showStatistics = true)
    # ===== Code Coverage Policy Inputs =====
      checkCoverage: true # Optional
    #coverageFailOption: build # Optional; Valid values: build, fixed
    #coverageType: blocks # Optional; Valid values: blocks, lines, branches, custom
    #customCoverageType: # Required if coverageType = custom
    #treat0of0as100: false # Optional
      coverageThreshold: '50' # Optional
    #forceCoverageImprovement: false # Optional
    #coverageUpperThreshold: '80' # Optional
    #ignoreDecreaseAboveUpperThreshold: true # Optional
    #useUncoveredElements: false # Optional
    #allowCoverageVariance: false # Optional
    #coverageVariance: # Required if allowCoverageVariance = true
    #coverageDeltaType: percentage # Optional; Valid values: absolute, percentage
    #coveragePrecision: '4' # Optional
    #buildConfiguration: # Optional
    #buildPlatform: # Optional
    #explicitFilter: false # Optional
    # ===== Baseline Inputs =====
    #includePartiallySucceeded: true # Optional
    #fallbackOnPRTargetBranch: true # Optional
    #baseDefinitionFilter: # Ignored - only used by UI editor
    #baseDefinitionId: # Optional
    #baseRepoId: # Ignored - only used by UI editor
    #baseBranchRef: # Optional
    # ===== Reporting Inputs =====
    #runTitle: # Optional
    #fileAnalysisTitle: # Optional
    # ===== Advanced Inputs =====
    #disableCertCheck: false # Optional
    #createBuildIssues: true # Optional
  - script: |
      bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r $REPORT_LOCATION --commit-uuid $COMMIT_UUID

    condition: ne( variables['CODACY_PROJECT_TOKEN'], '')
    env:
      CODACY_PROJECT_TOKEN: $(CODACY_PROJECT_TOKEN)
      REPORT_LOCATION: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      COMMIT_UUID: '$(Build.SourceVersion)'
    continueOnError: true
    displayName: 'Upload to Codacy'
