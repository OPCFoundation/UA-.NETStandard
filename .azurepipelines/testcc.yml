#
# Test .Net Core projects with code coverage
#
parameters:
  configuration: 'Release'
  framework: net6.0
  agent: 'linux'
  poolImage: 'ubuntu-22.04'
  jobnamesuffix: 'net60cc'
  customtestarget: ''
jobs:
- job: testcc${{ parameters.jobnamesuffix }}
  displayName: Coverage ${{ parameters.agent }} ${{ parameters.configuration }}
  variables:
    DOTNET_CLI_TELEMETRY_OPTOUT: true
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
    disable.coverage.autogenerate: true
    CustomTestTarget: ${{ parameters.customtestarget }}
    ${{ if eq( parameters.customtestarget, '' ) }}: 
      DotCliCommandline: '--framework ${{ parameters.framework }}'
    ${{ else }}: 
      DotCliCommandline: '/p:CustomTestTarget=${{ parameters.customtestarget }}'
  pool:
    vmImage: ${{ parameters.poolImage }}
  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET 6.0'
    condition: eq('${{parameters.framework}}', 'net6.0')
    inputs:
      packageType: 'sdk'
      version: '6.0.x'
  - task: UseDotNet@2
    displayName: 'Install .NET 8.0'
    inputs:
      packageType: 'sdk'
      version: '8.0.x'
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '>=5.8.x'
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./.azurepipelines/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Restore ${{ parameters.framework }}
    inputs:
      command: restore
      projects: 'UA Core Library.sln'
      arguments: '${{ variables.DotCliCommandline }} --configuration ${{ parameters.configuration }}'
  - task: DotNetCoreCLI@2
    displayName: Test ${{ parameters.framework }}
    timeoutInMinutes: 60
    inputs:
      command: test
      projects: 'UA Core Library.sln'
      # note: /p:CollectCoverage=true is only used to disable deterministic builds
      arguments: '--no-restore ${{ variables.DotCliCommandline }} --configuration ${{ parameters.configuration }} /p:CollectCoverage=true --collect:"XPlat Code Coverage" --settings ./Tests/coverlet.runsettings.xml --results-directory $(Agent.TempDirectory)'
      publishTestResults: false
  - script: |
      bash <(curl -s https://codecov.io/bash) -s $(Agent.TempDirectory)

    continueOnError: true
    condition: ne( variables['CODECOV_TOKEN'], '')
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
    displayName: 'Upload to codecov.io'
  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path tools dotnet-reportgenerator-globaltool 
    displayName: Install ReportGenerator tool
  - script: |
      tools/reportgenerator -reports:$(Agent.TempDirectory)/**/????????-*/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage "-reporttypes:Cobertura;HtmlSummary" "-title:UA .Net Standard Test Coverage" "-assemblyfilters:-*.Tests"
      mv $(Build.SourcesDirectory)/CodeCoverage/summary.htm $(Build.SourcesDirectory)/CodeCoverage/index.htm 

    displayName: Create Code Coverage Report
    continueOnError: true
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage'
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/CodeCoverage'

    continueOnError: true
  - script: |
      bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r $REPORT_LOCATION --commit-uuid $COMMIT_UUID

    condition: ne( variables['CODACY_PROJECT_TOKEN'], '')
    env:
      CODACY_PROJECT_TOKEN: $(CODACY_PROJECT_TOKEN)
      REPORT_LOCATION: '$(Build.SourcesDirectory)/CodeCoverage/Cobertura.xml'
      COMMIT_UUID: '$(Build.SourceVersion)'
    continueOnError: true
    displayName: 'Upload to Codacy'
