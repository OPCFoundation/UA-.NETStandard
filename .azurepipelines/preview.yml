#
# Build preview packages for internal feed
#
parameters:
- name: upload
  type: string
  default: False
  values: 
  - False
  - True
- name: config
  type: string
  default: Release
  values: 
  - Debug
  - Release

jobs:
- job: nuget${{parameters.config}}
  displayName: Pack Nugets ${{parameters.config}}
  pool:
    vmImage: 'windows-2022'
  variables:
  - group: codesign
  - name: msbuildversion
    value: '/p:Version=$(NBGV_Version) /p:AssemblyVersion=$(NBGV_SimpleVersion) /p:FileVersion=$(NBGV_AssemblyFileVersion)'
  - name: msbuildsign
    value: '/p:AssemblyOriginatorKeyFile=$(strongnamefile.secureFilePath) /p:SignAssembly=true'
  - name: nugetpreviewversion
    value: '$(NBGV_NuGetPackageVersion)'
  - name: nugetpublicversion
    value: '$(NBGV_Version)$(NBGV_PrereleaseVersion)'
  - name: signinglist
    value: '.azurepipelines/signlist${{parameters.config}}.txt'
  steps:
  - task: DownloadSecureFile@1
    name: strongnamefile
    displayName: 'Download Strong Name Key'
    inputs:
      secureFile: 'OPCFoundation.NetStandard.Key.snk'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --version 3.0.0 --tool-path . azuresigntool'
    displayName: Install AzureSignTool
  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'install --version 3.0.45 --tool-path . NuGetKeyVaultSignTool'
    displayName: Install NuGetKeyVaultSignTool
  - task: NuGetToolInstaller@1
    inputs:
      versionSpec: '>=5.8.x'
  - task: PowerShell@2
    displayName: Versioning
    inputs:
      targetType: filePath
      filePath: ./.azurepipelines/set-version.ps1
  - task: DotNetCoreCLI@2
    displayName: Restore ${{parameters.config}}
    inputs:
      command: restore
      projects: 'UA Core Library.sln'
      arguments: '--configuration ${{parameters.config}}'
  - task: DotNetCoreCLI@2
    displayName: Build ${{parameters.config}}
    inputs:
      command: build
      projects: 'UA Core Library.sln'
      arguments: '--no-incremental --configuration ${{parameters.config}} ${{ variables.msbuildversion }} ${{ variables.msbuildsign }}'
  - task: CmdLine@2
    displayName: 'List of assemblies to sign'
    inputs:
      script: |
        dir /b /s Stack\Opc.Ua.*.dll > .\list.txt
        dir /b /s Libraries\Opc.Ua.*.dll >> .\list.txt
        dir /b /s .azurepipelines\*.* >> .\list.txt
        type .\list.txt
  - task: CmdLine@2
    displayName: 'Sign Assemblies'
    condition: ne( variables['SigningClientSecret'], '')
    inputs:
      script: |
        azuresigntool sign -du "$(SigningURL)" -kvu "$(SigningVaultURL)" -kvt "$(SigningTenantId)" -kvi "$(SigningClientId)" -tr http://timestamp.digicert.com -td sha384 -kvs "$(SigningClientSecret)" -kvc "$(SigningCertName)" -v -ifl ${{ variables.signinglist }}
  - task: DotNetCoreCLI@2
    displayName: Pack Nuget ${{parameters.config}}
    inputs:
      command: pack
      packagesToPack:  'UA Core Library.sln'
      configuration: ${{parameters.config}}
      configurationToPack: ${{parameters.config}}
      nobuild: true
  - task: NuGetCommand@2
    displayName: Pack Nuget Legacy Preview
    condition: and(succeeded(), and(eq('${{parameters.config}}', 'Release'), ne(variables['NBGV_PublicRelease'], 'True')))
    continueOnError: true
    inputs:
      command: 'pack'
      packagesToPack: '**/Opc.*.nuspec'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'nugetpreviewversion'
  - task: NuGetCommand@2
    displayName: Pack Nuget Legacy Public
    condition: and(succeeded(), and(eq('${{parameters.config}}', 'Release'), eq(variables['NBGV_PublicRelease'], 'True')))
    continueOnError: true
    inputs:
      command: 'pack'
      packagesToPack: '**/Opc.*.nuspec'
      versioningScheme: 'byEnvVar'
      versionEnvVar: 'nugetpublicversion'
  - task: CmdLine@2
    displayName: 'List of nuget packages to sign'
    inputs:
      script: |
        dir /b /s $(Build.ArtifactStagingDirectory)\OPCFoundation.*.*nupkg > .\nupkglist.txt
        type .\nupkglist.txt
  - task: CmdLine@2
    displayName: Sign Nuget packages
    condition: and(succeeded(), ne( variables['SigningClientSecret'], ''))
    continueOnError: true
    inputs:
      script: |
        NuGetKeyVaultSignTool sign $(Build.ArtifactStagingDirectory)/**/OPCFoundation.*.nupkg --file-digest sha256 --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 --azure-key-vault-url "$(SigningVaultURL)" --azure-key-vault-client-id "$(SigningClientId)" --azure-key-vault-tenant-id "$(SigningTenantId)" --azure-key-vault-client-secret "$(SigningClientSecret)" --azure-key-vault-certificate "$(SigningCertName)" 
        NuGetKeyVaultSignTool sign $(Build.ArtifactStagingDirectory)/**/OPCFoundation.*.snupkg --file-digest sha256 --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 --azure-key-vault-url "$(SigningVaultURL)" --azure-key-vault-client-id "$(SigningClientId)" --azure-key-vault-tenant-id "$(SigningTenantId)" --azure-key-vault-client-secret "$(SigningClientSecret)" --azure-key-vault-certificate "$(SigningCertName)" 
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifacts'
    inputs:
      path: $(Build.ArtifactStagingDirectory)
      artifact: 'opcua_${{parameters.config}}_$(NBGV_Version)_$(NBGV_NugetPackageVersion)'
  - ${{ if eq(parameters.upload, 'True') }}:
    - task: NuGetCommand@2
      displayName: Upload Nuget Preview
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/OPCFoundation.*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(VSTSFEED)'
        allowPackageConflicts: true
