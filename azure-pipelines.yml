# Azure pipeline
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  batch: 'true'
  branches:
    include:
    - '*'
  paths:
    include:
    - '*' 
    exclude:
    - 'Docs/*' 
    - 'README.md' 

pr: 
  autoCancel: 'true'
  branches:
    include:
    - '*'
  paths:
    include:
    - '*' 

variables:
  FullBuild: ${{ or(ne(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.IsFork'], 'False')) }}
  ScheduledBuild: ${{ in(variables['Build.Reason'], 'Schedule', 'Manual') }}

stages:
- stage: build
  displayName: 'Build .NET Core Samples'
  jobs:
  - template: .azurepipelines/ci.yml
- stage: buildnohttps
  dependsOn: []
  displayName: 'Build NoHttps .NET Core Samples'
  condition: ne(variables.FullBuild, 'False')
  jobs:
  - template: .azurepipelines/ci.yml
    parameters:
      buildoption: '-p:NoHttps=true'
      agents: '@{ linux = "ubuntu-22.04" }'
- stage: solutions
  dependsOn: []
  displayName: 'Build Solutions'
  jobs:
  - template: .azurepipelines/sln.yml
    parameters:
      poolImage: 'windows-2022'
      jobnamesuffix: win2022
  - template: .azurepipelines/sln.yml
    parameters:
      poolImage: 'windows-2019'
      jobnamesuffix: win2019
- stage: testrelease
  dependsOn: [build]
  displayName: 'Test Core and SDK Release'
  condition: and(succeeded(), ne(variables.FullBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      configuration: Release
      framework: net48
      agents: '@{ windows = "windows-2019" }'
      jobnamesuffix: net48  
  - template: .azurepipelines/test.yml
    parameters:
      configuration: Release
      framework: net6.0
      agents: '@{ windows = "windows-2022"; linux="ubuntu-22.04"; mac = "macOS-12"}'
      jobnamesuffix: net60
- stage: testreleasepr
  dependsOn: []
  displayName: 'Fast .NET 6.0 PR Test'
  condition: and(eq(variables.FullBuild, 'False'), eq(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      configuration: Release
      framework: net6.0
      agents: '@{ windows = "windows-2022"; linux="ubuntu-20.04"}'
      jobnamesuffix: net60pr
- stage: testdebug
  dependsOn: [build]
  displayName: 'Test .NET 6.0 Debug'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net6.0
      configuration: Debug
      jobnamesuffix: net60debug
- stage: testnet80
  dependsOn: [build]
  displayName: 'Test .NET 8.0'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net8.0
      configuration: Release
      jobnamesuffix: net80
      customtestarget: net8.0
- stage: testnet462
  dependsOn: [build]
  displayName: 'Test .NET 4.6.2'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net462
      configuration: Release
      jobnamesuffix: net462
      agents: '@{ windows = "windows-2022" }'
      customtestarget: net462
- stage: testnet472
  dependsOn: [build]
  displayName: 'Test .NET 4.7.2'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net472
      configuration: Release
      jobnamesuffix: net472
      agents: '@{ windows = "windows-2022" }'
      customtestarget: net472
- stage: testnetstandard20
  dependsOn: [build]
  displayName: 'Test .NETStandard 2.0'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net6.0
      configuration: Release
      jobnamesuffix: netstandard20
      agents: '@{ windows = "windows-2019"; linux="ubuntu-20.04"}'
      customtestarget: netstandard2.0
- stage: testnetstandard21
  dependsOn: [build]
  displayName: 'Test .NETStandard 2.1'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/test.yml
    parameters:
      framework: net6.0
      configuration: Release
      jobnamesuffix: netstandard21
      customtestarget: netstandard2.1
- stage: coverage
  dependsOn: [testdebug,testrelease]
  displayName: 'Code Coverage'
  condition: and(succeeded(), ne(variables.ScheduledBuild, 'False'))
  jobs:
  - template: .azurepipelines/testcc.yml
    parameters:
      configuration: Release
      poolImage: 'ubuntu-22.04'
      framework: net8.0
      jobnamesuffix: net60cc
      customtestarget: net8.0
